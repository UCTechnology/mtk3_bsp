   1                             		.file	"messagebuf.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   5                             	_QueInit:
   6                             	.LFB6:
   7                             		.file 1 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\include/sys/queue.h"
   1:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
   2:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *----------------------------------------------------------------------
   3:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *    micro T-Kernel 3.00.00
   4:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *
   5:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *    Copyright (C) 2006-2019 by Ken Sakamura.
   6:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *    This software is distributed under the T-License 2.1.
   7:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *----------------------------------------------------------------------
   8:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *
   9:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.
  10:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *
  11:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *----------------------------------------------------------------------
  12:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  13:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  14:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  15:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	queue.h
  16:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *
  17:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	Queuing operation
  18:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  19:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  20:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** #ifndef	__SYS_QUEUE_H__
  21:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** #define __SYS_QUEUE_H__
  22:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  23:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** #include <tk/tkernel.h>
  24:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  25:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** #ifdef __cplusplus
  26:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** extern "C" {
  27:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** #endif
  28:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  29:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  30:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  * Double-link queue (ring)
  31:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  32:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** typedef struct queue {
  33:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	struct queue	*next;
  34:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	struct queue	*prev;
  35:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** } QUEUE;
  36:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  37:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  38:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  * Queue initialization 
  39:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  40:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** Inline void QueInit( QUEUE *que )
  41:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** {
   8                             		.loc 1 41 1
   9 0000 7E AA                   		push.l	r10
  10                             	.LCFI0:
  11 0002 71 0A FC                		add	#-4, r0, r10
  12                             	.LCFI1:
  13 0005 EF A0                   		mov.L	r10, r0
  14 0007 E3 A1                   		mov.L	r1, [r10]
  42:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	que->next = (struct queue *)que;
  15                             		.loc 1 42 12
  16 0009 EC A5                   		mov.L	[r10], r5
  17 000b EC A4                   		mov.L	[r10], r4
  18 000d E3 54                   		mov.L	r4, [r5]
  43:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	que->prev = (struct queue *)que;
  19                             		.loc 1 43 12
  20 000f EC A5                   		mov.L	[r10], r5
  21 0011 EC A4                   		mov.L	[r10], r4
  22 0013 A0 5C                   		mov.L	r4, 4[r5]
  44:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** }
  23                             		.loc 1 44 1
  24 0015 03                      		nop
  25 0016 3F AA 02                		rtsd	#8, r10-r10
  26                             	.LFE6:
  29                             	_isQueEmpty:
  30                             	.LFB7:
  45:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  46:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  47:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  * TRUE if the queue is empty 
  48:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  49:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** Inline BOOL isQueEmpty( QUEUE *que )
  50:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** {
  31                             		.loc 1 50 1
  32 0019 7E AA                   		push.l	r10
  33                             	.LCFI2:
  34 001b 71 0A FC                		add	#-4, r0, r10
  35                             	.LCFI3:
  36 001e EF A0                   		mov.L	r10, r0
  37 0020 E3 A1                   		mov.L	r1, [r10]
  51:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	return ( que->next == que )? TRUE: FALSE;
  38                             		.loc 1 51 14
  39 0022 EC A5                   		mov.L	[r10], r5
  40 0024 EC 55                   		mov.L	[r5], r5
  41                             		.loc 1 51 35
  42 0026 EC A4                   		mov.L	[r10], r4
  43 0028 47 54                   		cmp	r5, r4
  44 002a FC DB 50                		sceq.L	r5
  45 002d 5B 55                   		movu.B	r5, r5
  52:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** }
  46                             		.loc 1 52 1
  47 002f EF 51                   		mov.L	r5, r1
  48 0031 3F AA 02                		rtsd	#8, r10-r10
  49                             	.LFE7:
  52                             	_QueInsert:
  53                             	.LFB8:
  53:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  54:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  55:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  * Insert in queue 
  56:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	Inserts entry directly prior to que 
  57:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  58:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** Inline void QueInsert( QUEUE *entry, QUEUE *que )
  59:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** {
  54                             		.loc 1 59 1
  55 0034 7E AA                   		push.l	r10
  56                             	.LCFI4:
  57 0036 71 0A F8                		add	#-8, r0, r10
  58                             	.LCFI5:
  59 0039 EF A0                   		mov.L	r10, r0
  60 003b E3 A1                   		mov.L	r1, [r10]
  61 003d E7 A2 01                		mov.L	r2, 4[r10]
  60:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	entry->prev = (struct queue*) que->prev;
  62                             		.loc 1 60 16
  63 0040 ED A5 01                		mov.L	4[r10], r5
  64 0043 A8 5C                   		mov.L	4[r5], r4
  65                             		.loc 1 60 14
  66 0045 EC A5                   		mov.L	[r10], r5
  67 0047 A0 5C                   		mov.L	r4, 4[r5]
  61:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	entry->next = que;
  68                             		.loc 1 61 14
  69 0049 EC A5                   		mov.L	[r10], r5
  70 004b ED A4 01                		mov.L	4[r10], r4
  71 004e E3 54                   		mov.L	r4, [r5]
  62:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	que->prev->next = entry;
  72                             		.loc 1 62 5
  73 0050 ED A5 01                		mov.L	4[r10], r5
  74 0053 A8 5D                   		mov.L	4[r5], r5
  75                             		.loc 1 62 18
  76 0055 EC A4                   		mov.L	[r10], r4
  77 0057 E3 54                   		mov.L	r4, [r5]
  63:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	que->prev = entry;
  78                             		.loc 1 63 12
  79 0059 ED A5 01                		mov.L	4[r10], r5
  80 005c EC A4                   		mov.L	[r10], r4
  81 005e A0 5C                   		mov.L	r4, 4[r5]
  64:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** }
  82                             		.loc 1 64 1
  83 0060 03                      		nop
  84 0061 3F AA 03                		rtsd	#12, r10-r10
  85                             	.LFE8:
  88                             	_QueRemoveNext:
  89                             	.LFB10:
  65:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  66:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  67:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  * Delete from queue 
  68:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	Deletes entry from queue 
  69:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	No action is performed if entry is empty. 
  70:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  71:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** Inline void QueRemove( QUEUE *entry )
  72:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** {
  73:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	if ( entry->next != entry ) {
  74:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 		entry->prev->next = (struct queue*) entry->next;
  75:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 		entry->next->prev = (struct queue*) entry->prev;
  76:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	}
  77:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** }
  78:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  79:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  80:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  * Remove top entry 
  81:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	Deletes the entry directly after que from the queue,
  82:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	and returns the deleted entry.
  83:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	Returns NULL if que is empty.
  84:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  85:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** Inline QUEUE* QueRemoveNext( QUEUE *que )
  86:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** {
  90                             		.loc 1 86 1
  91 0064 7E AA                   		push.l	r10
  92                             	.LCFI6:
  93 0066 71 0A F8                		add	#-8, r0, r10
  94                             	.LCFI7:
  95 0069 EF A0                   		mov.L	r10, r0
  96 006b E7 A1 01                		mov.L	r1, 4[r10]
  87:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	QUEUE	*entry;
  88:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  89:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	if ( que->next == que ) {
  97                             		.loc 1 89 10
  98 006e ED A5 01                		mov.L	4[r10], r5
  99 0071 EC 55                   		mov.L	[r5], r5
 100                             		.loc 1 89 5
 101 0073 ED A4 01                		mov.L	4[r10], r4
 102 0076 47 54                   		cmp	r5, r4
 103 0078 1D                      		bne	.L6
  90:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 		return NULL;
 104                             		.loc 1 90 10
 105 0079 66 05                   		mov.L	#0, r5
 106 007b 2E 1D                   		bra	.L7
 107                             	.L6:
  91:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	}
  92:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  93:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	entry = que->next;
 108                             		.loc 1 93 8
 109 007d ED A5 01                		mov.L	4[r10], r5
 110 0080 EC 55                   		mov.L	[r5], r5
 111 0082 E3 A5                   		mov.L	r5, [r10]
  94:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	que->next = (struct queue*)entry->next;
 112                             		.loc 1 94 14
 113 0084 EC A5                   		mov.L	[r10], r5
 114 0086 EC 54                   		mov.L	[r5], r4
 115                             		.loc 1 94 12
 116 0088 ED A5 01                		mov.L	4[r10], r5
 117 008b E3 54                   		mov.L	r4, [r5]
  95:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	entry->next->prev = que;
 118                             		.loc 1 95 7
 119 008d EC A5                   		mov.L	[r10], r5
 120 008f EC 55                   		mov.L	[r5], r5
 121                             		.loc 1 95 20
 122 0091 ED A4 01                		mov.L	4[r10], r4
 123 0094 A0 5C                   		mov.L	r4, 4[r5]
  96:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  97:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	return entry;
 124                             		.loc 1 97 9
 125 0096 EC A5                   		mov.L	[r10], r5
 126                             	.L7:
  98:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** }
 127                             		.loc 1 98 1
 128 0098 EF 51                   		mov.L	r5, r1
 129 009a 3F AA 03                		rtsd	#12, r10-r10
 130                             	.LFE10:
 133                             	_knl_isTaskIndependent:
 134                             	.LFB16:
 135                             		.file 2 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\kernel\\sysdepend\\cpu\\core\\rxv2\\cpu_s
   1:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
   2:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *----------------------------------------------------------------------
   3:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *    micro T-Kernel 3.00.03
   4:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *
   5:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *    Copyright (C) 2006-2021 by Ken Sakamura.
   6:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *    This software is distributed under the T-License 2.2.
   7:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *----------------------------------------------------------------------
   8:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *
   9:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.
  10:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *
  11:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *----------------------------------------------------------------------
  12:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  13:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  14:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  15:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *	cpu_status.h (RXv2)
  16:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *	CPU-Dependent Status Definition
  17:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  18:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  19:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #ifndef _SYSDEPEND_CPU_CORE_STATUS_
  20:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define _SYSDEPEND_CPU_CORE_STATUS_
  21:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  22:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #include <tk/syslib.h>
  23:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #include <sys/sysdef.h>
  24:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  25:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #include "sysdepend.h"
  26:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  27:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  * Start/End critical section
  28:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  29:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define BEGIN_CRITICAL_SECTION	{ UINT _sr_ = disint();
  30:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define END_CRITICAL_SECTION	if ( !isDI(_sr_)			\
  31:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 				  && knl_ctxtsk != knl_schedtsk		\
  32:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 				  && !knl_isTaskIndependent()		\
  33:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 				  && !knl_dispatch_disabled ) {		\
  34:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 					knl_dispatch();			\
  35:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 				}					\
  36:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 				setint(_sr_); }
  37:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  38:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  * Start/End interrupt disable section
  39:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  40:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define BEGIN_DISABLE_INTERRUPT	{ UINT _sr_ = disint();
  41:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define END_DISABLE_INTERRUPT	setint(_sr_); }
  42:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  43:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  44:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  * Interrupt enable/disable
  45:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  46:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define ENABLE_INTERRUPT	{ setint(0); }
  47:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define DISABLE_INTERRUPT	{ disint(); }
  48:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  49:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  50:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  * Enable interrupt nesting
  51:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *	Enable the interrupt that has a higher priority than 'level.'
  52:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  53:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define ENABLE_INTERRUPT_UPTO(level)	{ setint(level); }
  54:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  55:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  56:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *  Task-independent control
  57:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  58:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** IMPORT	W	knl_taskindp;		/* Task independent status */
  59:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  60:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  61:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  * If it is the task-independent part, TRUE
  62:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  63:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** Inline BOOL knl_isTaskIndependent( void )
  64:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** {
 136                             		.loc 2 64 1
 137 009d 7E AA                   		push.l	r10
 138                             	.LCFI8:
 139 009f EF 0A                   		mov.L	r0, r10
 140                             	.LCFI9:
  65:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 	return ( knl_taskindp > 0 )? TRUE: FALSE;
 141                             		.loc 2 65 35
 142 00a1 FB 52 00 00 00 00       		mov.L	#_knl_taskindp, r5
 143 00a7 EC 55                   		mov.L	[r5], r5
 144 00a9 61 05                   		cmp	#0, r5
 145 00ab FC DB 5A                		scgt.L	r5
 146 00ae 5B 55                   		movu.B	r5, r5
  66:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** }
 147                             		.loc 2 66 1
 148 00b0 EF 51                   		mov.L	r5, r1
 149 00b2 3F AA 01                		rtsd	#4, r10-r10
 150                             	.LFE16:
 153                             	_knl_mbf_free:
 154                             	.LFB34:
 155                             		.file 3 "../kernel/tkernel/messagebuf.h"
   1:../kernel/tkernel/messagebuf.h **** /*
   2:../kernel/tkernel/messagebuf.h ****  *----------------------------------------------------------------------
   3:../kernel/tkernel/messagebuf.h ****  *    micro T-Kernel 3.00.00
   4:../kernel/tkernel/messagebuf.h ****  *
   5:../kernel/tkernel/messagebuf.h ****  *    Copyright (C) 2006-2019 by Ken Sakamura.
   6:../kernel/tkernel/messagebuf.h ****  *    This software is distributed under the T-License 2.1.
   7:../kernel/tkernel/messagebuf.h ****  *----------------------------------------------------------------------
   8:../kernel/tkernel/messagebuf.h ****  *
   9:../kernel/tkernel/messagebuf.h ****  *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.
  10:../kernel/tkernel/messagebuf.h ****  *
  11:../kernel/tkernel/messagebuf.h ****  *----------------------------------------------------------------------
  12:../kernel/tkernel/messagebuf.h ****  */
  13:../kernel/tkernel/messagebuf.h **** 
  14:../kernel/tkernel/messagebuf.h **** /*
  15:../kernel/tkernel/messagebuf.h ****  *	messagebuf.h
  16:../kernel/tkernel/messagebuf.h ****  *	Message Buffer
  17:../kernel/tkernel/messagebuf.h ****  */
  18:../kernel/tkernel/messagebuf.h **** 
  19:../kernel/tkernel/messagebuf.h **** #ifndef _MESSAGEBUF_H_
  20:../kernel/tkernel/messagebuf.h **** #define _MESSAGEBUF_H_
  21:../kernel/tkernel/messagebuf.h **** 
  22:../kernel/tkernel/messagebuf.h **** /*
  23:../kernel/tkernel/messagebuf.h ****  * Message buffer control block
  24:../kernel/tkernel/messagebuf.h ****  *
  25:../kernel/tkernel/messagebuf.h ****  *	Because Receive wait task (TTW_MBF) and Send wait task (TTW_SMBF)
  26:../kernel/tkernel/messagebuf.h ****  *	do not co-exist for one message buffer, the wait queue may be
  27:../kernel/tkernel/messagebuf.h ****  *	allowed to share.
  28:../kernel/tkernel/messagebuf.h ****  *	However, when the size of message buffer is 0, it is difficult
  29:../kernel/tkernel/messagebuf.h ****  *	to judge the wait queue if it is for receive or send, 
  30:../kernel/tkernel/messagebuf.h ****  *	therefore do not use this method.
  31:../kernel/tkernel/messagebuf.h ****  */
  32:../kernel/tkernel/messagebuf.h **** typedef struct messagebuffer_control_block {
  33:../kernel/tkernel/messagebuf.h **** 	QUEUE	send_queue;	/* Message buffer send wait queue */
  34:../kernel/tkernel/messagebuf.h **** 	ID	mbfid;		/* message buffer ID */
  35:../kernel/tkernel/messagebuf.h **** 	void	*exinf;		/* Extended information */
  36:../kernel/tkernel/messagebuf.h **** 	ATR	mbfatr;		/* Message buffer attribute */
  37:../kernel/tkernel/messagebuf.h **** 	QUEUE	recv_queue;	/* Message buffer receive wait queue */
  38:../kernel/tkernel/messagebuf.h **** 	W	bufsz;		/* Message buffer size */
  39:../kernel/tkernel/messagebuf.h **** 	INT	maxmsz;		/* Maximum length of message */
  40:../kernel/tkernel/messagebuf.h **** 	W	frbufsz;	/* Free buffer size */
  41:../kernel/tkernel/messagebuf.h **** 	W	head;		/* First message store address */
  42:../kernel/tkernel/messagebuf.h **** 	W	tail;		/* Next to the last message store address */
  43:../kernel/tkernel/messagebuf.h **** 	VB	*buffer;	/* Message buffer address */
  44:../kernel/tkernel/messagebuf.h **** #if USE_OBJECT_NAME
  45:../kernel/tkernel/messagebuf.h **** 	UB	name[OBJECT_NAME_LENGTH];	/* name */
  46:../kernel/tkernel/messagebuf.h **** #endif
  47:../kernel/tkernel/messagebuf.h **** } MBFCB;
  48:../kernel/tkernel/messagebuf.h **** 
  49:../kernel/tkernel/messagebuf.h **** IMPORT MBFCB knl_mbfcb_table[];	/* Message buffer control block */
  50:../kernel/tkernel/messagebuf.h **** IMPORT QUEUE knl_free_mbfcb;	/* FreeQue */
  51:../kernel/tkernel/messagebuf.h **** 
  52:../kernel/tkernel/messagebuf.h **** #define get_mbfcb(id)	( &knl_mbfcb_table[INDEX_MBF(id)] )
  53:../kernel/tkernel/messagebuf.h **** 
  54:../kernel/tkernel/messagebuf.h **** 
  55:../kernel/tkernel/messagebuf.h **** /*
  56:../kernel/tkernel/messagebuf.h ****  * Message header format
  57:../kernel/tkernel/messagebuf.h ****  */
  58:../kernel/tkernel/messagebuf.h **** typedef INT		HEADER;
  59:../kernel/tkernel/messagebuf.h **** #define HEADERSZ	(sizeof(HEADER))
  60:../kernel/tkernel/messagebuf.h **** 
  61:../kernel/tkernel/messagebuf.h **** #define ROUNDSIZE	(sizeof(HEADER))
  62:../kernel/tkernel/messagebuf.h **** #define ROUNDSZ(sz)	(((UW)(sz) + (UW)(ROUNDSIZE-1)) & ~(UW)(ROUNDSIZE-1))
  63:../kernel/tkernel/messagebuf.h **** 
  64:../kernel/tkernel/messagebuf.h **** /*
  65:../kernel/tkernel/messagebuf.h ****  * Check message buffer free space
  66:../kernel/tkernel/messagebuf.h ****  *	If 'msgsz' message is able to be stored, return TRUE.
  67:../kernel/tkernel/messagebuf.h ****  */
  68:../kernel/tkernel/messagebuf.h **** Inline BOOL knl_mbf_free( MBFCB *mbfcb, INT msgsz )
  69:../kernel/tkernel/messagebuf.h **** {
 156                             		.loc 3 69 1
 157 00b5 7E AA                   		push.l	r10
 158                             	.LCFI10:
 159 00b7 71 0A F8                		add	#-8, r0, r10
 160                             	.LCFI11:
 161 00ba EF A0                   		mov.L	r10, r0
 162 00bc E3 A1                   		mov.L	r1, [r10]
 163 00be E7 A2 01                		mov.L	r2, 4[r10]
  70:../kernel/tkernel/messagebuf.h **** 	return ( HEADERSZ + (UW)msgsz <= (UW)mbfcb->frbufsz );
 164                             		.loc 3 70 22
 165 00c1 ED A5 01                		mov.L	4[r10], r5
 166                             		.loc 3 70 20
 167 00c4 62 45                   		add	#4, r5
 168                             		.loc 3 70 44
 169 00c6 EC A4                   		mov.L	[r10], r4
 170 00c8 AA 4C                   		mov.L	36[r4], r4
 171                             		.loc 3 70 32
 172 00ca 47 45                   		cmp	r4, r5
 173 00cc FC DB 55                		scleu.L	r5
 174 00cf 5B 55                   		movu.B	r5, r5
  71:../kernel/tkernel/messagebuf.h **** }
 175                             		.loc 3 71 1
 176 00d1 EF 51                   		mov.L	r5, r1
 177 00d3 3F AA 03                		rtsd	#12, r10-r10
 178                             	.LFE34:
 181                             	_knl_mbf_empty:
 182                             	.LFB35:
  72:../kernel/tkernel/messagebuf.h **** 
  73:../kernel/tkernel/messagebuf.h **** /*
  74:../kernel/tkernel/messagebuf.h ****  * If message buffer is empty, return TRUE.
  75:../kernel/tkernel/messagebuf.h ****  */
  76:../kernel/tkernel/messagebuf.h **** Inline BOOL knl_mbf_empty( MBFCB *mbfcb )
  77:../kernel/tkernel/messagebuf.h **** {
 183                             		.loc 3 77 1
 184 00d6 7E AA                   		push.l	r10
 185                             	.LCFI12:
 186 00d8 71 0A FC                		add	#-4, r0, r10
 187                             	.LCFI13:
 188 00db EF A0                   		mov.L	r10, r0
 189 00dd E3 A1                   		mov.L	r1, [r10]
  78:../kernel/tkernel/messagebuf.h **** 	return ( mbfcb->frbufsz == mbfcb->bufsz );
 190                             		.loc 3 78 16
 191 00df EC A5                   		mov.L	[r10], r5
 192 00e1 AA 5C                   		mov.L	36[r5], r4
 193                             		.loc 3 78 34
 194 00e3 EC A5                   		mov.L	[r10], r5
 195 00e5 A9 DD                   		mov.L	28[r5], r5
 196                             		.loc 3 78 26
 197 00e7 47 54                   		cmp	r5, r4
 198 00e9 FC DB 50                		sceq.L	r5
 199 00ec 5B 55                   		movu.B	r5, r5
  79:../kernel/tkernel/messagebuf.h **** }
 200                             		.loc 3 79 1
 201 00ee EF 51                   		mov.L	r5, r1
 202 00f0 3F AA 02                		rtsd	#8, r10-r10
 203                             	.LFE35:
 205                             		.global	_knl_mbfcb_table
 206                             		.section	.noinit,"aw"
 207                             		.balign 4
 210                             	_knl_mbfcb_table:
 211 0000 00 00 00 00 00 00 00 00 		.zero	416
 211      00 00 00 00 00 00 00 00 
 211      00 00 00 00 00 00 00 00 
 211      00 00 00 00 00 00 00 00 
 211      00 00 00 00 00 00 00 00 
 212                             		.global	_knl_free_mbfcb
 213                             		.balign 4
 216                             	_knl_free_mbfcb:
 217 01a0 00 00 00 00 00 00 00 00 		.zero	8
 218                             		.section P,"ax"
 219                             		.global	_knl_messagebuffer_initialize
 221                             	_knl_messagebuffer_initialize:
 222                             	.LFB36:
 223                             		.file 4 "../kernel/tkernel/messagebuf.c"
   1:../kernel/tkernel/messagebuf.c **** /*
   2:../kernel/tkernel/messagebuf.c ****  *----------------------------------------------------------------------
   3:../kernel/tkernel/messagebuf.c ****  *    micro T-Kernel 3.00.00
   4:../kernel/tkernel/messagebuf.c ****  *
   5:../kernel/tkernel/messagebuf.c ****  *    Copyright (C) 2006-2019 by Ken Sakamura.
   6:../kernel/tkernel/messagebuf.c ****  *    This software is distributed under the T-License 2.1.
   7:../kernel/tkernel/messagebuf.c ****  *----------------------------------------------------------------------
   8:../kernel/tkernel/messagebuf.c ****  *
   9:../kernel/tkernel/messagebuf.c ****  *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.
  10:../kernel/tkernel/messagebuf.c ****  *
  11:../kernel/tkernel/messagebuf.c ****  *----------------------------------------------------------------------
  12:../kernel/tkernel/messagebuf.c ****  */
  13:../kernel/tkernel/messagebuf.c **** 
  14:../kernel/tkernel/messagebuf.c **** /*
  15:../kernel/tkernel/messagebuf.c ****  *	messagebuf.c
  16:../kernel/tkernel/messagebuf.c ****  *	Message Buffer
  17:../kernel/tkernel/messagebuf.c ****  */
  18:../kernel/tkernel/messagebuf.c **** 
  19:../kernel/tkernel/messagebuf.c **** #include "kernel.h"
  20:../kernel/tkernel/messagebuf.c **** #include "wait.h"
  21:../kernel/tkernel/messagebuf.c **** #include "check.h"
  22:../kernel/tkernel/messagebuf.c **** #include "messagebuf.h"
  23:../kernel/tkernel/messagebuf.c **** 
  24:../kernel/tkernel/messagebuf.c **** #if USE_MESSAGEBUFFER == 1
  25:../kernel/tkernel/messagebuf.c **** 
  26:../kernel/tkernel/messagebuf.c **** 
  27:../kernel/tkernel/messagebuf.c **** Noinit(EXPORT MBFCB knl_mbfcb_table[NUM_MBFID]);	/* Message buffer control block */
  28:../kernel/tkernel/messagebuf.c **** Noinit(EXPORT QUEUE knl_free_mbfcb);	/* FreeQue */
  29:../kernel/tkernel/messagebuf.c **** 
  30:../kernel/tkernel/messagebuf.c **** 
  31:../kernel/tkernel/messagebuf.c **** /*
  32:../kernel/tkernel/messagebuf.c ****  * Initialization of message buffer control block 
  33:../kernel/tkernel/messagebuf.c ****  */
  34:../kernel/tkernel/messagebuf.c **** EXPORT ER knl_messagebuffer_initialize( void )
  35:../kernel/tkernel/messagebuf.c **** {
 224                             		.loc 4 35 1
 225 00f3 7E AA                   		push.l	r10
 226                             	.LCFI14:
 227 00f5 71 0A F8                		add	#-8, r0, r10
 228                             	.LCFI15:
 229 00f8 EF A0                   		mov.L	r10, r0
  36:../kernel/tkernel/messagebuf.c **** 	MBFCB	*mbfcb, *end;
  37:../kernel/tkernel/messagebuf.c **** 
  38:../kernel/tkernel/messagebuf.c **** 	/* Get system information */
  39:../kernel/tkernel/messagebuf.c **** 	if ( NUM_MBFID < 1 ) {
  40:../kernel/tkernel/messagebuf.c **** 		return E_SYS;
  41:../kernel/tkernel/messagebuf.c **** 	}
  42:../kernel/tkernel/messagebuf.c **** 
  43:../kernel/tkernel/messagebuf.c **** 	/* Register all control blocks onto FreeQue */
  44:../kernel/tkernel/messagebuf.c **** 	QueInit(&knl_free_mbfcb);
 230                             		.loc 4 44 2
 231 00fa FB 12 00 00 00 00       		mov.L	#_knl_free_mbfcb, r1
 232 0100 39 00 FF                		bsr	_QueInit
  45:../kernel/tkernel/messagebuf.c **** 	end = knl_mbfcb_table + NUM_MBFID;
 233                             		.loc 4 45 6
 234 0103 F9 A2 01 00 00 00 00    		mov.L	#_knl_mbfcb_table+416, 4[r10]
  46:../kernel/tkernel/messagebuf.c **** 	for ( mbfcb = knl_mbfcb_table; mbfcb < end; mbfcb++ ) {
 235                             		.loc 4 46 14
 236 010a F8 A2 00 00 00 00       		mov.L	#_knl_mbfcb_table, [r10]
 237                             		.loc 4 46 2
 238 0110 2E 1B                   		bra	.L15
 239                             	.L16:
  47:../kernel/tkernel/messagebuf.c **** 		mbfcb->mbfid = 0;
 240                             		.loc 4 47 16 discriminator 3
 241 0112 EC A5                   		mov.L	[r10], r5
 242 0114 3E 52 00                		mov.L	#0, 8[r5]
  48:../kernel/tkernel/messagebuf.c **** 		QueInsert(&mbfcb->send_queue, &knl_free_mbfcb);
 243                             		.loc 4 48 3 discriminator 3
 244 0117 EC A5                   		mov.L	[r10], r5
 245 0119 FB 22 00 00 00 00       		mov.L	#_knl_free_mbfcb, r2
 246 011f EF 51                   		mov.L	r5, r1
 247 0121 39 13 FF                		bsr	_QueInsert
  46:../kernel/tkernel/messagebuf.c **** 	for ( mbfcb = knl_mbfcb_table; mbfcb < end; mbfcb++ ) {
 248                             		.loc 4 46 51 discriminator 3
 249 0124 EC A5                   		mov.L	[r10], r5
 250 0126 71 55 34                		add	#52, r5
 251 0129 E3 A5                   		mov.L	r5, [r10]
 252                             	.L15:
  46:../kernel/tkernel/messagebuf.c **** 	for ( mbfcb = knl_mbfcb_table; mbfcb < end; mbfcb++ ) {
 253                             		.loc 4 46 2 discriminator 1
 254 012b EC A4                   		mov.L	[r10], r4
 255 012d ED A5 01                		mov.L	4[r10], r5
 256 0130 47 54                   		cmp	r5, r4
 257 0132 23 E0                   		bltu	.L16
  49:../kernel/tkernel/messagebuf.c **** 	}
  50:../kernel/tkernel/messagebuf.c **** 
  51:../kernel/tkernel/messagebuf.c **** 	return E_OK;
 258                             		.loc 4 51 9
 259 0134 66 05                   		mov.L	#0, r5
  52:../kernel/tkernel/messagebuf.c **** }
 260                             		.loc 4 52 1
 261 0136 EF 51                   		mov.L	r5, r1
 262 0138 3F AA 03                		rtsd	#12, r10-r10
 263                             	.LFE36:
 266                             	_knl_msg_to_mbf:
 267                             	.LFB37:
  53:../kernel/tkernel/messagebuf.c **** 
  54:../kernel/tkernel/messagebuf.c **** /* ------------------------------------------------------------------------ */
  55:../kernel/tkernel/messagebuf.c **** 
  56:../kernel/tkernel/messagebuf.c **** /*
  57:../kernel/tkernel/messagebuf.c ****  * Store the message to message buffer.
  58:../kernel/tkernel/messagebuf.c ****  */
  59:../kernel/tkernel/messagebuf.c **** LOCAL void knl_msg_to_mbf( MBFCB *mbfcb, CONST void *msg, INT msgsz )
  60:../kernel/tkernel/messagebuf.c **** {
 268                             		.loc 4 60 1
 269 013b 7E AA                   		push.l	r10
 270                             	.LCFI16:
 271 013d 71 0A E8                		add	#-24, r0, r10
 272                             	.LCFI17:
 273 0140 EF A0                   		mov.L	r10, r0
 274 0142 E7 A1 03                		mov.L	r1, 12[r10]
 275 0145 E7 A2 04                		mov.L	r2, 16[r10]
 276 0148 E7 A3 05                		mov.L	r3, 20[r10]
  61:../kernel/tkernel/messagebuf.c **** 	W	tail = mbfcb->tail;
 277                             		.loc 4 61 4
 278 014b ED A5 03                		mov.L	12[r10], r5
 279 014e AA DD                   		mov.L	44[r5], r5
 280 0150 E3 A5                   		mov.L	r5, [r10]
  62:../kernel/tkernel/messagebuf.c **** 	VB	*buffer = mbfcb->buffer;
 281                             		.loc 4 62 6
 282 0152 ED A5 03                		mov.L	12[r10], r5
 283 0155 AB 55                   		mov.L	48[r5], r5
 284 0157 E7 A5 01                		mov.L	r5, 4[r10]
  63:../kernel/tkernel/messagebuf.c **** 	W	remsz;
  64:../kernel/tkernel/messagebuf.c **** 
  65:../kernel/tkernel/messagebuf.c **** 	mbfcb->frbufsz -= (W)(HEADERSZ + ROUNDSZ(msgsz));
 285                             		.loc 4 65 17
 286 015a ED A5 03                		mov.L	12[r10], r5
 287 015d AA 5D                   		mov.L	36[r5], r5
 288 015f EF 54                   		mov.L	r5, r4
 289                             		.loc 4 65 35
 290 0161 ED A5 05                		mov.L	20[r10], r5
 291 0164 62 35                   		add	#3, r5
 292 0166 75 25 FC                		and	#-4, r5
 293                             		.loc 4 65 17
 294 0169 FF 05 54                		sub	r5, r4, r5
 295 016c 60 45                   		sub	#4, r5
 296 016e EF 54                   		mov.L	r5, r4
 297 0170 ED A5 03                		mov.L	12[r10], r5
 298 0173 A2 5C                   		mov.L	r4, 36[r5]
  66:../kernel/tkernel/messagebuf.c **** 
  67:../kernel/tkernel/messagebuf.c **** 	*(HEADER*)&buffer[tail] = msgsz;
 299                             		.loc 4 67 3
 300 0175 EC A5                   		mov.L	[r10], r5
 301                             		.loc 4 67 12
 302 0177 ED A4 01                		mov.L	4[r10], r4
 303 017a 4B 45                   		add	r4, r5
 304                             		.loc 4 67 26
 305 017c ED A4 05                		mov.L	20[r10], r4
 306 017f E3 54                   		mov.L	r4, [r5]
  68:../kernel/tkernel/messagebuf.c **** 	tail += HEADERSZ;
 307                             		.loc 4 68 7
 308 0181 EC A5                   		mov.L	[r10], r5
 309 0183 62 45                   		add	#4, r5
 310 0185 E3 A5                   		mov.L	r5, [r10]
  69:../kernel/tkernel/messagebuf.c **** 	if ( tail >= mbfcb->bufsz ) {
 311                             		.loc 4 69 20
 312 0187 ED A5 03                		mov.L	12[r10], r5
 313 018a A9 DD                   		mov.L	28[r5], r5
 314                             		.loc 4 69 5
 315 018c EC A4                   		mov.L	[r10], r4
 316 018e 47 54                   		cmp	r5, r4
 317 0190 29 05                   		blt	.L19
  70:../kernel/tkernel/messagebuf.c **** 		tail = 0;
 318                             		.loc 4 70 8
 319 0192 F8 A6 00                		mov.L	#0, [r10]
 320                             	.L19:
  71:../kernel/tkernel/messagebuf.c **** 	}
  72:../kernel/tkernel/messagebuf.c **** 
  73:../kernel/tkernel/messagebuf.c **** 	if ( (remsz = mbfcb->bufsz - tail) < (W)msgsz ) {
 321                             		.loc 4 73 21
 322 0195 ED A5 03                		mov.L	12[r10], r5
 323 0198 A9 DC                   		mov.L	28[r5], r4
 324                             		.loc 4 73 14
 325 019a EC A5                   		mov.L	[r10], r5
 326 019c FF 05 54                		sub	r5, r4, r5
 327 019f E7 A5 02                		mov.L	r5, 8[r10]
 328                             		.loc 4 73 5
 329 01a2 ED A4 02                		mov.L	8[r10], r4
 330 01a5 ED A5 05                		mov.L	20[r10], r5
 331 01a8 47 54                   		cmp	r5, r4
 332 01aa 28 2F                   		bge	.L20
  74:../kernel/tkernel/messagebuf.c **** 		knl_memcpy(&buffer[tail], msg, (SZ)remsz);
 333                             		.loc 4 74 3
 334 01ac EC A5                   		mov.L	[r10], r5
 335                             		.loc 4 74 14
 336 01ae ED A4 01                		mov.L	4[r10], r4
 337 01b1 4B 45                   		add	r4, r5
 338                             		.loc 4 74 3
 339 01b3 ED A3 02                		mov.L	8[r10], r3
 340 01b6 ED A2 04                		mov.L	16[r10], r2
 341 01b9 EF 51                   		mov.L	r5, r1
 342 01bb 05 00 00 00             		bsr	_knl_memcpy
  75:../kernel/tkernel/messagebuf.c **** 		msg = (VB*)msg + remsz;
 343                             		.loc 4 75 18
 344 01bf ED A5 02                		mov.L	8[r10], r5
 345                             		.loc 4 75 7
 346 01c2 ED A4 04                		mov.L	16[r10], r4
 347 01c5 4B 45                   		add	r4, r5
 348 01c7 E7 A5 04                		mov.L	r5, 16[r10]
  76:../kernel/tkernel/messagebuf.c **** 		msgsz -= (INT)remsz;
 349                             		.loc 4 76 9
 350 01ca ED A4 05                		mov.L	20[r10], r4
 351 01cd ED A5 02                		mov.L	8[r10], r5
 352 01d0 FF 05 54                		sub	r5, r4, r5
 353 01d3 E7 A5 05                		mov.L	r5, 20[r10]
  77:../kernel/tkernel/messagebuf.c **** 		tail = 0;
 354                             		.loc 4 77 8
 355 01d6 F8 A6 00                		mov.L	#0, [r10]
 356                             	.L20:
  78:../kernel/tkernel/messagebuf.c **** 	}
  79:../kernel/tkernel/messagebuf.c **** 	knl_memcpy(&buffer[tail], msg, (SZ)msgsz);
 357                             		.loc 4 79 2
 358 01d9 EC A5                   		mov.L	[r10], r5
 359                             		.loc 4 79 13
 360 01db ED A4 01                		mov.L	4[r10], r4
 361 01de 4B 45                   		add	r4, r5
 362                             		.loc 4 79 2
 363 01e0 ED A3 05                		mov.L	20[r10], r3
 364 01e3 ED A2 04                		mov.L	16[r10], r2
 365 01e6 EF 51                   		mov.L	r5, r1
 366 01e8 05 00 00 00             		bsr	_knl_memcpy
  80:../kernel/tkernel/messagebuf.c **** 	tail += (W)ROUNDSZ(msgsz);
 367                             		.loc 4 80 13
 368 01ec ED A5 05                		mov.L	20[r10], r5
 369 01ef 62 35                   		add	#3, r5
 370                             		.loc 4 80 10
 371 01f1 75 25 FC                		and	#-4, r5
 372                             		.loc 4 80 7
 373 01f4 EC A4                   		mov.L	[r10], r4
 374 01f6 4B 45                   		add	r4, r5
 375 01f8 E3 A5                   		mov.L	r5, [r10]
  81:../kernel/tkernel/messagebuf.c **** 	if ( tail >= mbfcb->bufsz ) {
 376                             		.loc 4 81 20
 377 01fa ED A5 03                		mov.L	12[r10], r5
 378 01fd A9 DD                   		mov.L	28[r5], r5
 379                             		.loc 4 81 5
 380 01ff EC A4                   		mov.L	[r10], r4
 381 0201 47 54                   		cmp	r5, r4
 382 0203 29 05                   		blt	.L21
  82:../kernel/tkernel/messagebuf.c **** 		tail = 0;
 383                             		.loc 4 82 8
 384 0205 F8 A6 00                		mov.L	#0, [r10]
 385                             	.L21:
  83:../kernel/tkernel/messagebuf.c **** 	}
  84:../kernel/tkernel/messagebuf.c **** 
  85:../kernel/tkernel/messagebuf.c **** 	mbfcb->tail = tail;
 386                             		.loc 4 85 14
 387 0208 ED A5 03                		mov.L	12[r10], r5
 388 020b EC A4                   		mov.L	[r10], r4
 389 020d A2 DC                   		mov.L	r4, 44[r5]
  86:../kernel/tkernel/messagebuf.c **** }
 390                             		.loc 4 86 1
 391 020f 03                      		nop
 392 0210 3F AA 07                		rtsd	#28, r10-r10
 393                             	.LFE37:
 396                             	_knl_mbf_wakeup:
 397                             	.LFB38:
  87:../kernel/tkernel/messagebuf.c **** 
  88:../kernel/tkernel/messagebuf.c **** /* ------------------------------------------------------------------------ */
  89:../kernel/tkernel/messagebuf.c **** 
  90:../kernel/tkernel/messagebuf.c **** /*
  91:../kernel/tkernel/messagebuf.c ****  * Accept message and release wait task,
  92:../kernel/tkernel/messagebuf.c ****  * as long as there are free message area.
  93:../kernel/tkernel/messagebuf.c ****  */
  94:../kernel/tkernel/messagebuf.c **** LOCAL void knl_mbf_wakeup( MBFCB *mbfcb )
  95:../kernel/tkernel/messagebuf.c **** {
 398                             		.loc 4 95 1
 399 0213 7E AA                   		push.l	r10
 400                             	.LCFI18:
 401 0215 71 0A F4                		add	#-12, r0, r10
 402                             	.LCFI19:
 403 0218 EF A0                   		mov.L	r10, r0
 404 021a E7 A1 02                		mov.L	r1, 8[r10]
  96:../kernel/tkernel/messagebuf.c **** 	TCB	*top;
  97:../kernel/tkernel/messagebuf.c **** 	INT	msgsz;
  98:../kernel/tkernel/messagebuf.c **** 
  99:../kernel/tkernel/messagebuf.c **** 	while ( !isQueEmpty(&mbfcb->send_queue) ) {
 405                             		.loc 4 99 8
 406 021d 2E 34                   		bra	.L23
 407                             	.L26:
 100:../kernel/tkernel/messagebuf.c **** 		top = (TCB*)mbfcb->send_queue.next;
 408                             		.loc 4 100 7
 409 021f ED A5 02                		mov.L	8[r10], r5
 410 0222 EC 55                   		mov.L	[r5], r5
 411 0224 E3 A5                   		mov.L	r5, [r10]
 101:../kernel/tkernel/messagebuf.c **** 		msgsz = top->winfo.smbf.msgsz;
 412                             		.loc 4 101 9
 413 0226 EC A5                   		mov.L	[r10], r5
 414 0228 AC 5D                   		mov.L	68[r5], r5
 415 022a E7 A5 01                		mov.L	r5, 4[r10]
 102:../kernel/tkernel/messagebuf.c **** 		if ( !knl_mbf_free(mbfcb, msgsz) ) {
 416                             		.loc 4 102 9
 417 022d ED A2 01                		mov.L	4[r10], r2
 418 0230 ED A1 02                		mov.L	8[r10], r1
 419 0233 39 82 FE                		bsr	_knl_mbf_free
 420 0236 EF 15                   		mov.L	r1, r5
 421                             		.loc 4 102 6
 422 0238 61 05                   		cmp	#0, r5
 423 023a 20 27                   		beq	.L27
 103:../kernel/tkernel/messagebuf.c **** 			break;
 104:../kernel/tkernel/messagebuf.c **** 		}
 105:../kernel/tkernel/messagebuf.c **** 
 106:../kernel/tkernel/messagebuf.c **** 		/* Store a message from waiting task and release it */
 107:../kernel/tkernel/messagebuf.c **** 		knl_msg_to_mbf(mbfcb, top->winfo.smbf.msg, msgsz);
 424                             		.loc 4 107 3
 425 023c EC A5                   		mov.L	[r10], r5
 426 023e AC 55                   		mov.L	64[r5], r5
 427 0240 ED A3 01                		mov.L	4[r10], r3
 428 0243 EF 52                   		mov.L	r5, r2
 429 0245 ED A1 02                		mov.L	8[r10], r1
 430 0248 39 F3 FE                		bsr	_knl_msg_to_mbf
 108:../kernel/tkernel/messagebuf.c **** 		knl_wait_release_ok(top);
 431                             		.loc 4 108 3
 432 024b EC A1                   		mov.L	[r10], r1
 433 024d 05 00 00 00             		bsr	_knl_wait_release_ok
 434                             	.L23:
  99:../kernel/tkernel/messagebuf.c **** 		top = (TCB*)mbfcb->send_queue.next;
 435                             		.loc 4 99 11
 436 0251 ED A5 02                		mov.L	8[r10], r5
 437 0254 EF 51                   		mov.L	r5, r1
 438 0256 39 C3 FD                		bsr	_isQueEmpty
 439 0259 EF 15                   		mov.L	r1, r5
  99:../kernel/tkernel/messagebuf.c **** 		top = (TCB*)mbfcb->send_queue.next;
 440                             		.loc 4 99 8
 441 025b 61 05                   		cmp	#0, r5
 442 025d 20 C2                   		beq	.L26
 109:../kernel/tkernel/messagebuf.c **** 	}
 110:../kernel/tkernel/messagebuf.c **** }
 443                             		.loc 4 110 1
 444 025f 2E 03                   		bra	.L25
 445                             	.L27:
 103:../kernel/tkernel/messagebuf.c **** 		}
 446                             		.loc 4 103 4
 447 0261 03                      		nop
 448                             	.L25:
 449                             		.loc 4 110 1
 450 0262 03                      		nop
 451 0263 3F AA 04                		rtsd	#16, r10-r10
 452                             	.LFE38:
 454                             		.global	_tk_cre_mbf
 456                             	_tk_cre_mbf:
 457                             	.LFB39:
 111:../kernel/tkernel/messagebuf.c **** 
 112:../kernel/tkernel/messagebuf.c **** 
 113:../kernel/tkernel/messagebuf.c **** /*
 114:../kernel/tkernel/messagebuf.c ****  * Create message buffer
 115:../kernel/tkernel/messagebuf.c ****  */
 116:../kernel/tkernel/messagebuf.c **** SYSCALL ID tk_cre_mbf( CONST T_CMBF *pk_cmbf )
 117:../kernel/tkernel/messagebuf.c **** {
 458                             		.loc 4 117 1
 459 0266 6E 7A                   		pushm	r7-r10
 460                             	.LCFI20:
 461 0268 71 0A E0                		add	#-32, r0, r10
 462                             	.LCFI21:
 463 026b EF A0                   		mov.L	r10, r0
 464 026d E7 A1 07                		mov.L	r1, 28[r10]
 118:../kernel/tkernel/messagebuf.c **** #if CHK_RSATR
 119:../kernel/tkernel/messagebuf.c **** 	const ATR VALID_MBFATR = {
 465                             		.loc 4 119 12
 466 0270 F9 A6 02 21             		mov.L	#33, 8[r10]
 120:../kernel/tkernel/messagebuf.c **** 		 TA_TPRI
 121:../kernel/tkernel/messagebuf.c **** 		|TA_USERBUF
 122:../kernel/tkernel/messagebuf.c **** #if USE_OBJECT_NAME
 123:../kernel/tkernel/messagebuf.c **** 		|TA_DSNAME
 124:../kernel/tkernel/messagebuf.c **** #endif
 125:../kernel/tkernel/messagebuf.c **** 	};
 126:../kernel/tkernel/messagebuf.c **** #endif
 127:../kernel/tkernel/messagebuf.c **** 	MBFCB	*mbfcb;
 128:../kernel/tkernel/messagebuf.c **** 	ID	mbfid;
 129:../kernel/tkernel/messagebuf.c **** 	W	bufsz;
 130:../kernel/tkernel/messagebuf.c **** 	VB	*msgbuf;
 131:../kernel/tkernel/messagebuf.c **** 	ER	ercd;
 132:../kernel/tkernel/messagebuf.c **** 
 133:../kernel/tkernel/messagebuf.c **** 	CHECK_RSATR(pk_cmbf->mbfatr, VALID_MBFATR);
 467                             		.loc 4 133 2
 468 0274 ED A5 07                		mov.L	28[r10], r5
 469 0277 A8 5C                   		mov.L	4[r5], r4
 470 0279 ED A5 02                		mov.L	8[r10], r5
 471 027c 7E 05                   		not	r5
 472 027e 53 45                   		and	r4, r5
 473 0280 61 05                   		cmp	#0, r5
 474 0282 17                      		beq	.L29
 475                             		.loc 4 133 2 is_stmt 0 discriminator 1
 476 0283 FB 56 F5                		mov.L	#-11, r5
 477 0286 38 6D 01                		bra	.L30
 478                             	.L29:
 134:../kernel/tkernel/messagebuf.c **** 	CHECK_PAR(pk_cmbf->bufsz >= 0);
 479                             		.loc 4 134 2 is_stmt 1
 480 0289 ED A5 07                		mov.L	28[r10], r5
 481 028c A8 D5                   		mov.L	8[r5], r5
 482 028e 61 05                   		cmp	#0, r5
 483 0290 28 08                   		bge	.L31
 484                             		.loc 4 134 2 is_stmt 0 discriminator 1
 485 0292 FB 56 EF                		mov.L	#-17, r5
 486 0295 38 5E 01                		bra	.L30
 487                             	.L31:
 135:../kernel/tkernel/messagebuf.c **** 	CHECK_PAR(pk_cmbf->maxmsz > 0);
 488                             		.loc 4 135 2 is_stmt 1
 489 0298 ED A5 07                		mov.L	28[r10], r5
 490 029b A8 DD                   		mov.L	12[r5], r5
 491 029d 61 05                   		cmp	#0, r5
 492 029f 2A 08                   		bgt	.L32
 493                             		.loc 4 135 2 is_stmt 0 discriminator 1
 494 02a1 FB 56 EF                		mov.L	#-17, r5
 495 02a4 38 4F 01                		bra	.L30
 496                             	.L32:
 136:../kernel/tkernel/messagebuf.c **** #if !USE_IMALLOC
 137:../kernel/tkernel/messagebuf.c **** 	/* TA_USERBUF must be specified if configured in no Imalloc */
 138:../kernel/tkernel/messagebuf.c **** 	CHECK_PAR((pk_cmbf->mbfatr & TA_USERBUF) != 0);
 139:../kernel/tkernel/messagebuf.c **** #endif
 140:../kernel/tkernel/messagebuf.c **** 	bufsz = (W)ROUNDSZ(pk_cmbf->bufsz);
 497                             		.loc 4 140 13 is_stmt 1
 498 02a7 ED A5 07                		mov.L	28[r10], r5
 499 02aa A8 D5                   		mov.L	8[r5], r5
 500 02ac 62 35                   		add	#3, r5
 501                             		.loc 4 140 8
 502 02ae 75 25 FC                		and	#-4, r5
 503 02b1 E7 A5 03                		mov.L	r5, 12[r10]
 141:../kernel/tkernel/messagebuf.c **** 
 142:../kernel/tkernel/messagebuf.c **** 	if ( bufsz > 0 ) {
 504                             		.loc 4 142 5
 505 02b4 ED A5 03                		mov.L	12[r10], r5
 506 02b7 61 05                   		cmp	#0, r5
 507 02b9 2B 3C                   		ble	.L33
 143:../kernel/tkernel/messagebuf.c **** #if USE_IMALLOC
 144:../kernel/tkernel/messagebuf.c **** 		if ( (pk_cmbf->mbfatr & TA_USERBUF) != 0 ) {
 508                             		.loc 4 144 16
 509 02bb ED A5 07                		mov.L	28[r10], r5
 510 02be A8 5D                   		mov.L	4[r5], r5
 511                             		.loc 4 144 25
 512 02c0 75 25 20                		and	#32, r5
 513                             		.loc 4 144 6
 514 02c3 61 05                   		cmp	#0, r5
 515 02c5 20 1C                   		beq	.L34
 145:../kernel/tkernel/messagebuf.c **** 			/* Size of user buffer must be multiples of sizeof(HEADER) */
 146:../kernel/tkernel/messagebuf.c **** 			if ( bufsz != pk_cmbf->bufsz ) {
 516                             		.loc 4 146 25
 517 02c7 ED A5 07                		mov.L	28[r10], r5
 518 02ca A8 D5                   		mov.L	8[r5], r5
 519                             		.loc 4 146 7
 520 02cc ED A4 03                		mov.L	12[r10], r4
 521 02cf 47 54                   		cmp	r5, r4
 522 02d1 17                      		beq	.L35
 147:../kernel/tkernel/messagebuf.c **** 				return E_PAR;
 523                             		.loc 4 147 12
 524 02d2 FB 56 EF                		mov.L	#-17, r5
 525 02d5 38 1E 01                		bra	.L30
 526                             	.L35:
 148:../kernel/tkernel/messagebuf.c **** 			}
 149:../kernel/tkernel/messagebuf.c **** 			/* Use user buffer */
 150:../kernel/tkernel/messagebuf.c **** 			msgbuf = (VB*) pk_cmbf->bufptr;
 527                             		.loc 4 150 11
 528 02d8 ED A5 07                		mov.L	28[r10], r5
 529 02db A9 55                   		mov.L	16[r5], r5
 530 02dd E3 A5                   		mov.L	r5, [r10]
 531 02df 2E 19                   		bra	.L36
 532                             	.L34:
 151:../kernel/tkernel/messagebuf.c **** 		} else {
 152:../kernel/tkernel/messagebuf.c **** 			/* Allocate by kernel */
 153:../kernel/tkernel/messagebuf.c **** 			msgbuf = knl_Imalloc((UW)bufsz);
 533                             		.loc 4 153 13
 534 02e1 ED A1 03                		mov.L	12[r10], r1
 535 02e4 05 00 00 00             		bsr	_knl_Imalloc
 536 02e8 E3 A1                   		mov.L	r1, [r10]
 154:../kernel/tkernel/messagebuf.c **** 			if ( msgbuf == NULL ) {
 537                             		.loc 4 154 7
 538 02ea EC A5                   		mov.L	[r10], r5
 539 02ec 61 05                   		cmp	#0, r5
 540 02ee 1A                      		bne	.L36
 155:../kernel/tkernel/messagebuf.c **** 				return E_NOMEM;
 541                             		.loc 4 155 12
 542 02ef FB 56 DF                		mov.L	#-33, r5
 543 02f2 38 01 01                		bra	.L30
 544                             	.L33:
 156:../kernel/tkernel/messagebuf.c **** 			}
 157:../kernel/tkernel/messagebuf.c **** 		}
 158:../kernel/tkernel/messagebuf.c **** #else
 159:../kernel/tkernel/messagebuf.c **** 		/* Size of user buffer must be multiples of sizeof(HEADER) */
 160:../kernel/tkernel/messagebuf.c **** 		if ( bufsz != pk_cmbf->bufsz ) {
 161:../kernel/tkernel/messagebuf.c **** 			return E_PAR;
 162:../kernel/tkernel/messagebuf.c **** 		}
 163:../kernel/tkernel/messagebuf.c **** 		/* Use user buffer */
 164:../kernel/tkernel/messagebuf.c **** 		msgbuf = (VB*) pk_cmbf->bufptr;
 165:../kernel/tkernel/messagebuf.c **** #endif
 166:../kernel/tkernel/messagebuf.c **** 	} else {
 167:../kernel/tkernel/messagebuf.c **** 		msgbuf = NULL;
 545                             		.loc 4 167 10
 546 02f5 F8 A6 00                		mov.L	#0, [r10]
 547                             	.L36:
 548                             	.LBB2:
 168:../kernel/tkernel/messagebuf.c **** 	}
 169:../kernel/tkernel/messagebuf.c **** 
 170:../kernel/tkernel/messagebuf.c **** 	BEGIN_CRITICAL_SECTION;
 549                             		.loc 4 170 2
 550 02f8 05 00 00 00             		bsr	_disint
 551 02fc E7 A1 04                		mov.L	r1, 16[r10]
 171:../kernel/tkernel/messagebuf.c **** 	/* Get control block from FreeQue */
 172:../kernel/tkernel/messagebuf.c **** 	mbfcb = (MBFCB*)QueRemoveNext(&knl_free_mbfcb);
 552                             		.loc 4 172 18
 553 02ff FB 12 00 00 00 00       		mov.L	#_knl_free_mbfcb, r1
 554 0305 39 5F FD                		bsr	_QueRemoveNext
 555 0308 E7 A1 05                		mov.L	r1, 20[r10]
 173:../kernel/tkernel/messagebuf.c **** 	if ( mbfcb == NULL ) {
 556                             		.loc 4 173 5
 557 030b ED A5 05                		mov.L	20[r10], r5
 558 030e 61 05                   		cmp	#0, r5
 559 0310 18                      		bne	.L37
 174:../kernel/tkernel/messagebuf.c **** 		ercd = E_LIMIT;
 560                             		.loc 4 174 8
 561 0311 F9 A6 01 DE             		mov.L	#-34, 4[r10]
 562 0315 38 83 00                		bra	.L38
 563                             	.L37:
 175:../kernel/tkernel/messagebuf.c **** 	} else {
 176:../kernel/tkernel/messagebuf.c **** 		mbfid = ID_MBF(mbfcb - knl_mbfcb_table);
 564                             		.loc 4 176 11
 565 0318 ED A5 05                		mov.L	20[r10], r5
 566 031b FB 72 00 00 00 00       		mov.L	#_knl_mbfcb_table, r7
 567 0321 43 75                   		sub	r7, r5
 568 0323 6A 25                   		shar	#2, r5
 569 0325 74 15 C5 4E EC C4       		mul	#-991146299, r5
 570                             		.loc 4 176 9
 571 032b 62 15                   		add	#1, r5
 572 032d E7 A5 06                		mov.L	r5, 24[r10]
 177:../kernel/tkernel/messagebuf.c **** 
 178:../kernel/tkernel/messagebuf.c **** 		/* Initialize control block */
 179:../kernel/tkernel/messagebuf.c **** 		QueInit(&mbfcb->send_queue);
 573                             		.loc 4 179 3
 574 0330 ED A5 05                		mov.L	20[r10], r5
 575 0333 EF 51                   		mov.L	r5, r1
 576 0335 39 CB FC                		bsr	_QueInit
 180:../kernel/tkernel/messagebuf.c **** 		mbfcb->mbfid = mbfid;
 577                             		.loc 4 180 16
 578 0338 ED A5 05                		mov.L	20[r10], r5
 579 033b ED A4 06                		mov.L	24[r10], r4
 580 033e A0 D4                   		mov.L	r4, 8[r5]
 181:../kernel/tkernel/messagebuf.c **** 		mbfcb->exinf = pk_cmbf->exinf;
 581                             		.loc 4 181 25
 582 0340 ED A5 07                		mov.L	28[r10], r5
 583 0343 EC 54                   		mov.L	[r5], r4
 584                             		.loc 4 181 16
 585 0345 ED A5 05                		mov.L	20[r10], r5
 586 0348 A0 DC                   		mov.L	r4, 12[r5]
 182:../kernel/tkernel/messagebuf.c **** 		mbfcb->mbfatr = pk_cmbf->mbfatr;
 587                             		.loc 4 182 26
 588 034a ED A5 07                		mov.L	28[r10], r5
 589 034d A8 5C                   		mov.L	4[r5], r4
 590                             		.loc 4 182 17
 591 034f ED A5 05                		mov.L	20[r10], r5
 592 0352 A1 54                   		mov.L	r4, 16[r5]
 183:../kernel/tkernel/messagebuf.c **** 		QueInit(&mbfcb->recv_queue);
 593                             		.loc 4 183 3
 594 0354 ED A5 05                		mov.L	20[r10], r5
 595 0357 71 55 14                		add	#20, r5
 596 035a EF 51                   		mov.L	r5, r1
 597 035c 39 A4 FC                		bsr	_QueInit
 184:../kernel/tkernel/messagebuf.c **** 		mbfcb->buffer = msgbuf;
 598                             		.loc 4 184 17
 599 035f ED A5 05                		mov.L	20[r10], r5
 600 0362 EC A4                   		mov.L	[r10], r4
 601 0364 A3 54                   		mov.L	r4, 48[r5]
 185:../kernel/tkernel/messagebuf.c **** 		mbfcb->bufsz = mbfcb->frbufsz = bufsz;
 602                             		.loc 4 185 33
 603 0366 ED A5 05                		mov.L	20[r10], r5
 604 0369 ED A4 03                		mov.L	12[r10], r4
 605 036c A2 5C                   		mov.L	r4, 36[r5]
 606                             		.loc 4 185 23
 607 036e ED A5 05                		mov.L	20[r10], r5
 608 0371 AA 5C                   		mov.L	36[r5], r4
 609                             		.loc 4 185 16
 610 0373 ED A5 05                		mov.L	20[r10], r5
 611 0376 A1 DC                   		mov.L	r4, 28[r5]
 186:../kernel/tkernel/messagebuf.c **** 		mbfcb->maxmsz = pk_cmbf->maxmsz;
 612                             		.loc 4 186 26
 613 0378 ED A5 07                		mov.L	28[r10], r5
 614 037b A8 DC                   		mov.L	12[r5], r4
 615                             		.loc 4 186 17
 616 037d ED A5 05                		mov.L	20[r10], r5
 617 0380 A2 54                   		mov.L	r4, 32[r5]
 187:../kernel/tkernel/messagebuf.c **** 		mbfcb->head = mbfcb->tail = 0;
 618                             		.loc 4 187 29
 619 0382 ED A5 05                		mov.L	20[r10], r5
 620 0385 3E 5B 00                		mov.L	#0, 44[r5]
 621                             		.loc 4 187 22
 622 0388 ED A5 05                		mov.L	20[r10], r5
 623 038b AA DC                   		mov.L	44[r5], r4
 624                             		.loc 4 187 15
 625 038d ED A5 05                		mov.L	20[r10], r5
 626 0390 A2 D4                   		mov.L	r4, 40[r5]
 188:../kernel/tkernel/messagebuf.c **** #if USE_OBJECT_NAME
 189:../kernel/tkernel/messagebuf.c **** 		if ( (pk_cmbf->mbfatr & TA_DSNAME) != 0 ) {
 190:../kernel/tkernel/messagebuf.c **** 			knl_strncpy((char*)mbfcb->name, (char*)pk_cmbf->dsname,
 191:../kernel/tkernel/messagebuf.c **** 				OBJECT_NAME_LENGTH);
 192:../kernel/tkernel/messagebuf.c **** 		}
 193:../kernel/tkernel/messagebuf.c **** #endif
 194:../kernel/tkernel/messagebuf.c **** 		ercd = mbfid;
 627                             		.loc 4 194 8
 628 0392 ED A5 06                		mov.L	24[r10], r5
 629 0395 E7 A5 01                		mov.L	r5, 4[r10]
 630                             	.L38:
 195:../kernel/tkernel/messagebuf.c **** 	}
 196:../kernel/tkernel/messagebuf.c **** 	END_CRITICAL_SECTION;
 631                             		.loc 4 196 2
 632 0398 ED A5 04                		mov.L	16[r10], r5
 633 039b 61 F5                   		cmp	#15, r5
 634 039d 20 2E                   		beq	.L39
 635                             		.loc 4 196 2 is_stmt 0 discriminator 1
 636 039f FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 637 03a5 EC 54                   		mov.L	[r5], r4
 638 03a7 FB 52 00 00 00 00       		mov.L	#_knl_schedtsk, r5
 639 03ad EC 55                   		mov.L	[r5], r5
 640 03af 47 54                   		cmp	r5, r4
 641 03b1 20 1A                   		beq	.L39
 642                             		.loc 4 196 2 discriminator 3
 643 03b3 39 EA FC                		bsr	_knl_isTaskIndependent
 644 03b6 EF 15                   		mov.L	r1, r5
 645 03b8 61 05                   		cmp	#0, r5
 646 03ba 21 11                   		bne	.L39
 647                             		.loc 4 196 2 discriminator 5
 648 03bc FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 649 03c2 EC 55                   		mov.L	[r5], r5
 650 03c4 61 05                   		cmp	#0, r5
 651 03c6 1D                      		bne	.L39
 652                             		.loc 4 196 2 discriminator 7
 653 03c7 05 00 00 00             		bsr	_knl_dispatch
 654                             		.balign 8,3,1
 655                             	.L39:
 656                             		.loc 4 196 2 discriminator 9
 657 03cb ED A1 04                		mov.L	16[r10], r1
 658 03ce 05 00 00 00             		bsr	_setint
 659                             	.LBE2:
 197:../kernel/tkernel/messagebuf.c **** 
 198:../kernel/tkernel/messagebuf.c **** #if USE_IMALLOC
 199:../kernel/tkernel/messagebuf.c **** 	if ( (ercd < E_OK) && (msgbuf != NULL) && ((pk_cmbf->mbfatr & TA_USERBUF) == 0 ) ) {
 660                             		.loc 4 199 5 is_stmt 1 discriminator 9
 661 03d2 ED A5 01                		mov.L	4[r10], r5
 662 03d5 61 05                   		cmp	#0, r5
 663 03d7 28 19                   		bge	.L40
 664                             		.loc 4 199 21 discriminator 1
 665 03d9 EC A5                   		mov.L	[r10], r5
 666 03db 61 05                   		cmp	#0, r5
 667 03dd 20 13                   		beq	.L40
 668                             		.loc 4 199 53 discriminator 2
 669 03df ED A5 07                		mov.L	28[r10], r5
 670 03e2 A8 5D                   		mov.L	4[r5], r5
 671                             		.loc 4 199 62 discriminator 2
 672 03e4 75 25 20                		and	#32, r5
 673                             		.loc 4 199 41 discriminator 2
 674 03e7 61 05                   		cmp	#0, r5
 675 03e9 1F                      		bne	.L40
 200:../kernel/tkernel/messagebuf.c **** 		knl_Ifree(msgbuf);
 676                             		.loc 4 200 3
 677 03ea EC A1                   		mov.L	[r10], r1
 678 03ec 05 00 00 00             		bsr	_knl_Ifree
 679                             		.balign 8,3,1
 680                             	.L40:
 201:../kernel/tkernel/messagebuf.c **** 	}
 202:../kernel/tkernel/messagebuf.c **** #endif
 203:../kernel/tkernel/messagebuf.c **** 
 204:../kernel/tkernel/messagebuf.c **** 	return ercd;
 681                             		.loc 4 204 9
 682 03f0 ED A5 01                		mov.L	4[r10], r5
 683                             		.balign 8,3,1
 684                             	.L30:
 205:../kernel/tkernel/messagebuf.c **** }
 685                             		.loc 4 205 1
 686 03f3 EF 51                   		mov.L	r5, r1
 687 03f5 3F 7A 0C                		rtsd	#48, r7-r10
 688                             	.LFE39:
 690                             		.global	_tk_del_mbf
 692                             	_tk_del_mbf:
 693                             	.LFB40:
 206:../kernel/tkernel/messagebuf.c **** 
 207:../kernel/tkernel/messagebuf.c **** #ifdef USE_FUNC_TK_DEL_MBF
 208:../kernel/tkernel/messagebuf.c **** /*
 209:../kernel/tkernel/messagebuf.c ****  * Delete message buffer
 210:../kernel/tkernel/messagebuf.c ****  */
 211:../kernel/tkernel/messagebuf.c **** SYSCALL ER tk_del_mbf( ID mbfid )
 212:../kernel/tkernel/messagebuf.c **** {
 694                             		.loc 4 212 1
 695 03f8 7E AA                   		push.l	r10
 696                             	.LCFI22:
 697 03fa 71 0A EC                		add	#-20, r0, r10
 698                             	.LCFI23:
 699 03fd EF A0                   		mov.L	r10, r0
 700 03ff E7 A1 04                		mov.L	r1, 16[r10]
 213:../kernel/tkernel/messagebuf.c **** 	MBFCB	*mbfcb;
 214:../kernel/tkernel/messagebuf.c **** 	VB	*msgbuf = NULL;
 701                             		.loc 4 214 6
 702 0402 F8 A6 00                		mov.L	#0, [r10]
 215:../kernel/tkernel/messagebuf.c **** 	ER	ercd = E_OK;
 703                             		.loc 4 215 5
 704 0405 F9 A6 01 00             		mov.L	#0, 4[r10]
 216:../kernel/tkernel/messagebuf.c **** 
 217:../kernel/tkernel/messagebuf.c **** 	CHECK_MBFID(mbfid);
 705                             		.loc 4 217 2
 706 0409 ED A5 04                		mov.L	16[r10], r5
 707 040c 61 05                   		cmp	#0, r5
 708 040e 2B 09                   		ble	.L42
 709                             		.loc 4 217 2 is_stmt 0 discriminator 2
 710 0410 ED A5 04                		mov.L	16[r10], r5
 711 0413 61 85                   		cmp	#8, r5
 712 0415 2B 08                   		ble	.L43
 713                             	.L42:
 714                             		.loc 4 217 2 discriminator 3
 715 0417 FB 56 EE                		mov.L	#-18, r5
 716 041a 38 AD 00                		bra	.L44
 717                             	.L43:
 218:../kernel/tkernel/messagebuf.c **** 
 219:../kernel/tkernel/messagebuf.c **** 	mbfcb = get_mbfcb(mbfid);
 718                             		.loc 4 219 10 is_stmt 1
 719 041d ED A5 04                		mov.L	16[r10], r5
 720 0420 60 15                   		sub	#1, r5
 721                             		.loc 4 219 8
 722 0422 75 15 34                		mul	#52, r5
 723 0425 70 55 00 00 00 00       		add	#_knl_mbfcb_table, r5
 724 042b E7 A5 02                		mov.L	r5, 8[r10]
 725                             	.LBB3:
 220:../kernel/tkernel/messagebuf.c **** 
 221:../kernel/tkernel/messagebuf.c **** 	BEGIN_CRITICAL_SECTION;
 726                             		.loc 4 221 2
 727 042e 05 00 00 00             		bsr	_disint
 728 0432 E7 A1 03                		mov.L	r1, 12[r10]
 222:../kernel/tkernel/messagebuf.c **** 	if ( mbfcb->mbfid == 0 ) {
 729                             		.loc 4 222 12
 730 0435 ED A5 02                		mov.L	8[r10], r5
 731 0438 A8 D5                   		mov.L	8[r5], r5
 732                             		.loc 4 222 5
 733 043a 61 05                   		cmp	#0, r5
 734 043c 1F                      		bne	.L45
 223:../kernel/tkernel/messagebuf.c **** 		ercd = E_NOEXS;
 735                             		.loc 4 223 8
 736 043d F9 A6 01 D6             		mov.L	#-42, 4[r10]
 737 0441 2E 32                   		bra	.L46
 738                             	.L45:
 224:../kernel/tkernel/messagebuf.c **** 	} else {
 225:../kernel/tkernel/messagebuf.c **** 		msgbuf = mbfcb->buffer;
 739                             		.loc 4 225 10
 740 0443 ED A5 02                		mov.L	8[r10], r5
 741 0446 AB 55                   		mov.L	48[r5], r5
 742 0448 E3 A5                   		mov.L	r5, [r10]
 226:../kernel/tkernel/messagebuf.c **** 
 227:../kernel/tkernel/messagebuf.c **** 		/* Release wait state of task (E_DLT) */
 228:../kernel/tkernel/messagebuf.c **** 		knl_wait_delete(&mbfcb->recv_queue);
 743                             		.loc 4 228 3
 744 044a ED A5 02                		mov.L	8[r10], r5
 745 044d 71 55 14                		add	#20, r5
 746 0450 EF 51                   		mov.L	r5, r1
 747 0452 05 00 00 00             		bsr	_knl_wait_delete
 229:../kernel/tkernel/messagebuf.c **** 		knl_wait_delete(&mbfcb->send_queue);
 748                             		.loc 4 229 3
 749 0456 ED A5 02                		mov.L	8[r10], r5
 750 0459 EF 51                   		mov.L	r5, r1
 751 045b 05 00 00 00             		bsr	_knl_wait_delete
 230:../kernel/tkernel/messagebuf.c **** 
 231:../kernel/tkernel/messagebuf.c **** 		/* Return to FreeQue */
 232:../kernel/tkernel/messagebuf.c **** 		QueInsert(&mbfcb->send_queue, &knl_free_mbfcb);
 752                             		.loc 4 232 3
 753 045f ED A5 02                		mov.L	8[r10], r5
 754 0462 FB 22 00 00 00 00       		mov.L	#_knl_free_mbfcb, r2
 755 0468 EF 51                   		mov.L	r5, r1
 756 046a 39 CA FB                		bsr	_QueInsert
 233:../kernel/tkernel/messagebuf.c **** 		mbfcb->mbfid = 0;
 757                             		.loc 4 233 16
 758 046d ED A5 02                		mov.L	8[r10], r5
 759 0470 3E 52 00                		mov.L	#0, 8[r5]
 760                             	.L46:
 234:../kernel/tkernel/messagebuf.c **** 	}
 235:../kernel/tkernel/messagebuf.c **** 	END_CRITICAL_SECTION;
 761                             		.loc 4 235 2
 762 0473 ED A5 03                		mov.L	12[r10], r5
 763 0476 61 F5                   		cmp	#15, r5
 764 0478 20 2E                   		beq	.L47
 765                             		.loc 4 235 2 is_stmt 0 discriminator 1
 766 047a FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 767 0480 EC 54                   		mov.L	[r5], r4
 768 0482 FB 52 00 00 00 00       		mov.L	#_knl_schedtsk, r5
 769 0488 EC 55                   		mov.L	[r5], r5
 770 048a 47 54                   		cmp	r5, r4
 771 048c 20 1A                   		beq	.L47
 772                             		.loc 4 235 2 discriminator 3
 773 048e 39 0F FC                		bsr	_knl_isTaskIndependent
 774 0491 EF 15                   		mov.L	r1, r5
 775 0493 61 05                   		cmp	#0, r5
 776 0495 21 11                   		bne	.L47
 777                             		.loc 4 235 2 discriminator 5
 778 0497 FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 779 049d EC 55                   		mov.L	[r5], r5
 780 049f 61 05                   		cmp	#0, r5
 781 04a1 1D                      		bne	.L47
 782                             		.loc 4 235 2 discriminator 7
 783 04a2 05 00 00 00             		bsr	_knl_dispatch
 784                             		.balign 8,3,1
 785                             	.L47:
 786                             		.loc 4 235 2 discriminator 9
 787 04a6 ED A1 03                		mov.L	12[r10], r1
 788 04a9 05 00 00 00             		bsr	_setint
 789                             	.LBE3:
 236:../kernel/tkernel/messagebuf.c **** 
 237:../kernel/tkernel/messagebuf.c **** #if USE_IMALLOC
 238:../kernel/tkernel/messagebuf.c **** 	if ( msgbuf != NULL && ((mbfcb->mbfatr & TA_USERBUF) == 0 ) ) {
 790                             		.loc 4 238 5 is_stmt 1 discriminator 9
 791 04ad EC A5                   		mov.L	[r10], r5
 792 04af 61 05                   		cmp	#0, r5
 793 04b1 20 13                   		beq	.L48
 794                             		.loc 4 238 32 discriminator 1
 795 04b3 ED A5 02                		mov.L	8[r10], r5
 796 04b6 A9 55                   		mov.L	16[r5], r5
 797                             		.loc 4 238 41 discriminator 1
 798 04b8 75 25 20                		and	#32, r5
 799                             		.loc 4 238 22 discriminator 1
 800 04bb 61 05                   		cmp	#0, r5
 801 04bd 1F                      		bne	.L48
 239:../kernel/tkernel/messagebuf.c **** 		knl_Ifree(msgbuf);
 802                             		.loc 4 239 3
 803 04be EC A1                   		mov.L	[r10], r1
 804 04c0 05 00 00 00             		bsr	_knl_Ifree
 805                             	.L48:
 240:../kernel/tkernel/messagebuf.c **** 	}
 241:../kernel/tkernel/messagebuf.c **** #endif
 242:../kernel/tkernel/messagebuf.c **** 
 243:../kernel/tkernel/messagebuf.c **** 	return ercd;
 806                             		.loc 4 243 9
 807 04c4 ED A5 01                		mov.L	4[r10], r5
 808                             	.L44:
 244:../kernel/tkernel/messagebuf.c **** }
 809                             		.loc 4 244 1
 810 04c7 EF 51                   		mov.L	r5, r1
 811 04c9 3F AA 06                		rtsd	#24, r10-r10
 812                             	.LFE40:
 815                             	_knl_mbf_chg_pri:
 816                             	.LFB41:
 245:../kernel/tkernel/messagebuf.c **** #endif /* USE_FUNC_TK_DEL_MBF */
 246:../kernel/tkernel/messagebuf.c **** 
 247:../kernel/tkernel/messagebuf.c **** /*
 248:../kernel/tkernel/messagebuf.c ****  * Processing if the priority of wait task changes
 249:../kernel/tkernel/messagebuf.c ****  */
 250:../kernel/tkernel/messagebuf.c **** LOCAL void knl_mbf_chg_pri( TCB *tcb, INT oldpri )
 251:../kernel/tkernel/messagebuf.c **** {
 817                             		.loc 4 251 1
 818 04cc 7E AA                   		push.l	r10
 819                             	.LCFI24:
 820 04ce 71 0A F4                		add	#-12, r0, r10
 821                             	.LCFI25:
 822 04d1 EF A0                   		mov.L	r10, r0
 823 04d3 E7 A1 01                		mov.L	r1, 4[r10]
 824 04d6 E7 A2 02                		mov.L	r2, 8[r10]
 252:../kernel/tkernel/messagebuf.c **** 	MBFCB	*mbfcb;
 253:../kernel/tkernel/messagebuf.c **** 
 254:../kernel/tkernel/messagebuf.c **** 	mbfcb = get_mbfcb(tcb->wid);
 825                             		.loc 4 254 10
 826 04d9 ED A5 01                		mov.L	4[r10], r5
 827 04dc AB 55                   		mov.L	48[r5], r5
 828 04de 60 15                   		sub	#1, r5
 829                             		.loc 4 254 8
 830 04e0 75 15 34                		mul	#52, r5
 831 04e3 70 55 00 00 00 00       		add	#_knl_mbfcb_table, r5
 832 04e9 E3 A5                   		mov.L	r5, [r10]
 255:../kernel/tkernel/messagebuf.c **** 	if ( oldpri >= 0 ) {
 833                             		.loc 4 255 5
 834 04eb ED A5 02                		mov.L	8[r10], r5
 835 04ee 61 05                   		cmp	#0, r5
 836 04f0 29 0B                   		blt	.L50
 256:../kernel/tkernel/messagebuf.c **** 		/* Reorder wait queue */
 257:../kernel/tkernel/messagebuf.c **** 		knl_gcb_change_priority((GCB*)mbfcb, tcb);
 837                             		.loc 4 257 3
 838 04f2 ED A2 01                		mov.L	4[r10], r2
 839 04f5 EC A1                   		mov.L	[r10], r1
 840 04f7 05 00 00 00             		bsr	_knl_gcb_change_priority
 841                             	.L50:
 258:../kernel/tkernel/messagebuf.c **** 	}
 259:../kernel/tkernel/messagebuf.c **** 
 260:../kernel/tkernel/messagebuf.c **** 	/* If the new head task in a send wait queue is able to sent, 
 261:../kernel/tkernel/messagebuf.c **** 	   send its message */
 262:../kernel/tkernel/messagebuf.c **** 	knl_mbf_wakeup(mbfcb);
 842                             		.loc 4 262 2
 843 04fb EC A1                   		mov.L	[r10], r1
 844 04fd 39 16 FD                		bsr	_knl_mbf_wakeup
 263:../kernel/tkernel/messagebuf.c **** }
 845                             		.loc 4 263 1
 846 0500 03                      		nop
 847 0501 3F AA 04                		rtsd	#16, r10-r10
 848                             	.LFE41:
 851                             	_knl_mbf_rel_wai:
 852                             	.LFB42:
 264:../kernel/tkernel/messagebuf.c **** 
 265:../kernel/tkernel/messagebuf.c **** /*
 266:../kernel/tkernel/messagebuf.c ****  * Processing if the wait task is released
 267:../kernel/tkernel/messagebuf.c ****  */
 268:../kernel/tkernel/messagebuf.c **** LOCAL void knl_mbf_rel_wai( TCB *tcb )
 269:../kernel/tkernel/messagebuf.c **** {
 853                             		.loc 4 269 1
 854 0504 7E AA                   		push.l	r10
 855                             	.LCFI26:
 856 0506 71 0A FC                		add	#-4, r0, r10
 857                             	.LCFI27:
 858 0509 EF A0                   		mov.L	r10, r0
 859 050b E3 A1                   		mov.L	r1, [r10]
 270:../kernel/tkernel/messagebuf.c **** 	knl_mbf_chg_pri(tcb, -1);
 860                             		.loc 4 270 2
 861 050d FB 26 FF                		mov.L	#-1, r2
 862 0510 EC A1                   		mov.L	[r10], r1
 863 0512 39 BA FF                		bsr	_knl_mbf_chg_pri
 271:../kernel/tkernel/messagebuf.c **** }
 864                             		.loc 4 271 1
 865 0515 03                      		nop
 866 0516 3F AA 02                		rtsd	#8, r10-r10
 867                             	.LFE42:
 869                             		.section C,"a",@progbits
 870                             		.p2align 2
 871                             		.balign 4
 874                             	_knl_wspec_smbf_tfifo:
 875 0000 00 01 00 00             		.long	0x100
 876 0004 00 00 00 00             		.long	0
 877 0008 04 05 00 00             		.long	_knl_mbf_rel_wai
 878                             		.balign 4
 881                             	_knl_wspec_smbf_tpri:
 882 000c 00 01 00 00             		.long	0x100
 883 0010 CC 04 00 00             		.long	_knl_mbf_chg_pri
 884 0014 04 05 00 00             		.long	_knl_mbf_rel_wai
 885                             		.section P,"ax"
 886                             		.global	_tk_snd_mbf
 888                             	_tk_snd_mbf:
 889                             	.LFB43:
 272:../kernel/tkernel/messagebuf.c **** 
 273:../kernel/tkernel/messagebuf.c **** /*
 274:../kernel/tkernel/messagebuf.c ****  * Definition of message buffer wait specification
 275:../kernel/tkernel/messagebuf.c ****  */
 276:../kernel/tkernel/messagebuf.c **** LOCAL CONST WSPEC knl_wspec_smbf_tfifo = { TTW_SMBF, NULL,	knl_mbf_rel_wai };
 277:../kernel/tkernel/messagebuf.c **** LOCAL CONST WSPEC knl_wspec_smbf_tpri  = { TTW_SMBF, knl_mbf_chg_pri,	knl_mbf_rel_wai };
 278:../kernel/tkernel/messagebuf.c **** 
 279:../kernel/tkernel/messagebuf.c **** /*
 280:../kernel/tkernel/messagebuf.c ****  * Send to message buffer
 281:../kernel/tkernel/messagebuf.c ****  */
 282:../kernel/tkernel/messagebuf.c **** SYSCALL ER tk_snd_mbf( ID mbfid, CONST void *msg, INT msgsz, TMO tmout )
 283:../kernel/tkernel/messagebuf.c **** {
 890                             		.loc 4 283 1
 891 0519 7E AA                   		push.l	r10
 892                             	.LCFI28:
 893 051b 71 0A E0                		add	#-32, r0, r10
 894                             	.LCFI29:
 895 051e EF A0                   		mov.L	r10, r0
 896 0520 E7 A1 04                		mov.L	r1, 16[r10]
 897 0523 E7 A2 05                		mov.L	r2, 20[r10]
 898 0526 E7 A3 06                		mov.L	r3, 24[r10]
 899 0529 E7 A4 07                		mov.L	r4, 28[r10]
 284:../kernel/tkernel/messagebuf.c **** 	MBFCB	*mbfcb;
 285:../kernel/tkernel/messagebuf.c **** 	TCB	*tcb;
 286:../kernel/tkernel/messagebuf.c **** 	ER	ercd = E_OK;
 900                             		.loc 4 286 5
 901 052c F9 A6 03 00             		mov.L	#0, 12[r10]
 287:../kernel/tkernel/messagebuf.c **** 
 288:../kernel/tkernel/messagebuf.c **** 	CHECK_MBFID(mbfid);
 902                             		.loc 4 288 2
 903 0530 ED A5 04                		mov.L	16[r10], r5
 904 0533 61 05                   		cmp	#0, r5
 905 0535 2B 09                   		ble	.L53
 906                             		.loc 4 288 2 is_stmt 0 discriminator 2
 907 0537 ED A5 04                		mov.L	16[r10], r5
 908 053a 61 85                   		cmp	#8, r5
 909 053c 2B 08                   		ble	.L54
 910                             	.L53:
 911                             		.loc 4 288 2 discriminator 3
 912 053e FB 56 EE                		mov.L	#-18, r5
 913 0541 38 B2 01                		bra	.L69
 914                             	.L54:
 289:../kernel/tkernel/messagebuf.c **** 	CHECK_PAR(msgsz > 0);
 915                             		.loc 4 289 2 is_stmt 1
 916 0544 ED A5 06                		mov.L	24[r10], r5
 917 0547 61 05                   		cmp	#0, r5
 918 0549 2A 08                   		bgt	.L56
 919                             		.loc 4 289 2 is_stmt 0 discriminator 1
 920 054b FB 56 EF                		mov.L	#-17, r5
 921 054e 38 A5 01                		bra	.L69
 922                             	.L56:
 290:../kernel/tkernel/messagebuf.c **** 	CHECK_TMOUT(tmout);
 923                             		.loc 4 290 2 is_stmt 1
 924 0551 ED A5 07                		mov.L	28[r10], r5
 925 0554 75 05 FF                		cmp	#-1, r5
 926 0557 28 08                   		bge	.L57
 927                             		.loc 4 290 2 is_stmt 0 discriminator 1
 928 0559 FB 56 EF                		mov.L	#-17, r5
 929 055c 38 97 01                		bra	.L69
 930                             	.L57:
 291:../kernel/tkernel/messagebuf.c **** 	CHECK_DISPATCH_POL(tmout);
 931                             		.loc 4 291 2 is_stmt 1
 932 055f ED A5 07                		mov.L	28[r10], r5
 933 0562 61 05                   		cmp	#0, r5
 934 0564 20 33                   		beq	.L58
 935                             		.loc 4 291 2 is_stmt 0 discriminator 1
 936 0566 FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 937 056c EC 55                   		mov.L	[r5], r5
 938 056e 61 05                   		cmp	#0, r5
 939 0570 21 21                   		bne	.L59
 940                             		.loc 4 291 2 discriminator 3
 941 0572 39 2B FB                		bsr	_knl_isTaskIndependent
 942 0575 EF 15                   		mov.L	r1, r5
 943 0577 61 05                   		cmp	#0, r5
 944 0579 21 18                   		bne	.L59
 945                             		.loc 4 291 2 discriminator 5
 946 057b FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 947 0581 EC 55                   		mov.L	[r5], r5
 948 0583 61 05                   		cmp	#0, r5
 949 0585 20 0C                   		beq	.L59
 950                             		.loc 4 291 2 discriminator 7
 951 0587 05 00 00 00             		bsr	_GetCpuIntLevel
 952 058b EF 15                   		mov.L	r1, r5
 953 058d 75 55 10                		cmp	#16, r5
 954 0590 1F                      		bne	.L58
 955                             		.balign 8,3,2
 956                             	.L59:
 957                             		.loc 4 291 2 discriminator 8
 958 0591 FB 56 E7                		mov.L	#-25, r5
 959 0594 38 5F 01                		bra	.L69
 960                             	.L58:
 292:../kernel/tkernel/messagebuf.c **** 
 293:../kernel/tkernel/messagebuf.c **** 	mbfcb = get_mbfcb(mbfid);
 961                             		.loc 4 293 10 is_stmt 1
 962 0597 ED A5 04                		mov.L	16[r10], r5
 963 059a 60 15                   		sub	#1, r5
 964                             		.loc 4 293 8
 965 059c 75 15 34                		mul	#52, r5
 966 059f 70 55 00 00 00 00       		add	#_knl_mbfcb_table, r5
 967 05a5 E3 A5                   		mov.L	r5, [r10]
 968                             	.LBB4:
 294:../kernel/tkernel/messagebuf.c **** 
 295:../kernel/tkernel/messagebuf.c **** 	BEGIN_CRITICAL_SECTION;
 969                             		.loc 4 295 2
 970 05a7 05 00 00 00             		bsr	_disint
 971 05ab E7 A1 01                		mov.L	r1, 4[r10]
 296:../kernel/tkernel/messagebuf.c **** 	if ( mbfcb->mbfid == 0 ) {
 972                             		.loc 4 296 12
 973 05ae EC A5                   		mov.L	[r10], r5
 974 05b0 A8 D5                   		mov.L	8[r5], r5
 975                             		.loc 4 296 5
 976 05b2 61 05                   		cmp	#0, r5
 977 05b4 18                      		bne	.L60
 297:../kernel/tkernel/messagebuf.c **** 		ercd = E_NOEXS;
 978                             		.loc 4 297 8
 979 05b5 F9 A6 03 D6             		mov.L	#-42, 12[r10]
 298:../kernel/tkernel/messagebuf.c **** 		goto error_exit;
 980                             		.loc 4 298 3
 981 05b9 38 FD 00                		bra	.L61
 982                             	.L60:
 299:../kernel/tkernel/messagebuf.c **** 	}
 300:../kernel/tkernel/messagebuf.c **** #if CHK_PAR
 301:../kernel/tkernel/messagebuf.c **** 	if ( msgsz > mbfcb->maxmsz ) {
 983                             		.loc 4 301 20
 984 05bc EC A5                   		mov.L	[r10], r5
 985 05be AA 55                   		mov.L	32[r5], r5
 986                             		.loc 4 301 5
 987 05c0 ED A4 06                		mov.L	24[r10], r4
 988 05c3 47 54                   		cmp	r5, r4
 989 05c5 2B 09                   		ble	.L62
 302:../kernel/tkernel/messagebuf.c **** 		ercd = E_PAR;
 990                             		.loc 4 302 8
 991 05c7 F9 A6 03 EF             		mov.L	#-17, 12[r10]
 303:../kernel/tkernel/messagebuf.c **** 		goto error_exit;
 992                             		.loc 4 303 3
 993 05cb 38 EB 00                		bra	.L61
 994                             	.L62:
 304:../kernel/tkernel/messagebuf.c **** 	}
 305:../kernel/tkernel/messagebuf.c **** #endif
 306:../kernel/tkernel/messagebuf.c **** 
 307:../kernel/tkernel/messagebuf.c **** 	if ( !isQueEmpty(&mbfcb->recv_queue) ) {
 995                             		.loc 4 307 8
 996 05ce EC A5                   		mov.L	[r10], r5
 997 05d0 71 55 14                		add	#20, r5
 998 05d3 EF 51                   		mov.L	r5, r1
 999 05d5 39 44 FA                		bsr	_isQueEmpty
 1000 05d8 EF 15                   		mov.L	r1, r5
 1001                             		.loc 4 307 5
 1002 05da 61 05                   		cmp	#0, r5
 1003 05dc 21 2E                   		bne	.L63
 308:../kernel/tkernel/messagebuf.c **** 		/* Send directly to the receive wait task */
 309:../kernel/tkernel/messagebuf.c **** 		tcb = (TCB*)mbfcb->recv_queue.next;
 1004                             		.loc 4 309 7
 1005 05de EC A5                   		mov.L	[r10], r5
 1006 05e0 A9 5D                   		mov.L	20[r5], r5
 1007 05e2 E7 A5 02                		mov.L	r5, 8[r10]
 310:../kernel/tkernel/messagebuf.c **** 		knl_memcpy(tcb->winfo.rmbf.msg, msg, (SZ)msgsz);
 1008                             		.loc 4 310 3
 1009 05e5 ED A5 02                		mov.L	8[r10], r5
 1010 05e8 AC 55                   		mov.L	64[r5], r5
 1011 05ea ED A3 06                		mov.L	24[r10], r3
 1012 05ed ED A2 05                		mov.L	20[r10], r2
 1013 05f0 EF 51                   		mov.L	r5, r1
 1014 05f2 05 00 00 00             		bsr	_knl_memcpy
 311:../kernel/tkernel/messagebuf.c **** 		*tcb->winfo.rmbf.p_msgsz = msgsz;
 1015                             		.loc 4 311 19
 1016 05f6 ED A5 02                		mov.L	8[r10], r5
 1017 05f9 AC 5D                   		mov.L	68[r5], r5
 1018                             		.loc 4 311 28
 1019 05fb ED A4 06                		mov.L	24[r10], r4
 1020 05fe E3 54                   		mov.L	r4, [r5]
 312:../kernel/tkernel/messagebuf.c **** 		knl_wait_release_ok(tcb);
 1021                             		.loc 4 312 3
 1022 0600 ED A1 02                		mov.L	8[r10], r1
 1023 0603 05 00 00 00             		bsr	_knl_wait_release_ok
 1024 0607 38 AF 00                		bra	.L61
 1025                             	.L63:
 313:../kernel/tkernel/messagebuf.c **** 
 314:../kernel/tkernel/messagebuf.c **** 	} else if ( (in_indp() || knl_gcb_top_of_wait_queue((GCB*)mbfcb, knl_ctxtsk) == knl_ctxtsk)
 1026                             		.loc 4 314 15
 1027 060a 39 93 FA                		bsr	_knl_isTaskIndependent
 1028 060d EF 15                   		mov.L	r1, r5
 1029                             		.loc 4 314 12
 1030 060f 61 05                   		cmp	#0, r5
 1031 0611 21 2C                   		bne	.L64
 1032                             		.loc 4 314 15 discriminator 1
 1033 0613 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1034 0619 EC 55                   		mov.L	[r5], r5
 1035 061b 61 05                   		cmp	#0, r5
 1036 061d 20 20                   		beq	.L64
 1037                             		.loc 4 314 28 discriminator 2
 1038 061f FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1039 0625 EC 55                   		mov.L	[r5], r5
 1040 0627 EF 52                   		mov.L	r5, r2
 1041 0629 EC A1                   		mov.L	[r10], r1
 1042 062b 05 00 00 00             		bsr	_knl_gcb_top_of_wait_queue
 1043 062f EF 14                   		mov.L	r1, r4
 1044                             		.loc 4 314 79 discriminator 2
 1045 0631 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1046 0637 EC 55                   		mov.L	[r5], r5
 1047                             		.loc 4 314 25 discriminator 2
 1048 0639 47 54                   		cmp	r5, r4
 1049 063b 21 1D                   		bne	.L65
 1050                             	.L64:
 315:../kernel/tkernel/messagebuf.c **** 		  &&(knl_mbf_free(mbfcb, msgsz)) ) {
 1051                             		.loc 4 315 8
 1052 063d ED A2 06                		mov.L	24[r10], r2
 1053 0640 EC A1                   		mov.L	[r10], r1
 1054 0642 39 73 FA                		bsr	_knl_mbf_free
 1055 0645 EF 15                   		mov.L	r1, r5
 1056                             		.loc 4 315 5
 1057 0647 61 05                   		cmp	#0, r5
 1058 0649 20 0F                   		beq	.L65
 316:../kernel/tkernel/messagebuf.c **** 		/* Store the message to message buffer */
 317:../kernel/tkernel/messagebuf.c **** 		knl_msg_to_mbf(mbfcb, msg, msgsz);
 1059                             		.loc 4 317 3
 1060 064b ED A3 06                		mov.L	24[r10], r3
 1061 064e ED A2 05                		mov.L	20[r10], r2
 1062 0651 EC A1                   		mov.L	[r10], r1
 1063 0653 39 E8 FA                		bsr	_knl_msg_to_mbf
 1064 0656 2E 60                   		bra	.L61
 1065                             	.L65:
 318:../kernel/tkernel/messagebuf.c **** 
 319:../kernel/tkernel/messagebuf.c **** 	} else {
 320:../kernel/tkernel/messagebuf.c **** 		ercd = E_TMOUT;
 1066                             		.loc 4 320 8
 1067 0658 F9 A6 03 CE             		mov.L	#-50, 12[r10]
 321:../kernel/tkernel/messagebuf.c **** 		if ( tmout != TMO_POL ) {
 1068                             		.loc 4 321 6
 1069 065c ED A5 07                		mov.L	28[r10], r5
 1070 065f 61 05                   		cmp	#0, r5
 1071 0661 20 54                   		beq	.L70
 322:../kernel/tkernel/messagebuf.c **** 			/* Ready for send wait */
 323:../kernel/tkernel/messagebuf.c **** 			knl_ctxtsk->wspec = ( (mbfcb->mbfatr & TA_TPRI) != 0 )?
 1072                             		.loc 4 323 32
 1073 0663 EC A5                   		mov.L	[r10], r5
 1074 0665 A9 55                   		mov.L	16[r5], r5
 1075                             		.loc 4 323 41
 1076 0667 64 15                   		and	#1, r5
 324:../kernel/tkernel/messagebuf.c **** 					&knl_wspec_smbf_tpri: &knl_wspec_smbf_tfifo;
 1077                             		.loc 4 324 26
 1078 0669 61 05                   		cmp	#0, r5
 1079 066b 10                      		beq	.L66
 1080                             		.loc 4 324 26 is_stmt 0 discriminator 1
 1081 066c FB 42 0C 00 00 00       		mov.L	#_knl_wspec_smbf_tpri, r4
 1082 0672 0F                      		bra	.L67
 1083                             	.L66:
 1084                             		.loc 4 324 26 discriminator 2
 1085 0673 FB 42 00 00 00 00       		mov.L	#_knl_wspec_smbf_tfifo, r4
 1086                             	.L67:
 323:../kernel/tkernel/messagebuf.c **** 					&knl_wspec_smbf_tpri: &knl_wspec_smbf_tfifo;
 1087                             		.loc 4 323 14 is_stmt 1
 1088 0679 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1089 067f EC 55                   		mov.L	[r5], r5
 323:../kernel/tkernel/messagebuf.c **** 					&knl_wspec_smbf_tpri: &knl_wspec_smbf_tfifo;
 1090                             		.loc 4 323 22
 1091 0681 A2 DC                   		mov.L	r4, 44[r5]
 325:../kernel/tkernel/messagebuf.c **** 			knl_ctxtsk->wercd = &ercd;
 1092                             		.loc 4 325 14
 1093 0683 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1094 0689 EC 55                   		mov.L	[r5], r5
 1095                             		.loc 4 325 22
 1096 068b 71 A4 0C                		add	#12, r10, r4
 1097 068e A3 DC                   		mov.L	r4, 60[r5]
 326:../kernel/tkernel/messagebuf.c **** 			knl_ctxtsk->winfo.smbf.msg = msg;
 1098                             		.loc 4 326 14
 1099 0690 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1100 0696 EC 55                   		mov.L	[r5], r5
 1101                             		.loc 4 326 31
 1102 0698 ED A4 05                		mov.L	20[r10], r4
 1103 069b A4 54                   		mov.L	r4, 64[r5]
 327:../kernel/tkernel/messagebuf.c **** 			knl_ctxtsk->winfo.smbf.msgsz = msgsz;
 1104                             		.loc 4 327 14
 1105 069d FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1106 06a3 EC 55                   		mov.L	[r5], r5
 1107                             		.loc 4 327 33
 1108 06a5 ED A4 06                		mov.L	24[r10], r4
 1109 06a8 A4 5C                   		mov.L	r4, 68[r5]
 328:../kernel/tkernel/messagebuf.c **** 			knl_gcb_make_wait((GCB*)mbfcb, tmout);
 1110                             		.loc 4 328 4
 1111 06aa ED A2 07                		mov.L	28[r10], r2
 1112 06ad EC A1                   		mov.L	[r10], r1
 1113 06af 05 00 00 00             		bsr	_knl_gcb_make_wait
 1114 06b3 2E 03                   		bra	.L61
 1115                             	.L70:
 329:../kernel/tkernel/messagebuf.c **** 		}
 330:../kernel/tkernel/messagebuf.c **** 	}
 331:../kernel/tkernel/messagebuf.c **** 
 332:../kernel/tkernel/messagebuf.c ****     error_exit:
 1116                             		.loc 4 332 5
 1117 06b5 03                      		nop
 1118                             		.balign 8,3,1
 1119                             	.L61:
 333:../kernel/tkernel/messagebuf.c **** 	END_CRITICAL_SECTION;
 1120                             		.loc 4 333 2
 1121 06b6 ED A5 01                		mov.L	4[r10], r5
 1122 06b9 61 F5                   		cmp	#15, r5
 1123 06bb 20 2E                   		beq	.L68
 1124                             		.loc 4 333 2 is_stmt 0 discriminator 1
 1125 06bd FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1126 06c3 EC 54                   		mov.L	[r5], r4
 1127 06c5 FB 52 00 00 00 00       		mov.L	#_knl_schedtsk, r5
 1128 06cb EC 55                   		mov.L	[r5], r5
 1129 06cd 47 54                   		cmp	r5, r4
 1130 06cf 20 1A                   		beq	.L68
 1131                             		.loc 4 333 2 discriminator 3
 1132 06d1 39 CC F9                		bsr	_knl_isTaskIndependent
 1133 06d4 EF 15                   		mov.L	r1, r5
 1134 06d6 61 05                   		cmp	#0, r5
 1135 06d8 21 11                   		bne	.L68
 1136                             		.loc 4 333 2 discriminator 5
 1137 06da FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 1138 06e0 EC 55                   		mov.L	[r5], r5
 1139 06e2 61 05                   		cmp	#0, r5
 1140 06e4 1D                      		bne	.L68
 1141                             		.loc 4 333 2 discriminator 7
 1142 06e5 05 00 00 00             		bsr	_knl_dispatch
 1143                             		.balign 8,3,1
 1144                             	.L68:
 1145                             		.loc 4 333 2 discriminator 9
 1146 06e9 ED A1 01                		mov.L	4[r10], r1
 1147 06ec 05 00 00 00             		bsr	_setint
 1148                             	.LBE4:
 334:../kernel/tkernel/messagebuf.c **** 
 335:../kernel/tkernel/messagebuf.c **** 	return ercd;
 1149                             		.loc 4 335 9 is_stmt 1 discriminator 9
 1150 06f0 ED A5 03                		mov.L	12[r10], r5
 1151                             		.balign 8,3,1
 1152                             	.L69:
 336:../kernel/tkernel/messagebuf.c **** }
 1153                             		.loc 4 336 1 discriminator 1
 1154 06f3 EF 51                   		mov.L	r5, r1
 1155 06f5 3F AA 09                		rtsd	#36, r10-r10
 1156                             	.LFE43:
 1158                             		.section C,"a",@progbits
 1159                             		.p2align 2
 1160                             		.balign 4
 1163                             	_knl_wspec_rmbf:
 1164 0018 00 02 00 00             		.long	0x200
 1165 001c 00 00 00 00             		.long	0
 1166 0020 00 00 00 00             		.long	0
 1167                             		.section P,"ax"
 1169                             	_knl_mbf_to_msg:
 1170                             	.LFB44:
 337:../kernel/tkernel/messagebuf.c **** 
 338:../kernel/tkernel/messagebuf.c **** 
 339:../kernel/tkernel/messagebuf.c **** LOCAL CONST WSPEC knl_wspec_rmbf       = { TTW_RMBF, NULL,	NULL	    };
 340:../kernel/tkernel/messagebuf.c **** 
 341:../kernel/tkernel/messagebuf.c **** /*
 342:../kernel/tkernel/messagebuf.c ****  * Get a message from message buffer.
 343:../kernel/tkernel/messagebuf.c ****  * Return the message size.
 344:../kernel/tkernel/messagebuf.c ****  */
 345:../kernel/tkernel/messagebuf.c **** LOCAL INT knl_mbf_to_msg( MBFCB *mbfcb, void *msg )
 346:../kernel/tkernel/messagebuf.c **** {
 1171                             		.loc 4 346 1
 1172 06f8 7E AA                   		push.l	r10
 1173                             	.LCFI30:
 1174 06fa 71 0A E4                		add	#-28, r0, r10
 1175                             	.LCFI31:
 1176 06fd EF A0                   		mov.L	r10, r0
 1177 06ff E7 A1 05                		mov.L	r1, 20[r10]
 1178 0702 E7 A2 06                		mov.L	r2, 24[r10]
 347:../kernel/tkernel/messagebuf.c **** 	W	head = mbfcb->head;
 1179                             		.loc 4 347 4
 1180 0705 ED A5 05                		mov.L	20[r10], r5
 1181 0708 AA D5                   		mov.L	40[r5], r5
 1182 070a E3 A5                   		mov.L	r5, [r10]
 348:../kernel/tkernel/messagebuf.c **** 	VB	*buffer = mbfcb->buffer;
 1183                             		.loc 4 348 6
 1184 070c ED A5 05                		mov.L	20[r10], r5
 1185 070f AB 55                   		mov.L	48[r5], r5
 1186 0711 E7 A5 02                		mov.L	r5, 8[r10]
 349:../kernel/tkernel/messagebuf.c **** 	INT	msgsz, actsz;
 350:../kernel/tkernel/messagebuf.c **** 	W	remsz;
 351:../kernel/tkernel/messagebuf.c **** 
 352:../kernel/tkernel/messagebuf.c **** 	actsz = msgsz = *(HEADER*)&buffer[head];
 1187                             		.loc 4 352 19
 1188 0714 EC A5                   		mov.L	[r10], r5
 1189                             		.loc 4 352 28
 1190 0716 ED A4 02                		mov.L	8[r10], r4
 1191 0719 4B 45                   		add	r4, r5
 1192                             		.loc 4 352 16
 1193 071b EC 55                   		mov.L	[r5], r5
 1194 071d E7 A5 01                		mov.L	r5, 4[r10]
 1195                             		.loc 4 352 8
 1196 0720 ED A5 01                		mov.L	4[r10], r5
 1197 0723 E7 A5 03                		mov.L	r5, 12[r10]
 353:../kernel/tkernel/messagebuf.c **** 	mbfcb->frbufsz += (W)(HEADERSZ + ROUNDSZ(msgsz));
 1198                             		.loc 4 353 17
 1199 0726 ED A5 05                		mov.L	20[r10], r5
 1200 0729 AA 5D                   		mov.L	36[r5], r5
 1201 072b EF 54                   		mov.L	r5, r4
 1202                             		.loc 4 353 35
 1203 072d ED A5 01                		mov.L	4[r10], r5
 1204 0730 62 35                   		add	#3, r5
 1205 0732 75 25 FC                		and	#-4, r5
 1206                             		.loc 4 353 17
 1207 0735 4B 45                   		add	r4, r5
 1208 0737 62 45                   		add	#4, r5
 1209 0739 EF 54                   		mov.L	r5, r4
 1210 073b ED A5 05                		mov.L	20[r10], r5
 1211 073e A2 5C                   		mov.L	r4, 36[r5]
 354:../kernel/tkernel/messagebuf.c **** 
 355:../kernel/tkernel/messagebuf.c **** 	head += (W)HEADERSZ;
 1212                             		.loc 4 355 7
 1213 0740 EC A5                   		mov.L	[r10], r5
 1214 0742 62 45                   		add	#4, r5
 1215 0744 E3 A5                   		mov.L	r5, [r10]
 356:../kernel/tkernel/messagebuf.c **** 	if ( head >= mbfcb->bufsz ) {
 1216                             		.loc 4 356 20
 1217 0746 ED A5 05                		mov.L	20[r10], r5
 1218 0749 A9 DD                   		mov.L	28[r5], r5
 1219                             		.loc 4 356 5
 1220 074b EC A4                   		mov.L	[r10], r4
 1221 074d 47 54                   		cmp	r5, r4
 1222 074f 29 05                   		blt	.L72
 357:../kernel/tkernel/messagebuf.c **** 		head = 0;
 1223                             		.loc 4 357 8
 1224 0751 F8 A6 00                		mov.L	#0, [r10]
 1225                             	.L72:
 358:../kernel/tkernel/messagebuf.c **** 	}
 359:../kernel/tkernel/messagebuf.c **** 
 360:../kernel/tkernel/messagebuf.c **** 	if ( (remsz = mbfcb->bufsz - head) < (W)msgsz ) {
 1226                             		.loc 4 360 21
 1227 0754 ED A5 05                		mov.L	20[r10], r5
 1228 0757 A9 DC                   		mov.L	28[r5], r4
 1229                             		.loc 4 360 14
 1230 0759 EC A5                   		mov.L	[r10], r5
 1231 075b FF 05 54                		sub	r5, r4, r5
 1232 075e E7 A5 04                		mov.L	r5, 16[r10]
 1233                             		.loc 4 360 5
 1234 0761 ED A4 04                		mov.L	16[r10], r4
 1235 0764 ED A5 01                		mov.L	4[r10], r5
 1236 0767 47 54                   		cmp	r5, r4
 1237 0769 28 2F                   		bge	.L73
 361:../kernel/tkernel/messagebuf.c **** 		knl_memcpy(msg, &buffer[head], (SZ)remsz);
 1238                             		.loc 4 361 3
 1239 076b EC A5                   		mov.L	[r10], r5
 1240                             		.loc 4 361 19
 1241 076d ED A4 02                		mov.L	8[r10], r4
 1242 0770 4B 45                   		add	r4, r5
 1243                             		.loc 4 361 3
 1244 0772 ED A3 04                		mov.L	16[r10], r3
 1245 0775 EF 52                   		mov.L	r5, r2
 1246 0777 ED A1 06                		mov.L	24[r10], r1
 1247 077a 05 00 00 00             		bsr	_knl_memcpy
 362:../kernel/tkernel/messagebuf.c **** 		msg = (VB*)msg + remsz;
 1248                             		.loc 4 362 18
 1249 077e ED A5 04                		mov.L	16[r10], r5
 1250                             		.loc 4 362 7
 1251 0781 ED A4 06                		mov.L	24[r10], r4
 1252 0784 4B 45                   		add	r4, r5
 1253 0786 E7 A5 06                		mov.L	r5, 24[r10]
 363:../kernel/tkernel/messagebuf.c **** 		msgsz -= (INT)remsz;
 1254                             		.loc 4 363 9
 1255 0789 ED A4 01                		mov.L	4[r10], r4
 1256 078c ED A5 04                		mov.L	16[r10], r5
 1257 078f FF 05 54                		sub	r5, r4, r5
 1258 0792 E7 A5 01                		mov.L	r5, 4[r10]
 364:../kernel/tkernel/messagebuf.c **** 		head = 0;
 1259                             		.loc 4 364 8
 1260 0795 F8 A6 00                		mov.L	#0, [r10]
 1261                             	.L73:
 365:../kernel/tkernel/messagebuf.c **** 	}
 366:../kernel/tkernel/messagebuf.c **** 	knl_memcpy(msg, &buffer[head], (SZ)msgsz);
 1262                             		.loc 4 366 2
 1263 0798 EC A5                   		mov.L	[r10], r5
 1264                             		.loc 4 366 18
 1265 079a ED A4 02                		mov.L	8[r10], r4
 1266 079d 4B 45                   		add	r4, r5
 1267                             		.loc 4 366 2
 1268 079f ED A3 01                		mov.L	4[r10], r3
 1269 07a2 EF 52                   		mov.L	r5, r2
 1270 07a4 ED A1 06                		mov.L	24[r10], r1
 1271 07a7 05 00 00 00             		bsr	_knl_memcpy
 367:../kernel/tkernel/messagebuf.c **** 	head += (INT)ROUNDSZ(msgsz);
 1272                             		.loc 4 367 15
 1273 07ab ED A5 01                		mov.L	4[r10], r5
 1274 07ae 62 35                   		add	#3, r5
 1275                             		.loc 4 367 10
 1276 07b0 75 25 FC                		and	#-4, r5
 1277                             		.loc 4 367 7
 1278 07b3 EC A4                   		mov.L	[r10], r4
 1279 07b5 4B 45                   		add	r4, r5
 1280 07b7 E3 A5                   		mov.L	r5, [r10]
 368:../kernel/tkernel/messagebuf.c **** 	if ( head >= mbfcb->bufsz ) {
 1281                             		.loc 4 368 20
 1282 07b9 ED A5 05                		mov.L	20[r10], r5
 1283 07bc A9 DD                   		mov.L	28[r5], r5
 1284                             		.loc 4 368 5
 1285 07be EC A4                   		mov.L	[r10], r4
 1286 07c0 47 54                   		cmp	r5, r4
 1287 07c2 29 05                   		blt	.L74
 369:../kernel/tkernel/messagebuf.c **** 		head = 0;
 1288                             		.loc 4 369 8
 1289 07c4 F8 A6 00                		mov.L	#0, [r10]
 1290                             	.L74:
 370:../kernel/tkernel/messagebuf.c **** 	}
 371:../kernel/tkernel/messagebuf.c **** 
 372:../kernel/tkernel/messagebuf.c **** 	mbfcb->head = head;
 1291                             		.loc 4 372 14
 1292 07c7 ED A5 05                		mov.L	20[r10], r5
 1293 07ca EC A4                   		mov.L	[r10], r4
 1294 07cc A2 D4                   		mov.L	r4, 40[r5]
 373:../kernel/tkernel/messagebuf.c **** 
 374:../kernel/tkernel/messagebuf.c **** 	return actsz;
 1295                             		.loc 4 374 9
 1296 07ce ED A5 03                		mov.L	12[r10], r5
 375:../kernel/tkernel/messagebuf.c **** }
 1297                             		.loc 4 375 1
 1298 07d1 EF 51                   		mov.L	r5, r1
 1299 07d3 3F AA 08                		rtsd	#32, r10-r10
 1300                             	.LFE44:
 1302                             		.global	_tk_rcv_mbf
 1304                             	_tk_rcv_mbf:
 1305                             	.LFB45:
 376:../kernel/tkernel/messagebuf.c **** 
 377:../kernel/tkernel/messagebuf.c **** /*
 378:../kernel/tkernel/messagebuf.c ****  * Receive from message buffer
 379:../kernel/tkernel/messagebuf.c ****  */
 380:../kernel/tkernel/messagebuf.c **** SYSCALL INT tk_rcv_mbf( ID mbfid, void *msg, TMO tmout )
 381:../kernel/tkernel/messagebuf.c **** {
 1306                             		.loc 4 381 1
 1307 07d6 7E AA                   		push.l	r10
 1308                             	.LCFI32:
 1309 07d8 71 0A E0                		add	#-32, r0, r10
 1310                             	.LCFI33:
 1311 07db EF A0                   		mov.L	r10, r0
 1312 07dd E7 A1 05                		mov.L	r1, 20[r10]
 1313 07e0 E7 A2 06                		mov.L	r2, 24[r10]
 1314 07e3 E7 A3 07                		mov.L	r3, 28[r10]
 382:../kernel/tkernel/messagebuf.c **** 	MBFCB	*mbfcb;
 383:../kernel/tkernel/messagebuf.c **** 	TCB	*tcb;
 384:../kernel/tkernel/messagebuf.c **** 	INT	rcvsz;
 385:../kernel/tkernel/messagebuf.c **** 	ER	ercd = E_OK;
 1315                             		.loc 4 385 5
 1316 07e6 F9 A6 04 00             		mov.L	#0, 16[r10]
 386:../kernel/tkernel/messagebuf.c **** 
 387:../kernel/tkernel/messagebuf.c **** 	CHECK_MBFID(mbfid);
 1317                             		.loc 4 387 2
 1318 07ea ED A5 05                		mov.L	20[r10], r5
 1319 07ed 61 05                   		cmp	#0, r5
 1320 07ef 2B 09                   		ble	.L77
 1321                             		.loc 4 387 2 is_stmt 0 discriminator 2
 1322 07f1 ED A5 05                		mov.L	20[r10], r5
 1323 07f4 61 85                   		cmp	#8, r5
 1324 07f6 2B 08                   		ble	.L78
 1325                             	.L77:
 1326                             		.loc 4 387 2 discriminator 3
 1327 07f8 FB 56 EE                		mov.L	#-18, r5
 1328 07fb 38 82 01                		bra	.L90
 1329                             	.L78:
 388:../kernel/tkernel/messagebuf.c **** 	CHECK_TMOUT(tmout);
 1330                             		.loc 4 388 2 is_stmt 1
 1331 07fe ED A5 07                		mov.L	28[r10], r5
 1332 0801 75 05 FF                		cmp	#-1, r5
 1333 0804 28 08                   		bge	.L80
 1334                             		.loc 4 388 2 is_stmt 0 discriminator 1
 1335 0806 FB 56 EF                		mov.L	#-17, r5
 1336 0809 38 74 01                		bra	.L90
 1337                             	.L80:
 389:../kernel/tkernel/messagebuf.c **** 	CHECK_DISPATCH();
 1338                             		.loc 4 389 2 is_stmt 1
 1339 080c FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 1340 0812 EC 55                   		mov.L	[r5], r5
 1341 0814 61 05                   		cmp	#0, r5
 1342 0816 21 22                   		bne	.L81
 1343                             		.loc 4 389 2 is_stmt 0 discriminator 2
 1344 0818 39 85 F8                		bsr	_knl_isTaskIndependent
 1345 081b EF 15                   		mov.L	r1, r5
 1346 081d 61 05                   		cmp	#0, r5
 1347 081f 21 19                   		bne	.L81
 1348                             		.loc 4 389 2 discriminator 4
 1349 0821 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1350 0827 EC 55                   		mov.L	[r5], r5
 1351 0829 61 05                   		cmp	#0, r5
 1352 082b 20 0D                   		beq	.L81
 1353                             		.loc 4 389 2 discriminator 6
 1354 082d 05 00 00 00             		bsr	_GetCpuIntLevel
 1355 0831 EF 15                   		mov.L	r1, r5
 1356 0833 75 55 10                		cmp	#16, r5
 1357 0836 18                      		bne	.L82
 1358 0837 03                      		.balign 8,3,2
 1359                             	.L81:
 1360                             		.loc 4 389 2 discriminator 7
 1361 0838 FB 56 E7                		mov.L	#-25, r5
 1362 083b 38 42 01                		bra	.L90
 1363                             	.L82:
 390:../kernel/tkernel/messagebuf.c **** 
 391:../kernel/tkernel/messagebuf.c **** 	mbfcb = get_mbfcb(mbfid);
 1364                             		.loc 4 391 10 is_stmt 1
 1365 083e ED A5 05                		mov.L	20[r10], r5
 1366 0841 60 15                   		sub	#1, r5
 1367                             		.loc 4 391 8
 1368 0843 75 15 34                		mul	#52, r5
 1369 0846 70 55 00 00 00 00       		add	#_knl_mbfcb_table, r5
 1370 084c E3 A5                   		mov.L	r5, [r10]
 1371                             	.LBB5:
 392:../kernel/tkernel/messagebuf.c **** 
 393:../kernel/tkernel/messagebuf.c **** 	BEGIN_CRITICAL_SECTION;
 1372                             		.loc 4 393 2
 1373 084e 05 00 00 00             		bsr	_disint
 1374 0852 E7 A1 01                		mov.L	r1, 4[r10]
 394:../kernel/tkernel/messagebuf.c **** 	if (mbfcb->mbfid == 0) {
 1375                             		.loc 4 394 11
 1376 0855 EC A5                   		mov.L	[r10], r5
 1377 0857 A8 D5                   		mov.L	8[r5], r5
 1378                             		.loc 4 394 5
 1379 0859 61 05                   		cmp	#0, r5
 1380 085b 18                      		bne	.L83
 395:../kernel/tkernel/messagebuf.c **** 		ercd = E_NOEXS;
 1381                             		.loc 4 395 8
 1382 085c F9 A6 04 D6             		mov.L	#-42, 16[r10]
 396:../kernel/tkernel/messagebuf.c **** 		goto error_exit;
 1383                             		.loc 4 396 3
 1384 0860 38 D4 00                		bra	.L84
 1385                             	.L83:
 397:../kernel/tkernel/messagebuf.c **** 	}
 398:../kernel/tkernel/messagebuf.c **** 
 399:../kernel/tkernel/messagebuf.c **** 	if ( !knl_mbf_empty(mbfcb) ) {
 1386                             		.loc 4 399 8
 1387 0863 EC A1                   		mov.L	[r10], r1
 1388 0865 39 71 F8                		bsr	_knl_mbf_empty
 1389 0868 EF 15                   		mov.L	r1, r5
 1390                             		.loc 4 399 5
 1391 086a 61 05                   		cmp	#0, r5
 1392 086c 21 17                   		bne	.L85
 400:../kernel/tkernel/messagebuf.c **** 		/* Read from message buffer */
 401:../kernel/tkernel/messagebuf.c **** 		rcvsz = knl_mbf_to_msg(mbfcb, msg);
 1393                             		.loc 4 401 11
 1394 086e ED A2 06                		mov.L	24[r10], r2
 1395 0871 EC A1                   		mov.L	[r10], r1
 1396 0873 39 85 FE                		bsr	_knl_mbf_to_msg
 1397 0876 EF 15                   		mov.L	r1, r5
 1398                             		.loc 4 401 9
 1399 0878 E7 A5 03                		mov.L	r5, 12[r10]
 402:../kernel/tkernel/messagebuf.c **** 
 403:../kernel/tkernel/messagebuf.c **** 		/* Accept message from sending task(s) */
 404:../kernel/tkernel/messagebuf.c **** 		knl_mbf_wakeup(mbfcb);
 1400                             		.loc 4 404 3
 1401 087b EC A1                   		mov.L	[r10], r1
 1402 087d 39 96 F9                		bsr	_knl_mbf_wakeup
 1403 0880 38 B4 00                		bra	.L84
 1404                             	.L85:
 405:../kernel/tkernel/messagebuf.c **** 
 406:../kernel/tkernel/messagebuf.c **** 	} else if ( !isQueEmpty(&mbfcb->send_queue) ) {
 1405                             		.loc 4 406 15
 1406 0883 EC A5                   		mov.L	[r10], r5
 1407 0885 EF 51                   		mov.L	r5, r1
 1408 0887 39 92 F7                		bsr	_isQueEmpty
 1409 088a EF 15                   		mov.L	r1, r5
 1410                             		.loc 4 406 12
 1411 088c 61 05                   		cmp	#0, r5
 1412 088e 21 32                   		bne	.L86
 407:../kernel/tkernel/messagebuf.c **** 		/* Receive directly from send wait task */
 408:../kernel/tkernel/messagebuf.c **** 		tcb = (TCB*)mbfcb->send_queue.next;
 1413                             		.loc 4 408 7
 1414 0890 EC A5                   		mov.L	[r10], r5
 1415 0892 EC 55                   		mov.L	[r5], r5
 1416 0894 E7 A5 02                		mov.L	r5, 8[r10]
 409:../kernel/tkernel/messagebuf.c **** 		rcvsz = tcb->winfo.smbf.msgsz;
 1417                             		.loc 4 409 26
 1418 0897 ED A5 02                		mov.L	8[r10], r5
 1419 089a AC 5D                   		mov.L	68[r5], r5
 1420                             		.loc 4 409 9
 1421 089c E7 A5 03                		mov.L	r5, 12[r10]
 410:../kernel/tkernel/messagebuf.c **** 		knl_memcpy(msg, tcb->winfo.smbf.msg, (SZ)rcvsz);
 1422                             		.loc 4 410 3
 1423 089f ED A5 02                		mov.L	8[r10], r5
 1424 08a2 AC 55                   		mov.L	64[r5], r5
 1425 08a4 ED A4 03                		mov.L	12[r10], r4
 1426 08a7 EF 43                   		mov.L	r4, r3
 1427 08a9 EF 52                   		mov.L	r5, r2
 1428 08ab ED A1 06                		mov.L	24[r10], r1
 1429 08ae 05 00 00 00             		bsr	_knl_memcpy
 411:../kernel/tkernel/messagebuf.c **** 		knl_wait_release_ok(tcb);
 1430                             		.loc 4 411 3
 1431 08b2 ED A1 02                		mov.L	8[r10], r1
 1432 08b5 05 00 00 00             		bsr	_knl_wait_release_ok
 412:../kernel/tkernel/messagebuf.c **** 		knl_mbf_wakeup(mbfcb);
 1433                             		.loc 4 412 3
 1434 08b9 EC A1                   		mov.L	[r10], r1
 1435 08bb 39 58 F9                		bsr	_knl_mbf_wakeup
 1436 08be 2E 76                   		bra	.L84
 1437                             	.L86:
 413:../kernel/tkernel/messagebuf.c **** 	} else {
 414:../kernel/tkernel/messagebuf.c **** 		ercd = E_TMOUT;
 1438                             		.loc 4 414 8
 1439 08c0 F9 A6 04 CE             		mov.L	#-50, 16[r10]
 415:../kernel/tkernel/messagebuf.c **** 		if ( tmout != TMO_POL ) {
 1440                             		.loc 4 415 6
 1441 08c4 ED A5 07                		mov.L	28[r10], r5
 1442 08c7 61 05                   		cmp	#0, r5
 1443 08c9 20 6A                   		beq	.L91
 416:../kernel/tkernel/messagebuf.c **** 			/* Ready for receive wait */
 417:../kernel/tkernel/messagebuf.c **** 			knl_ctxtsk->wspec = &knl_wspec_rmbf;
 1444                             		.loc 4 417 14
 1445 08cb FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1446 08d1 EC 55                   		mov.L	[r5], r5
 1447                             		.loc 4 417 22
 1448 08d3 F9 52 0B 18 00 00 00    		mov.L	#_knl_wspec_rmbf, 44[r5]
 418:../kernel/tkernel/messagebuf.c **** 			knl_ctxtsk->wid = mbfid;
 1449                             		.loc 4 418 14
 1450 08da FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1451 08e0 EC 55                   		mov.L	[r5], r5
 1452                             		.loc 4 418 20
 1453 08e2 ED A4 05                		mov.L	20[r10], r4
 1454 08e5 A3 54                   		mov.L	r4, 48[r5]
 419:../kernel/tkernel/messagebuf.c **** 			knl_ctxtsk->wercd = &ercd;
 1455                             		.loc 4 419 14
 1456 08e7 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1457 08ed EC 55                   		mov.L	[r5], r5
 1458                             		.loc 4 419 22
 1459 08ef 71 A4 10                		add	#16, r10, r4
 1460 08f2 A3 DC                   		mov.L	r4, 60[r5]
 420:../kernel/tkernel/messagebuf.c **** 			knl_ctxtsk->winfo.rmbf.msg = msg;
 1461                             		.loc 4 420 14
 1462 08f4 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1463 08fa EC 55                   		mov.L	[r5], r5
 1464                             		.loc 4 420 31
 1465 08fc ED A4 06                		mov.L	24[r10], r4
 1466 08ff A4 54                   		mov.L	r4, 64[r5]
 421:../kernel/tkernel/messagebuf.c **** 			knl_ctxtsk->winfo.rmbf.p_msgsz = &rcvsz;
 1467                             		.loc 4 421 14
 1468 0901 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1469 0907 EC 55                   		mov.L	[r5], r5
 1470                             		.loc 4 421 35
 1471 0909 71 A4 0C                		add	#12, r10, r4
 1472 090c A4 5C                   		mov.L	r4, 68[r5]
 422:../kernel/tkernel/messagebuf.c **** 			knl_make_wait(tmout, mbfcb->mbfatr);
 1473                             		.loc 4 422 4
 1474 090e EC A5                   		mov.L	[r10], r5
 1475 0910 A9 55                   		mov.L	16[r5], r5
 1476 0912 EF 52                   		mov.L	r5, r2
 1477 0914 ED A1 07                		mov.L	28[r10], r1
 1478 0917 05 00 00 00             		bsr	_knl_make_wait
 423:../kernel/tkernel/messagebuf.c **** 			QueInsert(&knl_ctxtsk->tskque, &mbfcb->recv_queue);
 1479                             		.loc 4 423 25
 1480 091b FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1481 0921 EC 55                   		mov.L	[r5], r5
 1482                             		.loc 4 423 4
 1483 0923 EF 54                   		mov.L	r5, r4
 1484 0925 EC A5                   		mov.L	[r10], r5
 1485 0927 71 55 14                		add	#20, r5
 1486 092a EF 52                   		mov.L	r5, r2
 1487 092c EF 41                   		mov.L	r4, r1
 1488 092e 39 06 F7                		bsr	_QueInsert
 1489 0931 2E 03                   		bra	.L84
 1490                             	.L91:
 424:../kernel/tkernel/messagebuf.c **** 		}
 425:../kernel/tkernel/messagebuf.c **** 	}
 426:../kernel/tkernel/messagebuf.c **** 
 427:../kernel/tkernel/messagebuf.c ****     error_exit:
 1491                             		.loc 4 427 5
 1492 0933 03                      		nop
 1493                             		.balign 8,3,1
 1494                             	.L84:
 428:../kernel/tkernel/messagebuf.c **** 	END_CRITICAL_SECTION;
 1495                             		.loc 4 428 2
 1496 0934 ED A5 01                		mov.L	4[r10], r5
 1497 0937 61 F5                   		cmp	#15, r5
 1498 0939 20 2F                   		beq	.L87
 1499                             		.loc 4 428 2 is_stmt 0 discriminator 1
 1500 093b FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1501 0941 EC 54                   		mov.L	[r5], r4
 1502 0943 FB 52 00 00 00 00       		mov.L	#_knl_schedtsk, r5
 1503 0949 EC 55                   		mov.L	[r5], r5
 1504 094b 47 54                   		cmp	r5, r4
 1505 094d 20 1B                   		beq	.L87
 1506                             		.loc 4 428 2 discriminator 3
 1507 094f 39 4E F7                		bsr	_knl_isTaskIndependent
 1508 0952 EF 15                   		mov.L	r1, r5
 1509 0954 61 05                   		cmp	#0, r5
 1510 0956 21 12                   		bne	.L87
 1511                             		.loc 4 428 2 discriminator 5
 1512 0958 FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 1513 095e EC 55                   		mov.L	[r5], r5
 1514 0960 61 05                   		cmp	#0, r5
 1515 0962 1E                      		bne	.L87
 1516                             		.loc 4 428 2 discriminator 7
 1517 0963 05 00 00 00             		bsr	_knl_dispatch
 1518 0967 03                      		.balign 8,3,1
 1519                             	.L87:
 1520                             		.loc 4 428 2 discriminator 9
 1521 0968 ED A1 01                		mov.L	4[r10], r1
 1522 096b 05 00 00 00             		bsr	_setint
 1523                             	.LBE5:
 429:../kernel/tkernel/messagebuf.c **** 
 430:../kernel/tkernel/messagebuf.c **** 	return ( ercd < E_OK )? ercd: rcvsz;
 1524                             		.loc 4 430 16 is_stmt 1 discriminator 9
 1525 096f ED A5 04                		mov.L	16[r10], r5
 1526                             		.loc 4 430 30 discriminator 9
 1527 0972 61 05                   		cmp	#0, r5
 1528 0974 28 06                   		bge	.L88
 1529                             		.loc 4 430 30 is_stmt 0 discriminator 1
 1530 0976 ED A5 04                		mov.L	16[r10], r5
 1531 0979 0C                      		bra	.L90
 1532                             	.L88:
 1533                             		.loc 4 430 30 discriminator 2
 1534 097a ED A5 03                		mov.L	12[r10], r5
 1535                             		.balign 8,3,1
 1536                             	.L90:
 431:../kernel/tkernel/messagebuf.c **** }
 1537                             		.loc 4 431 1 is_stmt 1 discriminator 1
 1538 097d EF 51                   		mov.L	r5, r1
 1539 097f 3F AA 09                		rtsd	#36, r10-r10
 1540                             	.LFE45:
 1542                             		.global	_tk_ref_mbf
 1544                             	_tk_ref_mbf:
 1545                             	.LFB46:
 432:../kernel/tkernel/messagebuf.c **** 
 433:../kernel/tkernel/messagebuf.c **** #ifdef USE_FUNC_TK_REF_MBF
 434:../kernel/tkernel/messagebuf.c **** /*
 435:../kernel/tkernel/messagebuf.c ****  * Refer message buffer state
 436:../kernel/tkernel/messagebuf.c ****  */
 437:../kernel/tkernel/messagebuf.c **** SYSCALL ER tk_ref_mbf( ID mbfid, T_RMBF *pk_rmbf )
 438:../kernel/tkernel/messagebuf.c **** {
 1546                             		.loc 4 438 1
 1547 0982 7E AA                   		push.l	r10
 1548                             	.LCFI34:
 1549 0984 71 0A E8                		add	#-24, r0, r10
 1550                             	.LCFI35:
 1551 0987 EF A0                   		mov.L	r10, r0
 1552 0989 E7 A1 04                		mov.L	r1, 16[r10]
 1553 098c E7 A2 05                		mov.L	r2, 20[r10]
 439:../kernel/tkernel/messagebuf.c **** 	MBFCB	*mbfcb;
 440:../kernel/tkernel/messagebuf.c **** 	TCB	*tcb;
 441:../kernel/tkernel/messagebuf.c **** 	ER	ercd = E_OK;
 1554                             		.loc 4 441 5
 1555 098f F8 A6 00                		mov.L	#0, [r10]
 442:../kernel/tkernel/messagebuf.c **** 
 443:../kernel/tkernel/messagebuf.c **** 	CHECK_MBFID(mbfid);
 1556                             		.loc 4 443 2
 1557 0992 ED A5 04                		mov.L	16[r10], r5
 1558 0995 61 05                   		cmp	#0, r5
 1559 0997 2B 09                   		ble	.L93
 1560                             		.loc 4 443 2 is_stmt 0 discriminator 2
 1561 0999 ED A5 04                		mov.L	16[r10], r5
 1562 099c 61 85                   		cmp	#8, r5
 1563 099e 2B 08                   		ble	.L94
 1564                             	.L93:
 1565                             		.loc 4 443 2 discriminator 3
 1566 09a0 FB 56 EE                		mov.L	#-18, r5
 1567 09a3 38 EE 00                		bra	.L95
 1568                             	.L94:
 444:../kernel/tkernel/messagebuf.c **** 
 445:../kernel/tkernel/messagebuf.c **** 	mbfcb = get_mbfcb(mbfid);
 1569                             		.loc 4 445 10 is_stmt 1
 1570 09a6 ED A5 04                		mov.L	16[r10], r5
 1571 09a9 60 15                   		sub	#1, r5
 1572                             		.loc 4 445 8
 1573 09ab 75 15 34                		mul	#52, r5
 1574 09ae 70 55 00 00 00 00       		add	#_knl_mbfcb_table, r5
 1575 09b4 E7 A5 01                		mov.L	r5, 4[r10]
 1576                             	.LBB6:
 446:../kernel/tkernel/messagebuf.c **** 
 447:../kernel/tkernel/messagebuf.c **** 	BEGIN_CRITICAL_SECTION;
 1577                             		.loc 4 447 2
 1578 09b7 05 00 00 00             		bsr	_disint
 1579 09bb E7 A1 02                		mov.L	r1, 8[r10]
 448:../kernel/tkernel/messagebuf.c **** 	if ( mbfcb->mbfid == 0 ) {
 1580                             		.loc 4 448 12
 1581 09be ED A5 01                		mov.L	4[r10], r5
 1582 09c1 A8 D5                   		mov.L	8[r5], r5
 1583                             		.loc 4 448 5
 1584 09c3 61 05                   		cmp	#0, r5
 1585 09c5 1F                      		bne	.L96
 449:../kernel/tkernel/messagebuf.c **** 		ercd = E_NOEXS;
 1586                             		.loc 4 449 8
 1587 09c6 F8 A6 D6                		mov.L	#-42, [r10]
 1588 09c9 38 8C 00                		bra	.L97
 1589                             	.L96:
 450:../kernel/tkernel/messagebuf.c **** 	} else {
 451:../kernel/tkernel/messagebuf.c **** 		pk_rmbf->exinf = mbfcb->exinf;
 1590                             		.loc 4 451 25
 1591 09cc ED A5 01                		mov.L	4[r10], r5
 1592 09cf A8 DC                   		mov.L	12[r5], r4
 1593                             		.loc 4 451 18
 1594 09d1 ED A5 05                		mov.L	20[r10], r5
 1595 09d4 E3 54                   		mov.L	r4, [r5]
 452:../kernel/tkernel/messagebuf.c **** 		pk_rmbf->wtsk = knl_wait_tskid(&mbfcb->recv_queue);
 1596                             		.loc 4 452 19
 1597 09d6 ED A5 01                		mov.L	4[r10], r5
 1598 09d9 71 55 14                		add	#20, r5
 1599 09dc EF 51                   		mov.L	r5, r1
 1600 09de 05 00 00 00             		bsr	_knl_wait_tskid
 1601 09e2 EF 14                   		mov.L	r1, r4
 1602                             		.loc 4 452 17
 1603 09e4 ED A5 05                		mov.L	20[r10], r5
 1604 09e7 A0 5C                   		mov.L	r4, 4[r5]
 453:../kernel/tkernel/messagebuf.c **** 		pk_rmbf->stsk = knl_wait_tskid(&mbfcb->send_queue);
 1605                             		.loc 4 453 19
 1606 09e9 ED A5 01                		mov.L	4[r10], r5
 1607 09ec EF 51                   		mov.L	r5, r1
 1608 09ee 05 00 00 00             		bsr	_knl_wait_tskid
 1609 09f2 EF 14                   		mov.L	r1, r4
 1610                             		.loc 4 453 17
 1611 09f4 ED A5 05                		mov.L	20[r10], r5
 1612 09f7 A0 D4                   		mov.L	r4, 8[r5]
 454:../kernel/tkernel/messagebuf.c **** 		if ( !knl_mbf_empty(mbfcb) ) {
 1613                             		.loc 4 454 9
 1614 09f9 ED A1 01                		mov.L	4[r10], r1
 1615 09fc 39 DA F6                		bsr	_knl_mbf_empty
 1616 09ff EF 15                   		mov.L	r1, r5
 1617                             		.loc 4 454 6
 1618 0a01 61 05                   		cmp	#0, r5
 1619 0a03 21 17                   		bne	.L98
 455:../kernel/tkernel/messagebuf.c **** 			pk_rmbf->msgsz = *(HEADER*)&mbfcb->buffer[mbfcb->head];
 1620                             		.loc 4 455 37
 1621 0a05 ED A5 01                		mov.L	4[r10], r5
 1622 0a08 AB 54                   		mov.L	48[r5], r4
 1623                             		.loc 4 455 51
 1624 0a0a ED A5 01                		mov.L	4[r10], r5
 1625 0a0d AA D5                   		mov.L	40[r5], r5
 1626                             		.loc 4 455 31
 1627 0a0f 4B 45                   		add	r4, r5
 1628                             		.loc 4 455 21
 1629 0a11 EC 54                   		mov.L	[r5], r4
 1630                             		.loc 4 455 19
 1631 0a13 ED A5 05                		mov.L	20[r10], r5
 1632 0a16 A0 DC                   		mov.L	r4, 12[r5]
 1633 0a18 2E 29                   		bra	.L99
 1634                             	.L98:
 456:../kernel/tkernel/messagebuf.c **** 		} else {
 457:../kernel/tkernel/messagebuf.c **** 			if ( !isQueEmpty(&mbfcb->send_queue) ) {
 1635                             		.loc 4 457 10
 1636 0a1a ED A5 01                		mov.L	4[r10], r5
 1637 0a1d EF 51                   		mov.L	r5, r1
 1638 0a1f 39 FA F5                		bsr	_isQueEmpty
 1639 0a22 EF 15                   		mov.L	r1, r5
 1640                             		.loc 4 457 7
 1641 0a24 61 05                   		cmp	#0, r5
 1642 0a26 21 15                   		bne	.L100
 458:../kernel/tkernel/messagebuf.c **** 				tcb = (TCB*)mbfcb->send_queue.next;
 1643                             		.loc 4 458 9
 1644 0a28 ED A5 01                		mov.L	4[r10], r5
 1645 0a2b EC 55                   		mov.L	[r5], r5
 1646 0a2d E7 A5 03                		mov.L	r5, 12[r10]
 459:../kernel/tkernel/messagebuf.c **** 				pk_rmbf->msgsz = tcb->winfo.smbf.msgsz;
 1647                             		.loc 4 459 37
 1648 0a30 ED A5 03                		mov.L	12[r10], r5
 1649 0a33 AC 5C                   		mov.L	68[r5], r4
 1650                             		.loc 4 459 20
 1651 0a35 ED A5 05                		mov.L	20[r10], r5
 1652 0a38 A0 DC                   		mov.L	r4, 12[r5]
 1653 0a3a 0F                      		bra	.L99
 1654                             	.L100:
 460:../kernel/tkernel/messagebuf.c **** 			} else {
 461:../kernel/tkernel/messagebuf.c **** 				pk_rmbf->msgsz = 0;
 1655                             		.loc 4 461 20
 1656 0a3b ED A5 05                		mov.L	20[r10], r5
 1657 0a3e 3E 53 00                		mov.L	#0, 12[r5]
 1658                             	.L99:
 462:../kernel/tkernel/messagebuf.c **** 			}
 463:../kernel/tkernel/messagebuf.c **** 		}
 464:../kernel/tkernel/messagebuf.c **** 		pk_rmbf->frbufsz = mbfcb->frbufsz;
 1659                             		.loc 4 464 27
 1660 0a41 ED A5 01                		mov.L	4[r10], r5
 1661 0a44 AA 5C                   		mov.L	36[r5], r4
 1662                             		.loc 4 464 20
 1663 0a46 ED A5 05                		mov.L	20[r10], r5
 1664 0a49 A1 54                   		mov.L	r4, 16[r5]
 465:../kernel/tkernel/messagebuf.c **** 		pk_rmbf->maxmsz = mbfcb->maxmsz;
 1665                             		.loc 4 465 26
 1666 0a4b ED A5 01                		mov.L	4[r10], r5
 1667 0a4e AA 54                   		mov.L	32[r5], r4
 1668                             		.loc 4 465 19
 1669 0a50 ED A5 05                		mov.L	20[r10], r5
 1670 0a53 A1 5C                   		mov.L	r4, 20[r5]
 1671                             	.L97:
 466:../kernel/tkernel/messagebuf.c **** 	}
 467:../kernel/tkernel/messagebuf.c **** 	END_CRITICAL_SECTION;
 1672                             		.loc 4 467 2
 1673 0a55 ED A5 02                		mov.L	8[r10], r5
 1674 0a58 61 F5                   		cmp	#15, r5
 1675 0a5a 20 2E                   		beq	.L101
 1676                             		.loc 4 467 2 is_stmt 0 discriminator 1
 1677 0a5c FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1678 0a62 EC 54                   		mov.L	[r5], r4
 1679 0a64 FB 52 00 00 00 00       		mov.L	#_knl_schedtsk, r5
 1680 0a6a EC 55                   		mov.L	[r5], r5
 1681 0a6c 47 54                   		cmp	r5, r4
 1682 0a6e 20 1A                   		beq	.L101
 1683                             		.loc 4 467 2 discriminator 3
 1684 0a70 39 2D F6                		bsr	_knl_isTaskIndependent
 1685 0a73 EF 15                   		mov.L	r1, r5
 1686 0a75 61 05                   		cmp	#0, r5
 1687 0a77 21 11                   		bne	.L101
 1688                             		.loc 4 467 2 discriminator 5
 1689 0a79 FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 1690 0a7f EC 55                   		mov.L	[r5], r5
 1691 0a81 61 05                   		cmp	#0, r5
 1692 0a83 1D                      		bne	.L101
 1693                             		.loc 4 467 2 discriminator 7
 1694 0a84 05 00 00 00             		bsr	_knl_dispatch
 1695                             		.balign 8,3,1
 1696                             	.L101:
 1697                             		.loc 4 467 2 discriminator 9
 1698 0a88 ED A1 02                		mov.L	8[r10], r1
 1699 0a8b 05 00 00 00             		bsr	_setint
 1700                             	.LBE6:
 468:../kernel/tkernel/messagebuf.c **** 
 469:../kernel/tkernel/messagebuf.c **** 	return ercd;
 1701                             		.loc 4 469 9 is_stmt 1 discriminator 9
 1702 0a8f EC A5                   		mov.L	[r10], r5
 1703                             	.L95:
 470:../kernel/tkernel/messagebuf.c **** }
 1704                             		.loc 4 470 1
 1705 0a91 EF 51                   		mov.L	r5, r1
 1706 0a93 3F AA 07                		rtsd	#28, r10-r10
 1707                             	.LFE46:
 2074                             	.Letext0:
 2075                             		.file 5 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\include/tk/typedef.h"
 2076                             		.file 6 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\include/tk/syscall.h"
 2077                             		.file 7 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\kernel\\knlinc/kernel.h"
 2078                             		.file 8 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\kernel\\tkernel\\timer.h"
 2079                             		.file 9 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\kernel\\tkernel\\winfo.h"
 2080                             		.file 10 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\kernel\\tkernel\\mutex.h"
 2081                             		.file 11 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\kernel\\sysdepend\\cpu\\core\\rxv2\\sysd
 2082                             		.file 12 "../kernel/tkernel/task.h"
 2083                             		.file 13 "../kernel/tkernel/ready_queue.h"
 2084                             		.file 14 "../kernel/tkernel/wait.h"
