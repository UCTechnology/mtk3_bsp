   1                             		.file	"time_calls.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   5                             	_QueInit:
   6                             	.LFB6:
   7                             		.file 1 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\include/sys/queue.h"
   1:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
   2:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *----------------------------------------------------------------------
   3:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *    micro T-Kernel 3.00.00
   4:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *
   5:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *    Copyright (C) 2006-2019 by Ken Sakamura.
   6:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *    This software is distributed under the T-License 2.1.
   7:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *----------------------------------------------------------------------
   8:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *
   9:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.
  10:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *
  11:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *----------------------------------------------------------------------
  12:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  13:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  14:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  15:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	queue.h
  16:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *
  17:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	Queuing operation
  18:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  19:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  20:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** #ifndef	__SYS_QUEUE_H__
  21:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** #define __SYS_QUEUE_H__
  22:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  23:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** #include <tk/tkernel.h>
  24:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  25:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** #ifdef __cplusplus
  26:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** extern "C" {
  27:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** #endif
  28:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  29:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  30:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  * Double-link queue (ring)
  31:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  32:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** typedef struct queue {
  33:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	struct queue	*next;
  34:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	struct queue	*prev;
  35:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** } QUEUE;
  36:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  37:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  38:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  * Queue initialization 
  39:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  40:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** Inline void QueInit( QUEUE *que )
  41:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** {
   8                             		.loc 1 41 1
   9 0000 7E AA                   		push.l	r10
  10                             	.LCFI0:
  11 0002 71 0A FC                		add	#-4, r0, r10
  12                             	.LCFI1:
  13 0005 EF A0                   		mov.L	r10, r0
  14 0007 E3 A1                   		mov.L	r1, [r10]
  42:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	que->next = (struct queue *)que;
  15                             		.loc 1 42 12
  16 0009 EC A5                   		mov.L	[r10], r5
  17 000b EC A4                   		mov.L	[r10], r4
  18 000d E3 54                   		mov.L	r4, [r5]
  43:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	que->prev = (struct queue *)que;
  19                             		.loc 1 43 12
  20 000f EC A5                   		mov.L	[r10], r5
  21 0011 EC A4                   		mov.L	[r10], r4
  22 0013 A0 5C                   		mov.L	r4, 4[r5]
  44:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** }
  23                             		.loc 1 44 1
  24 0015 03                      		nop
  25 0016 3F AA 02                		rtsd	#8, r10-r10
  26                             	.LFE6:
  29                             	_QueInsert:
  30                             	.LFB8:
  45:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  46:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  47:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  * TRUE if the queue is empty 
  48:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  49:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** Inline BOOL isQueEmpty( QUEUE *que )
  50:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** {
  51:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	return ( que->next == que )? TRUE: FALSE;
  52:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** }
  53:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  54:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  55:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  * Insert in queue 
  56:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	Inserts entry directly prior to que 
  57:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  58:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** Inline void QueInsert( QUEUE *entry, QUEUE *que )
  59:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** {
  31                             		.loc 1 59 1
  32 0019 7E AA                   		push.l	r10
  33                             	.LCFI2:
  34 001b 71 0A F8                		add	#-8, r0, r10
  35                             	.LCFI3:
  36 001e EF A0                   		mov.L	r10, r0
  37 0020 E3 A1                   		mov.L	r1, [r10]
  38 0022 E7 A2 01                		mov.L	r2, 4[r10]
  60:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	entry->prev = (struct queue*) que->prev;
  39                             		.loc 1 60 16
  40 0025 ED A5 01                		mov.L	4[r10], r5
  41 0028 A8 5C                   		mov.L	4[r5], r4
  42                             		.loc 1 60 14
  43 002a EC A5                   		mov.L	[r10], r5
  44 002c A0 5C                   		mov.L	r4, 4[r5]
  61:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	entry->next = que;
  45                             		.loc 1 61 14
  46 002e EC A5                   		mov.L	[r10], r5
  47 0030 ED A4 01                		mov.L	4[r10], r4
  48 0033 E3 54                   		mov.L	r4, [r5]
  62:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	que->prev->next = entry;
  49                             		.loc 1 62 5
  50 0035 ED A5 01                		mov.L	4[r10], r5
  51 0038 A8 5D                   		mov.L	4[r5], r5
  52                             		.loc 1 62 18
  53 003a EC A4                   		mov.L	[r10], r4
  54 003c E3 54                   		mov.L	r4, [r5]
  63:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	que->prev = entry;
  55                             		.loc 1 63 12
  56 003e ED A5 01                		mov.L	4[r10], r5
  57 0041 EC A4                   		mov.L	[r10], r4
  58 0043 A0 5C                   		mov.L	r4, 4[r5]
  64:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** }
  59                             		.loc 1 64 1
  60 0045 03                      		nop
  61 0046 3F AA 03                		rtsd	#12, r10-r10
  62                             	.LFE8:
  65                             	_QueRemove:
  66                             	.LFB9:
  65:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  66:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  67:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  * Delete from queue 
  68:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	Deletes entry from queue 
  69:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	No action is performed if entry is empty. 
  70:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  71:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** Inline void QueRemove( QUEUE *entry )
  72:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** {
  67                             		.loc 1 72 1
  68 0049 7E AA                   		push.l	r10
  69                             	.LCFI4:
  70 004b 71 0A FC                		add	#-4, r0, r10
  71                             	.LCFI5:
  72 004e EF A0                   		mov.L	r10, r0
  73 0050 E3 A1                   		mov.L	r1, [r10]
  73:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	if ( entry->next != entry ) {
  74                             		.loc 1 73 12
  75 0052 EC A5                   		mov.L	[r10], r5
  76 0054 EC 55                   		mov.L	[r5], r5
  77                             		.loc 1 73 5
  78 0056 EC A4                   		mov.L	[r10], r4
  79 0058 47 54                   		cmp	r5, r4
  80 005a 20 16                   		beq	.L5
  74:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 		entry->prev->next = (struct queue*) entry->next;
  81                             		.loc 1 74 8
  82 005c EC A5                   		mov.L	[r10], r5
  83 005e A8 5D                   		mov.L	4[r5], r5
  84                             		.loc 1 74 23
  85 0060 EC A4                   		mov.L	[r10], r4
  86 0062 EC 44                   		mov.L	[r4], r4
  87                             		.loc 1 74 21
  88 0064 E3 54                   		mov.L	r4, [r5]
  75:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 		entry->next->prev = (struct queue*) entry->prev;
  89                             		.loc 1 75 8
  90 0066 EC A5                   		mov.L	[r10], r5
  91 0068 EC 55                   		mov.L	[r5], r5
  92                             		.loc 1 75 23
  93 006a EC A4                   		mov.L	[r10], r4
  94 006c A8 4C                   		mov.L	4[r4], r4
  95                             		.loc 1 75 21
  96 006e A0 5C                   		mov.L	r4, 4[r5]
  97                             	.L5:
  76:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	}
  77:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** }
  98                             		.loc 1 77 1
  99 0070 03                      		nop
 100 0071 3F AA 02                		rtsd	#8, r10-r10
 101                             	.LFE9:
 104                             	_QueRemoveNext:
 105                             	.LFB10:
  78:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  79:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  80:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  * Remove top entry 
  81:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	Deletes the entry directly after que from the queue,
  82:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	and returns the deleted entry.
  83:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	Returns NULL if que is empty.
  84:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  85:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** Inline QUEUE* QueRemoveNext( QUEUE *que )
  86:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** {
 106                             		.loc 1 86 1
 107 0074 7E AA                   		push.l	r10
 108                             	.LCFI6:
 109 0076 71 0A F8                		add	#-8, r0, r10
 110                             	.LCFI7:
 111 0079 EF A0                   		mov.L	r10, r0
 112 007b E7 A1 01                		mov.L	r1, 4[r10]
  87:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	QUEUE	*entry;
  88:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  89:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	if ( que->next == que ) {
 113                             		.loc 1 89 10
 114 007e ED A5 01                		mov.L	4[r10], r5
 115 0081 EC 55                   		mov.L	[r5], r5
 116                             		.loc 1 89 5
 117 0083 ED A4 01                		mov.L	4[r10], r4
 118 0086 47 54                   		cmp	r5, r4
 119 0088 1D                      		bne	.L7
  90:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 		return NULL;
 120                             		.loc 1 90 10
 121 0089 66 05                   		mov.L	#0, r5
 122 008b 2E 1D                   		bra	.L8
 123                             	.L7:
  91:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	}
  92:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  93:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	entry = que->next;
 124                             		.loc 1 93 8
 125 008d ED A5 01                		mov.L	4[r10], r5
 126 0090 EC 55                   		mov.L	[r5], r5
 127 0092 E3 A5                   		mov.L	r5, [r10]
  94:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	que->next = (struct queue*)entry->next;
 128                             		.loc 1 94 14
 129 0094 EC A5                   		mov.L	[r10], r5
 130 0096 EC 54                   		mov.L	[r5], r4
 131                             		.loc 1 94 12
 132 0098 ED A5 01                		mov.L	4[r10], r5
 133 009b E3 54                   		mov.L	r4, [r5]
  95:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	entry->next->prev = que;
 134                             		.loc 1 95 7
 135 009d EC A5                   		mov.L	[r10], r5
 136 009f EC 55                   		mov.L	[r5], r5
 137                             		.loc 1 95 20
 138 00a1 ED A4 01                		mov.L	4[r10], r4
 139 00a4 A0 5C                   		mov.L	r4, 4[r5]
  96:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  97:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	return entry;
 140                             		.loc 1 97 9
 141 00a6 EC A5                   		mov.L	[r10], r5
 142                             	.L8:
  98:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** }
 143                             		.loc 1 98 1
 144 00a8 EF 51                   		mov.L	r5, r1
 145 00aa 3F AA 03                		rtsd	#12, r10-r10
 146                             	.LFE10:
 149                             	_knl_toLSYSTIM:
 150                             	.LFB11:
 151                             		.file 2 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\kernel\\tkernel\\timer.h"
   1:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** /*
   2:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  *----------------------------------------------------------------------
   3:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  *    micro T-Kernel 3.00.00
   4:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  *
   5:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  *    Copyright (C) 2006-2019 by Ken Sakamura.
   6:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  *    This software is distributed under the T-License 2.1.
   7:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  *----------------------------------------------------------------------
   8:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  *
   9:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.
  10:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  *
  11:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  *----------------------------------------------------------------------
  12:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  */
  13:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  14:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** /*
  15:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  *	timer.h
  16:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  *	System Timer Module Definition
  17:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  */
  18:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  19:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** #ifndef _TIMER_
  20:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** #define _TIMER_
  21:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  22:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** #include "longlong.h"
  23:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  24:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** /*
  25:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  * SYSTIM internal expression and conversion
  26:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  */
  27:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** typedef	D	LSYSTIM;	/* SYSTIM int. expression */
  28:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  29:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** Inline LSYSTIM knl_toLSYSTIM( CONST SYSTIM *time )
  30:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** {
 152                             		.loc 2 30 1
 153 00ad 6E 6C                   		pushm	r6-r12
 154                             	.LCFI8:
 155 00af 71 0A F4                		add	#-12, r0, r10
 156                             	.LCFI9:
 157 00b2 EF A0                   		mov.L	r10, r0
 158 00b4 E7 A1 02                		mov.L	r1, 8[r10]
  31:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 	LSYSTIM		ltime;
  32:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  33:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 	hilo_ll(ltime, time->hi, time->lo);
 159                             		.loc 2 33 2
 160 00b7 ED A2 02                		mov.L	8[r10], r2
 161 00ba EC 22                   		mov.L	[r2], r2
 162 00bc EF 2B                   		mov.L	r2, r11
 163 00be 6B F2                   		shar	#31, r2
 164 00c0 EF 2C                   		mov.L	r2, r12
 165 00c2 FD C0 B6                		shll	#0, r11, r6
 166 00c5 66 05                   		mov.L	#0, r5
 167 00c7 ED A2 02                		mov.L	8[r10], r2
 168 00ca A8 2A                   		mov.L	4[r2], r2
 169 00cc EF 23                   		mov.L	r2, r3
 170 00ce 66 04                   		mov.L	#0, r4
 171 00d0 FF 52 35                		or	r3, r5, r2
 172 00d3 E3 A2                   		mov.L	r2, [r10]
 173 00d5 FF 55 46                		or	r4, r6, r5
 174 00d8 E7 A5 01                		mov.L	r5, 4[r10]
  34:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  35:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 	return ltime;
 175                             		.loc 2 35 9
 176 00db EC A3                   		mov.L	[r10], r3
 177 00dd ED A4 01                		mov.L	4[r10], r4
 178 00e0 EF 35                   		mov.L	r3, r5
 179 00e2 EF 46                   		mov.L	r4, r6
  36:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** }
 180                             		.loc 2 36 1
 181 00e4 EF 51                   		mov.L	r5, r1
 182 00e6 EF 62                   		mov.L	r6, r2
 183 00e8 3F 6C 0A                		rtsd	#40, r6-r12
 184                             	.LFE11:
 187                             	_knl_toSYSTIM:
 188                             	.LFB12:
  37:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  38:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** Inline SYSTIM knl_toSYSTIM( LSYSTIM ltime )
  39:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** {
 189                             		.loc 2 39 1
 190 00eb 7E AA                   		push.l	r10
 191                             	.LCFI10:
 192 00ed 7E A6                   		push.l	r6
 193                             	.LCFI11:
 194 00ef 71 0A F0                		add	#-16, r0, r10
 195                             	.LCFI12:
 196 00f2 EF A0                   		mov.L	r10, r0
 197 00f4 E7 A1 02                		mov.L	r1, 8[r10]
 198 00f7 E7 A2 03                		mov.L	r2, 12[r10]
  40:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 	SYSTIM		time;
  41:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  42:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 	ll_hilo(time.hi, time.lo, ltime);
 199                             		.loc 2 42 2
 200 00fa ED A4 03                		mov.L	12[r10], r4
 201 00fd FD A0 45                		shar	#0, r4, r5
 202 0100 ED A4 03                		mov.L	12[r10], r4
 203 0103 FD BF 46                		shar	#31, r4, r6
 204 0106 E3 A5                   		mov.L	r5, [r10]
 205 0108 ED A5 02                		mov.L	8[r10], r5
 206 010b E7 A5 01                		mov.L	r5, 4[r10]
  43:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  44:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 	return time;
 207                             		.loc 2 44 9
 208 010e EC A3                   		mov.L	[r10], r3
 209 0110 ED A4 01                		mov.L	4[r10], r4
 210 0113 EF 35                   		mov.L	r3, r5
 211 0115 EF 46                   		mov.L	r4, r6
  45:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** }
 212                             		.loc 2 45 1
 213 0117 EF 51                   		mov.L	r5, r1
 214 0119 EF 62                   		mov.L	r6, r2
 215 011b 71 00 10                		add	#16, r0
 216 011e 7E B6                   		pop	r6
 217 0120 7E BA                   		pop	r10
 218 0122 02                      		rts
 219                             	.LFE12:
 222                             	_knl_abstim_reached:
 223                             	.LFB13:
  46:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  47:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** /*
  48:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  * Absolute time (can be considered the lower 32bit of SYSTIM)
  49:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  */
  50:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** typedef	UW	ABSTIM;
  51:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  52:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** #define ABSTIM_DIFF_MIN  (0x7FFFFFFF)
  53:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  54:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** Inline BOOL knl_abstim_reached( ABSTIM curtim, ABSTIM evttim )
  55:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** {
 224                             		.loc 2 55 1
 225 0123 7E AA                   		push.l	r10
 226                             	.LCFI13:
 227 0125 71 0A F8                		add	#-8, r0, r10
 228                             	.LCFI14:
 229 0128 EF A0                   		mov.L	r10, r0
 230 012a E3 A1                   		mov.L	r1, [r10]
 231 012c E7 A2 01                		mov.L	r2, 4[r10]
  56:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 	return (ABSTIM)(curtim - evttim) <= (ABSTIM)ABSTIM_DIFF_MIN;
 232                             		.loc 2 56 25
 233 012f EC A4                   		mov.L	[r10], r4
 234 0131 ED A5 01                		mov.L	4[r10], r5
 235 0134 FF 05 54                		sub	r5, r4, r5
 236                             		.loc 2 56 35
 237 0137 7E 05                   		not	r5
 238 0139 69 F5                   		shlr	#31, r5
 239 013b 5B 55                   		movu.B	r5, r5
  57:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** }
 240                             		.loc 2 57 1
 241 013d EF 51                   		mov.L	r5, r1
 242 013f 3F AA 03                		rtsd	#12, r10-r10
 243                             	.LFE13:
 246                             	_knl_timer_delete:
 247                             	.LFB14:
  58:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  59:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** /*
  60:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  * Definition of timer event block 
  61:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  */
  62:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** typedef void	(*CBACK)(void *);	/* Type of callback function */
  63:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  64:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** typedef struct timer_event_block {
  65:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 	QUEUE	queue;		/* Timer event queue */
  66:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 	ABSTIM	time;		/* Event time */
  67:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 	CBACK	callback;	/* Callback function */
  68:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 	void	*arg;		/* Argument to be sent to callback function */
  69:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** } TMEB;
  70:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  71:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** /*
  72:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  * Current time (Software clock)
  73:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  */
  74:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** IMPORT LSYSTIM	knl_current_time;	/* System operation time */
  75:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** IMPORT LSYSTIM	knl_real_time_ofs;	/* Difference from actual time */
  76:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  77:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** /*
  78:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  * Time-event queue
  79:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  */
  80:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** IMPORT QUEUE	knl_timer_queue;
  81:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  82:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** /*
  83:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  * Register time-event onto timer queue
  84:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  */
  85:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** IMPORT void knl_timer_insert( TMEB *evt, TMO tmout, CBACK cback, void *arg );
  86:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** IMPORT void knl_timer_insert_reltim( TMEB *event, RELTIM tmout, CBACK callback, void *arg );
  87:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** IMPORT void knl_timer_insert_abs( TMEB *evt, ABSTIM time, CBACK cback, void *arg );
  88:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  89:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** /*
  90:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  * Delete from time-event queue
  91:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  */
  92:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** Inline void knl_timer_delete( TMEB *event )
  93:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** {
 248                             		.loc 2 93 1
 249 0142 7E AA                   		push.l	r10
 250                             	.LCFI15:
 251 0144 71 0A FC                		add	#-4, r0, r10
 252                             	.LCFI16:
 253 0147 EF A0                   		mov.L	r10, r0
 254 0149 E3 A1                   		mov.L	r1, [r10]
  94:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 	QueRemove(&event->queue);
 255                             		.loc 2 94 2
 256 014b EC A5                   		mov.L	[r10], r5
 257 014d EF 51                   		mov.L	r5, r1
 258 014f 39 FA FE                		bsr	_QueRemove
  95:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** }
 259                             		.loc 2 95 1
 260 0152 03                      		nop
 261 0153 3F AA 02                		rtsd	#8, r10-r10
 262                             	.LFE14:
 265                             	_knl_isTaskIndependent:
 266                             	.LFB16:
 267                             		.file 3 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\kernel\\sysdepend\\cpu\\core\\rxv2\\cpu_s
   1:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
   2:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *----------------------------------------------------------------------
   3:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *    micro T-Kernel 3.00.03
   4:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *
   5:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *    Copyright (C) 2006-2021 by Ken Sakamura.
   6:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *    This software is distributed under the T-License 2.2.
   7:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *----------------------------------------------------------------------
   8:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *
   9:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.
  10:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *
  11:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *----------------------------------------------------------------------
  12:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  13:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  14:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  15:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *	cpu_status.h (RXv2)
  16:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *	CPU-Dependent Status Definition
  17:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  18:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  19:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #ifndef _SYSDEPEND_CPU_CORE_STATUS_
  20:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define _SYSDEPEND_CPU_CORE_STATUS_
  21:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  22:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #include <tk/syslib.h>
  23:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #include <sys/sysdef.h>
  24:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  25:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #include "sysdepend.h"
  26:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  27:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  * Start/End critical section
  28:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  29:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define BEGIN_CRITICAL_SECTION	{ UINT _sr_ = disint();
  30:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define END_CRITICAL_SECTION	if ( !isDI(_sr_)			\
  31:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 				  && knl_ctxtsk != knl_schedtsk		\
  32:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 				  && !knl_isTaskIndependent()		\
  33:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 				  && !knl_dispatch_disabled ) {		\
  34:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 					knl_dispatch();			\
  35:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 				}					\
  36:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 				setint(_sr_); }
  37:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  38:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  * Start/End interrupt disable section
  39:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  40:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define BEGIN_DISABLE_INTERRUPT	{ UINT _sr_ = disint();
  41:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define END_DISABLE_INTERRUPT	setint(_sr_); }
  42:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  43:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  44:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  * Interrupt enable/disable
  45:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  46:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define ENABLE_INTERRUPT	{ setint(0); }
  47:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define DISABLE_INTERRUPT	{ disint(); }
  48:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  49:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  50:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  * Enable interrupt nesting
  51:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *	Enable the interrupt that has a higher priority than 'level.'
  52:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  53:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define ENABLE_INTERRUPT_UPTO(level)	{ setint(level); }
  54:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  55:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  56:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *  Task-independent control
  57:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  58:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** IMPORT	W	knl_taskindp;		/* Task independent status */
  59:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  60:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  61:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  * If it is the task-independent part, TRUE
  62:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  63:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** Inline BOOL knl_isTaskIndependent( void )
  64:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** {
 268                             		.loc 3 64 1
 269 0156 7E AA                   		push.l	r10
 270                             	.LCFI17:
 271 0158 EF 0A                   		mov.L	r0, r10
 272                             	.LCFI18:
  65:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 	return ( knl_taskindp > 0 )? TRUE: FALSE;
 273                             		.loc 3 65 35
 274 015a FB 52 00 00 00 00       		mov.L	#_knl_taskindp, r5
 275 0160 EC 55                   		mov.L	[r5], r5
 276 0162 61 05                   		cmp	#0, r5
 277 0164 FC DB 5A                		scgt.L	r5
 278 0167 5B 55                   		movu.B	r5, r5
  66:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** }
 279                             		.loc 3 66 1
 280 0169 EF 51                   		mov.L	r5, r1
 281 016b 3F AA 01                		rtsd	#4, r10-r10
 282                             	.LFE16:
 285                             	_knl_EnterTaskIndependent:
 286                             	.LFB17:
  67:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  68:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  * Move to/Restore task independent part
  69:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  70:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** Inline void knl_EnterTaskIndependent( void )
  71:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** {
 287                             		.loc 3 71 1
 288 016e 7E AA                   		push.l	r10
 289                             	.LCFI19:
 290 0170 EF 0A                   		mov.L	r0, r10
 291                             	.LCFI20:
  72:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 	knl_taskindp++;
 292                             		.loc 3 72 14
 293 0172 FB 52 00 00 00 00       		mov.L	#_knl_taskindp, r5
 294 0178 EC 55                   		mov.L	[r5], r5
 295 017a 71 54 01                		add	#1, r5, r4
 296 017d FB 52 00 00 00 00       		mov.L	#_knl_taskindp, r5
 297 0183 E3 54                   		mov.L	r4, [r5]
  73:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** }
 298                             		.loc 3 73 1
 299 0185 03                      		nop
 300 0186 3F AA 01                		rtsd	#4, r10-r10
 301                             	.LFE17:
 304                             	_knl_LeaveTaskIndependent:
 305                             	.LFB18:
  74:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  75:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** Inline void knl_LeaveTaskIndependent( void )
  76:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** {
 306                             		.loc 3 76 1
 307 0189 7E AA                   		push.l	r10
 308                             	.LCFI21:
 309 018b EF 0A                   		mov.L	r0, r10
 310                             	.LCFI22:
  77:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 	knl_taskindp--;
 311                             		.loc 3 77 14
 312 018d FB 52 00 00 00 00       		mov.L	#_knl_taskindp, r5
 313 0193 EC 55                   		mov.L	[r5], r5
 314 0195 71 54 FF                		add	#-1, r5, r4
 315 0198 FB 52 00 00 00 00       		mov.L	#_knl_taskindp, r5
 316 019e E3 54                   		mov.L	r4, [r5]
  78:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** }
 317                             		.loc 3 78 1
 318 01a0 03                      		nop
 319 01a1 3F AA 01                		rtsd	#4, r10-r10
 320                             	.LFE18:
 323                             	_knl_cyc_next_time:
 324                             	.LFB34:
 325                             		.file 4 "../kernel/tkernel/time_calls.h"
   1:../kernel/tkernel/time_calls.h **** /*
   2:../kernel/tkernel/time_calls.h ****  *----------------------------------------------------------------------
   3:../kernel/tkernel/time_calls.h ****  *    micro T-Kernel 3.00.00
   4:../kernel/tkernel/time_calls.h ****  *
   5:../kernel/tkernel/time_calls.h ****  *    Copyright (C) 2006-2019 by Ken Sakamura.
   6:../kernel/tkernel/time_calls.h ****  *    This software is distributed under the T-License 2.1.
   7:../kernel/tkernel/time_calls.h ****  *----------------------------------------------------------------------
   8:../kernel/tkernel/time_calls.h ****  *
   9:../kernel/tkernel/time_calls.h ****  *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.
  10:../kernel/tkernel/time_calls.h ****  *
  11:../kernel/tkernel/time_calls.h ****  *----------------------------------------------------------------------
  12:../kernel/tkernel/time_calls.h ****  */
  13:../kernel/tkernel/time_calls.h **** 
  14:../kernel/tkernel/time_calls.h **** /*
  15:../kernel/tkernel/time_calls.h ****  *	time_calls.h
  16:../kernel/tkernel/time_calls.h ****  *	Time Management Function
  17:../kernel/tkernel/time_calls.h ****  */
  18:../kernel/tkernel/time_calls.h **** 
  19:../kernel/tkernel/time_calls.h **** #ifndef _TIME_CALLS_H
  20:../kernel/tkernel/time_calls.h **** #define _TIME_CALLS_H
  21:../kernel/tkernel/time_calls.h **** 
  22:../kernel/tkernel/time_calls.h **** #define	DIFF_TRON_UTC		(473385600000LL)		/* Differences between UTC and TRON-Time */
  23:../kernel/tkernel/time_calls.h **** 
  24:../kernel/tkernel/time_calls.h **** /*
  25:../kernel/tkernel/time_calls.h ****  * Cyclic handler control block
  26:../kernel/tkernel/time_calls.h ****  */
  27:../kernel/tkernel/time_calls.h **** typedef struct cyclic_handler_control_block {
  28:../kernel/tkernel/time_calls.h **** 	void	*exinf;		/* Extended information */
  29:../kernel/tkernel/time_calls.h **** 	ATR	cycatr;		/* Cyclic handler attribute */
  30:../kernel/tkernel/time_calls.h **** 	FP	cychdr;		/* Cyclic handler address */
  31:../kernel/tkernel/time_calls.h **** 	UINT	cycstat;	/* Cyclic handler state */
  32:../kernel/tkernel/time_calls.h **** 	RELTIM	cyctim;		/* Cyclic time */
  33:../kernel/tkernel/time_calls.h **** 	TMEB	cyctmeb;	/* Timer event block */
  34:../kernel/tkernel/time_calls.h **** #if USE_OBJECT_NAME
  35:../kernel/tkernel/time_calls.h **** 	UB	name[OBJECT_NAME_LENGTH];	/* name */
  36:../kernel/tkernel/time_calls.h **** #endif
  37:../kernel/tkernel/time_calls.h **** } CYCCB;
  38:../kernel/tkernel/time_calls.h **** 
  39:../kernel/tkernel/time_calls.h **** IMPORT CYCCB	knl_cyccb_table[];	/* Cyclic handler control block */
  40:../kernel/tkernel/time_calls.h **** IMPORT QUEUE	knl_free_cyccb;	/* FreeQue */
  41:../kernel/tkernel/time_calls.h **** 
  42:../kernel/tkernel/time_calls.h **** #define get_cyccb(id)	( &knl_cyccb_table[INDEX_CYC(id)] )
  43:../kernel/tkernel/time_calls.h **** 
  44:../kernel/tkernel/time_calls.h **** 
  45:../kernel/tkernel/time_calls.h **** /*
  46:../kernel/tkernel/time_calls.h ****  * Next startup time
  47:../kernel/tkernel/time_calls.h ****  */
  48:../kernel/tkernel/time_calls.h **** Inline ABSTIM knl_cyc_next_time( CYCCB *cyccb )
  49:../kernel/tkernel/time_calls.h **** {
 326                             		.loc 4 49 1
 327 01a4 7E AA                   		push.l	r10
 328                             	.LCFI23:
 329 01a6 7E A6                   		push.l	r6
 330                             	.LCFI24:
 331 01a8 71 0A F4                		add	#-12, r0, r10
 332                             	.LCFI25:
 333 01ab EF A0                   		mov.L	r10, r0
 334 01ad E7 A1 02                		mov.L	r1, 8[r10]
  50:../kernel/tkernel/time_calls.h **** 	ABSTIM		tm, cur;
  51:../kernel/tkernel/time_calls.h **** 
  52:../kernel/tkernel/time_calls.h **** 	cur = lltoul(knl_current_time);
 335                             		.loc 4 52 8
 336 01b0 FB 42 00 00 00 00       		mov.L	#_knl_current_time, r4
 337 01b6 EC 45                   		mov.L	[r4], r5
 338 01b8 A8 4E                   		mov.L	4[r4], r6
 339                             		.loc 4 52 6
 340 01ba E7 A5 01                		mov.L	r5, 4[r10]
  53:../kernel/tkernel/time_calls.h **** 	tm = cyccb->cyctmeb.time + cyccb->cyctim;
 341                             		.loc 4 53 21
 342 01bd ED A5 02                		mov.L	8[r10], r5
 343 01c0 A9 DC                   		mov.L	28[r5], r4
 344                             		.loc 4 53 34
 345 01c2 ED A5 02                		mov.L	8[r10], r5
 346 01c5 A9 55                   		mov.L	16[r5], r5
 347                             		.loc 4 53 5
 348 01c7 4B 45                   		add	r4, r5
 349 01c9 E3 A5                   		mov.L	r5, [r10]
  54:../kernel/tkernel/time_calls.h **** 
  55:../kernel/tkernel/time_calls.h **** 	if ( knl_abstim_reached(cur, tm) ) {
 350                             		.loc 4 55 7
 351 01cb EC A2                   		mov.L	[r10], r2
 352 01cd ED A1 01                		mov.L	4[r10], r1
 353 01d0 39 53 FF                		bsr	_knl_abstim_reached
 354 01d3 EF 15                   		mov.L	r1, r5
 355                             		.loc 4 55 5
 356 01d5 61 05                   		cmp	#0, r5
 357 01d7 20 27                   		beq	.L21
  56:../kernel/tkernel/time_calls.h **** 		/* Adjust time to be later than current time */
  57:../kernel/tkernel/time_calls.h **** 		tm = ((cur - cyccb->cyctmeb.time) / cyccb->cyctim + 1) * cyccb->cyctim + cyccb->cyctmeb.time;
 358                             		.loc 4 57 30
 359 01d9 ED A5 02                		mov.L	8[r10], r5
 360 01dc A9 DD                   		mov.L	28[r5], r5
 361                             		.loc 4 57 14
 362 01de ED A4 01                		mov.L	4[r10], r4
 363 01e1 FF 05 54                		sub	r5, r4, r5
 364                             		.loc 4 57 44
 365 01e4 ED A4 02                		mov.L	8[r10], r4
 366 01e7 A9 44                   		mov.L	16[r4], r4
 367                             		.loc 4 57 37
 368 01e9 FC 27 45                		divu	r4, r5
 369                             		.loc 4 57 53
 370 01ec 62 15                   		add	#1, r5
 371                             		.loc 4 57 65
 372 01ee ED A4 02                		mov.L	8[r10], r4
 373 01f1 A9 44                   		mov.L	16[r4], r4
 374                             		.loc 4 57 58
 375 01f3 4F 45                   		mul	r4, r5
 376                             		.loc 4 57 90
 377 01f5 ED A4 02                		mov.L	8[r10], r4
 378 01f8 A9 CC                   		mov.L	28[r4], r4
 379                             		.loc 4 57 6
 380 01fa 4B 45                   		add	r4, r5
 381 01fc E3 A5                   		mov.L	r5, [r10]
 382                             	.L21:
  58:../kernel/tkernel/time_calls.h **** 	}
  59:../kernel/tkernel/time_calls.h **** 
  60:../kernel/tkernel/time_calls.h **** 	return tm;
 383                             		.loc 4 60 9
 384 01fe EC A5                   		mov.L	[r10], r5
  61:../kernel/tkernel/time_calls.h **** }
 385                             		.loc 4 61 1
 386 0200 EF 51                   		mov.L	r5, r1
 387 0202 62 C0                   		add	#12, r0
 388 0204 7E B6                   		pop	r6
 389 0206 7E BA                   		pop	r10
 390 0208 02                      		rts
 391                             	.LFE34:
 394                             	_knl_cyc_timer_insert:
 395                             	.LFB35:
  62:../kernel/tkernel/time_calls.h **** 
  63:../kernel/tkernel/time_calls.h **** IMPORT void knl_call_cychdr( CYCCB* cyccb );
  64:../kernel/tkernel/time_calls.h **** 
  65:../kernel/tkernel/time_calls.h **** /*
  66:../kernel/tkernel/time_calls.h ****  * Register timer event queue
  67:../kernel/tkernel/time_calls.h ****  */
  68:../kernel/tkernel/time_calls.h **** Inline void knl_cyc_timer_insert( CYCCB *cyccb, ABSTIM tm )
  69:../kernel/tkernel/time_calls.h **** {
 396                             		.loc 4 69 1
 397 0209 7E AA                   		push.l	r10
 398                             	.LCFI26:
 399 020b 71 0A F8                		add	#-8, r0, r10
 400                             	.LCFI27:
 401 020e EF A0                   		mov.L	r10, r0
 402 0210 E3 A1                   		mov.L	r1, [r10]
 403 0212 E7 A2 01                		mov.L	r2, 4[r10]
  70:../kernel/tkernel/time_calls.h **** 	knl_timer_insert_abs(&cyccb->cyctmeb, tm, (CBACK)knl_call_cychdr, cyccb);
 404                             		.loc 4 70 2
 405 0215 EC A5                   		mov.L	[r10], r5
 406 0217 71 55 14                		add	#20, r5
 407 021a EC A4                   		mov.L	[r10], r4
 408 021c FB 32 00 00 00 00       		mov.L	#_knl_call_cychdr, r3
 409 0222 ED A2 01                		mov.L	4[r10], r2
 410 0225 EF 51                   		mov.L	r5, r1
 411 0227 05 00 00 00             		bsr	_knl_timer_insert_abs
  71:../kernel/tkernel/time_calls.h **** }
 412                             		.loc 4 71 1
 413 022b 03                      		nop
 414 022c 3F AA 03                		rtsd	#12, r10-r10
 415                             	.LFE35:
 418                             	_knl_alm_timer_insert:
 419                             	.LFB36:
  72:../kernel/tkernel/time_calls.h **** 
  73:../kernel/tkernel/time_calls.h **** 
  74:../kernel/tkernel/time_calls.h **** /*
  75:../kernel/tkernel/time_calls.h ****  * Alarm handler control block
  76:../kernel/tkernel/time_calls.h ****  */
  77:../kernel/tkernel/time_calls.h **** typedef struct alarm_handler_control_block {
  78:../kernel/tkernel/time_calls.h **** 	void	*exinf;		/* Extended information */
  79:../kernel/tkernel/time_calls.h **** 	ATR	almatr;		/* Alarm handler attribute */
  80:../kernel/tkernel/time_calls.h **** 	FP	almhdr;		/* Alarm handler address */
  81:../kernel/tkernel/time_calls.h **** 	UINT	almstat;	/* Alarm handler state */
  82:../kernel/tkernel/time_calls.h **** 	TMEB	almtmeb;	/* Timer event block */
  83:../kernel/tkernel/time_calls.h **** #if USE_OBJECT_NAME
  84:../kernel/tkernel/time_calls.h **** 	UB	name[OBJECT_NAME_LENGTH];	/* name */
  85:../kernel/tkernel/time_calls.h **** #endif
  86:../kernel/tkernel/time_calls.h **** } ALMCB;
  87:../kernel/tkernel/time_calls.h **** /** [END Common Definitions] */
  88:../kernel/tkernel/time_calls.h **** 
  89:../kernel/tkernel/time_calls.h **** IMPORT ALMCB	knl_almcb_table[];	/* Alarm handler control block */
  90:../kernel/tkernel/time_calls.h **** IMPORT QUEUE	knl_free_almcb;	/* FreeQue */
  91:../kernel/tkernel/time_calls.h **** 
  92:../kernel/tkernel/time_calls.h **** #define get_almcb(id)	( &knl_almcb_table[INDEX_ALM(id)] )
  93:../kernel/tkernel/time_calls.h **** 
  94:../kernel/tkernel/time_calls.h **** IMPORT void knl_call_almhdr( ALMCB *almcb );
  95:../kernel/tkernel/time_calls.h **** 
  96:../kernel/tkernel/time_calls.h **** /*
  97:../kernel/tkernel/time_calls.h ****  * Register onto timer event queue
  98:../kernel/tkernel/time_calls.h ****  */
  99:../kernel/tkernel/time_calls.h **** Inline void knl_alm_timer_insert( ALMCB *almcb, RELTIM reltim )
 100:../kernel/tkernel/time_calls.h **** {
 420                             		.loc 4 100 1
 421 022f 7E AA                   		push.l	r10
 422                             	.LCFI28:
 423 0231 7E A6                   		push.l	r6
 424                             	.LCFI29:
 425 0233 71 0A F4                		add	#-12, r0, r10
 426                             	.LCFI30:
 427 0236 EF A0                   		mov.L	r10, r0
 428 0238 E7 A1 01                		mov.L	r1, 4[r10]
 429 023b E7 A2 02                		mov.L	r2, 8[r10]
 101:../kernel/tkernel/time_calls.h **** 	ABSTIM	tm;
 102:../kernel/tkernel/time_calls.h **** 
 103:../kernel/tkernel/time_calls.h **** 	/* To guarantee to start the handler after the specified time, 
 104:../kernel/tkernel/time_calls.h **** 	   add TIMER_PERIOD */
 105:../kernel/tkernel/time_calls.h **** 	tm = lltoul(knl_current_time) + reltim + TIMER_PERIOD;
 430                             		.loc 4 105 7
 431 023e FB 42 00 00 00 00       		mov.L	#_knl_current_time, r4
 432 0244 EC 45                   		mov.L	[r4], r5
 433 0246 A8 4E                   		mov.L	4[r4], r6
 434                             		.loc 4 105 32
 435 0248 06 89 A5 02             		add	8[r10].L, r5
 436                             		.loc 4 105 5
 437 024c 62 A5                   		add	#10, r5
 438 024e E3 A5                   		mov.L	r5, [r10]
 106:../kernel/tkernel/time_calls.h **** 
 107:../kernel/tkernel/time_calls.h **** 	knl_timer_insert_abs(&almcb->almtmeb, tm, (CBACK)knl_call_almhdr, almcb);
 439                             		.loc 4 107 2
 440 0250 ED A5 01                		mov.L	4[r10], r5
 441 0253 71 55 10                		add	#16, r5
 442 0256 ED A4 01                		mov.L	4[r10], r4
 443 0259 FB 32 00 00 00 00       		mov.L	#_knl_call_almhdr, r3
 444 025f EC A2                   		mov.L	[r10], r2
 445 0261 EF 51                   		mov.L	r5, r1
 446 0263 05 00 00 00             		bsr	_knl_timer_insert_abs
 108:../kernel/tkernel/time_calls.h **** }
 447                             		.loc 4 108 1
 448 0267 03                      		nop
 449 0268 62 C0                   		add	#12, r0
 450 026a 7E B6                   		pop	r6
 451 026c 7E BA                   		pop	r10
 452 026e 02                      		rts
 453                             	.LFE36:
 455                             		.global	_tk_set_utc
 457                             	_tk_set_utc:
 458                             	.LFB42:
 459                             		.file 5 "../kernel/tkernel/time_calls.c"
   1:../kernel/tkernel/time_calls.c **** /*
   2:../kernel/tkernel/time_calls.c ****  *----------------------------------------------------------------------
   3:../kernel/tkernel/time_calls.c ****  *    micro T-Kernel 3.00.00
   4:../kernel/tkernel/time_calls.c ****  *
   5:../kernel/tkernel/time_calls.c ****  *    Copyright (C) 2006-2019 by Ken Sakamura.
   6:../kernel/tkernel/time_calls.c ****  *    This software is distributed under the T-License 2.1.
   7:../kernel/tkernel/time_calls.c ****  *----------------------------------------------------------------------
   8:../kernel/tkernel/time_calls.c ****  *
   9:../kernel/tkernel/time_calls.c ****  *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.
  10:../kernel/tkernel/time_calls.c ****  *
  11:../kernel/tkernel/time_calls.c ****  *----------------------------------------------------------------------
  12:../kernel/tkernel/time_calls.c ****  */
  13:../kernel/tkernel/time_calls.c **** 
  14:../kernel/tkernel/time_calls.c **** /*
  15:../kernel/tkernel/time_calls.c ****  *	time_calls.c
  16:../kernel/tkernel/time_calls.c ****  *	Time Management Function
  17:../kernel/tkernel/time_calls.c ****  */
  18:../kernel/tkernel/time_calls.c **** 
  19:../kernel/tkernel/time_calls.c **** #include "kernel.h"
  20:../kernel/tkernel/time_calls.c **** #include "timer.h"
  21:../kernel/tkernel/time_calls.c **** #include "wait.h"
  22:../kernel/tkernel/time_calls.c **** #include "check.h"
  23:../kernel/tkernel/time_calls.c **** #include "time_calls.h"
  24:../kernel/tkernel/time_calls.c **** #include "../sysdepend/sys_timer.h"
  25:../kernel/tkernel/time_calls.c **** 
  26:../kernel/tkernel/time_calls.c **** /* ------------------------------------------------------------------------ */
  27:../kernel/tkernel/time_calls.c **** /*
  28:../kernel/tkernel/time_calls.c ****  *	Time Management
  29:../kernel/tkernel/time_calls.c ****  */
  30:../kernel/tkernel/time_calls.c **** #if USE_TIMEMANAGEMENT
  31:../kernel/tkernel/time_calls.c **** 
  32:../kernel/tkernel/time_calls.c **** #ifdef USE_FUNC_TK_SET_UTC
  33:../kernel/tkernel/time_calls.c **** /*
  34:../kernel/tkernel/time_calls.c ****  * Set system clock
  35:../kernel/tkernel/time_calls.c ****  */
  36:../kernel/tkernel/time_calls.c **** SYSCALL ER tk_set_utc( CONST SYSTIM *pk_tim )
  37:../kernel/tkernel/time_calls.c **** {
 460                             		.loc 5 37 1
 461 026f 6E 6C                   		pushm	r6-r12
 462                             	.LCFI31:
 463 0271 71 0A F8                		add	#-8, r0, r10
 464                             	.LCFI32:
 465 0274 EF A0                   		mov.L	r10, r0
 466 0276 E7 A1 01                		mov.L	r1, 4[r10]
  38:../kernel/tkernel/time_calls.c **** 	CHECK_PAR(pk_tim->hi >= 0);
 467                             		.loc 5 38 2
 468 0279 ED A5 01                		mov.L	4[r10], r5
 469 027c EC 55                   		mov.L	[r5], r5
 470 027e 61 05                   		cmp	#0, r5
 471 0280 28 07                   		bge	.L26
 472                             		.loc 5 38 2 is_stmt 0 discriminator 1
 473 0282 FB 56 EF                		mov.L	#-17, r5
 474 0285 2E 69                   		bra	.L27
 475                             	.L26:
 476                             	.LBB2:
  39:../kernel/tkernel/time_calls.c **** 
  40:../kernel/tkernel/time_calls.c **** 	BEGIN_CRITICAL_SECTION;
 477                             		.loc 5 40 2 is_stmt 1
 478 0287 05 00 00 00             		bsr	_disint
 479 028b E3 A1                   		mov.L	r1, [r10]
  41:../kernel/tkernel/time_calls.c **** 	knl_real_time_ofs = ll_sub(knl_toLSYSTIM(pk_tim), knl_current_time);
 480                             		.loc 5 41 22
 481 028d ED A1 01                		mov.L	4[r10], r1
 482 0290 39 1D FE                		bsr	_knl_toLSYSTIM
 483 0293 EF 13                   		mov.L	r1, r3
 484 0295 EF 24                   		mov.L	r2, r4
 485 0297 FB 22 00 00 00 00       		mov.L	#_knl_current_time, r2
 486 029d EC 25                   		mov.L	[r2], r5
 487 029f A8 2E                   		mov.L	4[r2], r6
 488 02a1 EF 4C                   		mov.L	r4, r12
 489 02a3 FF 0B 53                		sub	r5, r3, r11
 490 02a6 FC 03 6C                		sbb	r6, r12
 491                             		.loc 5 41 20
 492 02a9 FB 52 00 00 00 00       		mov.L	#_knl_real_time_ofs, r5
 493 02af E3 5B                   		mov.L	r11, [r5]
 494 02b1 E7 5C 01                		mov.L	r12, 4[r5]
  42:../kernel/tkernel/time_calls.c **** 	END_CRITICAL_SECTION;
 495                             		.loc 5 42 2
 496 02b4 EC A5                   		mov.L	[r10], r5
 497 02b6 61 F5                   		cmp	#15, r5
 498 02b8 20 2E                   		beq	.L28
 499                             		.loc 5 42 2 is_stmt 0 discriminator 1
 500 02ba FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 501 02c0 EC 54                   		mov.L	[r5], r4
 502 02c2 FB 52 00 00 00 00       		mov.L	#_knl_schedtsk, r5
 503 02c8 EC 55                   		mov.L	[r5], r5
 504 02ca 47 54                   		cmp	r5, r4
 505 02cc 20 1A                   		beq	.L28
 506                             		.loc 5 42 2 discriminator 3
 507 02ce 39 88 FE                		bsr	_knl_isTaskIndependent
 508 02d1 EF 15                   		mov.L	r1, r5
 509 02d3 61 05                   		cmp	#0, r5
 510 02d5 21 11                   		bne	.L28
 511                             		.loc 5 42 2 discriminator 5
 512 02d7 FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 513 02dd EC 55                   		mov.L	[r5], r5
 514 02df 61 05                   		cmp	#0, r5
 515 02e1 1D                      		bne	.L28
 516                             		.loc 5 42 2 discriminator 7
 517 02e2 05 00 00 00             		bsr	_knl_dispatch
 518                             		.balign 8,3,1
 519                             	.L28:
 520                             		.loc 5 42 2 discriminator 9
 521 02e6 EC A1                   		mov.L	[r10], r1
 522 02e8 05 00 00 00             		bsr	_setint
 523                             	.LBE2:
  43:../kernel/tkernel/time_calls.c **** 
  44:../kernel/tkernel/time_calls.c **** 	return E_OK;
 524                             		.loc 5 44 9 is_stmt 1 discriminator 9
 525 02ec 66 05                   		mov.L	#0, r5
 526                             	.L27:
  45:../kernel/tkernel/time_calls.c **** }
 527                             		.loc 5 45 1
 528 02ee EF 51                   		mov.L	r5, r1
 529 02f0 3F 6C 09                		rtsd	#36, r6-r12
 530                             	.LFE42:
 532                             		.global	_tk_get_utc
 534                             	_tk_get_utc:
 535                             	.LFB43:
  46:../kernel/tkernel/time_calls.c **** #endif /* USE_FUNC_TK_SET_UTC */
  47:../kernel/tkernel/time_calls.c **** 
  48:../kernel/tkernel/time_calls.c **** #ifdef USE_FUNC_TK_GET_UTC
  49:../kernel/tkernel/time_calls.c **** /*
  50:../kernel/tkernel/time_calls.c ****  * Refer system clock
  51:../kernel/tkernel/time_calls.c ****  */
  52:../kernel/tkernel/time_calls.c **** SYSCALL ER tk_get_utc( SYSTIM *pk_tim )
  53:../kernel/tkernel/time_calls.c **** {
 536                             		.loc 5 53 1
 537 02f3 6E 6C                   		pushm	r6-r12
 538                             	.LCFI33:
 539 02f5 71 0A F8                		add	#-8, r0, r10
 540                             	.LCFI34:
 541 02f8 EF A0                   		mov.L	r10, r0
 542 02fa E7 A1 01                		mov.L	r1, 4[r10]
 543                             	.LBB3:
  54:../kernel/tkernel/time_calls.c **** 	BEGIN_CRITICAL_SECTION;
 544                             		.loc 5 54 2
 545 02fd 05 00 00 00             		bsr	_disint
 546 0301 E3 A1                   		mov.L	r1, [r10]
  55:../kernel/tkernel/time_calls.c **** 	*pk_tim = knl_toSYSTIM(ll_add(knl_current_time, knl_real_time_ofs));
 547                             		.loc 5 55 12
 548 0303 FB 42 00 00 00 00       		mov.L	#_knl_current_time, r4
 549 0309 EC 45                   		mov.L	[r4], r5
 550 030b A8 4E                   		mov.L	4[r4], r6
 551 030d FB 22 00 00 00 00       		mov.L	#_knl_real_time_ofs, r2
 552 0313 EC 23                   		mov.L	[r2], r3
 553 0315 A8 2C                   		mov.L	4[r2], r4
 554 0317 EF 6C                   		mov.L	r6, r12
 555 0319 FF 2B 35                		add	r3, r5, r11
 556 031c FC 0B 4C                		adc	r4, r12
 557 031f EF B1                   		mov.L	r11, r1
 558 0321 EF C2                   		mov.L	r12, r2
 559 0323 39 C8 FD                		bsr	_knl_toSYSTIM
 560 0326 EF 15                   		mov.L	r1, r5
 561 0328 EF 26                   		mov.L	r2, r6
 562 032a ED A4 01                		mov.L	4[r10], r4
 563 032d E3 45                   		mov.L	r5, [r4]
 564 032f A0 4E                   		mov.L	r6, 4[r4]
  56:../kernel/tkernel/time_calls.c **** 	END_CRITICAL_SECTION;
 565                             		.loc 5 56 2
 566 0331 EC A5                   		mov.L	[r10], r5
 567 0333 61 F5                   		cmp	#15, r5
 568 0335 20 2E                   		beq	.L30
 569                             		.loc 5 56 2 is_stmt 0 discriminator 1
 570 0337 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 571 033d EC 54                   		mov.L	[r5], r4
 572 033f FB 52 00 00 00 00       		mov.L	#_knl_schedtsk, r5
 573 0345 EC 55                   		mov.L	[r5], r5
 574 0347 47 54                   		cmp	r5, r4
 575 0349 20 1A                   		beq	.L30
 576                             		.loc 5 56 2 discriminator 3
 577 034b 39 0B FE                		bsr	_knl_isTaskIndependent
 578 034e EF 15                   		mov.L	r1, r5
 579 0350 61 05                   		cmp	#0, r5
 580 0352 21 11                   		bne	.L30
 581                             		.loc 5 56 2 discriminator 5
 582 0354 FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 583 035a EC 55                   		mov.L	[r5], r5
 584 035c 61 05                   		cmp	#0, r5
 585 035e 1D                      		bne	.L30
 586                             		.loc 5 56 2 discriminator 7
 587 035f 05 00 00 00             		bsr	_knl_dispatch
 588                             		.balign 8,3,1
 589                             	.L30:
 590                             		.loc 5 56 2 discriminator 9
 591 0363 EC A1                   		mov.L	[r10], r1
 592 0365 05 00 00 00             		bsr	_setint
 593                             	.LBE3:
  57:../kernel/tkernel/time_calls.c **** 
  58:../kernel/tkernel/time_calls.c **** 	return E_OK;
 594                             		.loc 5 58 9 is_stmt 1 discriminator 9
 595 0369 66 05                   		mov.L	#0, r5
  59:../kernel/tkernel/time_calls.c **** }
 596                             		.loc 5 59 1 discriminator 9
 597 036b EF 51                   		mov.L	r5, r1
 598 036d 3F 6C 09                		rtsd	#36, r6-r12
 599                             	.LFE43:
 601                             		.global	_tk_set_tim
 603                             	_tk_set_tim:
 604                             	.LFB44:
  60:../kernel/tkernel/time_calls.c **** #endif /* USE_FUNC_TK_GET_UTC */
  61:../kernel/tkernel/time_calls.c **** 
  62:../kernel/tkernel/time_calls.c **** #ifdef USE_FUNC_TK_SET_TIM
  63:../kernel/tkernel/time_calls.c **** /*
  64:../kernel/tkernel/time_calls.c ****  * Set system clock (TRON Time)
  65:../kernel/tkernel/time_calls.c ****  */
  66:../kernel/tkernel/time_calls.c **** SYSCALL ER tk_set_tim( CONST SYSTIM *pk_tim )
  67:../kernel/tkernel/time_calls.c **** {
 605                             		.loc 5 67 1
 606 0370 6E 6C                   		pushm	r6-r12
 607                             	.LCFI35:
 608 0372 71 0A F0                		add	#-16, r0, r10
 609                             	.LCFI36:
 610 0375 EF A0                   		mov.L	r10, r0
 611 0377 E7 A1 03                		mov.L	r1, 12[r10]
  68:../kernel/tkernel/time_calls.c **** 	LSYSTIM		utc_time;
  69:../kernel/tkernel/time_calls.c **** 
  70:../kernel/tkernel/time_calls.c **** 	CHECK_PAR(pk_tim->hi >= 0);
 612                             		.loc 5 70 2
 613 037a ED A5 03                		mov.L	12[r10], r5
 614 037d EC 55                   		mov.L	[r5], r5
 615 037f 61 05                   		cmp	#0, r5
 616 0381 28 08                   		bge	.L33
 617                             		.loc 5 70 2 is_stmt 0 discriminator 1
 618 0383 FB 56 EF                		mov.L	#-17, r5
 619 0386 38 83 00                		bra	.L34
 620                             	.L33:
  71:../kernel/tkernel/time_calls.c **** 	utc_time = ll_add(knl_toLSYSTIM(pk_tim), DIFF_TRON_UTC);
 621                             		.loc 5 71 13 is_stmt 1
 622 0389 ED A1 03                		mov.L	12[r10], r1
 623 038c 39 21 FD                		bsr	_knl_toLSYSTIM
 624 038f EF 15                   		mov.L	r1, r5
 625 0391 EF 26                   		mov.L	r2, r6
 626                             		.loc 5 71 11
 627 0393 EF 69                   		mov.L	r6, r9
 628 0395 70 58 00 04 FB 37       		add	#0x37fb0400, r5, r8
 629 039b FD 74 29 6E             		adc	#0x6e, r9
 630 039f E3 A8                   		mov.L	r8, [r10]
 631 03a1 E7 A9 01                		mov.L	r9, 4[r10]
 632                             	.LBB4:
  72:../kernel/tkernel/time_calls.c **** 
  73:../kernel/tkernel/time_calls.c **** 	BEGIN_CRITICAL_SECTION;
 633                             		.loc 5 73 2
 634 03a4 05 00 00 00             		bsr	_disint
 635 03a8 E7 A1 02                		mov.L	r1, 8[r10]
  74:../kernel/tkernel/time_calls.c **** 	knl_real_time_ofs = ll_sub(utc_time, knl_current_time);
 636                             		.loc 5 74 22
 637 03ab FB 42 00 00 00 00       		mov.L	#_knl_current_time, r4
 638 03b1 EC 45                   		mov.L	[r4], r5
 639 03b3 A8 4E                   		mov.L	4[r4], r6
 640 03b5 EC A3                   		mov.L	[r10], r3
 641 03b7 ED A4 01                		mov.L	4[r10], r4
 642 03ba EF 4C                   		mov.L	r4, r12
 643 03bc FF 0B 53                		sub	r5, r3, r11
 644 03bf FC 03 6C                		sbb	r6, r12
 645                             		.loc 5 74 20
 646 03c2 FB 52 00 00 00 00       		mov.L	#_knl_real_time_ofs, r5
 647 03c8 E3 5B                   		mov.L	r11, [r5]
 648 03ca E7 5C 01                		mov.L	r12, 4[r5]
  75:../kernel/tkernel/time_calls.c **** 	END_CRITICAL_SECTION;
 649                             		.loc 5 75 2
 650 03cd ED A5 02                		mov.L	8[r10], r5
 651 03d0 61 F5                   		cmp	#15, r5
 652 03d2 20 2E                   		beq	.L35
 653                             		.loc 5 75 2 is_stmt 0 discriminator 1
 654 03d4 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 655 03da EC 54                   		mov.L	[r5], r4
 656 03dc FB 52 00 00 00 00       		mov.L	#_knl_schedtsk, r5
 657 03e2 EC 55                   		mov.L	[r5], r5
 658 03e4 47 54                   		cmp	r5, r4
 659 03e6 20 1A                   		beq	.L35
 660                             		.loc 5 75 2 discriminator 3
 661 03e8 39 6E FD                		bsr	_knl_isTaskIndependent
 662 03eb EF 15                   		mov.L	r1, r5
 663 03ed 61 05                   		cmp	#0, r5
 664 03ef 21 11                   		bne	.L35
 665                             		.loc 5 75 2 discriminator 5
 666 03f1 FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 667 03f7 EC 55                   		mov.L	[r5], r5
 668 03f9 61 05                   		cmp	#0, r5
 669 03fb 1D                      		bne	.L35
 670                             		.loc 5 75 2 discriminator 7
 671 03fc 05 00 00 00             		bsr	_knl_dispatch
 672                             		.balign 8,3,1
 673                             	.L35:
 674                             		.loc 5 75 2 discriminator 9
 675 0400 ED A1 02                		mov.L	8[r10], r1
 676 0403 05 00 00 00             		bsr	_setint
 677                             	.LBE4:
  76:../kernel/tkernel/time_calls.c **** 
  77:../kernel/tkernel/time_calls.c **** 	return E_OK;
 678                             		.loc 5 77 9 is_stmt 1 discriminator 9
 679 0407 66 05                   		mov.L	#0, r5
 680                             	.L34:
  78:../kernel/tkernel/time_calls.c **** }
 681                             		.loc 5 78 1
 682 0409 EF 51                   		mov.L	r5, r1
 683 040b 3F 6C 0B                		rtsd	#44, r6-r12
 684                             	.LFE44:
 686                             		.global	_tk_get_tim
 688                             	_tk_get_tim:
 689                             	.LFB45:
  79:../kernel/tkernel/time_calls.c **** #endif /* USE_FUNC_TK_SET_TIM */
  80:../kernel/tkernel/time_calls.c **** 
  81:../kernel/tkernel/time_calls.c **** #ifdef USE_FUNC_TK_GET_TIM
  82:../kernel/tkernel/time_calls.c **** /*
  83:../kernel/tkernel/time_calls.c ****  * Refer system clock (TRON Time)
  84:../kernel/tkernel/time_calls.c ****  */
  85:../kernel/tkernel/time_calls.c **** SYSCALL ER tk_get_tim( SYSTIM *pk_tim )
  86:../kernel/tkernel/time_calls.c **** {
 690                             		.loc 5 86 1
 691 040e 6E 6C                   		pushm	r6-r12
 692                             	.LCFI37:
 693 0410 71 0A F0                		add	#-16, r0, r10
 694                             	.LCFI38:
 695 0413 EF A0                   		mov.L	r10, r0
 696 0415 E7 A1 03                		mov.L	r1, 12[r10]
 697                             	.LBB5:
  87:../kernel/tkernel/time_calls.c **** 	LSYSTIM		utc_time;
  88:../kernel/tkernel/time_calls.c **** 
  89:../kernel/tkernel/time_calls.c **** 	BEGIN_CRITICAL_SECTION;
 698                             		.loc 5 89 2
 699 0418 05 00 00 00             		bsr	_disint
 700 041c E3 A1                   		mov.L	r1, [r10]
  90:../kernel/tkernel/time_calls.c **** 	utc_time = ll_add(knl_current_time, knl_real_time_ofs);
 701                             		.loc 5 90 13
 702 041e FB 42 00 00 00 00       		mov.L	#_knl_current_time, r4
 703 0424 EC 45                   		mov.L	[r4], r5
 704 0426 A8 4E                   		mov.L	4[r4], r6
 705 0428 FB 22 00 00 00 00       		mov.L	#_knl_real_time_ofs, r2
 706 042e EC 23                   		mov.L	[r2], r3
 707 0430 A8 2C                   		mov.L	4[r2], r4
 708                             		.loc 5 90 11
 709 0432 EF 69                   		mov.L	r6, r9
 710 0434 FF 28 35                		add	r3, r5, r8
 711 0437 FC 0B 49                		adc	r4, r9
 712 043a E7 A8 01                		mov.L	r8, 4[r10]
 713 043d E7 A9 02                		mov.L	r9, 8[r10]
  91:../kernel/tkernel/time_calls.c **** 	END_CRITICAL_SECTION;
 714                             		.loc 5 91 2
 715 0440 EC A5                   		mov.L	[r10], r5
 716 0442 61 F5                   		cmp	#15, r5
 717 0444 20 2E                   		beq	.L37
 718                             		.loc 5 91 2 is_stmt 0 discriminator 1
 719 0446 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 720 044c EC 54                   		mov.L	[r5], r4
 721 044e FB 52 00 00 00 00       		mov.L	#_knl_schedtsk, r5
 722 0454 EC 55                   		mov.L	[r5], r5
 723 0456 47 54                   		cmp	r5, r4
 724 0458 20 1A                   		beq	.L37
 725                             		.loc 5 91 2 discriminator 3
 726 045a 39 FC FC                		bsr	_knl_isTaskIndependent
 727 045d EF 15                   		mov.L	r1, r5
 728 045f 61 05                   		cmp	#0, r5
 729 0461 21 11                   		bne	.L37
 730                             		.loc 5 91 2 discriminator 5
 731 0463 FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 732 0469 EC 55                   		mov.L	[r5], r5
 733 046b 61 05                   		cmp	#0, r5
 734 046d 1D                      		bne	.L37
 735                             		.loc 5 91 2 discriminator 7
 736 046e 05 00 00 00             		bsr	_knl_dispatch
 737                             		.balign 8,3,1
 738                             	.L37:
 739                             		.loc 5 91 2 discriminator 9
 740 0472 EC A1                   		mov.L	[r10], r1
 741 0474 05 00 00 00             		bsr	_setint
 742                             	.LBE5:
  92:../kernel/tkernel/time_calls.c **** 
  93:../kernel/tkernel/time_calls.c **** 	*pk_tim = knl_toSYSTIM(ll_sub(utc_time, DIFF_TRON_UTC));
 743                             		.loc 5 93 12 is_stmt 1 discriminator 9
 744 0478 ED A5 01                		mov.L	4[r10], r5
 745 047b ED A6 02                		mov.L	8[r10], r6
 746 047e EF 6C                   		mov.L	r6, r12
 747 0480 70 5B 00 FC 04 C8       		add	#-939197440, r5, r11
 748 0486 FD 74 2C 91             		adc	#-111, r12
 749 048a EF B1                   		mov.L	r11, r1
 750 048c EF C2                   		mov.L	r12, r2
 751 048e 39 5D FC                		bsr	_knl_toSYSTIM
 752 0491 EF 15                   		mov.L	r1, r5
 753 0493 EF 26                   		mov.L	r2, r6
 754 0495 ED A4 03                		mov.L	12[r10], r4
 755 0498 E3 45                   		mov.L	r5, [r4]
 756 049a A0 4E                   		mov.L	r6, 4[r4]
  94:../kernel/tkernel/time_calls.c **** 
  95:../kernel/tkernel/time_calls.c **** 	return E_OK;
 757                             		.loc 5 95 9 discriminator 9
 758 049c 66 05                   		mov.L	#0, r5
  96:../kernel/tkernel/time_calls.c **** }
 759                             		.loc 5 96 1 discriminator 9
 760 049e EF 51                   		mov.L	r5, r1
 761 04a0 3F 6C 0B                		rtsd	#44, r6-r12
 762                             	.LFE45:
 764                             		.global	_tk_get_otm
 766                             	_tk_get_otm:
 767                             	.LFB46:
  97:../kernel/tkernel/time_calls.c **** #endif /* USE_FUNC_TK_GET_TIM */
  98:../kernel/tkernel/time_calls.c **** 
  99:../kernel/tkernel/time_calls.c **** #ifdef USE_FUNC_TK_GET_OTM
 100:../kernel/tkernel/time_calls.c **** /*
 101:../kernel/tkernel/time_calls.c ****  * Refer system operating time
 102:../kernel/tkernel/time_calls.c ****  */
 103:../kernel/tkernel/time_calls.c **** SYSCALL ER tk_get_otm( SYSTIM *pk_tim )
 104:../kernel/tkernel/time_calls.c **** {
 768                             		.loc 5 104 1
 769 04a3 7E AA                   		push.l	r10
 770                             	.LCFI39:
 771 04a5 7E A6                   		push.l	r6
 772                             	.LCFI40:
 773 04a7 71 0A F8                		add	#-8, r0, r10
 774                             	.LCFI41:
 775 04aa EF A0                   		mov.L	r10, r0
 776 04ac E7 A1 01                		mov.L	r1, 4[r10]
 777                             	.LBB6:
 105:../kernel/tkernel/time_calls.c **** 	BEGIN_CRITICAL_SECTION;
 778                             		.loc 5 105 2
 779 04af 05 00 00 00             		bsr	_disint
 780 04b3 E3 A1                   		mov.L	r1, [r10]
 106:../kernel/tkernel/time_calls.c **** 	*pk_tim = knl_toSYSTIM(knl_current_time);
 781                             		.loc 5 106 12
 782 04b5 FB 42 00 00 00 00       		mov.L	#_knl_current_time, r4
 783 04bb EC 45                   		mov.L	[r4], r5
 784 04bd A8 4E                   		mov.L	4[r4], r6
 785 04bf EF 51                   		mov.L	r5, r1
 786 04c1 EF 62                   		mov.L	r6, r2
 787 04c3 39 28 FC                		bsr	_knl_toSYSTIM
 788 04c6 EF 15                   		mov.L	r1, r5
 789 04c8 EF 26                   		mov.L	r2, r6
 790 04ca ED A4 01                		mov.L	4[r10], r4
 791 04cd E3 45                   		mov.L	r5, [r4]
 792 04cf A0 4E                   		mov.L	r6, 4[r4]
 107:../kernel/tkernel/time_calls.c **** 	END_CRITICAL_SECTION;
 793                             		.loc 5 107 2
 794 04d1 EC A5                   		mov.L	[r10], r5
 795 04d3 61 F5                   		cmp	#15, r5
 796 04d5 20 2E                   		beq	.L40
 797                             		.loc 5 107 2 is_stmt 0 discriminator 1
 798 04d7 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 799 04dd EC 54                   		mov.L	[r5], r4
 800 04df FB 52 00 00 00 00       		mov.L	#_knl_schedtsk, r5
 801 04e5 EC 55                   		mov.L	[r5], r5
 802 04e7 47 54                   		cmp	r5, r4
 803 04e9 20 1A                   		beq	.L40
 804                             		.loc 5 107 2 discriminator 3
 805 04eb 39 6B FC                		bsr	_knl_isTaskIndependent
 806 04ee EF 15                   		mov.L	r1, r5
 807 04f0 61 05                   		cmp	#0, r5
 808 04f2 21 11                   		bne	.L40
 809                             		.loc 5 107 2 discriminator 5
 810 04f4 FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 811 04fa EC 55                   		mov.L	[r5], r5
 812 04fc 61 05                   		cmp	#0, r5
 813 04fe 1D                      		bne	.L40
 814                             		.loc 5 107 2 discriminator 7
 815 04ff 05 00 00 00             		bsr	_knl_dispatch
 816                             		.balign 8,3,1
 817                             	.L40:
 818                             		.loc 5 107 2 discriminator 9
 819 0503 EC A1                   		mov.L	[r10], r1
 820 0505 05 00 00 00             		bsr	_setint
 821                             	.LBE6:
 108:../kernel/tkernel/time_calls.c **** 
 109:../kernel/tkernel/time_calls.c **** 	return E_OK;
 822                             		.loc 5 109 9 is_stmt 1 discriminator 9
 823 0509 66 05                   		mov.L	#0, r5
 110:../kernel/tkernel/time_calls.c **** }
 824                             		.loc 5 110 1 discriminator 9
 825 050b EF 51                   		mov.L	r5, r1
 826 050d 62 80                   		add	#8, r0
 827 050f 7E B6                   		pop	r6
 828 0511 7E BA                   		pop	r10
 829 0513 02                      		rts
 830                             	.LFE46:
 832                             		.global	_knl_cyccb_table
 833                             		.section	.noinit,"aw"
 834                             		.balign 4
 837                             	_knl_cyccb_table:
 838 0000 00 00 00 00 00 00 00 00 		.zero	160
 838      00 00 00 00 00 00 00 00 
 838      00 00 00 00 00 00 00 00 
 838      00 00 00 00 00 00 00 00 
 838      00 00 00 00 00 00 00 00 
 839                             		.global	_knl_free_cyccb
 840                             		.balign 4
 843                             	_knl_free_cyccb:
 844 00a0 00 00 00 00 00 00 00 00 		.zero	8
 845                             		.section P,"ax"
 846                             		.global	_knl_cyclichandler_initialize
 848                             	_knl_cyclichandler_initialize:
 849                             	.LFB47:
 111:../kernel/tkernel/time_calls.c **** #endif /* USE_FUNC_TK_GET_OTM */
 112:../kernel/tkernel/time_calls.c **** 
 113:../kernel/tkernel/time_calls.c **** #if USE_DBGSPT
 114:../kernel/tkernel/time_calls.c **** #ifdef USE_FUNC_TD_GET_TIM
 115:../kernel/tkernel/time_calls.c **** /*
 116:../kernel/tkernel/time_calls.c ****  * Refer system clock
 117:../kernel/tkernel/time_calls.c ****  */
 118:../kernel/tkernel/time_calls.c **** SYSCALL ER td_get_tim( SYSTIM *tim, UW *ofs )
 119:../kernel/tkernel/time_calls.c **** {
 120:../kernel/tkernel/time_calls.c **** 	BEGIN_DISABLE_INTERRUPT;
 121:../kernel/tkernel/time_calls.c **** 	*ofs = knl_get_hw_timer_nsec();
 122:../kernel/tkernel/time_calls.c **** 	*tim = knl_toSYSTIM(ll_add(knl_current_time, knl_real_time_ofs));
 123:../kernel/tkernel/time_calls.c **** 	END_DISABLE_INTERRUPT;
 124:../kernel/tkernel/time_calls.c **** 
 125:../kernel/tkernel/time_calls.c **** 	return E_OK;
 126:../kernel/tkernel/time_calls.c **** }
 127:../kernel/tkernel/time_calls.c **** #endif /* USE_FUNC_TD_GET_TIM */
 128:../kernel/tkernel/time_calls.c **** 
 129:../kernel/tkernel/time_calls.c **** #ifdef USE_FUNC_TD_GET_OTM
 130:../kernel/tkernel/time_calls.c **** /*
 131:../kernel/tkernel/time_calls.c ****  * Refer system operating time
 132:../kernel/tkernel/time_calls.c ****  */
 133:../kernel/tkernel/time_calls.c **** SYSCALL ER td_get_otm( SYSTIM *tim, UW *ofs )
 134:../kernel/tkernel/time_calls.c **** {
 135:../kernel/tkernel/time_calls.c **** 	BEGIN_DISABLE_INTERRUPT;
 136:../kernel/tkernel/time_calls.c **** 	*ofs = knl_get_hw_timer_nsec();
 137:../kernel/tkernel/time_calls.c **** 	*tim = knl_toSYSTIM(knl_current_time);
 138:../kernel/tkernel/time_calls.c **** 	END_DISABLE_INTERRUPT;
 139:../kernel/tkernel/time_calls.c **** 
 140:../kernel/tkernel/time_calls.c **** 	return E_OK;
 141:../kernel/tkernel/time_calls.c **** }
 142:../kernel/tkernel/time_calls.c **** #endif /* USE_FUNC_TD_GET_OTM */
 143:../kernel/tkernel/time_calls.c **** #endif /* USE_DBGSPT */
 144:../kernel/tkernel/time_calls.c **** #endif /* USE_TIMEMANAGEMENT */
 145:../kernel/tkernel/time_calls.c **** 
 146:../kernel/tkernel/time_calls.c **** 
 147:../kernel/tkernel/time_calls.c **** /* ------------------------------------------------------------------------ */
 148:../kernel/tkernel/time_calls.c **** /*
 149:../kernel/tkernel/time_calls.c ****  *	Cyclic handler
 150:../kernel/tkernel/time_calls.c ****  */
 151:../kernel/tkernel/time_calls.c **** 
 152:../kernel/tkernel/time_calls.c **** #if USE_CYCLICHANDLER
 153:../kernel/tkernel/time_calls.c **** 
 154:../kernel/tkernel/time_calls.c **** Noinit(EXPORT CYCCB knl_cyccb_table[NUM_CYCID]);	/* Cyclic handler control block */
 155:../kernel/tkernel/time_calls.c **** Noinit(EXPORT QUEUE	knl_free_cyccb);	/* FreeQue */
 156:../kernel/tkernel/time_calls.c **** 
 157:../kernel/tkernel/time_calls.c **** 
 158:../kernel/tkernel/time_calls.c **** /*
 159:../kernel/tkernel/time_calls.c ****  * Initialization of cyclic handler control block
 160:../kernel/tkernel/time_calls.c ****  */
 161:../kernel/tkernel/time_calls.c **** EXPORT ER knl_cyclichandler_initialize( void )
 162:../kernel/tkernel/time_calls.c **** {
 850                             		.loc 5 162 1
 851 0514 7E AA                   		push.l	r10
 852                             	.LCFI42:
 853 0516 71 0A F8                		add	#-8, r0, r10
 854                             	.LCFI43:
 855 0519 EF A0                   		mov.L	r10, r0
 163:../kernel/tkernel/time_calls.c **** 	CYCCB	*cyccb, *end;
 164:../kernel/tkernel/time_calls.c **** 
 165:../kernel/tkernel/time_calls.c **** 	/* Get system information */
 166:../kernel/tkernel/time_calls.c **** 	if ( NUM_CYCID < 1 ) {
 167:../kernel/tkernel/time_calls.c **** 		return E_SYS;
 168:../kernel/tkernel/time_calls.c **** 	}
 169:../kernel/tkernel/time_calls.c **** 
 170:../kernel/tkernel/time_calls.c **** 	/* Register all control blocks onto FreeQue */
 171:../kernel/tkernel/time_calls.c **** 	QueInit(&knl_free_cyccb);
 856                             		.loc 5 171 2
 857 051b FB 12 00 00 00 00       		mov.L	#_knl_free_cyccb, r1
 858 0521 39 DF FA                		bsr	_QueInit
 172:../kernel/tkernel/time_calls.c **** 	end = knl_cyccb_table + NUM_CYCID;
 859                             		.loc 5 172 6
 860 0524 F9 A2 01 00 00 00 00    		mov.L	#_knl_cyccb_table+160, 4[r10]
 173:../kernel/tkernel/time_calls.c **** 	for ( cyccb = knl_cyccb_table; cyccb < end; cyccb++ ) {
 861                             		.loc 5 173 14
 862 052b F8 A2 00 00 00 00       		mov.L	#_knl_cyccb_table, [r10]
 863                             		.loc 5 173 2
 864 0531 2E 19                   		bra	.L43
 865                             	.L44:
 174:../kernel/tkernel/time_calls.c **** 		cyccb->cychdr = NULL; /* Unregistered handler */
 866                             		.loc 5 174 17 discriminator 3
 867 0533 EC A5                   		mov.L	[r10], r5
 868 0535 3E 52 00                		mov.L	#0, 8[r5]
 175:../kernel/tkernel/time_calls.c **** 		QueInsert((QUEUE*)cyccb, &knl_free_cyccb);
 869                             		.loc 5 175 3 discriminator 3
 870 0538 FB 22 00 00 00 00       		mov.L	#_knl_free_cyccb, r2
 871 053e EC A1                   		mov.L	[r10], r1
 872 0540 39 D9 FA                		bsr	_QueInsert
 173:../kernel/tkernel/time_calls.c **** 	for ( cyccb = knl_cyccb_table; cyccb < end; cyccb++ ) {
 873                             		.loc 5 173 51 discriminator 3
 874 0543 EC A5                   		mov.L	[r10], r5
 875 0545 71 55 28                		add	#40, r5
 876 0548 E3 A5                   		mov.L	r5, [r10]
 877                             	.L43:
 173:../kernel/tkernel/time_calls.c **** 	for ( cyccb = knl_cyccb_table; cyccb < end; cyccb++ ) {
 878                             		.loc 5 173 2 discriminator 1
 879 054a EC A4                   		mov.L	[r10], r4
 880 054c ED A5 01                		mov.L	4[r10], r5
 881 054f 47 54                   		cmp	r5, r4
 882 0551 23 E2                   		bltu	.L44
 176:../kernel/tkernel/time_calls.c **** 	}
 177:../kernel/tkernel/time_calls.c **** 
 178:../kernel/tkernel/time_calls.c **** 	return E_OK;
 883                             		.loc 5 178 9
 884 0553 66 05                   		mov.L	#0, r5
 179:../kernel/tkernel/time_calls.c **** }
 885                             		.loc 5 179 1
 886 0555 EF 51                   		mov.L	r5, r1
 887 0557 3F AA 03                		rtsd	#12, r10-r10
 888                             	.LFE47:
 890                             		.global	_knl_call_cychdr
 892                             	_knl_call_cychdr:
 893                             	.LFB48:
 180:../kernel/tkernel/time_calls.c **** 
 181:../kernel/tkernel/time_calls.c **** 
 182:../kernel/tkernel/time_calls.c **** /*
 183:../kernel/tkernel/time_calls.c ****  * Cyclic handler routine
 184:../kernel/tkernel/time_calls.c ****  */
 185:../kernel/tkernel/time_calls.c **** EXPORT void knl_call_cychdr( CYCCB *cyccb )
 186:../kernel/tkernel/time_calls.c **** {
 894                             		.loc 5 186 1
 895 055a 7E AA                   		push.l	r10
 896                             	.LCFI44:
 897 055c 71 0A FC                		add	#-4, r0, r10
 898                             	.LCFI45:
 899 055f EF A0                   		mov.L	r10, r0
 900 0561 E3 A1                   		mov.L	r1, [r10]
 187:../kernel/tkernel/time_calls.c **** 	/* Set next startup time */
 188:../kernel/tkernel/time_calls.c **** 	knl_cyc_timer_insert(cyccb, knl_cyc_next_time(cyccb));
 901                             		.loc 5 188 2
 902 0563 EC A1                   		mov.L	[r10], r1
 903 0565 39 3F FC                		bsr	_knl_cyc_next_time
 904 0568 EF 15                   		mov.L	r1, r5
 905 056a EF 52                   		mov.L	r5, r2
 906 056c EC A1                   		mov.L	[r10], r1
 907 056e 39 9B FC                		bsr	_knl_cyc_timer_insert
 189:../kernel/tkernel/time_calls.c **** 
 190:../kernel/tkernel/time_calls.c **** 	/* Execute cyclic handler / Enable interrupt nest */
 191:../kernel/tkernel/time_calls.c **** 	ENABLE_INTERRUPT_UPTO(TIMER_INTLEVEL);
 908                             		.loc 5 191 2
 909 0571 66 01                   		mov.L	#0, r1
 910 0573 05 00 00 00             		bsr	_setint
 192:../kernel/tkernel/time_calls.c **** 	CallUserHandlerP1(cyccb->exinf, cyccb->cychdr, cyccb);
 911                             		.loc 5 192 2
 912 0577 EC A5                   		mov.L	[r10], r5
 913 0579 A8 D5                   		mov.L	8[r5], r5
 914 057b EC A4                   		mov.L	[r10], r4
 915 057d EC 44                   		mov.L	[r4], r4
 916 057f EF 41                   		mov.L	r4, r1
 917 0581 7F 15                   		jsr	r5
 918                             	.LVL0:
 193:../kernel/tkernel/time_calls.c **** 	DISABLE_INTERRUPT;
 919                             		.loc 5 193 2
 920 0583 05 00 00 00             		bsr	_disint
 194:../kernel/tkernel/time_calls.c **** }
 921                             		.loc 5 194 1
 922 0587 03                      		nop
 923 0588 3F AA 02                		rtsd	#8, r10-r10
 924                             	.LFE48:
 927                             	_knl_immediate_call_cychdr:
 928                             	.LFB49:
 195:../kernel/tkernel/time_calls.c **** 
 196:../kernel/tkernel/time_calls.c **** /*
 197:../kernel/tkernel/time_calls.c ****  * Immediate call of cyclic handler 
 198:../kernel/tkernel/time_calls.c ****  */
 199:../kernel/tkernel/time_calls.c **** LOCAL void knl_immediate_call_cychdr( CYCCB *cyccb )
 200:../kernel/tkernel/time_calls.c **** {
 929                             		.loc 5 200 1
 930 058b 7E AA                   		push.l	r10
 931                             	.LCFI46:
 932 058d 71 0A FC                		add	#-4, r0, r10
 933                             	.LCFI47:
 934 0590 EF A0                   		mov.L	r10, r0
 935 0592 E3 A1                   		mov.L	r1, [r10]
 201:../kernel/tkernel/time_calls.c **** 	/* Set next startup time */
 202:../kernel/tkernel/time_calls.c **** 	knl_cyc_timer_insert(cyccb, knl_cyc_next_time(cyccb));
 936                             		.loc 5 202 2
 937 0594 EC A1                   		mov.L	[r10], r1
 938 0596 39 0E FC                		bsr	_knl_cyc_next_time
 939 0599 EF 15                   		mov.L	r1, r5
 940 059b EF 52                   		mov.L	r5, r2
 941 059d EC A1                   		mov.L	[r10], r1
 942 059f 39 6A FC                		bsr	_knl_cyc_timer_insert
 203:../kernel/tkernel/time_calls.c **** 
 204:../kernel/tkernel/time_calls.c **** 	/* Execute cyclic handler in task-independent part
 205:../kernel/tkernel/time_calls.c **** 	   (Keep interrupt disabled) */
 206:../kernel/tkernel/time_calls.c **** 	ENTER_TASK_INDEPENDENT;
 943                             		.loc 5 206 2
 944 05a2 39 CC FB                		bsr	_knl_EnterTaskIndependent
 207:../kernel/tkernel/time_calls.c **** 	CallUserHandlerP1(cyccb->exinf, cyccb->cychdr, cyccb);
 945                             		.loc 5 207 2
 946 05a5 EC A5                   		mov.L	[r10], r5
 947 05a7 A8 D5                   		mov.L	8[r5], r5
 948 05a9 EC A4                   		mov.L	[r10], r4
 949 05ab EC 44                   		mov.L	[r4], r4
 950 05ad EF 41                   		mov.L	r4, r1
 951 05af 7F 15                   		jsr	r5
 952                             	.LVL1:
 208:../kernel/tkernel/time_calls.c **** 	LEAVE_TASK_INDEPENDENT;
 953                             		.loc 5 208 2
 954 05b1 39 D8 FB                		bsr	_knl_LeaveTaskIndependent
 209:../kernel/tkernel/time_calls.c **** }
 955                             		.loc 5 209 1
 956 05b4 03                      		nop
 957 05b5 3F AA 02                		rtsd	#8, r10-r10
 958                             	.LFE49:
 960                             		.global	_tk_cre_cyc
 962                             	_tk_cre_cyc:
 963                             	.LFB50:
 210:../kernel/tkernel/time_calls.c **** 
 211:../kernel/tkernel/time_calls.c **** /*
 212:../kernel/tkernel/time_calls.c ****  * Create cyclic handler 
 213:../kernel/tkernel/time_calls.c ****  */
 214:../kernel/tkernel/time_calls.c **** SYSCALL ID tk_cre_cyc( CONST T_CCYC *pk_ccyc )
 215:../kernel/tkernel/time_calls.c **** {
 964                             		.loc 5 215 1
 965 05b8 6E 6A                   		pushm	r6-r10
 966                             	.LCFI48:
 967 05ba 71 0A E8                		add	#-24, r0, r10
 968                             	.LCFI49:
 969 05bd EF A0                   		mov.L	r10, r0
 970 05bf E7 A1 05                		mov.L	r1, 20[r10]
 216:../kernel/tkernel/time_calls.c **** #if CHK_RSATR
 217:../kernel/tkernel/time_calls.c **** 	const ATR VALID_CYCATR = {
 971                             		.loc 5 217 12
 972 05c2 F9 A6 01 07             		mov.L	#7, 4[r10]
 218:../kernel/tkernel/time_calls.c **** 		 TA_HLNG
 219:../kernel/tkernel/time_calls.c **** 		|TA_STA
 220:../kernel/tkernel/time_calls.c **** 		|TA_PHS
 221:../kernel/tkernel/time_calls.c **** #if USE_OBJECT_NAME
 222:../kernel/tkernel/time_calls.c **** 		|TA_DSNAME
 223:../kernel/tkernel/time_calls.c **** #endif
 224:../kernel/tkernel/time_calls.c **** 	};
 225:../kernel/tkernel/time_calls.c **** #endif
 226:../kernel/tkernel/time_calls.c **** 	CYCCB	*cyccb;
 227:../kernel/tkernel/time_calls.c **** 	ABSTIM	tm;
 228:../kernel/tkernel/time_calls.c **** 	ER	ercd = E_OK;
 973                             		.loc 5 228 5
 974 05c6 F8 A6 00                		mov.L	#0, [r10]
 229:../kernel/tkernel/time_calls.c **** 
 230:../kernel/tkernel/time_calls.c **** 	CHECK_RSATR(pk_ccyc->cycatr, VALID_CYCATR);
 975                             		.loc 5 230 2
 976 05c9 ED A5 05                		mov.L	20[r10], r5
 977 05cc A8 5C                   		mov.L	4[r5], r4
 978 05ce ED A5 01                		mov.L	4[r10], r5
 979 05d1 7E 05                   		not	r5
 980 05d3 53 45                   		and	r4, r5
 981 05d5 61 05                   		cmp	#0, r5
 982 05d7 17                      		beq	.L49
 983                             		.loc 5 230 2 is_stmt 0 discriminator 1
 984 05d8 FB 56 F5                		mov.L	#-11, r5
 985 05db 38 23 01                		bra	.L50
 986                             	.L49:
 231:../kernel/tkernel/time_calls.c **** 	CHECK_PAR(pk_ccyc->cychdr != NULL);
 987                             		.loc 5 231 2 is_stmt 1
 988 05de ED A5 05                		mov.L	20[r10], r5
 989 05e1 A8 D5                   		mov.L	8[r5], r5
 990 05e3 61 05                   		cmp	#0, r5
 991 05e5 1F                      		bne	.L51
 992                             		.loc 5 231 2 is_stmt 0 discriminator 1
 993 05e6 FB 56 EF                		mov.L	#-17, r5
 994 05e9 38 15 01                		bra	.L50
 995                             	.L51:
 232:../kernel/tkernel/time_calls.c **** 	CHECK_PAR(pk_ccyc->cyctim > 0);
 996                             		.loc 5 232 2 is_stmt 1
 997 05ec ED A5 05                		mov.L	20[r10], r5
 998 05ef A8 DD                   		mov.L	12[r5], r5
 999 05f1 61 05                   		cmp	#0, r5
 1000 05f3 1F                      		bne	.L52
 1001                             		.loc 5 232 2 is_stmt 0 discriminator 1
 1002 05f4 FB 56 EF                		mov.L	#-17, r5
 1003 05f7 38 07 01                		bra	.L50
 1004                             	.L52:
 233:../kernel/tkernel/time_calls.c **** 	CHECK_RELTIM(pk_ccyc->cyctim);
 1005                             		.loc 5 233 2 is_stmt 1
 1006 05fa ED A5 05                		mov.L	20[r10], r5
 1007 05fd A8 DD                   		mov.L	12[r5], r5
 1008 05ff 61 05                   		cmp	#0, r5
 1009 0601 28 08                   		bge	.L53
 1010                             		.loc 5 233 2 is_stmt 0 discriminator 1
 1011 0603 FB 56 EF                		mov.L	#-17, r5
 1012 0606 38 F8 00                		bra	.L50
 1013                             	.L53:
 1014                             	.LBB7:
 234:../kernel/tkernel/time_calls.c **** 
 235:../kernel/tkernel/time_calls.c **** 	BEGIN_CRITICAL_SECTION;
 1015                             		.loc 5 235 2 is_stmt 1
 1016 0609 05 00 00 00             		bsr	_disint
 1017 060d E7 A1 02                		mov.L	r1, 8[r10]
 236:../kernel/tkernel/time_calls.c **** 	/* Get control block from FreeQue */
 237:../kernel/tkernel/time_calls.c **** 	cyccb = (CYCCB*)QueRemoveNext(&knl_free_cyccb);
 1018                             		.loc 5 237 18
 1019 0610 FB 12 00 00 00 00       		mov.L	#_knl_free_cyccb, r1
 1020 0616 39 5E FA                		bsr	_QueRemoveNext
 1021 0619 E7 A1 03                		mov.L	r1, 12[r10]
 238:../kernel/tkernel/time_calls.c **** 	if ( cyccb == NULL ) {
 1022                             		.loc 5 238 5
 1023 061c ED A5 03                		mov.L	12[r10], r5
 1024 061f 61 05                   		cmp	#0, r5
 1025 0621 1F                      		bne	.L54
 239:../kernel/tkernel/time_calls.c **** 		ercd = E_LIMIT;
 1026                             		.loc 5 239 8
 1027 0622 F8 A6 DE                		mov.L	#-34, [r10]
 240:../kernel/tkernel/time_calls.c **** 		goto error_exit;
 1028                             		.loc 5 240 3
 1029 0625 38 9D 00                		bra	.L55
 1030                             	.L54:
 241:../kernel/tkernel/time_calls.c **** 	}
 242:../kernel/tkernel/time_calls.c **** 
 243:../kernel/tkernel/time_calls.c **** 	/* Initialize control block */
 244:../kernel/tkernel/time_calls.c **** 	cyccb->exinf   = pk_ccyc->exinf;
 1031                             		.loc 5 244 26
 1032 0628 ED A5 05                		mov.L	20[r10], r5
 1033 062b EC 54                   		mov.L	[r5], r4
 1034                             		.loc 5 244 17
 1035 062d ED A5 03                		mov.L	12[r10], r5
 1036 0630 E3 54                   		mov.L	r4, [r5]
 245:../kernel/tkernel/time_calls.c **** 	cyccb->cycatr  = pk_ccyc->cycatr;
 1037                             		.loc 5 245 26
 1038 0632 ED A5 05                		mov.L	20[r10], r5
 1039 0635 A8 5C                   		mov.L	4[r5], r4
 1040                             		.loc 5 245 17
 1041 0637 ED A5 03                		mov.L	12[r10], r5
 1042 063a A0 5C                   		mov.L	r4, 4[r5]
 246:../kernel/tkernel/time_calls.c **** 	cyccb->cychdr  = pk_ccyc->cychdr;
 1043                             		.loc 5 246 26
 1044 063c ED A5 05                		mov.L	20[r10], r5
 1045 063f A8 D4                   		mov.L	8[r5], r4
 1046                             		.loc 5 246 17
 1047 0641 ED A5 03                		mov.L	12[r10], r5
 1048 0644 A0 D4                   		mov.L	r4, 8[r5]
 247:../kernel/tkernel/time_calls.c **** 	cyccb->cyctim  = pk_ccyc->cyctim;
 1049                             		.loc 5 247 26
 1050 0646 ED A5 05                		mov.L	20[r10], r5
 1051 0649 A8 DC                   		mov.L	12[r5], r4
 1052                             		.loc 5 247 17
 1053 064b ED A5 03                		mov.L	12[r10], r5
 1054 064e A1 54                   		mov.L	r4, 16[r5]
 248:../kernel/tkernel/time_calls.c **** #if USE_OBJECT_NAME
 249:../kernel/tkernel/time_calls.c **** 	if ( (pk_ccyc->cycatr & TA_DSNAME) != 0 ) {
 250:../kernel/tkernel/time_calls.c **** 		knl_strncpy((char*)cyccb->name, (char*)pk_ccyc->dsname, OBJECT_NAME_LENGTH);
 251:../kernel/tkernel/time_calls.c **** 	}
 252:../kernel/tkernel/time_calls.c **** #endif
 253:../kernel/tkernel/time_calls.c **** 
 254:../kernel/tkernel/time_calls.c **** 	/* First startup time
 255:../kernel/tkernel/time_calls.c **** 	 *	To guarantee the start of handler after the specified time,
 256:../kernel/tkernel/time_calls.c **** 	 *	add TIMER_PERIOD. 
 257:../kernel/tkernel/time_calls.c **** 	 */
 258:../kernel/tkernel/time_calls.c **** 	tm = lltoul(knl_current_time) + pk_ccyc->cycphs + TIMER_PERIOD;
 1055                             		.loc 5 258 7
 1056 0650 FB 42 00 00 00 00       		mov.L	#_knl_current_time, r4
 1057 0656 EC 45                   		mov.L	[r4], r5
 1058 0658 A8 4E                   		mov.L	4[r4], r6
 1059 065a EF 54                   		mov.L	r5, r4
 1060                             		.loc 5 258 41
 1061 065c ED A5 05                		mov.L	20[r10], r5
 1062 065f A9 55                   		mov.L	16[r5], r5
 1063                             		.loc 5 258 32
 1064 0661 4B 45                   		add	r4, r5
 1065                             		.loc 5 258 5
 1066 0663 62 A5                   		add	#10, r5
 1067 0665 E7 A5 04                		mov.L	r5, 16[r10]
 259:../kernel/tkernel/time_calls.c **** 
 260:../kernel/tkernel/time_calls.c **** 	if ( (pk_ccyc->cycatr & TA_STA) != 0 ) {
 1068                             		.loc 5 260 15
 1069 0668 ED A5 05                		mov.L	20[r10], r5
 1070 066b A8 5D                   		mov.L	4[r5], r5
 1071                             		.loc 5 260 24
 1072 066d 64 25                   		and	#2, r5
 1073                             		.loc 5 260 5
 1074 066f 61 05                   		cmp	#0, r5
 1075 0671 20 2C                   		beq	.L56
 261:../kernel/tkernel/time_calls.c **** 		/* Start cyclic handler */
 262:../kernel/tkernel/time_calls.c **** 		cyccb->cycstat = TCYC_STA;
 1076                             		.loc 5 262 18
 1077 0673 ED A5 03                		mov.L	12[r10], r5
 1078 0676 3E 53 01                		mov.L	#1, 12[r5]
 263:../kernel/tkernel/time_calls.c **** 
 264:../kernel/tkernel/time_calls.c **** 		if ( pk_ccyc->cycphs == 0 ) {
 1079                             		.loc 5 264 15
 1080 0679 ED A5 05                		mov.L	20[r10], r5
 1081 067c A9 55                   		mov.L	16[r5], r5
 1082                             		.loc 5 264 6
 1083 067e 61 05                   		cmp	#0, r5
 1084 0680 21 12                   		bne	.L57
 265:../kernel/tkernel/time_calls.c **** 			/* Immediate execution */
 266:../kernel/tkernel/time_calls.c **** 			cyccb->cyctmeb.time = tm;
 1085                             		.loc 5 266 24
 1086 0682 ED A5 03                		mov.L	12[r10], r5
 1087 0685 ED A4 04                		mov.L	16[r10], r4
 1088 0688 A1 DC                   		mov.L	r4, 28[r5]
 267:../kernel/tkernel/time_calls.c **** 			knl_immediate_call_cychdr(cyccb);
 1089                             		.loc 5 267 4
 1090 068a ED A1 03                		mov.L	12[r10], r1
 1091 068d 39 FE FE                		bsr	_knl_immediate_call_cychdr
 1092 0690 2E 1B                   		bra	.L59
 1093                             	.L57:
 268:../kernel/tkernel/time_calls.c **** 		} else {
 269:../kernel/tkernel/time_calls.c **** 			/* Register onto timer event queue */
 270:../kernel/tkernel/time_calls.c **** 			knl_cyc_timer_insert(cyccb, tm);
 1094                             		.loc 5 270 4
 1095 0692 ED A2 04                		mov.L	16[r10], r2
 1096 0695 ED A1 03                		mov.L	12[r10], r1
 1097 0698 39 71 FB                		bsr	_knl_cyc_timer_insert
 1098 069b 2E 10                   		bra	.L59
 1099                             	.L56:
 271:../kernel/tkernel/time_calls.c **** 		}
 272:../kernel/tkernel/time_calls.c **** 	} else {
 273:../kernel/tkernel/time_calls.c **** 		/* Initialize only counter */
 274:../kernel/tkernel/time_calls.c **** 		cyccb->cycstat = TCYC_STP;
 1100                             		.loc 5 274 18
 1101 069d ED A5 03                		mov.L	12[r10], r5
 1102 06a0 3E 53 00                		mov.L	#0, 12[r5]
 275:../kernel/tkernel/time_calls.c **** 		cyccb->cyctmeb.time = tm;
 1103                             		.loc 5 275 23
 1104 06a3 ED A5 03                		mov.L	12[r10], r5
 1105 06a6 ED A4 04                		mov.L	16[r10], r4
 1106 06a9 A1 DC                   		mov.L	r4, 28[r5]
 1107                             	.L59:
 276:../kernel/tkernel/time_calls.c **** 	}
 277:../kernel/tkernel/time_calls.c **** 
 278:../kernel/tkernel/time_calls.c **** 	ercd = ID_CYC(cyccb - knl_cyccb_table);
 1108                             		.loc 5 278 9
 1109 06ab ED A5 03                		mov.L	12[r10], r5
 1110 06ae FB 72 00 00 00 00       		mov.L	#_knl_cyccb_table, r7
 1111 06b4 43 75                   		sub	r7, r5
 1112 06b6 6A 35                   		shar	#3, r5
 1113 06b8 74 15 CD CC CC CC       		mul	#-858993459, r5
 1114                             		.loc 5 278 7
 1115 06be 62 15                   		add	#1, r5
 1116 06c0 E3 A5                   		mov.L	r5, [r10]
 1117                             	.L55:
 279:../kernel/tkernel/time_calls.c **** 
 280:../kernel/tkernel/time_calls.c ****     error_exit:
 281:../kernel/tkernel/time_calls.c **** 	END_CRITICAL_SECTION;
 1118                             		.loc 5 281 2
 1119 06c2 ED A5 02                		mov.L	8[r10], r5
 1120 06c5 61 F5                   		cmp	#15, r5
 1121 06c7 20 2E                   		beq	.L60
 1122                             		.loc 5 281 2 is_stmt 0 discriminator 1
 1123 06c9 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1124 06cf EC 54                   		mov.L	[r5], r4
 1125 06d1 FB 52 00 00 00 00       		mov.L	#_knl_schedtsk, r5
 1126 06d7 EC 55                   		mov.L	[r5], r5
 1127 06d9 47 54                   		cmp	r5, r4
 1128 06db 20 1A                   		beq	.L60
 1129                             		.loc 5 281 2 discriminator 3
 1130 06dd 39 79 FA                		bsr	_knl_isTaskIndependent
 1131 06e0 EF 15                   		mov.L	r1, r5
 1132 06e2 61 05                   		cmp	#0, r5
 1133 06e4 21 11                   		bne	.L60
 1134                             		.loc 5 281 2 discriminator 5
 1135 06e6 FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 1136 06ec EC 55                   		mov.L	[r5], r5
 1137 06ee 61 05                   		cmp	#0, r5
 1138 06f0 1D                      		bne	.L60
 1139                             		.loc 5 281 2 discriminator 7
 1140 06f1 05 00 00 00             		bsr	_knl_dispatch
 1141                             		.balign 8,3,1
 1142                             	.L60:
 1143                             		.loc 5 281 2 discriminator 9
 1144 06f5 ED A1 02                		mov.L	8[r10], r1
 1145 06f8 05 00 00 00             		bsr	_setint
 1146                             	.LBE7:
 282:../kernel/tkernel/time_calls.c **** 
 283:../kernel/tkernel/time_calls.c **** 	return ercd;
 1147                             		.loc 5 283 9 is_stmt 1 discriminator 9
 1148 06fc EC A5                   		mov.L	[r10], r5
 1149                             		.balign 8,3,1
 1150                             	.L50:
 284:../kernel/tkernel/time_calls.c **** }
 1151                             		.loc 5 284 1
 1152 06fe EF 51                   		mov.L	r5, r1
 1153 0700 3F 6A 0B                		rtsd	#44, r6-r10
 1154                             	.LFE50:
 1156                             		.global	_tk_del_cyc
 1158                             	_tk_del_cyc:
 1159                             	.LFB51:
 285:../kernel/tkernel/time_calls.c **** 
 286:../kernel/tkernel/time_calls.c **** #ifdef USE_FUNC_TK_DEL_CYC
 287:../kernel/tkernel/time_calls.c **** /*
 288:../kernel/tkernel/time_calls.c ****  * Delete cyclic handler 
 289:../kernel/tkernel/time_calls.c ****  */
 290:../kernel/tkernel/time_calls.c **** SYSCALL ER tk_del_cyc( ID cycid )
 291:../kernel/tkernel/time_calls.c **** {
 1160                             		.loc 5 291 1
 1161 0703 7E AA                   		push.l	r10
 1162                             	.LCFI50:
 1163 0705 71 0A F0                		add	#-16, r0, r10
 1164                             	.LCFI51:
 1165 0708 EF A0                   		mov.L	r10, r0
 1166 070a E7 A1 03                		mov.L	r1, 12[r10]
 292:../kernel/tkernel/time_calls.c **** 	CYCCB	*cyccb;
 293:../kernel/tkernel/time_calls.c **** 	ER	ercd = E_OK;
 1167                             		.loc 5 293 5
 1168 070d F8 A6 00                		mov.L	#0, [r10]
 294:../kernel/tkernel/time_calls.c **** 
 295:../kernel/tkernel/time_calls.c **** 	CHECK_CYCID(cycid);
 1169                             		.loc 5 295 2
 1170 0710 ED A5 03                		mov.L	12[r10], r5
 1171 0713 61 05                   		cmp	#0, r5
 1172 0715 2B 09                   		ble	.L62
 1173                             		.loc 5 295 2 is_stmt 0 discriminator 2
 1174 0717 ED A5 03                		mov.L	12[r10], r5
 1175 071a 61 45                   		cmp	#4, r5
 1176 071c 2B 08                   		ble	.L63
 1177                             	.L62:
 1178                             		.loc 5 295 2 discriminator 3
 1179 071e FB 56 EE                		mov.L	#-18, r5
 1180 0721 38 8C 00                		bra	.L64
 1181                             	.L63:
 296:../kernel/tkernel/time_calls.c **** 
 297:../kernel/tkernel/time_calls.c **** 	cyccb = get_cyccb(cycid);
 1182                             		.loc 5 297 10 is_stmt 1
 1183 0724 ED A5 03                		mov.L	12[r10], r5
 1184 0727 60 15                   		sub	#1, r5
 1185                             		.loc 5 297 8
 1186 0729 75 15 28                		mul	#40, r5
 1187 072c 70 55 00 00 00 00       		add	#_knl_cyccb_table, r5
 1188 0732 E7 A5 01                		mov.L	r5, 4[r10]
 1189                             	.LBB8:
 298:../kernel/tkernel/time_calls.c **** 
 299:../kernel/tkernel/time_calls.c **** 	BEGIN_CRITICAL_SECTION;
 1190                             		.loc 5 299 2
 1191 0735 05 00 00 00             		bsr	_disint
 1192 0739 E7 A1 02                		mov.L	r1, 8[r10]
 300:../kernel/tkernel/time_calls.c **** 	if ( cyccb->cychdr == NULL ) { /* Unregistered handler */
 1193                             		.loc 5 300 12
 1194 073c ED A5 01                		mov.L	4[r10], r5
 1195 073f A8 D5                   		mov.L	8[r5], r5
 1196                             		.loc 5 300 5
 1197 0741 61 05                   		cmp	#0, r5
 1198 0743 1E                      		bne	.L65
 301:../kernel/tkernel/time_calls.c **** 		ercd = E_NOEXS;
 1199                             		.loc 5 301 8
 1200 0744 F8 A6 D6                		mov.L	#-42, [r10]
 1201 0747 2E 2A                   		bra	.L66
 1202                             	.L65:
 302:../kernel/tkernel/time_calls.c **** 	} else {
 303:../kernel/tkernel/time_calls.c **** 		if ( (cyccb->cycstat & TCYC_STA) != 0 ) {
 1203                             		.loc 5 303 14
 1204 0749 ED A5 01                		mov.L	4[r10], r5
 1205 074c A8 DD                   		mov.L	12[r5], r5
 1206                             		.loc 5 303 24
 1207 074e 64 15                   		and	#1, r5
 1208                             		.loc 5 303 6
 1209 0750 61 05                   		cmp	#0, r5
 1210 0752 20 0D                   		beq	.L67
 304:../kernel/tkernel/time_calls.c **** 			/* Delete timer event queue */
 305:../kernel/tkernel/time_calls.c **** 			knl_timer_delete(&cyccb->cyctmeb);
 1211                             		.loc 5 305 4
 1212 0754 ED A5 01                		mov.L	4[r10], r5
 1213 0757 71 55 14                		add	#20, r5
 1214 075a EF 51                   		mov.L	r5, r1
 1215 075c 39 E6 F9                		bsr	_knl_timer_delete
 1216                             	.L67:
 306:../kernel/tkernel/time_calls.c **** 		}
 307:../kernel/tkernel/time_calls.c **** 
 308:../kernel/tkernel/time_calls.c **** 		/* Return to FreeQue */
 309:../kernel/tkernel/time_calls.c **** 		QueInsert((QUEUE*)cyccb, &knl_free_cyccb);
 1217                             		.loc 5 309 3
 1218 075f FB 22 00 00 00 00       		mov.L	#_knl_free_cyccb, r2
 1219 0765 ED A1 01                		mov.L	4[r10], r1
 1220 0768 39 B1 F8                		bsr	_QueInsert
 310:../kernel/tkernel/time_calls.c **** 		cyccb->cychdr = NULL; /* Unregistered handler */
 1221                             		.loc 5 310 17
 1222 076b ED A5 01                		mov.L	4[r10], r5
 1223 076e 3E 52 00                		mov.L	#0, 8[r5]
 1224                             	.L66:
 311:../kernel/tkernel/time_calls.c **** 	}
 312:../kernel/tkernel/time_calls.c **** 	END_CRITICAL_SECTION;
 1225                             		.loc 5 312 2
 1226 0771 ED A5 02                		mov.L	8[r10], r5
 1227 0774 61 F5                   		cmp	#15, r5
 1228 0776 20 2E                   		beq	.L68
 1229                             		.loc 5 312 2 is_stmt 0 discriminator 1
 1230 0778 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1231 077e EC 54                   		mov.L	[r5], r4
 1232 0780 FB 52 00 00 00 00       		mov.L	#_knl_schedtsk, r5
 1233 0786 EC 55                   		mov.L	[r5], r5
 1234 0788 47 54                   		cmp	r5, r4
 1235 078a 20 1A                   		beq	.L68
 1236                             		.loc 5 312 2 discriminator 3
 1237 078c 39 CA F9                		bsr	_knl_isTaskIndependent
 1238 078f EF 15                   		mov.L	r1, r5
 1239 0791 61 05                   		cmp	#0, r5
 1240 0793 21 11                   		bne	.L68
 1241                             		.loc 5 312 2 discriminator 5
 1242 0795 FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 1243 079b EC 55                   		mov.L	[r5], r5
 1244 079d 61 05                   		cmp	#0, r5
 1245 079f 1D                      		bne	.L68
 1246                             		.loc 5 312 2 discriminator 7
 1247 07a0 05 00 00 00             		bsr	_knl_dispatch
 1248                             		.balign 8,3,1
 1249                             	.L68:
 1250                             		.loc 5 312 2 discriminator 9
 1251 07a4 ED A1 02                		mov.L	8[r10], r1
 1252 07a7 05 00 00 00             		bsr	_setint
 1253                             	.LBE8:
 313:../kernel/tkernel/time_calls.c **** 
 314:../kernel/tkernel/time_calls.c **** 	return ercd;
 1254                             		.loc 5 314 9 is_stmt 1 discriminator 9
 1255 07ab EC A5                   		mov.L	[r10], r5
 1256                             	.L64:
 315:../kernel/tkernel/time_calls.c **** }
 1257                             		.loc 5 315 1
 1258 07ad EF 51                   		mov.L	r5, r1
 1259 07af 3F AA 05                		rtsd	#20, r10-r10
 1260                             	.LFE51:
 1262                             		.global	_tk_sta_cyc
 1264                             	_tk_sta_cyc:
 1265                             	.LFB52:
 316:../kernel/tkernel/time_calls.c **** #endif /* USE_FUNC_TK_DEL_CYC */
 317:../kernel/tkernel/time_calls.c **** 
 318:../kernel/tkernel/time_calls.c **** #ifdef USE_FUNC_TK_STA_CYC
 319:../kernel/tkernel/time_calls.c **** /*
 320:../kernel/tkernel/time_calls.c ****  * Start cyclic handler 
 321:../kernel/tkernel/time_calls.c ****  */
 322:../kernel/tkernel/time_calls.c **** SYSCALL ER tk_sta_cyc( ID cycid )
 323:../kernel/tkernel/time_calls.c **** {
 1266                             		.loc 5 323 1
 1267 07b2 7E AA                   		push.l	r10
 1268                             	.LCFI52:
 1269 07b4 7E A6                   		push.l	r6
 1270                             	.LCFI53:
 1271 07b6 71 0A E8                		add	#-24, r0, r10
 1272                             	.LCFI54:
 1273 07b9 EF A0                   		mov.L	r10, r0
 1274 07bb E7 A1 05                		mov.L	r1, 20[r10]
 324:../kernel/tkernel/time_calls.c **** 	CYCCB	*cyccb;
 325:../kernel/tkernel/time_calls.c **** 	ABSTIM	tm, cur;
 326:../kernel/tkernel/time_calls.c **** 	ER	ercd = E_OK;
 1275                             		.loc 5 326 5
 1276 07be F9 A6 01 00             		mov.L	#0, 4[r10]
 327:../kernel/tkernel/time_calls.c **** 
 328:../kernel/tkernel/time_calls.c **** 	CHECK_CYCID(cycid);
 1277                             		.loc 5 328 2
 1278 07c2 ED A5 05                		mov.L	20[r10], r5
 1279 07c5 61 05                   		cmp	#0, r5
 1280 07c7 2B 09                   		ble	.L70
 1281                             		.loc 5 328 2 is_stmt 0 discriminator 2
 1282 07c9 ED A5 05                		mov.L	20[r10], r5
 1283 07cc 61 45                   		cmp	#4, r5
 1284 07ce 2B 08                   		ble	.L71
 1285                             	.L70:
 1286                             		.loc 5 328 2 discriminator 3
 1287 07d0 FB 56 EE                		mov.L	#-18, r5
 1288 07d3 38 E9 00                		bra	.L72
 1289                             	.L71:
 329:../kernel/tkernel/time_calls.c **** 
 330:../kernel/tkernel/time_calls.c **** 	cyccb = get_cyccb(cycid);
 1290                             		.loc 5 330 10 is_stmt 1
 1291 07d6 ED A5 05                		mov.L	20[r10], r5
 1292 07d9 60 15                   		sub	#1, r5
 1293                             		.loc 5 330 8
 1294 07db 75 15 28                		mul	#40, r5
 1295 07de 70 55 00 00 00 00       		add	#_knl_cyccb_table, r5
 1296 07e4 E7 A5 02                		mov.L	r5, 8[r10]
 1297                             	.LBB9:
 331:../kernel/tkernel/time_calls.c **** 
 332:../kernel/tkernel/time_calls.c **** 	BEGIN_CRITICAL_SECTION;
 1298                             		.loc 5 332 2
 1299 07e7 05 00 00 00             		bsr	_disint
 1300 07eb E7 A1 03                		mov.L	r1, 12[r10]
 333:../kernel/tkernel/time_calls.c **** 	if ( cyccb->cychdr == NULL ) { /* Unregistered handler */
 1301                             		.loc 5 333 12
 1302 07ee ED A5 02                		mov.L	8[r10], r5
 1303 07f1 A8 D5                   		mov.L	8[r5], r5
 1304                             		.loc 5 333 5
 1305 07f3 61 05                   		cmp	#0, r5
 1306 07f5 18                      		bne	.L73
 334:../kernel/tkernel/time_calls.c **** 		ercd = E_NOEXS;
 1307                             		.loc 5 334 8
 1308 07f6 F9 A6 01 D6             		mov.L	#-42, 4[r10]
 335:../kernel/tkernel/time_calls.c **** 		goto error_exit;
 1309                             		.loc 5 335 3
 1310 07fa 38 85 00                		bra	.L74
 1311                             	.L73:
 336:../kernel/tkernel/time_calls.c **** 	}
 337:../kernel/tkernel/time_calls.c **** 
 338:../kernel/tkernel/time_calls.c **** 	cur = lltoul(knl_current_time);
 1312                             		.loc 5 338 8
 1313 07fd FB 42 00 00 00 00       		mov.L	#_knl_current_time, r4
 1314 0803 EC 45                   		mov.L	[r4], r5
 1315 0805 A8 4E                   		mov.L	4[r4], r6
 1316                             		.loc 5 338 6
 1317 0807 E7 A5 04                		mov.L	r5, 16[r10]
 339:../kernel/tkernel/time_calls.c **** 
 340:../kernel/tkernel/time_calls.c **** 	if ( (cyccb->cycatr & TA_PHS) != 0 ) {
 1318                             		.loc 5 340 13
 1319 080a ED A5 02                		mov.L	8[r10], r5
 1320 080d A8 5D                   		mov.L	4[r5], r5
 1321                             		.loc 5 340 22
 1322 080f 64 45                   		and	#4, r5
 1323                             		.loc 5 340 5
 1324 0811 61 05                   		cmp	#0, r5
 1325 0813 20 33                   		beq	.L75
 341:../kernel/tkernel/time_calls.c **** 		/* Continue cyclic phase */
 342:../kernel/tkernel/time_calls.c **** 		if ( (cyccb->cycstat & TCYC_STA) == 0 ) {
 1326                             		.loc 5 342 14
 1327 0815 ED A5 02                		mov.L	8[r10], r5
 1328 0818 A8 DD                   		mov.L	12[r5], r5
 1329                             		.loc 5 342 24
 1330 081a 64 15                   		and	#1, r5
 1331                             		.loc 5 342 6
 1332 081c 61 05                   		cmp	#0, r5
 1333 081e 21 53                   		bne	.L78
 343:../kernel/tkernel/time_calls.c **** 			/* Start cyclic handler */
 344:../kernel/tkernel/time_calls.c **** 			tm = cyccb->cyctmeb.time;
 1334                             		.loc 5 344 7
 1335 0820 ED A5 02                		mov.L	8[r10], r5
 1336 0823 A9 DD                   		mov.L	28[r5], r5
 1337 0825 E3 A5                   		mov.L	r5, [r10]
 345:../kernel/tkernel/time_calls.c **** 			if ( knl_abstim_reached(cur, tm) ) {
 1338                             		.loc 5 345 9
 1339 0827 EC A2                   		mov.L	[r10], r2
 1340 0829 ED A1 04                		mov.L	16[r10], r1
 1341 082c 39 F7 F8                		bsr	_knl_abstim_reached
 1342 082f EF 15                   		mov.L	r1, r5
 1343                             		.loc 5 345 7
 1344 0831 61 05                   		cmp	#0, r5
 1345 0833 11                      		beq	.L77
 346:../kernel/tkernel/time_calls.c **** 				tm = knl_cyc_next_time(cyccb);
 1346                             		.loc 5 346 10
 1347 0834 ED A1 02                		mov.L	8[r10], r1
 1348 0837 39 6D F9                		bsr	_knl_cyc_next_time
 1349 083a E3 A1                   		mov.L	r1, [r10]
 1350                             	.L77:
 347:../kernel/tkernel/time_calls.c **** 			}
 348:../kernel/tkernel/time_calls.c **** 			knl_cyc_timer_insert(cyccb, tm);
 1351                             		.loc 5 348 4
 1352 083c EC A2                   		mov.L	[r10], r2
 1353 083e ED A1 02                		mov.L	8[r10], r1
 1354 0841 39 C8 F9                		bsr	_knl_cyc_timer_insert
 1355 0844 2E 2D                   		bra	.L78
 1356                             	.L75:
 349:../kernel/tkernel/time_calls.c **** 		}
 350:../kernel/tkernel/time_calls.c **** 	} else {
 351:../kernel/tkernel/time_calls.c **** 		/* Reset cyclic interval */
 352:../kernel/tkernel/time_calls.c **** 		if ( (cyccb->cycstat & TCYC_STA) != 0 ) {
 1357                             		.loc 5 352 14
 1358 0846 ED A5 02                		mov.L	8[r10], r5
 1359 0849 A8 DD                   		mov.L	12[r5], r5
 1360                             		.loc 5 352 24
 1361 084b 64 15                   		and	#1, r5
 1362                             		.loc 5 352 6
 1363 084d 61 05                   		cmp	#0, r5
 1364 084f 20 0D                   		beq	.L79
 353:../kernel/tkernel/time_calls.c **** 			/* Stop once */
 354:../kernel/tkernel/time_calls.c **** 			knl_timer_delete(&cyccb->cyctmeb);
 1365                             		.loc 5 354 4
 1366 0851 ED A5 02                		mov.L	8[r10], r5
 1367 0854 71 55 14                		add	#20, r5
 1368 0857 EF 51                   		mov.L	r5, r1
 1369 0859 39 E9 F8                		bsr	_knl_timer_delete
 1370                             	.L79:
 355:../kernel/tkernel/time_calls.c **** 		}
 356:../kernel/tkernel/time_calls.c **** 
 357:../kernel/tkernel/time_calls.c **** 		/* FIRST ACTIVATION TIME
 358:../kernel/tkernel/time_calls.c **** 		 *	Adjust the first activation time with TIMER_PERIOD.
 359:../kernel/tkernel/time_calls.c **** 		 *	TIMER_PERIOD is Timer interrupt interval (millisecond).
 360:../kernel/tkernel/time_calls.c **** 		 */
 361:../kernel/tkernel/time_calls.c **** 		tm = cur + cyccb->cyctim + TIMER_PERIOD;
 1371                             		.loc 5 361 19
 1372 085c ED A5 02                		mov.L	8[r10], r5
 1373 085f A9 55                   		mov.L	16[r5], r5
 1374                             		.loc 5 361 12
 1375 0861 06 89 A5 04             		add	16[r10].L, r5
 1376                             		.loc 5 361 6
 1377 0865 62 A5                   		add	#10, r5
 1378 0867 E3 A5                   		mov.L	r5, [r10]
 362:../kernel/tkernel/time_calls.c **** 
 363:../kernel/tkernel/time_calls.c **** 		/* Start cyclic handler */
 364:../kernel/tkernel/time_calls.c **** 		knl_cyc_timer_insert(cyccb, tm);
 1379                             		.loc 5 364 3
 1380 0869 EC A2                   		mov.L	[r10], r2
 1381 086b ED A1 02                		mov.L	8[r10], r1
 1382 086e 39 9B F9                		bsr	_knl_cyc_timer_insert
 1383                             	.L78:
 365:../kernel/tkernel/time_calls.c **** 	}
 366:../kernel/tkernel/time_calls.c **** 	cyccb->cycstat |= TCYC_STA;
 1384                             		.loc 5 366 17
 1385 0871 ED A5 02                		mov.L	8[r10], r5
 1386 0874 A8 DD                   		mov.L	12[r5], r5
 1387 0876 66 14                   		mov.L	#1, r4
 1388 0878 57 54                   		or	r5, r4
 1389 087a ED A5 02                		mov.L	8[r10], r5
 1390 087d A0 DC                   		mov.L	r4, 12[r5]
 1391                             	.L74:
 367:../kernel/tkernel/time_calls.c **** 
 368:../kernel/tkernel/time_calls.c ****     error_exit:
 369:../kernel/tkernel/time_calls.c **** 	END_CRITICAL_SECTION;
 1392                             		.loc 5 369 2
 1393 087f ED A5 03                		mov.L	12[r10], r5
 1394 0882 61 F5                   		cmp	#15, r5
 1395 0884 20 2E                   		beq	.L80
 1396                             		.loc 5 369 2 is_stmt 0 discriminator 1
 1397 0886 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1398 088c EC 54                   		mov.L	[r5], r4
 1399 088e FB 52 00 00 00 00       		mov.L	#_knl_schedtsk, r5
 1400 0894 EC 55                   		mov.L	[r5], r5
 1401 0896 47 54                   		cmp	r5, r4
 1402 0898 20 1A                   		beq	.L80
 1403                             		.loc 5 369 2 discriminator 3
 1404 089a 39 BC F8                		bsr	_knl_isTaskIndependent
 1405 089d EF 15                   		mov.L	r1, r5
 1406 089f 61 05                   		cmp	#0, r5
 1407 08a1 21 11                   		bne	.L80
 1408                             		.loc 5 369 2 discriminator 5
 1409 08a3 FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 1410 08a9 EC 55                   		mov.L	[r5], r5
 1411 08ab 61 05                   		cmp	#0, r5
 1412 08ad 1D                      		bne	.L80
 1413                             		.loc 5 369 2 discriminator 7
 1414 08ae 05 00 00 00             		bsr	_knl_dispatch
 1415                             		.balign 8,3,1
 1416                             	.L80:
 1417                             		.loc 5 369 2 discriminator 9
 1418 08b2 ED A1 03                		mov.L	12[r10], r1
 1419 08b5 05 00 00 00             		bsr	_setint
 1420                             	.LBE9:
 370:../kernel/tkernel/time_calls.c **** 
 371:../kernel/tkernel/time_calls.c **** 	return ercd;
 1421                             		.loc 5 371 9 is_stmt 1 discriminator 9
 1422 08b9 ED A5 01                		mov.L	4[r10], r5
 1423                             	.L72:
 372:../kernel/tkernel/time_calls.c **** }
 1424                             		.loc 5 372 1
 1425 08bc EF 51                   		mov.L	r5, r1
 1426 08be 71 00 18                		add	#24, r0
 1427 08c1 7E B6                   		pop	r6
 1428 08c3 7E BA                   		pop	r10
 1429 08c5 02                      		rts
 1430                             	.LFE52:
 1432                             		.global	_tk_stp_cyc
 1434                             	_tk_stp_cyc:
 1435                             	.LFB53:
 373:../kernel/tkernel/time_calls.c **** #endif /* USE_FUNC_TK_STA_CYC */
 374:../kernel/tkernel/time_calls.c **** 
 375:../kernel/tkernel/time_calls.c **** #ifdef USE_FUNC_TK_STP_CYC
 376:../kernel/tkernel/time_calls.c **** /*
 377:../kernel/tkernel/time_calls.c ****  * Stop cyclic handler 
 378:../kernel/tkernel/time_calls.c ****  */
 379:../kernel/tkernel/time_calls.c **** SYSCALL ER tk_stp_cyc( ID cycid )
 380:../kernel/tkernel/time_calls.c **** {
 1436                             		.loc 5 380 1
 1437 08c6 7E AA                   		push.l	r10
 1438                             	.LCFI55:
 1439 08c8 71 0A F0                		add	#-16, r0, r10
 1440                             	.LCFI56:
 1441 08cb EF A0                   		mov.L	r10, r0
 1442 08cd E7 A1 03                		mov.L	r1, 12[r10]
 381:../kernel/tkernel/time_calls.c **** 	CYCCB	*cyccb;
 382:../kernel/tkernel/time_calls.c **** 	ER	ercd = E_OK;
 1443                             		.loc 5 382 5
 1444 08d0 F8 A6 00                		mov.L	#0, [r10]
 383:../kernel/tkernel/time_calls.c **** 
 384:../kernel/tkernel/time_calls.c **** 	CHECK_CYCID(cycid);
 1445                             		.loc 5 384 2
 1446 08d3 ED A5 03                		mov.L	12[r10], r5
 1447 08d6 61 05                   		cmp	#0, r5
 1448 08d8 2B 09                   		ble	.L82
 1449                             		.loc 5 384 2 is_stmt 0 discriminator 2
 1450 08da ED A5 03                		mov.L	12[r10], r5
 1451 08dd 61 45                   		cmp	#4, r5
 1452 08df 2B 08                   		ble	.L83
 1453                             	.L82:
 1454                             		.loc 5 384 2 discriminator 3
 1455 08e1 FB 56 EE                		mov.L	#-18, r5
 1456 08e4 38 89 00                		bra	.L84
 1457                             	.L83:
 385:../kernel/tkernel/time_calls.c **** 
 386:../kernel/tkernel/time_calls.c **** 	cyccb = get_cyccb(cycid);
 1458                             		.loc 5 386 10 is_stmt 1
 1459 08e7 ED A5 03                		mov.L	12[r10], r5
 1460 08ea 60 15                   		sub	#1, r5
 1461                             		.loc 5 386 8
 1462 08ec 75 15 28                		mul	#40, r5
 1463 08ef 70 55 00 00 00 00       		add	#_knl_cyccb_table, r5
 1464 08f5 E7 A5 01                		mov.L	r5, 4[r10]
 1465                             	.LBB10:
 387:../kernel/tkernel/time_calls.c **** 
 388:../kernel/tkernel/time_calls.c **** 	BEGIN_CRITICAL_SECTION;
 1466                             		.loc 5 388 2
 1467 08f8 05 00 00 00             		bsr	_disint
 1468 08fc E7 A1 02                		mov.L	r1, 8[r10]
 389:../kernel/tkernel/time_calls.c **** 	if ( cyccb->cychdr == NULL ) { /* Unregistered handler */
 1469                             		.loc 5 389 12
 1470 08ff ED A5 01                		mov.L	4[r10], r5
 1471 0902 A8 D5                   		mov.L	8[r5], r5
 1472                             		.loc 5 389 5
 1473 0904 61 05                   		cmp	#0, r5
 1474 0906 1E                      		bne	.L85
 390:../kernel/tkernel/time_calls.c **** 		ercd = E_NOEXS;
 1475                             		.loc 5 390 8
 1476 0907 F8 A6 D6                		mov.L	#-42, [r10]
 1477 090a 2E 27                   		bra	.L86
 1478                             	.L85:
 391:../kernel/tkernel/time_calls.c **** 	} else {
 392:../kernel/tkernel/time_calls.c **** 		if ( (cyccb->cycstat & TCYC_STA) != 0 ) {
 1479                             		.loc 5 392 14
 1480 090c ED A5 01                		mov.L	4[r10], r5
 1481 090f A8 DD                   		mov.L	12[r5], r5
 1482                             		.loc 5 392 24
 1483 0911 64 15                   		and	#1, r5
 1484                             		.loc 5 392 6
 1485 0913 61 05                   		cmp	#0, r5
 1486 0915 20 0D                   		beq	.L87
 393:../kernel/tkernel/time_calls.c **** 			/* Stop cyclic handler */
 394:../kernel/tkernel/time_calls.c **** 			knl_timer_delete(&cyccb->cyctmeb);
 1487                             		.loc 5 394 4
 1488 0917 ED A5 01                		mov.L	4[r10], r5
 1489 091a 71 55 14                		add	#20, r5
 1490 091d EF 51                   		mov.L	r5, r1
 1491 091f 39 23 F8                		bsr	_knl_timer_delete
 1492                             	.L87:
 395:../kernel/tkernel/time_calls.c **** 		}
 396:../kernel/tkernel/time_calls.c **** 		cyccb->cycstat &= ~TCYC_STA;
 1493                             		.loc 5 396 18
 1494 0922 ED A5 01                		mov.L	4[r10], r5
 1495 0925 A8 DD                   		mov.L	12[r5], r5
 1496 0927 FB 46 FE                		mov.L	#-2, r4
 1497 092a 53 54                   		and	r5, r4
 1498 092c ED A5 01                		mov.L	4[r10], r5
 1499 092f A0 DC                   		mov.L	r4, 12[r5]
 1500                             	.L86:
 397:../kernel/tkernel/time_calls.c **** 	}
 398:../kernel/tkernel/time_calls.c **** 	END_CRITICAL_SECTION;
 1501                             		.loc 5 398 2
 1502 0931 ED A5 02                		mov.L	8[r10], r5
 1503 0934 61 F5                   		cmp	#15, r5
 1504 0936 20 2E                   		beq	.L88
 1505                             		.loc 5 398 2 is_stmt 0 discriminator 1
 1506 0938 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1507 093e EC 54                   		mov.L	[r5], r4
 1508 0940 FB 52 00 00 00 00       		mov.L	#_knl_schedtsk, r5
 1509 0946 EC 55                   		mov.L	[r5], r5
 1510 0948 47 54                   		cmp	r5, r4
 1511 094a 20 1A                   		beq	.L88
 1512                             		.loc 5 398 2 discriminator 3
 1513 094c 39 0A F8                		bsr	_knl_isTaskIndependent
 1514 094f EF 15                   		mov.L	r1, r5
 1515 0951 61 05                   		cmp	#0, r5
 1516 0953 21 11                   		bne	.L88
 1517                             		.loc 5 398 2 discriminator 5
 1518 0955 FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 1519 095b EC 55                   		mov.L	[r5], r5
 1520 095d 61 05                   		cmp	#0, r5
 1521 095f 1D                      		bne	.L88
 1522                             		.loc 5 398 2 discriminator 7
 1523 0960 05 00 00 00             		bsr	_knl_dispatch
 1524                             		.balign 8,3,1
 1525                             	.L88:
 1526                             		.loc 5 398 2 discriminator 9
 1527 0964 ED A1 02                		mov.L	8[r10], r1
 1528 0967 05 00 00 00             		bsr	_setint
 1529                             	.LBE10:
 399:../kernel/tkernel/time_calls.c **** 
 400:../kernel/tkernel/time_calls.c **** 	return ercd;
 1530                             		.loc 5 400 9 is_stmt 1 discriminator 9
 1531 096b EC A5                   		mov.L	[r10], r5
 1532                             	.L84:
 401:../kernel/tkernel/time_calls.c **** }
 1533                             		.loc 5 401 1
 1534 096d EF 51                   		mov.L	r5, r1
 1535 096f 3F AA 05                		rtsd	#20, r10-r10
 1536                             	.LFE53:
 1538                             		.global	_tk_ref_cyc
 1540                             	_tk_ref_cyc:
 1541                             	.LFB54:
 402:../kernel/tkernel/time_calls.c **** #endif /* USE_FUNC_TK_STP_CYC */
 403:../kernel/tkernel/time_calls.c **** 
 404:../kernel/tkernel/time_calls.c **** #ifdef USE_FUNC_TK_REF_CYC
 405:../kernel/tkernel/time_calls.c **** /*
 406:../kernel/tkernel/time_calls.c ****  * Refer cyclic handler state
 407:../kernel/tkernel/time_calls.c ****  */
 408:../kernel/tkernel/time_calls.c **** SYSCALL ER tk_ref_cyc( ID cycid, T_RCYC* pk_rcyc )
 409:../kernel/tkernel/time_calls.c **** {
 1542                             		.loc 5 409 1
 1543 0972 7E AA                   		push.l	r10
 1544                             	.LCFI57:
 1545 0974 7E A6                   		push.l	r6
 1546                             	.LCFI58:
 1547 0976 71 0A E4                		add	#-28, r0, r10
 1548                             	.LCFI59:
 1549 0979 EF A0                   		mov.L	r10, r0
 1550 097b E7 A1 05                		mov.L	r1, 20[r10]
 1551 097e E7 A2 06                		mov.L	r2, 24[r10]
 410:../kernel/tkernel/time_calls.c **** 	CYCCB	*cyccb;
 411:../kernel/tkernel/time_calls.c **** 	ABSTIM	tm, cur;
 412:../kernel/tkernel/time_calls.c **** 	ER	ercd = E_OK;
 1552                             		.loc 5 412 5
 1553 0981 F9 A6 01 00             		mov.L	#0, 4[r10]
 413:../kernel/tkernel/time_calls.c **** 
 414:../kernel/tkernel/time_calls.c **** 	CHECK_CYCID(cycid);
 1554                             		.loc 5 414 2
 1555 0985 ED A5 05                		mov.L	20[r10], r5
 1556 0988 61 05                   		cmp	#0, r5
 1557 098a 2B 09                   		ble	.L90
 1558                             		.loc 5 414 2 is_stmt 0 discriminator 2
 1559 098c ED A5 05                		mov.L	20[r10], r5
 1560 098f 61 45                   		cmp	#4, r5
 1561 0991 2B 08                   		ble	.L91
 1562                             	.L90:
 1563                             		.loc 5 414 2 discriminator 3
 1564 0993 FB 56 EE                		mov.L	#-18, r5
 1565 0996 38 D7 00                		bra	.L92
 1566                             	.L91:
 415:../kernel/tkernel/time_calls.c **** 
 416:../kernel/tkernel/time_calls.c **** 	cyccb = get_cyccb(cycid);
 1567                             		.loc 5 416 10 is_stmt 1
 1568 0999 ED A5 05                		mov.L	20[r10], r5
 1569 099c 60 15                   		sub	#1, r5
 1570                             		.loc 5 416 8
 1571 099e 75 15 28                		mul	#40, r5
 1572 09a1 70 55 00 00 00 00       		add	#_knl_cyccb_table, r5
 1573 09a7 E7 A5 02                		mov.L	r5, 8[r10]
 1574                             	.LBB11:
 417:../kernel/tkernel/time_calls.c **** 
 418:../kernel/tkernel/time_calls.c **** 	BEGIN_CRITICAL_SECTION;
 1575                             		.loc 5 418 2
 1576 09aa 05 00 00 00             		bsr	_disint
 1577 09ae E7 A1 03                		mov.L	r1, 12[r10]
 419:../kernel/tkernel/time_calls.c **** 	if ( cyccb->cychdr == NULL ) { /* Unregistered handler */
 1578                             		.loc 5 419 12
 1579 09b1 ED A5 02                		mov.L	8[r10], r5
 1580 09b4 A8 D5                   		mov.L	8[r5], r5
 1581                             		.loc 5 419 5
 1582 09b6 61 05                   		cmp	#0, r5
 1583 09b8 1F                      		bne	.L93
 420:../kernel/tkernel/time_calls.c **** 		ercd = E_NOEXS;
 1584                             		.loc 5 420 8
 1585 09b9 F9 A6 01 D6             		mov.L	#-42, 4[r10]
 1586 09bd 2E 73                   		bra	.L94
 1587                             	.L93:
 421:../kernel/tkernel/time_calls.c **** 	} else {
 422:../kernel/tkernel/time_calls.c **** 		tm = cyccb->cyctmeb.time;
 1588                             		.loc 5 422 6
 1589 09bf ED A5 02                		mov.L	8[r10], r5
 1590 09c2 A9 DD                   		mov.L	28[r5], r5
 1591 09c4 E3 A5                   		mov.L	r5, [r10]
 423:../kernel/tkernel/time_calls.c **** 		cur = lltoul(knl_current_time);
 1592                             		.loc 5 423 9
 1593 09c6 FB 42 00 00 00 00       		mov.L	#_knl_current_time, r4
 1594 09cc EC 45                   		mov.L	[r4], r5
 1595 09ce A8 4E                   		mov.L	4[r4], r6
 1596                             		.loc 5 423 7
 1597 09d0 E7 A5 04                		mov.L	r5, 16[r10]
 424:../kernel/tkernel/time_calls.c **** 		if ( (cyccb->cycstat & TCYC_STA) == 0 ) {
 1598                             		.loc 5 424 14
 1599 09d3 ED A5 02                		mov.L	8[r10], r5
 1600 09d6 A8 DD                   		mov.L	12[r5], r5
 1601                             		.loc 5 424 24
 1602 09d8 64 15                   		and	#1, r5
 1603                             		.loc 5 424 6
 1604 09da 61 05                   		cmp	#0, r5
 1605 09dc 21 17                   		bne	.L95
 425:../kernel/tkernel/time_calls.c **** 			if ( knl_abstim_reached(cur, tm) ) {
 1606                             		.loc 5 425 9
 1607 09de EC A2                   		mov.L	[r10], r2
 1608 09e0 ED A1 04                		mov.L	16[r10], r1
 1609 09e3 39 40 F7                		bsr	_knl_abstim_reached
 1610 09e6 EF 15                   		mov.L	r1, r5
 1611                             		.loc 5 425 7
 1612 09e8 61 05                   		cmp	#0, r5
 1613 09ea 11                      		beq	.L95
 426:../kernel/tkernel/time_calls.c **** 				tm = knl_cyc_next_time(cyccb);
 1614                             		.loc 5 426 10
 1615 09eb ED A1 02                		mov.L	8[r10], r1
 1616 09ee 39 B6 F7                		bsr	_knl_cyc_next_time
 1617 09f1 E3 A1                   		mov.L	r1, [r10]
 1618                             	.L95:
 427:../kernel/tkernel/time_calls.c **** 			}
 428:../kernel/tkernel/time_calls.c **** 		}
 429:../kernel/tkernel/time_calls.c **** 		if ( knl_abstim_reached(cur + TIMER_PERIOD, tm) ) {
 1619                             		.loc 5 429 8
 1620 09f3 ED A5 04                		mov.L	16[r10], r5
 1621 09f6 62 A5                   		add	#10, r5
 1622 09f8 EC A2                   		mov.L	[r10], r2
 1623 09fa EF 51                   		mov.L	r5, r1
 1624 09fc 39 27 F7                		bsr	_knl_abstim_reached
 1625 09ff EF 15                   		mov.L	r1, r5
 1626                             		.loc 5 429 6
 1627 0a01 61 05                   		cmp	#0, r5
 1628 0a03 16                      		beq	.L96
 430:../kernel/tkernel/time_calls.c **** 			tm = 0;
 1629                             		.loc 5 430 7
 1630 0a04 F8 A6 00                		mov.L	#0, [r10]
 1631 0a07 2E 0E                   		bra	.L97
 1632                             	.L96:
 431:../kernel/tkernel/time_calls.c **** 		}
 432:../kernel/tkernel/time_calls.c **** 		else {
 433:../kernel/tkernel/time_calls.c **** 			tm -= (cur + TIMER_PERIOD);
 1633                             		.loc 5 433 7
 1634 0a09 EC A4                   		mov.L	[r10], r4
 1635 0a0b ED A5 04                		mov.L	16[r10], r5
 1636 0a0e FF 05 54                		sub	r5, r4, r5
 1637 0a11 60 A5                   		sub	#10, r5
 1638 0a13 E3 A5                   		mov.L	r5, [r10]
 1639                             	.L97:
 434:../kernel/tkernel/time_calls.c **** 		}
 435:../kernel/tkernel/time_calls.c **** 
 436:../kernel/tkernel/time_calls.c **** 		pk_rcyc->exinf   = cyccb->exinf;
 1640                             		.loc 5 436 27
 1641 0a15 ED A5 02                		mov.L	8[r10], r5
 1642 0a18 EC 54                   		mov.L	[r5], r4
 1643                             		.loc 5 436 20
 1644 0a1a ED A5 06                		mov.L	24[r10], r5
 1645 0a1d E3 54                   		mov.L	r4, [r5]
 437:../kernel/tkernel/time_calls.c **** 		pk_rcyc->lfttim  = tm;
 1646                             		.loc 5 437 20
 1647 0a1f ED A5 06                		mov.L	24[r10], r5
 1648 0a22 EC A4                   		mov.L	[r10], r4
 1649 0a24 A0 5C                   		mov.L	r4, 4[r5]
 438:../kernel/tkernel/time_calls.c **** 		pk_rcyc->cycstat = cyccb->cycstat;
 1650                             		.loc 5 438 27
 1651 0a26 ED A5 02                		mov.L	8[r10], r5
 1652 0a29 A8 DC                   		mov.L	12[r5], r4
 1653                             		.loc 5 438 20
 1654 0a2b ED A5 06                		mov.L	24[r10], r5
 1655 0a2e A0 D4                   		mov.L	r4, 8[r5]
 1656                             	.L94:
 439:../kernel/tkernel/time_calls.c **** 	}
 440:../kernel/tkernel/time_calls.c **** 	END_CRITICAL_SECTION;
 1657                             		.loc 5 440 2
 1658 0a30 ED A5 03                		mov.L	12[r10], r5
 1659 0a33 61 F5                   		cmp	#15, r5
 1660 0a35 20 2E                   		beq	.L98
 1661                             		.loc 5 440 2 is_stmt 0 discriminator 1
 1662 0a37 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1663 0a3d EC 54                   		mov.L	[r5], r4
 1664 0a3f FB 52 00 00 00 00       		mov.L	#_knl_schedtsk, r5
 1665 0a45 EC 55                   		mov.L	[r5], r5
 1666 0a47 47 54                   		cmp	r5, r4
 1667 0a49 20 1A                   		beq	.L98
 1668                             		.loc 5 440 2 discriminator 3
 1669 0a4b 39 0B F7                		bsr	_knl_isTaskIndependent
 1670 0a4e EF 15                   		mov.L	r1, r5
 1671 0a50 61 05                   		cmp	#0, r5
 1672 0a52 21 11                   		bne	.L98
 1673                             		.loc 5 440 2 discriminator 5
 1674 0a54 FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 1675 0a5a EC 55                   		mov.L	[r5], r5
 1676 0a5c 61 05                   		cmp	#0, r5
 1677 0a5e 1D                      		bne	.L98
 1678                             		.loc 5 440 2 discriminator 7
 1679 0a5f 05 00 00 00             		bsr	_knl_dispatch
 1680                             		.balign 8,3,1
 1681                             	.L98:
 1682                             		.loc 5 440 2 discriminator 9
 1683 0a63 ED A1 03                		mov.L	12[r10], r1
 1684 0a66 05 00 00 00             		bsr	_setint
 1685                             	.LBE11:
 441:../kernel/tkernel/time_calls.c **** 
 442:../kernel/tkernel/time_calls.c **** 	return ercd;
 1686                             		.loc 5 442 9 is_stmt 1 discriminator 9
 1687 0a6a ED A5 01                		mov.L	4[r10], r5
 1688                             	.L92:
 443:../kernel/tkernel/time_calls.c **** }
 1689                             		.loc 5 443 1
 1690 0a6d EF 51                   		mov.L	r5, r1
 1691 0a6f 71 00 1C                		add	#28, r0
 1692 0a72 7E B6                   		pop	r6
 1693 0a74 7E BA                   		pop	r10
 1694 0a76 02                      		rts
 1695                             	.LFE54:
 1697                             		.global	_knl_almcb_table
 1698                             		.section	.noinit
 1699                             		.balign 4
 1702                             	_knl_almcb_table:
 1703 00a8 00 00 00 00 00 00 00 00 		.zero	288
 1703      00 00 00 00 00 00 00 00 
 1703      00 00 00 00 00 00 00 00 
 1703      00 00 00 00 00 00 00 00 
 1703      00 00 00 00 00 00 00 00 
 1704                             		.global	_knl_free_almcb
 1705                             		.balign 4
 1708                             	_knl_free_almcb:
 1709 01c8 00 00 00 00 00 00 00 00 		.zero	8
 1710                             		.section P,"ax"
 1711                             		.global	_knl_alarmhandler_initialize
 1713                             	_knl_alarmhandler_initialize:
 1714                             	.LFB55:
 444:../kernel/tkernel/time_calls.c **** #endif /* USE_FUNC_TK_REF_CYC */
 445:../kernel/tkernel/time_calls.c **** 
 446:../kernel/tkernel/time_calls.c **** #if USE_DBGSPT
 447:../kernel/tkernel/time_calls.c **** 
 448:../kernel/tkernel/time_calls.c **** #if USE_OBJECT_NAME
 449:../kernel/tkernel/time_calls.c **** /*
 450:../kernel/tkernel/time_calls.c ****  * Get object name from control block
 451:../kernel/tkernel/time_calls.c ****  */
 452:../kernel/tkernel/time_calls.c **** EXPORT ER knl_cyclichandler_getname(ID id, UB **name)
 453:../kernel/tkernel/time_calls.c **** {
 454:../kernel/tkernel/time_calls.c **** 	CYCCB	*cyccb;
 455:../kernel/tkernel/time_calls.c **** 	ER	ercd = E_OK;
 456:../kernel/tkernel/time_calls.c **** 
 457:../kernel/tkernel/time_calls.c **** 	CHECK_CYCID(id);
 458:../kernel/tkernel/time_calls.c **** 
 459:../kernel/tkernel/time_calls.c **** 	BEGIN_DISABLE_INTERRUPT;
 460:../kernel/tkernel/time_calls.c **** 	cyccb = get_cyccb(id);
 461:../kernel/tkernel/time_calls.c **** 	if ( cyccb->cychdr == NULL ) {
 462:../kernel/tkernel/time_calls.c **** 		ercd = E_NOEXS;
 463:../kernel/tkernel/time_calls.c **** 		goto error_exit;
 464:../kernel/tkernel/time_calls.c **** 	}
 465:../kernel/tkernel/time_calls.c **** 	if ( (cyccb->cycatr & TA_DSNAME) == 0 ) {
 466:../kernel/tkernel/time_calls.c **** 		ercd = E_OBJ;
 467:../kernel/tkernel/time_calls.c **** 		goto error_exit;
 468:../kernel/tkernel/time_calls.c **** 	}
 469:../kernel/tkernel/time_calls.c **** 	*name = cyccb->name;
 470:../kernel/tkernel/time_calls.c **** 
 471:../kernel/tkernel/time_calls.c ****     error_exit:
 472:../kernel/tkernel/time_calls.c **** 	END_DISABLE_INTERRUPT;
 473:../kernel/tkernel/time_calls.c **** 
 474:../kernel/tkernel/time_calls.c **** 	return ercd;
 475:../kernel/tkernel/time_calls.c **** }
 476:../kernel/tkernel/time_calls.c **** #endif /* USE_OBJECT_NAME */
 477:../kernel/tkernel/time_calls.c **** 
 478:../kernel/tkernel/time_calls.c **** #ifdef USE_FUNC_TD_LST_CYC
 479:../kernel/tkernel/time_calls.c **** /*
 480:../kernel/tkernel/time_calls.c ****  * Refer cyclic handler usage state
 481:../kernel/tkernel/time_calls.c ****  */
 482:../kernel/tkernel/time_calls.c **** SYSCALL INT td_lst_cyc( ID list[], INT nent )
 483:../kernel/tkernel/time_calls.c **** {
 484:../kernel/tkernel/time_calls.c **** 	CYCCB	*cyccb, *end;
 485:../kernel/tkernel/time_calls.c **** 	INT	n = 0;
 486:../kernel/tkernel/time_calls.c **** 
 487:../kernel/tkernel/time_calls.c **** 	BEGIN_DISABLE_INTERRUPT;
 488:../kernel/tkernel/time_calls.c **** 	end = knl_cyccb_table + NUM_CYCID;
 489:../kernel/tkernel/time_calls.c **** 	for ( cyccb = knl_cyccb_table; cyccb < end; cyccb++ ) {
 490:../kernel/tkernel/time_calls.c **** 		/* Unregistered handler */
 491:../kernel/tkernel/time_calls.c **** 		if ( cyccb->cychdr == NULL ) {
 492:../kernel/tkernel/time_calls.c **** 			continue;
 493:../kernel/tkernel/time_calls.c **** 		}
 494:../kernel/tkernel/time_calls.c **** 
 495:../kernel/tkernel/time_calls.c **** 		if ( n++ < nent ) {
 496:../kernel/tkernel/time_calls.c **** 			*list++ = ID_CYC(cyccb - knl_cyccb_table);
 497:../kernel/tkernel/time_calls.c **** 		}
 498:../kernel/tkernel/time_calls.c **** 	}
 499:../kernel/tkernel/time_calls.c **** 	END_DISABLE_INTERRUPT;
 500:../kernel/tkernel/time_calls.c **** 
 501:../kernel/tkernel/time_calls.c **** 	return n;
 502:../kernel/tkernel/time_calls.c **** }
 503:../kernel/tkernel/time_calls.c **** #endif /* USE_FUNC_TD_LST_CYC */
 504:../kernel/tkernel/time_calls.c **** 
 505:../kernel/tkernel/time_calls.c **** #ifdef USE_FUNC_TD_REF_CYC
 506:../kernel/tkernel/time_calls.c **** /*
 507:../kernel/tkernel/time_calls.c ****  * Refer cyclic handler state
 508:../kernel/tkernel/time_calls.c ****  */
 509:../kernel/tkernel/time_calls.c **** SYSCALL ER td_ref_cyc( ID cycid, TD_RCYC* pk_rcyc )
 510:../kernel/tkernel/time_calls.c **** {
 511:../kernel/tkernel/time_calls.c **** 	CYCCB	*cyccb;
 512:../kernel/tkernel/time_calls.c **** 	ABSTIM	tm, cur;
 513:../kernel/tkernel/time_calls.c **** 	ER	ercd = E_OK;
 514:../kernel/tkernel/time_calls.c **** 
 515:../kernel/tkernel/time_calls.c **** 	CHECK_CYCID(cycid);
 516:../kernel/tkernel/time_calls.c **** 
 517:../kernel/tkernel/time_calls.c **** 	cyccb = get_cyccb(cycid);
 518:../kernel/tkernel/time_calls.c **** 
 519:../kernel/tkernel/time_calls.c **** 	BEGIN_DISABLE_INTERRUPT;
 520:../kernel/tkernel/time_calls.c **** 	if ( cyccb->cychdr == NULL ) { /* Unregistered handler */
 521:../kernel/tkernel/time_calls.c **** 		ercd = E_NOEXS;
 522:../kernel/tkernel/time_calls.c **** 	} else {
 523:../kernel/tkernel/time_calls.c **** 		tm = cyccb->cyctmeb.time;
 524:../kernel/tkernel/time_calls.c **** 		cur = lltoul(knl_current_time);
 525:../kernel/tkernel/time_calls.c **** 		if ( (cyccb->cycstat & TCYC_STA) == 0 ) {
 526:../kernel/tkernel/time_calls.c **** 			if ( knl_abstim_reached(cur, tm) ) {
 527:../kernel/tkernel/time_calls.c **** 				tm = knl_cyc_next_time(cyccb);
 528:../kernel/tkernel/time_calls.c **** 			}
 529:../kernel/tkernel/time_calls.c **** 		}
 530:../kernel/tkernel/time_calls.c **** 		if ( knl_abstim_reached(cur + TIMER_PERIOD, tm) ) {
 531:../kernel/tkernel/time_calls.c **** 			tm = 0;
 532:../kernel/tkernel/time_calls.c **** 		}
 533:../kernel/tkernel/time_calls.c **** 		else {
 534:../kernel/tkernel/time_calls.c **** 			tm -= (cur + TIMER_PERIOD);
 535:../kernel/tkernel/time_calls.c **** 		}
 536:../kernel/tkernel/time_calls.c **** 
 537:../kernel/tkernel/time_calls.c **** 		pk_rcyc->exinf   = cyccb->exinf;
 538:../kernel/tkernel/time_calls.c **** 		pk_rcyc->lfttim  = lltoul(tm);
 539:../kernel/tkernel/time_calls.c **** 		pk_rcyc->cycstat = cyccb->cycstat;
 540:../kernel/tkernel/time_calls.c **** 	}
 541:../kernel/tkernel/time_calls.c **** 	END_DISABLE_INTERRUPT;
 542:../kernel/tkernel/time_calls.c **** 
 543:../kernel/tkernel/time_calls.c **** 	return ercd;
 544:../kernel/tkernel/time_calls.c **** }
 545:../kernel/tkernel/time_calls.c **** #endif /* USE_FUNC_TD_REF_CYC */
 546:../kernel/tkernel/time_calls.c **** 
 547:../kernel/tkernel/time_calls.c **** #endif /* USE_DBGSPT */
 548:../kernel/tkernel/time_calls.c **** #endif /* USE_CYCLICHANDLER */
 549:../kernel/tkernel/time_calls.c **** 
 550:../kernel/tkernel/time_calls.c **** /* ------------------------------------------------------------------------ */
 551:../kernel/tkernel/time_calls.c **** /*
 552:../kernel/tkernel/time_calls.c ****  *	Alarm handler
 553:../kernel/tkernel/time_calls.c ****  */
 554:../kernel/tkernel/time_calls.c **** 
 555:../kernel/tkernel/time_calls.c **** #if USE_ALARMHANDLER
 556:../kernel/tkernel/time_calls.c **** 
 557:../kernel/tkernel/time_calls.c **** Noinit(EXPORT ALMCB knl_almcb_table[NUM_ALMID]);	/* Alarm handler control block */
 558:../kernel/tkernel/time_calls.c **** Noinit(EXPORT QUEUE	knl_free_almcb);	/* FreeQue */
 559:../kernel/tkernel/time_calls.c **** 
 560:../kernel/tkernel/time_calls.c **** 
 561:../kernel/tkernel/time_calls.c **** /*
 562:../kernel/tkernel/time_calls.c ****  * Initialization of alarm handler control block 
 563:../kernel/tkernel/time_calls.c ****  */
 564:../kernel/tkernel/time_calls.c **** EXPORT ER knl_alarmhandler_initialize( void )
 565:../kernel/tkernel/time_calls.c **** {
 1715                             		.loc 5 565 1
 1716 0a77 7E AA                   		push.l	r10
 1717                             	.LCFI60:
 1718 0a79 71 0A F8                		add	#-8, r0, r10
 1719                             	.LCFI61:
 1720 0a7c EF A0                   		mov.L	r10, r0
 566:../kernel/tkernel/time_calls.c **** 	ALMCB	*almcb, *end;
 567:../kernel/tkernel/time_calls.c **** 
 568:../kernel/tkernel/time_calls.c **** 	/* Get system information */
 569:../kernel/tkernel/time_calls.c **** 	if ( NUM_ALMID < 1 ) {
 570:../kernel/tkernel/time_calls.c **** 		return E_SYS;
 571:../kernel/tkernel/time_calls.c **** 	}
 572:../kernel/tkernel/time_calls.c **** 
 573:../kernel/tkernel/time_calls.c **** 	/* Register all control blocks onto FreeQue */
 574:../kernel/tkernel/time_calls.c **** 	QueInit(&knl_free_almcb);
 1721                             		.loc 5 574 2
 1722 0a7e FB 12 00 00 00 00       		mov.L	#_knl_free_almcb, r1
 1723 0a84 39 7C F5                		bsr	_QueInit
 575:../kernel/tkernel/time_calls.c **** 	end = knl_almcb_table + NUM_ALMID;
 1724                             		.loc 5 575 6
 1725 0a87 F9 A2 01 00 00 00 00    		mov.L	#_knl_almcb_table+288, 4[r10]
 576:../kernel/tkernel/time_calls.c **** 	for ( almcb = knl_almcb_table; almcb < end; almcb++ ) {
 1726                             		.loc 5 576 14
 1727 0a8e F8 A2 00 00 00 00       		mov.L	#_knl_almcb_table, [r10]
 1728                             		.loc 5 576 2
 1729 0a94 2E 19                   		bra	.L100
 1730                             	.L101:
 577:../kernel/tkernel/time_calls.c **** 		almcb->almhdr = NULL; /* Unregistered handler */
 1731                             		.loc 5 577 17 discriminator 3
 1732 0a96 EC A5                   		mov.L	[r10], r5
 1733 0a98 3E 52 00                		mov.L	#0, 8[r5]
 578:../kernel/tkernel/time_calls.c **** 		QueInsert((QUEUE*)almcb, &knl_free_almcb);
 1734                             		.loc 5 578 3 discriminator 3
 1735 0a9b FB 22 00 00 00 00       		mov.L	#_knl_free_almcb, r2
 1736 0aa1 EC A1                   		mov.L	[r10], r1
 1737 0aa3 39 76 F5                		bsr	_QueInsert
 576:../kernel/tkernel/time_calls.c **** 	for ( almcb = knl_almcb_table; almcb < end; almcb++ ) {
 1738                             		.loc 5 576 51 discriminator 3
 1739 0aa6 EC A5                   		mov.L	[r10], r5
 1740 0aa8 71 55 24                		add	#36, r5
 1741 0aab E3 A5                   		mov.L	r5, [r10]
 1742                             	.L100:
 576:../kernel/tkernel/time_calls.c **** 	for ( almcb = knl_almcb_table; almcb < end; almcb++ ) {
 1743                             		.loc 5 576 2 discriminator 1
 1744 0aad EC A4                   		mov.L	[r10], r4
 1745 0aaf ED A5 01                		mov.L	4[r10], r5
 1746 0ab2 47 54                   		cmp	r5, r4
 1747 0ab4 23 E2                   		bltu	.L101
 579:../kernel/tkernel/time_calls.c **** 	}
 580:../kernel/tkernel/time_calls.c **** 
 581:../kernel/tkernel/time_calls.c **** 	return E_OK;
 1748                             		.loc 5 581 9
 1749 0ab6 66 05                   		mov.L	#0, r5
 582:../kernel/tkernel/time_calls.c **** }
 1750                             		.loc 5 582 1
 1751 0ab8 EF 51                   		mov.L	r5, r1
 1752 0aba 3F AA 03                		rtsd	#12, r10-r10
 1753                             	.LFE55:
 1755                             		.global	_knl_call_almhdr
 1757                             	_knl_call_almhdr:
 1758                             	.LFB56:
 583:../kernel/tkernel/time_calls.c **** 
 584:../kernel/tkernel/time_calls.c **** 
 585:../kernel/tkernel/time_calls.c **** /*
 586:../kernel/tkernel/time_calls.c ****  * Alarm handler start routine
 587:../kernel/tkernel/time_calls.c ****  */
 588:../kernel/tkernel/time_calls.c **** EXPORT void knl_call_almhdr( ALMCB *almcb )
 589:../kernel/tkernel/time_calls.c **** {
 1759                             		.loc 5 589 1
 1760 0abd 7E AA                   		push.l	r10
 1761                             	.LCFI62:
 1762 0abf 71 0A FC                		add	#-4, r0, r10
 1763                             	.LCFI63:
 1764 0ac2 EF A0                   		mov.L	r10, r0
 1765 0ac4 E3 A1                   		mov.L	r1, [r10]
 590:../kernel/tkernel/time_calls.c **** 	almcb->almstat &= ~TALM_STA;
 1766                             		.loc 5 590 17
 1767 0ac6 EC A5                   		mov.L	[r10], r5
 1768 0ac8 A8 DD                   		mov.L	12[r5], r5
 1769 0aca FB 46 FE                		mov.L	#-2, r4
 1770 0acd 53 54                   		and	r5, r4
 1771 0acf EC A5                   		mov.L	[r10], r5
 1772 0ad1 A0 DC                   		mov.L	r4, 12[r5]
 591:../kernel/tkernel/time_calls.c **** 
 592:../kernel/tkernel/time_calls.c **** 	/* Execute alarm handler/ Enable interrupt nesting */
 593:../kernel/tkernel/time_calls.c **** 	ENABLE_INTERRUPT_UPTO(TIMER_INTLEVEL);
 1773                             		.loc 5 593 2
 1774 0ad3 66 01                   		mov.L	#0, r1
 1775 0ad5 05 00 00 00             		bsr	_setint
 594:../kernel/tkernel/time_calls.c **** 	CallUserHandlerP1(almcb->exinf, almcb->almhdr, almcb);
 1776                             		.loc 5 594 2
 1777 0ad9 EC A5                   		mov.L	[r10], r5
 1778 0adb A8 D5                   		mov.L	8[r5], r5
 1779 0add EC A4                   		mov.L	[r10], r4
 1780 0adf EC 44                   		mov.L	[r4], r4
 1781 0ae1 EF 41                   		mov.L	r4, r1
 1782 0ae3 7F 15                   		jsr	r5
 1783                             	.LVL2:
 595:../kernel/tkernel/time_calls.c **** 	DISABLE_INTERRUPT;
 1784                             		.loc 5 595 2
 1785 0ae5 05 00 00 00             		bsr	_disint
 596:../kernel/tkernel/time_calls.c **** }
 1786                             		.loc 5 596 1
 1787 0ae9 03                      		nop
 1788 0aea 3F AA 02                		rtsd	#8, r10-r10
 1789                             	.LFE56:
 1791                             		.global	_tk_cre_alm
 1793                             	_tk_cre_alm:
 1794                             	.LFB57:
 597:../kernel/tkernel/time_calls.c **** 
 598:../kernel/tkernel/time_calls.c **** 
 599:../kernel/tkernel/time_calls.c **** /*
 600:../kernel/tkernel/time_calls.c ****  * Create alarm handler
 601:../kernel/tkernel/time_calls.c ****  */
 602:../kernel/tkernel/time_calls.c **** SYSCALL ID tk_cre_alm( CONST T_CALM *pk_calm )
 603:../kernel/tkernel/time_calls.c **** {
 1795                             		.loc 5 603 1
 1796 0aed 6E 7A                   		pushm	r7-r10
 1797                             	.LCFI64:
 1798 0aef 71 0A EC                		add	#-20, r0, r10
 1799                             	.LCFI65:
 1800 0af2 EF A0                   		mov.L	r10, r0
 1801 0af4 E7 A1 04                		mov.L	r1, 16[r10]
 604:../kernel/tkernel/time_calls.c **** #if CHK_RSATR
 605:../kernel/tkernel/time_calls.c **** 	const ATR VALID_ALMATR = {
 1802                             		.loc 5 605 12
 1803 0af7 F9 A6 01 01             		mov.L	#1, 4[r10]
 606:../kernel/tkernel/time_calls.c **** 		 TA_HLNG
 607:../kernel/tkernel/time_calls.c **** #if USE_OBJECT_NAME
 608:../kernel/tkernel/time_calls.c **** 		|TA_DSNAME
 609:../kernel/tkernel/time_calls.c **** #endif
 610:../kernel/tkernel/time_calls.c **** 	};
 611:../kernel/tkernel/time_calls.c **** #endif
 612:../kernel/tkernel/time_calls.c **** 	ALMCB	*almcb;
 613:../kernel/tkernel/time_calls.c **** 	ER	ercd = E_OK;
 1804                             		.loc 5 613 5
 1805 0afb F8 A6 00                		mov.L	#0, [r10]
 614:../kernel/tkernel/time_calls.c **** 
 615:../kernel/tkernel/time_calls.c **** 	CHECK_RSATR(pk_calm->almatr, VALID_ALMATR);
 1806                             		.loc 5 615 2
 1807 0afe ED A5 04                		mov.L	16[r10], r5
 1808 0b01 A8 5C                   		mov.L	4[r5], r4
 1809 0b03 ED A5 01                		mov.L	4[r10], r5
 1810 0b06 7E 05                   		not	r5
 1811 0b08 53 45                   		and	r4, r5
 1812 0b0a 61 05                   		cmp	#0, r5
 1813 0b0c 17                      		beq	.L105
 1814                             		.loc 5 615 2 is_stmt 0 discriminator 1
 1815 0b0d FB 56 F5                		mov.L	#-11, r5
 1816 0b10 38 A6 00                		bra	.L106
 1817                             	.L105:
 616:../kernel/tkernel/time_calls.c **** 	CHECK_PAR(pk_calm->almhdr != NULL);
 1818                             		.loc 5 616 2 is_stmt 1
 1819 0b13 ED A5 04                		mov.L	16[r10], r5
 1820 0b16 A8 D5                   		mov.L	8[r5], r5
 1821 0b18 61 05                   		cmp	#0, r5
 1822 0b1a 1F                      		bne	.L107
 1823                             		.loc 5 616 2 is_stmt 0 discriminator 1
 1824 0b1b FB 56 EF                		mov.L	#-17, r5
 1825 0b1e 38 98 00                		bra	.L106
 1826                             	.L107:
 1827                             	.LBB12:
 617:../kernel/tkernel/time_calls.c **** 
 618:../kernel/tkernel/time_calls.c **** 	BEGIN_CRITICAL_SECTION;
 1828                             		.loc 5 618 2 is_stmt 1
 1829 0b21 05 00 00 00             		bsr	_disint
 1830 0b25 E7 A1 02                		mov.L	r1, 8[r10]
 619:../kernel/tkernel/time_calls.c **** 	/* Get control block from free queue */
 620:../kernel/tkernel/time_calls.c **** 	almcb = (ALMCB*)QueRemoveNext(&knl_free_almcb);
 1831                             		.loc 5 620 18
 1832 0b28 FB 12 00 00 00 00       		mov.L	#_knl_free_almcb, r1
 1833 0b2e 39 46 F5                		bsr	_QueRemoveNext
 1834 0b31 E7 A1 03                		mov.L	r1, 12[r10]
 621:../kernel/tkernel/time_calls.c **** 	if ( almcb == NULL ) {
 1835                             		.loc 5 621 5
 1836 0b34 ED A5 03                		mov.L	12[r10], r5
 1837 0b37 61 05                   		cmp	#0, r5
 1838 0b39 1E                      		bne	.L108
 622:../kernel/tkernel/time_calls.c **** 		ercd = E_LIMIT;
 1839                             		.loc 5 622 8
 1840 0b3a F8 A6 DE                		mov.L	#-34, [r10]
 623:../kernel/tkernel/time_calls.c **** 		goto error_exit;
 1841                             		.loc 5 623 3
 1842 0b3d 2E 3D                   		bra	.L109
 1843                             	.L108:
 624:../kernel/tkernel/time_calls.c **** 	}
 625:../kernel/tkernel/time_calls.c **** 
 626:../kernel/tkernel/time_calls.c **** 	/* Initialize control block */
 627:../kernel/tkernel/time_calls.c **** 	almcb->exinf   = pk_calm->exinf;
 1844                             		.loc 5 627 26
 1845 0b3f ED A5 04                		mov.L	16[r10], r5
 1846 0b42 EC 54                   		mov.L	[r5], r4
 1847                             		.loc 5 627 17
 1848 0b44 ED A5 03                		mov.L	12[r10], r5
 1849 0b47 E3 54                   		mov.L	r4, [r5]
 628:../kernel/tkernel/time_calls.c **** 	almcb->almatr  = pk_calm->almatr;
 1850                             		.loc 5 628 26
 1851 0b49 ED A5 04                		mov.L	16[r10], r5
 1852 0b4c A8 5C                   		mov.L	4[r5], r4
 1853                             		.loc 5 628 17
 1854 0b4e ED A5 03                		mov.L	12[r10], r5
 1855 0b51 A0 5C                   		mov.L	r4, 4[r5]
 629:../kernel/tkernel/time_calls.c **** 	almcb->almhdr  = pk_calm->almhdr;
 1856                             		.loc 5 629 26
 1857 0b53 ED A5 04                		mov.L	16[r10], r5
 1858 0b56 A8 D4                   		mov.L	8[r5], r4
 1859                             		.loc 5 629 17
 1860 0b58 ED A5 03                		mov.L	12[r10], r5
 1861 0b5b A0 D4                   		mov.L	r4, 8[r5]
 630:../kernel/tkernel/time_calls.c **** 	almcb->almstat = TALM_STP;
 1862                             		.loc 5 630 17
 1863 0b5d ED A5 03                		mov.L	12[r10], r5
 1864 0b60 3E 53 00                		mov.L	#0, 12[r5]
 631:../kernel/tkernel/time_calls.c **** #if USE_OBJECT_NAME
 632:../kernel/tkernel/time_calls.c **** 	if ( (pk_calm->almatr & TA_DSNAME) != 0 ) {
 633:../kernel/tkernel/time_calls.c **** 		knl_strncpy((char*)almcb->name, (char*)pk_calm->dsname, OBJECT_NAME_LENGTH);
 634:../kernel/tkernel/time_calls.c **** 	}
 635:../kernel/tkernel/time_calls.c **** #endif
 636:../kernel/tkernel/time_calls.c **** 
 637:../kernel/tkernel/time_calls.c **** 	ercd = ID_ALM(almcb - knl_almcb_table);
 1865                             		.loc 5 637 9
 1866 0b63 ED A5 03                		mov.L	12[r10], r5
 1867 0b66 FB 72 00 00 00 00       		mov.L	#_knl_almcb_table, r7
 1868 0b6c 43 75                   		sub	r7, r5
 1869 0b6e 6A 25                   		shar	#2, r5
 1870 0b70 74 15 39 8E E3 38       		mul	#0x38e38e39, r5
 1871                             		.loc 5 637 7
 1872 0b76 62 15                   		add	#1, r5
 1873 0b78 E3 A5                   		mov.L	r5, [r10]
 1874                             	.L109:
 638:../kernel/tkernel/time_calls.c **** 
 639:../kernel/tkernel/time_calls.c ****     error_exit:
 640:../kernel/tkernel/time_calls.c **** 	END_CRITICAL_SECTION;
 1875                             		.loc 5 640 2
 1876 0b7a ED A5 02                		mov.L	8[r10], r5
 1877 0b7d 61 F5                   		cmp	#15, r5
 1878 0b7f 20 2E                   		beq	.L110
 1879                             		.loc 5 640 2 is_stmt 0 discriminator 1
 1880 0b81 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1881 0b87 EC 54                   		mov.L	[r5], r4
 1882 0b89 FB 52 00 00 00 00       		mov.L	#_knl_schedtsk, r5
 1883 0b8f EC 55                   		mov.L	[r5], r5
 1884 0b91 47 54                   		cmp	r5, r4
 1885 0b93 20 1A                   		beq	.L110
 1886                             		.loc 5 640 2 discriminator 3
 1887 0b95 39 C1 F5                		bsr	_knl_isTaskIndependent
 1888 0b98 EF 15                   		mov.L	r1, r5
 1889 0b9a 61 05                   		cmp	#0, r5
 1890 0b9c 21 11                   		bne	.L110
 1891                             		.loc 5 640 2 discriminator 5
 1892 0b9e FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 1893 0ba4 EC 55                   		mov.L	[r5], r5
 1894 0ba6 61 05                   		cmp	#0, r5
 1895 0ba8 1D                      		bne	.L110
 1896                             		.loc 5 640 2 discriminator 7
 1897 0ba9 05 00 00 00             		bsr	_knl_dispatch
 1898                             		.balign 8,3,1
 1899                             	.L110:
 1900                             		.loc 5 640 2 discriminator 9
 1901 0bad ED A1 02                		mov.L	8[r10], r1
 1902 0bb0 05 00 00 00             		bsr	_setint
 1903                             	.LBE12:
 641:../kernel/tkernel/time_calls.c **** 
 642:../kernel/tkernel/time_calls.c **** 	return ercd;
 1904                             		.loc 5 642 9 is_stmt 1 discriminator 9
 1905 0bb4 EC A5                   		mov.L	[r10], r5
 1906                             	.L106:
 643:../kernel/tkernel/time_calls.c **** }
 1907                             		.loc 5 643 1
 1908 0bb6 EF 51                   		mov.L	r5, r1
 1909 0bb8 3F 7A 09                		rtsd	#36, r7-r10
 1910                             	.LFE57:
 1912                             		.global	_tk_del_alm
 1914                             	_tk_del_alm:
 1915                             	.LFB58:
 644:../kernel/tkernel/time_calls.c **** 
 645:../kernel/tkernel/time_calls.c **** #ifdef USE_FUNC_TK_DEL_ALM
 646:../kernel/tkernel/time_calls.c **** /*
 647:../kernel/tkernel/time_calls.c ****  * Delete alarm handler
 648:../kernel/tkernel/time_calls.c ****  */
 649:../kernel/tkernel/time_calls.c **** SYSCALL ER tk_del_alm( ID almid )
 650:../kernel/tkernel/time_calls.c **** {
 1916                             		.loc 5 650 1
 1917 0bbb 7E AA                   		push.l	r10
 1918                             	.LCFI66:
 1919 0bbd 71 0A F0                		add	#-16, r0, r10
 1920                             	.LCFI67:
 1921 0bc0 EF A0                   		mov.L	r10, r0
 1922 0bc2 E7 A1 03                		mov.L	r1, 12[r10]
 651:../kernel/tkernel/time_calls.c **** 	ALMCB	*almcb;
 652:../kernel/tkernel/time_calls.c **** 	ER	ercd = E_OK;
 1923                             		.loc 5 652 5
 1924 0bc5 F8 A6 00                		mov.L	#0, [r10]
 653:../kernel/tkernel/time_calls.c **** 
 654:../kernel/tkernel/time_calls.c **** 	CHECK_ALMID(almid);
 1925                             		.loc 5 654 2
 1926 0bc8 ED A5 03                		mov.L	12[r10], r5
 1927 0bcb 61 05                   		cmp	#0, r5
 1928 0bcd 2B 09                   		ble	.L112
 1929                             		.loc 5 654 2 is_stmt 0 discriminator 2
 1930 0bcf ED A5 03                		mov.L	12[r10], r5
 1931 0bd2 61 85                   		cmp	#8, r5
 1932 0bd4 2B 08                   		ble	.L113
 1933                             	.L112:
 1934                             		.loc 5 654 2 discriminator 3
 1935 0bd6 FB 56 EE                		mov.L	#-18, r5
 1936 0bd9 38 8C 00                		bra	.L114
 1937                             	.L113:
 655:../kernel/tkernel/time_calls.c **** 
 656:../kernel/tkernel/time_calls.c **** 	almcb = get_almcb(almid);
 1938                             		.loc 5 656 10 is_stmt 1
 1939 0bdc ED A5 03                		mov.L	12[r10], r5
 1940 0bdf 60 15                   		sub	#1, r5
 1941                             		.loc 5 656 8
 1942 0be1 75 15 24                		mul	#36, r5
 1943 0be4 70 55 00 00 00 00       		add	#_knl_almcb_table, r5
 1944 0bea E7 A5 01                		mov.L	r5, 4[r10]
 1945                             	.LBB13:
 657:../kernel/tkernel/time_calls.c **** 
 658:../kernel/tkernel/time_calls.c **** 	BEGIN_CRITICAL_SECTION;
 1946                             		.loc 5 658 2
 1947 0bed 05 00 00 00             		bsr	_disint
 1948 0bf1 E7 A1 02                		mov.L	r1, 8[r10]
 659:../kernel/tkernel/time_calls.c **** 	if ( almcb->almhdr == NULL ) { /* Unregistered handler */
 1949                             		.loc 5 659 12
 1950 0bf4 ED A5 01                		mov.L	4[r10], r5
 1951 0bf7 A8 D5                   		mov.L	8[r5], r5
 1952                             		.loc 5 659 5
 1953 0bf9 61 05                   		cmp	#0, r5
 1954 0bfb 1E                      		bne	.L115
 660:../kernel/tkernel/time_calls.c **** 		ercd = E_NOEXS;
 1955                             		.loc 5 660 8
 1956 0bfc F8 A6 D6                		mov.L	#-42, [r10]
 1957 0bff 2E 2A                   		bra	.L116
 1958                             	.L115:
 661:../kernel/tkernel/time_calls.c **** 	} else {
 662:../kernel/tkernel/time_calls.c **** 		if ( (almcb->almstat & TALM_STA) != 0 ) {
 1959                             		.loc 5 662 14
 1960 0c01 ED A5 01                		mov.L	4[r10], r5
 1961 0c04 A8 DD                   		mov.L	12[r5], r5
 1962                             		.loc 5 662 24
 1963 0c06 64 15                   		and	#1, r5
 1964                             		.loc 5 662 6
 1965 0c08 61 05                   		cmp	#0, r5
 1966 0c0a 20 0D                   		beq	.L117
 663:../kernel/tkernel/time_calls.c **** 			/* Delete from timer event queue */
 664:../kernel/tkernel/time_calls.c **** 			knl_timer_delete(&almcb->almtmeb);
 1967                             		.loc 5 664 4
 1968 0c0c ED A5 01                		mov.L	4[r10], r5
 1969 0c0f 71 55 10                		add	#16, r5
 1970 0c12 EF 51                   		mov.L	r5, r1
 1971 0c14 39 2E F5                		bsr	_knl_timer_delete
 1972                             	.L117:
 665:../kernel/tkernel/time_calls.c **** 		}
 666:../kernel/tkernel/time_calls.c **** 
 667:../kernel/tkernel/time_calls.c **** 		/* Return to FreeQue */
 668:../kernel/tkernel/time_calls.c **** 		QueInsert((QUEUE*)almcb, &knl_free_almcb);
 1973                             		.loc 5 668 3
 1974 0c17 FB 22 00 00 00 00       		mov.L	#_knl_free_almcb, r2
 1975 0c1d ED A1 01                		mov.L	4[r10], r1
 1976 0c20 39 F9 F3                		bsr	_QueInsert
 669:../kernel/tkernel/time_calls.c **** 		almcb->almhdr = NULL; /* Unregistered handler */
 1977                             		.loc 5 669 17
 1978 0c23 ED A5 01                		mov.L	4[r10], r5
 1979 0c26 3E 52 00                		mov.L	#0, 8[r5]
 1980                             	.L116:
 670:../kernel/tkernel/time_calls.c **** 	}
 671:../kernel/tkernel/time_calls.c **** 	END_CRITICAL_SECTION;
 1981                             		.loc 5 671 2
 1982 0c29 ED A5 02                		mov.L	8[r10], r5
 1983 0c2c 61 F5                   		cmp	#15, r5
 1984 0c2e 20 2E                   		beq	.L118
 1985                             		.loc 5 671 2 is_stmt 0 discriminator 1
 1986 0c30 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1987 0c36 EC 54                   		mov.L	[r5], r4
 1988 0c38 FB 52 00 00 00 00       		mov.L	#_knl_schedtsk, r5
 1989 0c3e EC 55                   		mov.L	[r5], r5
 1990 0c40 47 54                   		cmp	r5, r4
 1991 0c42 20 1A                   		beq	.L118
 1992                             		.loc 5 671 2 discriminator 3
 1993 0c44 39 12 F5                		bsr	_knl_isTaskIndependent
 1994 0c47 EF 15                   		mov.L	r1, r5
 1995 0c49 61 05                   		cmp	#0, r5
 1996 0c4b 21 11                   		bne	.L118
 1997                             		.loc 5 671 2 discriminator 5
 1998 0c4d FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 1999 0c53 EC 55                   		mov.L	[r5], r5
 2000 0c55 61 05                   		cmp	#0, r5
 2001 0c57 1D                      		bne	.L118
 2002                             		.loc 5 671 2 discriminator 7
 2003 0c58 05 00 00 00             		bsr	_knl_dispatch
 2004                             		.balign 8,3,1
 2005                             	.L118:
 2006                             		.loc 5 671 2 discriminator 9
 2007 0c5c ED A1 02                		mov.L	8[r10], r1
 2008 0c5f 05 00 00 00             		bsr	_setint
 2009                             	.LBE13:
 672:../kernel/tkernel/time_calls.c **** 
 673:../kernel/tkernel/time_calls.c **** 	return ercd;
 2010                             		.loc 5 673 9 is_stmt 1 discriminator 9
 2011 0c63 EC A5                   		mov.L	[r10], r5
 2012                             	.L114:
 674:../kernel/tkernel/time_calls.c **** }
 2013                             		.loc 5 674 1
 2014 0c65 EF 51                   		mov.L	r5, r1
 2015 0c67 3F AA 05                		rtsd	#20, r10-r10
 2016                             	.LFE58:
 2019                             	_knl_immediate_call_almhdr:
 2020                             	.LFB59:
 675:../kernel/tkernel/time_calls.c **** #endif /* USE_FUNC_TK_DEL_ALM */
 676:../kernel/tkernel/time_calls.c **** 
 677:../kernel/tkernel/time_calls.c **** /*
 678:../kernel/tkernel/time_calls.c ****  * Alarm handler immediate call
 679:../kernel/tkernel/time_calls.c ****  */
 680:../kernel/tkernel/time_calls.c **** LOCAL void knl_immediate_call_almhdr( ALMCB *almcb )
 681:../kernel/tkernel/time_calls.c **** {
 2021                             		.loc 5 681 1
 2022 0c6a 7E AA                   		push.l	r10
 2023                             	.LCFI68:
 2024 0c6c 71 0A FC                		add	#-4, r0, r10
 2025                             	.LCFI69:
 2026 0c6f EF A0                   		mov.L	r10, r0
 2027 0c71 E3 A1                   		mov.L	r1, [r10]
 682:../kernel/tkernel/time_calls.c **** 	almcb->almstat &= ~TALM_STA;
 2028                             		.loc 5 682 17
 2029 0c73 EC A5                   		mov.L	[r10], r5
 2030 0c75 A8 DD                   		mov.L	12[r5], r5
 2031 0c77 FB 46 FE                		mov.L	#-2, r4
 2032 0c7a 53 54                   		and	r5, r4
 2033 0c7c EC A5                   		mov.L	[r10], r5
 2034 0c7e A0 DC                   		mov.L	r4, 12[r5]
 683:../kernel/tkernel/time_calls.c **** 
 684:../kernel/tkernel/time_calls.c **** 	/* Execute alarm handler in task-independent part
 685:../kernel/tkernel/time_calls.c **** 	   (Keep interrupt disabled) */
 686:../kernel/tkernel/time_calls.c **** 	ENTER_TASK_INDEPENDENT;
 2035                             		.loc 5 686 2
 2036 0c80 39 EE F4                		bsr	_knl_EnterTaskIndependent
 687:../kernel/tkernel/time_calls.c **** 	CallUserHandlerP1(almcb->exinf, almcb->almhdr, almcb);
 2037                             		.loc 5 687 2
 2038 0c83 EC A5                   		mov.L	[r10], r5
 2039 0c85 A8 D5                   		mov.L	8[r5], r5
 2040 0c87 EC A4                   		mov.L	[r10], r4
 2041 0c89 EC 44                   		mov.L	[r4], r4
 2042 0c8b EF 41                   		mov.L	r4, r1
 2043 0c8d 7F 15                   		jsr	r5
 2044                             	.LVL3:
 688:../kernel/tkernel/time_calls.c **** 	LEAVE_TASK_INDEPENDENT;
 2045                             		.loc 5 688 2
 2046 0c8f 39 FA F4                		bsr	_knl_LeaveTaskIndependent
 689:../kernel/tkernel/time_calls.c **** }
 2047                             		.loc 5 689 1
 2048 0c92 03                      		nop
 2049 0c93 3F AA 02                		rtsd	#8, r10-r10
 2050                             	.LFE59:
 2052                             		.global	_tk_sta_alm
 2054                             	_tk_sta_alm:
 2055                             	.LFB60:
 690:../kernel/tkernel/time_calls.c **** 
 691:../kernel/tkernel/time_calls.c **** /*
 692:../kernel/tkernel/time_calls.c ****  * Start alarm handler
 693:../kernel/tkernel/time_calls.c ****  */
 694:../kernel/tkernel/time_calls.c **** SYSCALL ER tk_sta_alm( ID almid, RELTIM almtim )
 695:../kernel/tkernel/time_calls.c **** {
 2056                             		.loc 5 695 1
 2057 0c96 7E AA                   		push.l	r10
 2058                             	.LCFI70:
 2059 0c98 71 0A EC                		add	#-20, r0, r10
 2060                             	.LCFI71:
 2061 0c9b EF A0                   		mov.L	r10, r0
 2062 0c9d E7 A1 03                		mov.L	r1, 12[r10]
 2063 0ca0 E7 A2 04                		mov.L	r2, 16[r10]
 696:../kernel/tkernel/time_calls.c **** 	ALMCB	*almcb;
 697:../kernel/tkernel/time_calls.c **** 	ER	ercd = E_OK;
 2064                             		.loc 5 697 5
 2065 0ca3 F8 A6 00                		mov.L	#0, [r10]
 698:../kernel/tkernel/time_calls.c **** 
 699:../kernel/tkernel/time_calls.c **** 	CHECK_ALMID(almid);
 2066                             		.loc 5 699 2
 2067 0ca6 ED A5 03                		mov.L	12[r10], r5
 2068 0ca9 61 05                   		cmp	#0, r5
 2069 0cab 2B 09                   		ble	.L121
 2070                             		.loc 5 699 2 is_stmt 0 discriminator 2
 2071 0cad ED A5 03                		mov.L	12[r10], r5
 2072 0cb0 61 85                   		cmp	#8, r5
 2073 0cb2 2B 08                   		ble	.L122
 2074                             	.L121:
 2075                             		.loc 5 699 2 discriminator 3
 2076 0cb4 FB 56 EE                		mov.L	#-18, r5
 2077 0cb7 38 AC 00                		bra	.L123
 2078                             	.L122:
 700:../kernel/tkernel/time_calls.c **** 	CHECK_RELTIM(almtim);
 2079                             		.loc 5 700 2 is_stmt 1
 2080 0cba ED A5 04                		mov.L	16[r10], r5
 2081 0cbd 61 05                   		cmp	#0, r5
 2082 0cbf 28 08                   		bge	.L124
 2083                             		.loc 5 700 2 is_stmt 0 discriminator 1
 2084 0cc1 FB 56 EF                		mov.L	#-17, r5
 2085 0cc4 38 9F 00                		bra	.L123
 2086                             	.L124:
 701:../kernel/tkernel/time_calls.c **** 
 702:../kernel/tkernel/time_calls.c **** 	almcb = get_almcb(almid);
 2087                             		.loc 5 702 10 is_stmt 1
 2088 0cc7 ED A5 03                		mov.L	12[r10], r5
 2089 0cca 60 15                   		sub	#1, r5
 2090                             		.loc 5 702 8
 2091 0ccc 75 15 24                		mul	#36, r5
 2092 0ccf 70 55 00 00 00 00       		add	#_knl_almcb_table, r5
 2093 0cd5 E7 A5 01                		mov.L	r5, 4[r10]
 2094                             	.LBB14:
 703:../kernel/tkernel/time_calls.c **** 
 704:../kernel/tkernel/time_calls.c **** 	BEGIN_CRITICAL_SECTION;
 2095                             		.loc 5 704 2
 2096 0cd8 05 00 00 00             		bsr	_disint
 2097 0cdc E7 A1 02                		mov.L	r1, 8[r10]
 705:../kernel/tkernel/time_calls.c **** 	if ( almcb->almhdr == NULL ) { /* Unregistered handler */
 2098                             		.loc 5 705 12
 2099 0cdf ED A5 01                		mov.L	4[r10], r5
 2100 0ce2 A8 D5                   		mov.L	8[r5], r5
 2101                             		.loc 5 705 5
 2102 0ce4 61 05                   		cmp	#0, r5
 2103 0ce6 1E                      		bne	.L125
 706:../kernel/tkernel/time_calls.c **** 		ercd = E_NOEXS;
 2104                             		.loc 5 706 8
 2105 0ce7 F8 A6 D6                		mov.L	#-42, [r10]
 707:../kernel/tkernel/time_calls.c **** 		goto error_exit;
 2106                             		.loc 5 707 3
 2107 0cea 2E 3D                   		bra	.L126
 2108                             	.L125:
 708:../kernel/tkernel/time_calls.c **** 	}
 709:../kernel/tkernel/time_calls.c **** 
 710:../kernel/tkernel/time_calls.c **** 	if ( (almcb->almstat & TALM_STA) != 0 ) {
 2109                             		.loc 5 710 13
 2110 0cec ED A5 01                		mov.L	4[r10], r5
 2111 0cef A8 DD                   		mov.L	12[r5], r5
 2112                             		.loc 5 710 23
 2113 0cf1 64 15                   		and	#1, r5
 2114                             		.loc 5 710 5
 2115 0cf3 61 05                   		cmp	#0, r5
 2116 0cf5 20 0D                   		beq	.L127
 711:../kernel/tkernel/time_calls.c **** 		/* Cancel current settings */
 712:../kernel/tkernel/time_calls.c **** 		knl_timer_delete(&almcb->almtmeb);
 2117                             		.loc 5 712 3
 2118 0cf7 ED A5 01                		mov.L	4[r10], r5
 2119 0cfa 71 55 10                		add	#16, r5
 2120 0cfd EF 51                   		mov.L	r5, r1
 2121 0cff 39 43 F4                		bsr	_knl_timer_delete
 2122                             	.L127:
 713:../kernel/tkernel/time_calls.c **** 	}
 714:../kernel/tkernel/time_calls.c **** 
 715:../kernel/tkernel/time_calls.c **** 	if ( almtim > 0 ) {
 2123                             		.loc 5 715 5
 2124 0d02 ED A5 04                		mov.L	16[r10], r5
 2125 0d05 61 05                   		cmp	#0, r5
 2126 0d07 20 1A                   		beq	.L128
 716:../kernel/tkernel/time_calls.c **** 		/* Register onto timer event queue */
 717:../kernel/tkernel/time_calls.c **** 		knl_alm_timer_insert(almcb, almtim);
 2127                             		.loc 5 717 3
 2128 0d09 ED A2 04                		mov.L	16[r10], r2
 2129 0d0c ED A1 01                		mov.L	4[r10], r1
 2130 0d0f 39 20 F5                		bsr	_knl_alm_timer_insert
 718:../kernel/tkernel/time_calls.c **** 		almcb->almstat |= TALM_STA;
 2131                             		.loc 5 718 18
 2132 0d12 ED A5 01                		mov.L	4[r10], r5
 2133 0d15 A8 DD                   		mov.L	12[r5], r5
 2134 0d17 66 14                   		mov.L	#1, r4
 2135 0d19 57 54                   		or	r5, r4
 2136 0d1b ED A5 01                		mov.L	4[r10], r5
 2137 0d1e A0 DC                   		mov.L	r4, 12[r5]
 2138 0d20 0F                      		bra	.L126
 2139                             	.L128:
 719:../kernel/tkernel/time_calls.c **** 	} else {
 720:../kernel/tkernel/time_calls.c **** 		/* Immediate execution */
 721:../kernel/tkernel/time_calls.c **** 		knl_immediate_call_almhdr(almcb);
 2140                             		.loc 5 721 3
 2141 0d21 ED A1 01                		mov.L	4[r10], r1
 2142 0d24 39 46 FF                		bsr	_knl_immediate_call_almhdr
 2143                             	.L126:
 722:../kernel/tkernel/time_calls.c **** 	}
 723:../kernel/tkernel/time_calls.c **** 
 724:../kernel/tkernel/time_calls.c ****     error_exit:
 725:../kernel/tkernel/time_calls.c **** 	END_CRITICAL_SECTION;
 2144                             		.loc 5 725 2
 2145 0d27 ED A5 02                		mov.L	8[r10], r5
 2146 0d2a 61 F5                   		cmp	#15, r5
 2147 0d2c 20 2E                   		beq	.L129
 2148                             		.loc 5 725 2 is_stmt 0 discriminator 1
 2149 0d2e FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 2150 0d34 EC 54                   		mov.L	[r5], r4
 2151 0d36 FB 52 00 00 00 00       		mov.L	#_knl_schedtsk, r5
 2152 0d3c EC 55                   		mov.L	[r5], r5
 2153 0d3e 47 54                   		cmp	r5, r4
 2154 0d40 20 1A                   		beq	.L129
 2155                             		.loc 5 725 2 discriminator 3
 2156 0d42 39 14 F4                		bsr	_knl_isTaskIndependent
 2157 0d45 EF 15                   		mov.L	r1, r5
 2158 0d47 61 05                   		cmp	#0, r5
 2159 0d49 21 11                   		bne	.L129
 2160                             		.loc 5 725 2 discriminator 5
 2161 0d4b FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 2162 0d51 EC 55                   		mov.L	[r5], r5
 2163 0d53 61 05                   		cmp	#0, r5
 2164 0d55 1D                      		bne	.L129
 2165                             		.loc 5 725 2 discriminator 7
 2166 0d56 05 00 00 00             		bsr	_knl_dispatch
 2167                             		.balign 8,3,1
 2168                             	.L129:
 2169                             		.loc 5 725 2 discriminator 9
 2170 0d5a ED A1 02                		mov.L	8[r10], r1
 2171 0d5d 05 00 00 00             		bsr	_setint
 2172                             	.LBE14:
 726:../kernel/tkernel/time_calls.c **** 
 727:../kernel/tkernel/time_calls.c **** 	return ercd;
 2173                             		.loc 5 727 9 is_stmt 1 discriminator 9
 2174 0d61 EC A5                   		mov.L	[r10], r5
 2175                             	.L123:
 728:../kernel/tkernel/time_calls.c **** }
 2176                             		.loc 5 728 1
 2177 0d63 EF 51                   		mov.L	r5, r1
 2178 0d65 3F AA 06                		rtsd	#24, r10-r10
 2179                             	.LFE60:
 2181                             		.global	_tk_stp_alm
 2183                             	_tk_stp_alm:
 2184                             	.LFB61:
 729:../kernel/tkernel/time_calls.c **** 
 730:../kernel/tkernel/time_calls.c **** #ifdef USE_FUNC_TK_STP_ALM
 731:../kernel/tkernel/time_calls.c **** /*
 732:../kernel/tkernel/time_calls.c ****  * Stop alarm handler
 733:../kernel/tkernel/time_calls.c ****  */
 734:../kernel/tkernel/time_calls.c **** SYSCALL ER tk_stp_alm( ID almid )
 735:../kernel/tkernel/time_calls.c **** {
 2185                             		.loc 5 735 1
 2186 0d68 7E AA                   		push.l	r10
 2187                             	.LCFI72:
 2188 0d6a 71 0A F0                		add	#-16, r0, r10
 2189                             	.LCFI73:
 2190 0d6d EF A0                   		mov.L	r10, r0
 2191 0d6f E7 A1 03                		mov.L	r1, 12[r10]
 736:../kernel/tkernel/time_calls.c **** 	ALMCB	*almcb;
 737:../kernel/tkernel/time_calls.c **** 	ER	ercd = E_OK;
 2192                             		.loc 5 737 5
 2193 0d72 F8 A6 00                		mov.L	#0, [r10]
 738:../kernel/tkernel/time_calls.c **** 
 739:../kernel/tkernel/time_calls.c **** 	CHECK_ALMID(almid);
 2194                             		.loc 5 739 2
 2195 0d75 ED A5 03                		mov.L	12[r10], r5
 2196 0d78 61 05                   		cmp	#0, r5
 2197 0d7a 2B 09                   		ble	.L131
 2198                             		.loc 5 739 2 is_stmt 0 discriminator 2
 2199 0d7c ED A5 03                		mov.L	12[r10], r5
 2200 0d7f 61 85                   		cmp	#8, r5
 2201 0d81 2B 08                   		ble	.L132
 2202                             	.L131:
 2203                             		.loc 5 739 2 discriminator 3
 2204 0d83 FB 56 EE                		mov.L	#-18, r5
 2205 0d86 38 89 00                		bra	.L133
 2206                             	.L132:
 740:../kernel/tkernel/time_calls.c **** 
 741:../kernel/tkernel/time_calls.c **** 	almcb = get_almcb(almid);
 2207                             		.loc 5 741 10 is_stmt 1
 2208 0d89 ED A5 03                		mov.L	12[r10], r5
 2209 0d8c 60 15                   		sub	#1, r5
 2210                             		.loc 5 741 8
 2211 0d8e 75 15 24                		mul	#36, r5
 2212 0d91 70 55 00 00 00 00       		add	#_knl_almcb_table, r5
 2213 0d97 E7 A5 01                		mov.L	r5, 4[r10]
 2214                             	.LBB15:
 742:../kernel/tkernel/time_calls.c **** 
 743:../kernel/tkernel/time_calls.c **** 	BEGIN_CRITICAL_SECTION;
 2215                             		.loc 5 743 2
 2216 0d9a 05 00 00 00             		bsr	_disint
 2217 0d9e E7 A1 02                		mov.L	r1, 8[r10]
 744:../kernel/tkernel/time_calls.c **** 	if ( almcb->almhdr == NULL ) { /* Unregistered handler */
 2218                             		.loc 5 744 12
 2219 0da1 ED A5 01                		mov.L	4[r10], r5
 2220 0da4 A8 D5                   		mov.L	8[r5], r5
 2221                             		.loc 5 744 5
 2222 0da6 61 05                   		cmp	#0, r5
 2223 0da8 1E                      		bne	.L134
 745:../kernel/tkernel/time_calls.c **** 		ercd = E_NOEXS;
 2224                             		.loc 5 745 8
 2225 0da9 F8 A6 D6                		mov.L	#-42, [r10]
 2226 0dac 2E 27                   		bra	.L135
 2227                             	.L134:
 746:../kernel/tkernel/time_calls.c **** 	} else {
 747:../kernel/tkernel/time_calls.c **** 		if ( (almcb->almstat & TALM_STA) != 0 ) {
 2228                             		.loc 5 747 14
 2229 0dae ED A5 01                		mov.L	4[r10], r5
 2230 0db1 A8 DD                   		mov.L	12[r5], r5
 2231                             		.loc 5 747 24
 2232 0db3 64 15                   		and	#1, r5
 2233                             		.loc 5 747 6
 2234 0db5 61 05                   		cmp	#0, r5
 2235 0db7 20 1C                   		beq	.L135
 748:../kernel/tkernel/time_calls.c **** 			/* Stop alarm handler address */
 749:../kernel/tkernel/time_calls.c **** 			knl_timer_delete(&almcb->almtmeb);
 2236                             		.loc 5 749 4
 2237 0db9 ED A5 01                		mov.L	4[r10], r5
 2238 0dbc 71 55 10                		add	#16, r5
 2239 0dbf EF 51                   		mov.L	r5, r1
 2240 0dc1 39 81 F3                		bsr	_knl_timer_delete
 750:../kernel/tkernel/time_calls.c **** 			almcb->almstat &= ~TALM_STA;
 2241                             		.loc 5 750 19
 2242 0dc4 ED A5 01                		mov.L	4[r10], r5
 2243 0dc7 A8 DD                   		mov.L	12[r5], r5
 2244 0dc9 FB 46 FE                		mov.L	#-2, r4
 2245 0dcc 53 54                   		and	r5, r4
 2246 0dce ED A5 01                		mov.L	4[r10], r5
 2247 0dd1 A0 DC                   		mov.L	r4, 12[r5]
 2248                             	.L135:
 751:../kernel/tkernel/time_calls.c **** 		}
 752:../kernel/tkernel/time_calls.c **** 	}
 753:../kernel/tkernel/time_calls.c **** 	END_CRITICAL_SECTION;
 2249                             		.loc 5 753 2
 2250 0dd3 ED A5 02                		mov.L	8[r10], r5
 2251 0dd6 61 F5                   		cmp	#15, r5
 2252 0dd8 20 2E                   		beq	.L136
 2253                             		.loc 5 753 2 is_stmt 0 discriminator 1
 2254 0dda FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 2255 0de0 EC 54                   		mov.L	[r5], r4
 2256 0de2 FB 52 00 00 00 00       		mov.L	#_knl_schedtsk, r5
 2257 0de8 EC 55                   		mov.L	[r5], r5
 2258 0dea 47 54                   		cmp	r5, r4
 2259 0dec 20 1A                   		beq	.L136
 2260                             		.loc 5 753 2 discriminator 3
 2261 0dee 39 68 F3                		bsr	_knl_isTaskIndependent
 2262 0df1 EF 15                   		mov.L	r1, r5
 2263 0df3 61 05                   		cmp	#0, r5
 2264 0df5 21 11                   		bne	.L136
 2265                             		.loc 5 753 2 discriminator 5
 2266 0df7 FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 2267 0dfd EC 55                   		mov.L	[r5], r5
 2268 0dff 61 05                   		cmp	#0, r5
 2269 0e01 1D                      		bne	.L136
 2270                             		.loc 5 753 2 discriminator 7
 2271 0e02 05 00 00 00             		bsr	_knl_dispatch
 2272                             		.balign 8,3,1
 2273                             	.L136:
 2274                             		.loc 5 753 2 discriminator 9
 2275 0e06 ED A1 02                		mov.L	8[r10], r1
 2276 0e09 05 00 00 00             		bsr	_setint
 2277                             	.LBE15:
 754:../kernel/tkernel/time_calls.c **** 
 755:../kernel/tkernel/time_calls.c **** 	return ercd;
 2278                             		.loc 5 755 9 is_stmt 1 discriminator 9
 2279 0e0d EC A5                   		mov.L	[r10], r5
 2280                             	.L133:
 756:../kernel/tkernel/time_calls.c **** }
 2281                             		.loc 5 756 1
 2282 0e0f EF 51                   		mov.L	r5, r1
 2283 0e11 3F AA 05                		rtsd	#20, r10-r10
 2284                             	.LFE61:
 2286                             		.global	_tk_ref_alm
 2288                             	_tk_ref_alm:
 2289                             	.LFB62:
 757:../kernel/tkernel/time_calls.c **** #endif /* USE_FUNC_TK_STP_ALM */
 758:../kernel/tkernel/time_calls.c **** 
 759:../kernel/tkernel/time_calls.c **** #ifdef USE_FUNC_TK_REF_ALM
 760:../kernel/tkernel/time_calls.c **** /*
 761:../kernel/tkernel/time_calls.c ****  * Refer alarm handler state
 762:../kernel/tkernel/time_calls.c ****  */
 763:../kernel/tkernel/time_calls.c **** SYSCALL ER tk_ref_alm( ID almid, T_RALM *pk_ralm )
 764:../kernel/tkernel/time_calls.c **** {
 2290                             		.loc 5 764 1
 2291 0e14 7E AA                   		push.l	r10
 2292                             	.LCFI74:
 2293 0e16 7E A6                   		push.l	r6
 2294                             	.LCFI75:
 2295 0e18 71 0A E4                		add	#-28, r0, r10
 2296                             	.LCFI76:
 2297 0e1b EF A0                   		mov.L	r10, r0
 2298 0e1d E7 A1 05                		mov.L	r1, 20[r10]
 2299 0e20 E7 A2 06                		mov.L	r2, 24[r10]
 765:../kernel/tkernel/time_calls.c **** 	ALMCB	*almcb;
 766:../kernel/tkernel/time_calls.c **** 	ABSTIM	tm, cur;
 767:../kernel/tkernel/time_calls.c **** 	ER	ercd = E_OK;
 2300                             		.loc 5 767 5
 2301 0e23 F9 A6 01 00             		mov.L	#0, 4[r10]
 768:../kernel/tkernel/time_calls.c **** 
 769:../kernel/tkernel/time_calls.c **** 	CHECK_ALMID(almid);
 2302                             		.loc 5 769 2
 2303 0e27 ED A5 05                		mov.L	20[r10], r5
 2304 0e2a 61 05                   		cmp	#0, r5
 2305 0e2c 2B 09                   		ble	.L138
 2306                             		.loc 5 769 2 is_stmt 0 discriminator 2
 2307 0e2e ED A5 05                		mov.L	20[r10], r5
 2308 0e31 61 85                   		cmp	#8, r5
 2309 0e33 2B 08                   		ble	.L139
 2310                             	.L138:
 2311                             		.loc 5 769 2 discriminator 3
 2312 0e35 FB 56 EE                		mov.L	#-18, r5
 2313 0e38 38 C6 00                		bra	.L140
 2314                             	.L139:
 770:../kernel/tkernel/time_calls.c **** 
 771:../kernel/tkernel/time_calls.c **** 	almcb = get_almcb(almid);
 2315                             		.loc 5 771 10 is_stmt 1
 2316 0e3b ED A5 05                		mov.L	20[r10], r5
 2317 0e3e 60 15                   		sub	#1, r5
 2318                             		.loc 5 771 8
 2319 0e40 75 15 24                		mul	#36, r5
 2320 0e43 70 55 00 00 00 00       		add	#_knl_almcb_table, r5
 2321 0e49 E7 A5 02                		mov.L	r5, 8[r10]
 2322                             	.LBB16:
 772:../kernel/tkernel/time_calls.c **** 
 773:../kernel/tkernel/time_calls.c **** 	BEGIN_CRITICAL_SECTION;
 2323                             		.loc 5 773 2
 2324 0e4c 05 00 00 00             		bsr	_disint
 2325 0e50 E7 A1 03                		mov.L	r1, 12[r10]
 774:../kernel/tkernel/time_calls.c **** 	if ( almcb->almhdr == NULL ) { /* Unregistered handler */
 2326                             		.loc 5 774 12
 2327 0e53 ED A5 02                		mov.L	8[r10], r5
 2328 0e56 A8 D5                   		mov.L	8[r5], r5
 2329                             		.loc 5 774 5
 2330 0e58 61 05                   		cmp	#0, r5
 2331 0e5a 1F                      		bne	.L141
 775:../kernel/tkernel/time_calls.c **** 		ercd = E_NOEXS;
 2332                             		.loc 5 775 8
 2333 0e5b F9 A6 01 D6             		mov.L	#-42, 4[r10]
 2334 0e5f 2E 62                   		bra	.L142
 2335                             	.L141:
 776:../kernel/tkernel/time_calls.c **** 	} else {
 777:../kernel/tkernel/time_calls.c **** 		cur = lltoul(knl_current_time);
 2336                             		.loc 5 777 9
 2337 0e61 FB 42 00 00 00 00       		mov.L	#_knl_current_time, r4
 2338 0e67 EC 45                   		mov.L	[r4], r5
 2339 0e69 A8 4E                   		mov.L	4[r4], r6
 2340                             		.loc 5 777 7
 2341 0e6b E7 A5 04                		mov.L	r5, 16[r10]
 778:../kernel/tkernel/time_calls.c **** 		if ( (almcb->almstat & TALM_STA) != 0 ) {
 2342                             		.loc 5 778 14
 2343 0e6e ED A5 02                		mov.L	8[r10], r5
 2344 0e71 A8 DD                   		mov.L	12[r5], r5
 2345                             		.loc 5 778 24
 2346 0e73 64 15                   		and	#1, r5
 2347                             		.loc 5 778 6
 2348 0e75 61 05                   		cmp	#0, r5
 2349 0e77 20 2C                   		beq	.L143
 779:../kernel/tkernel/time_calls.c **** 			tm = almcb->almtmeb.time;
 2350                             		.loc 5 779 7
 2351 0e79 ED A5 02                		mov.L	8[r10], r5
 2352 0e7c A9 D5                   		mov.L	24[r5], r5
 2353 0e7e E3 A5                   		mov.L	r5, [r10]
 780:../kernel/tkernel/time_calls.c **** 			if ( knl_abstim_reached(cur + TIMER_PERIOD, tm) ) {
 2354                             		.loc 5 780 9
 2355 0e80 ED A5 04                		mov.L	16[r10], r5
 2356 0e83 62 A5                   		add	#10, r5
 2357 0e85 EC A2                   		mov.L	[r10], r2
 2358 0e87 EF 51                   		mov.L	r5, r1
 2359 0e89 39 9A F2                		bsr	_knl_abstim_reached
 2360 0e8c EF 15                   		mov.L	r1, r5
 2361                             		.loc 5 780 7
 2362 0e8e 61 05                   		cmp	#0, r5
 2363 0e90 16                      		beq	.L144
 781:../kernel/tkernel/time_calls.c **** 				tm = 0;
 2364                             		.loc 5 781 8
 2365 0e91 F8 A6 00                		mov.L	#0, [r10]
 2366 0e94 2E 12                   		bra	.L146
 2367                             	.L144:
 782:../kernel/tkernel/time_calls.c **** 			}
 783:../kernel/tkernel/time_calls.c **** 			else {
 784:../kernel/tkernel/time_calls.c **** 				tm -= (cur + TIMER_PERIOD);
 2368                             		.loc 5 784 8
 2369 0e96 EC A4                   		mov.L	[r10], r4
 2370 0e98 ED A5 04                		mov.L	16[r10], r5
 2371 0e9b FF 05 54                		sub	r5, r4, r5
 2372 0e9e 60 A5                   		sub	#10, r5
 2373 0ea0 E3 A5                   		mov.L	r5, [r10]
 2374 0ea2 0C                      		bra	.L146
 2375                             	.L143:
 785:../kernel/tkernel/time_calls.c **** 			}
 786:../kernel/tkernel/time_calls.c **** 		} else {
 787:../kernel/tkernel/time_calls.c **** 			tm = 0;
 2376                             		.loc 5 787 7
 2377 0ea3 F8 A6 00                		mov.L	#0, [r10]
 2378                             	.L146:
 788:../kernel/tkernel/time_calls.c **** 		}
 789:../kernel/tkernel/time_calls.c **** 
 790:../kernel/tkernel/time_calls.c **** 		pk_ralm->exinf   = almcb->exinf;
 2379                             		.loc 5 790 27
 2380 0ea6 ED A5 02                		mov.L	8[r10], r5
 2381 0ea9 EC 54                   		mov.L	[r5], r4
 2382                             		.loc 5 790 20
 2383 0eab ED A5 06                		mov.L	24[r10], r5
 2384 0eae E3 54                   		mov.L	r4, [r5]
 791:../kernel/tkernel/time_calls.c **** 		pk_ralm->lfttim  = tm;
 2385                             		.loc 5 791 20
 2386 0eb0 ED A5 06                		mov.L	24[r10], r5
 2387 0eb3 EC A4                   		mov.L	[r10], r4
 2388 0eb5 A0 5C                   		mov.L	r4, 4[r5]
 792:../kernel/tkernel/time_calls.c **** 		pk_ralm->almstat = almcb->almstat;
 2389                             		.loc 5 792 27
 2390 0eb7 ED A5 02                		mov.L	8[r10], r5
 2391 0eba A8 DC                   		mov.L	12[r5], r4
 2392                             		.loc 5 792 20
 2393 0ebc ED A5 06                		mov.L	24[r10], r5
 2394 0ebf A0 D4                   		mov.L	r4, 8[r5]
 2395                             	.L142:
 793:../kernel/tkernel/time_calls.c **** 	}
 794:../kernel/tkernel/time_calls.c **** 	END_CRITICAL_SECTION;
 2396                             		.loc 5 794 2
 2397 0ec1 ED A5 03                		mov.L	12[r10], r5
 2398 0ec4 61 F5                   		cmp	#15, r5
 2399 0ec6 20 2E                   		beq	.L147
 2400                             		.loc 5 794 2 is_stmt 0 discriminator 1
 2401 0ec8 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 2402 0ece EC 54                   		mov.L	[r5], r4
 2403 0ed0 FB 52 00 00 00 00       		mov.L	#_knl_schedtsk, r5
 2404 0ed6 EC 55                   		mov.L	[r5], r5
 2405 0ed8 47 54                   		cmp	r5, r4
 2406 0eda 20 1A                   		beq	.L147
 2407                             		.loc 5 794 2 discriminator 3
 2408 0edc 39 7A F2                		bsr	_knl_isTaskIndependent
 2409 0edf EF 15                   		mov.L	r1, r5
 2410 0ee1 61 05                   		cmp	#0, r5
 2411 0ee3 21 11                   		bne	.L147
 2412                             		.loc 5 794 2 discriminator 5
 2413 0ee5 FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 2414 0eeb EC 55                   		mov.L	[r5], r5
 2415 0eed 61 05                   		cmp	#0, r5
 2416 0eef 1D                      		bne	.L147
 2417                             		.loc 5 794 2 discriminator 7
 2418 0ef0 05 00 00 00             		bsr	_knl_dispatch
 2419                             		.balign 8,3,1
 2420                             	.L147:
 2421                             		.loc 5 794 2 discriminator 9
 2422 0ef4 ED A1 03                		mov.L	12[r10], r1
 2423 0ef7 05 00 00 00             		bsr	_setint
 2424                             	.LBE16:
 795:../kernel/tkernel/time_calls.c **** 
 796:../kernel/tkernel/time_calls.c **** 	return ercd;
 2425                             		.loc 5 796 9 is_stmt 1 discriminator 9
 2426 0efb ED A5 01                		mov.L	4[r10], r5
 2427                             	.L140:
 797:../kernel/tkernel/time_calls.c **** }
 2428                             		.loc 5 797 1
 2429 0efe EF 51                   		mov.L	r5, r1
 2430 0f00 71 00 1C                		add	#28, r0
 2431 0f03 7E B6                   		pop	r6
 2432 0f05 7E BA                   		pop	r10
 2433 0f07 02                      		rts
 2434                             	.LFE62:
 3232                             	.Letext0:
 3233                             		.file 6 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\include/tk/typedef.h"
 3234                             		.file 7 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\include/tk/syscall.h"
 3235                             		.file 8 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\kernel\\knlinc/kernel.h"
 3236                             		.file 9 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\kernel\\tkernel\\winfo.h"
 3237                             		.file 10 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\kernel\\tkernel\\mutex.h"
 3238                             		.file 11 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\kernel\\sysdepend\\cpu\\core\\rxv2\\sysd
 3239                             		.file 12 "../kernel/tkernel/task.h"
 3240                             		.file 13 "../kernel/tkernel/ready_queue.h"
