   1                             		.file	"task_manage.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   5                             	_QueInsert:
   6                             	.LFB8:
   7                             		.file 1 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\include/sys/queue.h"
   1:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
   2:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *----------------------------------------------------------------------
   3:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *    micro T-Kernel 3.00.00
   4:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *
   5:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *    Copyright (C) 2006-2019 by Ken Sakamura.
   6:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *    This software is distributed under the T-License 2.1.
   7:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *----------------------------------------------------------------------
   8:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *
   9:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.
  10:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *
  11:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *----------------------------------------------------------------------
  12:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  13:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  14:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  15:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	queue.h
  16:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *
  17:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	Queuing operation
  18:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  19:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  20:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** #ifndef	__SYS_QUEUE_H__
  21:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** #define __SYS_QUEUE_H__
  22:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  23:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** #include <tk/tkernel.h>
  24:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  25:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** #ifdef __cplusplus
  26:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** extern "C" {
  27:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** #endif
  28:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  29:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  30:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  * Double-link queue (ring)
  31:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  32:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** typedef struct queue {
  33:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	struct queue	*next;
  34:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	struct queue	*prev;
  35:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** } QUEUE;
  36:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  37:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  38:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  * Queue initialization 
  39:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  40:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** Inline void QueInit( QUEUE *que )
  41:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** {
  42:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	que->next = (struct queue *)que;
  43:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	que->prev = (struct queue *)que;
  44:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** }
  45:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  46:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  47:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  * TRUE if the queue is empty 
  48:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  49:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** Inline BOOL isQueEmpty( QUEUE *que )
  50:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** {
  51:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	return ( que->next == que )? TRUE: FALSE;
  52:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** }
  53:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  54:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  55:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  * Insert in queue 
  56:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	Inserts entry directly prior to que 
  57:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  58:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** Inline void QueInsert( QUEUE *entry, QUEUE *que )
  59:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** {
   8                             		.loc 1 59 1
   9 0000 7E AA                   		push.l	r10
  10                             	.LCFI0:
  11 0002 71 0A F8                		add	#-8, r0, r10
  12                             	.LCFI1:
  13 0005 EF A0                   		mov.L	r10, r0
  14 0007 E3 A1                   		mov.L	r1, [r10]
  15 0009 E7 A2 01                		mov.L	r2, 4[r10]
  60:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	entry->prev = (struct queue*) que->prev;
  16                             		.loc 1 60 16
  17 000c ED A5 01                		mov.L	4[r10], r5
  18 000f A8 5C                   		mov.L	4[r5], r4
  19                             		.loc 1 60 14
  20 0011 EC A5                   		mov.L	[r10], r5
  21 0013 A0 5C                   		mov.L	r4, 4[r5]
  61:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	entry->next = que;
  22                             		.loc 1 61 14
  23 0015 EC A5                   		mov.L	[r10], r5
  24 0017 ED A4 01                		mov.L	4[r10], r4
  25 001a E3 54                   		mov.L	r4, [r5]
  62:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	que->prev->next = entry;
  26                             		.loc 1 62 5
  27 001c ED A5 01                		mov.L	4[r10], r5
  28 001f A8 5D                   		mov.L	4[r5], r5
  29                             		.loc 1 62 18
  30 0021 EC A4                   		mov.L	[r10], r4
  31 0023 E3 54                   		mov.L	r4, [r5]
  63:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	que->prev = entry;
  32                             		.loc 1 63 12
  33 0025 ED A5 01                		mov.L	4[r10], r5
  34 0028 EC A4                   		mov.L	[r10], r4
  35 002a A0 5C                   		mov.L	r4, 4[r5]
  64:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** }
  36                             		.loc 1 64 1
  37 002c 03                      		nop
  38 002d 3F AA 03                		rtsd	#12, r10-r10
  39                             	.LFE8:
  42                             	_QueRemove:
  43                             	.LFB9:
  65:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  66:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  67:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  * Delete from queue 
  68:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	Deletes entry from queue 
  69:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	No action is performed if entry is empty. 
  70:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  71:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** Inline void QueRemove( QUEUE *entry )
  72:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** {
  44                             		.loc 1 72 1
  45 0030 7E AA                   		push.l	r10
  46                             	.LCFI2:
  47 0032 71 0A FC                		add	#-4, r0, r10
  48                             	.LCFI3:
  49 0035 EF A0                   		mov.L	r10, r0
  50 0037 E3 A1                   		mov.L	r1, [r10]
  73:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	if ( entry->next != entry ) {
  51                             		.loc 1 73 12
  52 0039 EC A5                   		mov.L	[r10], r5
  53 003b EC 55                   		mov.L	[r5], r5
  54                             		.loc 1 73 5
  55 003d EC A4                   		mov.L	[r10], r4
  56 003f 47 54                   		cmp	r5, r4
  57 0041 20 16                   		beq	.L4
  74:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 		entry->prev->next = (struct queue*) entry->next;
  58                             		.loc 1 74 8
  59 0043 EC A5                   		mov.L	[r10], r5
  60 0045 A8 5D                   		mov.L	4[r5], r5
  61                             		.loc 1 74 23
  62 0047 EC A4                   		mov.L	[r10], r4
  63 0049 EC 44                   		mov.L	[r4], r4
  64                             		.loc 1 74 21
  65 004b E3 54                   		mov.L	r4, [r5]
  75:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 		entry->next->prev = (struct queue*) entry->prev;
  66                             		.loc 1 75 8
  67 004d EC A5                   		mov.L	[r10], r5
  68 004f EC 55                   		mov.L	[r5], r5
  69                             		.loc 1 75 23
  70 0051 EC A4                   		mov.L	[r10], r4
  71 0053 A8 4C                   		mov.L	4[r4], r4
  72                             		.loc 1 75 21
  73 0055 A0 5C                   		mov.L	r4, 4[r5]
  74                             	.L4:
  76:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	}
  77:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** }
  75                             		.loc 1 77 1
  76 0057 03                      		nop
  77 0058 3F AA 02                		rtsd	#8, r10-r10
  78                             	.LFE9:
  81                             	_QueRemoveNext:
  82                             	.LFB10:
  78:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  79:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  80:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  * Remove top entry 
  81:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	Deletes the entry directly after que from the queue,
  82:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	and returns the deleted entry.
  83:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	Returns NULL if que is empty.
  84:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  85:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** Inline QUEUE* QueRemoveNext( QUEUE *que )
  86:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** {
  83                             		.loc 1 86 1
  84 005b 7E AA                   		push.l	r10
  85                             	.LCFI4:
  86 005d 71 0A F8                		add	#-8, r0, r10
  87                             	.LCFI5:
  88 0060 EF A0                   		mov.L	r10, r0
  89 0062 E7 A1 01                		mov.L	r1, 4[r10]
  87:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	QUEUE	*entry;
  88:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  89:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	if ( que->next == que ) {
  90                             		.loc 1 89 10
  91 0065 ED A5 01                		mov.L	4[r10], r5
  92 0068 EC 55                   		mov.L	[r5], r5
  93                             		.loc 1 89 5
  94 006a ED A4 01                		mov.L	4[r10], r4
  95 006d 47 54                   		cmp	r5, r4
  96 006f 1D                      		bne	.L6
  90:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 		return NULL;
  97                             		.loc 1 90 10
  98 0070 66 05                   		mov.L	#0, r5
  99 0072 2E 1D                   		bra	.L7
 100                             	.L6:
  91:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	}
  92:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  93:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	entry = que->next;
 101                             		.loc 1 93 8
 102 0074 ED A5 01                		mov.L	4[r10], r5
 103 0077 EC 55                   		mov.L	[r5], r5
 104 0079 E3 A5                   		mov.L	r5, [r10]
  94:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	que->next = (struct queue*)entry->next;
 105                             		.loc 1 94 14
 106 007b EC A5                   		mov.L	[r10], r5
 107 007d EC 54                   		mov.L	[r5], r4
 108                             		.loc 1 94 12
 109 007f ED A5 01                		mov.L	4[r10], r5
 110 0082 E3 54                   		mov.L	r4, [r5]
  95:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	entry->next->prev = que;
 111                             		.loc 1 95 7
 112 0084 EC A5                   		mov.L	[r10], r5
 113 0086 EC 55                   		mov.L	[r5], r5
 114                             		.loc 1 95 20
 115 0088 ED A4 01                		mov.L	4[r10], r4
 116 008b A0 5C                   		mov.L	r4, 4[r5]
  96:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  97:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	return entry;
 117                             		.loc 1 97 9
 118 008d EC A5                   		mov.L	[r10], r5
 119                             	.L7:
  98:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** }
 120                             		.loc 1 98 1
 121 008f EF 51                   		mov.L	r5, r1
 122 0091 3F AA 03                		rtsd	#12, r10-r10
 123                             	.LFE10:
 126                             	_knl_timer_delete:
 127                             	.LFB14:
 128                             		.file 2 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\kernel\\tkernel\\timer.h"
   1:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** /*
   2:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  *----------------------------------------------------------------------
   3:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  *    micro T-Kernel 3.00.00
   4:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  *
   5:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  *    Copyright (C) 2006-2019 by Ken Sakamura.
   6:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  *    This software is distributed under the T-License 2.1.
   7:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  *----------------------------------------------------------------------
   8:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  *
   9:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.
  10:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  *
  11:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  *----------------------------------------------------------------------
  12:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  */
  13:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  14:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** /*
  15:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  *	timer.h
  16:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  *	System Timer Module Definition
  17:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  */
  18:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  19:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** #ifndef _TIMER_
  20:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** #define _TIMER_
  21:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  22:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** #include "longlong.h"
  23:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  24:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** /*
  25:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  * SYSTIM internal expression and conversion
  26:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  */
  27:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** typedef	D	LSYSTIM;	/* SYSTIM int. expression */
  28:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  29:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** Inline LSYSTIM knl_toLSYSTIM( CONST SYSTIM *time )
  30:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** {
  31:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 	LSYSTIM		ltime;
  32:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  33:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 	hilo_ll(ltime, time->hi, time->lo);
  34:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  35:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 	return ltime;
  36:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** }
  37:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  38:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** Inline SYSTIM knl_toSYSTIM( LSYSTIM ltime )
  39:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** {
  40:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 	SYSTIM		time;
  41:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  42:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 	ll_hilo(time.hi, time.lo, ltime);
  43:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  44:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 	return time;
  45:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** }
  46:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  47:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** /*
  48:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  * Absolute time (can be considered the lower 32bit of SYSTIM)
  49:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  */
  50:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** typedef	UW	ABSTIM;
  51:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  52:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** #define ABSTIM_DIFF_MIN  (0x7FFFFFFF)
  53:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  54:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** Inline BOOL knl_abstim_reached( ABSTIM curtim, ABSTIM evttim )
  55:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** {
  56:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 	return (ABSTIM)(curtim - evttim) <= (ABSTIM)ABSTIM_DIFF_MIN;
  57:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** }
  58:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  59:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** /*
  60:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  * Definition of timer event block 
  61:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  */
  62:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** typedef void	(*CBACK)(void *);	/* Type of callback function */
  63:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  64:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** typedef struct timer_event_block {
  65:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 	QUEUE	queue;		/* Timer event queue */
  66:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 	ABSTIM	time;		/* Event time */
  67:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 	CBACK	callback;	/* Callback function */
  68:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 	void	*arg;		/* Argument to be sent to callback function */
  69:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** } TMEB;
  70:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  71:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** /*
  72:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  * Current time (Software clock)
  73:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  */
  74:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** IMPORT LSYSTIM	knl_current_time;	/* System operation time */
  75:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** IMPORT LSYSTIM	knl_real_time_ofs;	/* Difference from actual time */
  76:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  77:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** /*
  78:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  * Time-event queue
  79:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  */
  80:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** IMPORT QUEUE	knl_timer_queue;
  81:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  82:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** /*
  83:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  * Register time-event onto timer queue
  84:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  */
  85:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** IMPORT void knl_timer_insert( TMEB *evt, TMO tmout, CBACK cback, void *arg );
  86:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** IMPORT void knl_timer_insert_reltim( TMEB *event, RELTIM tmout, CBACK callback, void *arg );
  87:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** IMPORT void knl_timer_insert_abs( TMEB *evt, ABSTIM time, CBACK cback, void *arg );
  88:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  89:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** /*
  90:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  * Delete from time-event queue
  91:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  */
  92:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** Inline void knl_timer_delete( TMEB *event )
  93:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** {
 129                             		.loc 2 93 1
 130 0094 7E AA                   		push.l	r10
 131                             	.LCFI6:
 132 0096 71 0A FC                		add	#-4, r0, r10
 133                             	.LCFI7:
 134 0099 EF A0                   		mov.L	r10, r0
 135 009b E3 A1                   		mov.L	r1, [r10]
  94:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 	QueRemove(&event->queue);
 136                             		.loc 2 94 2
 137 009d EC A5                   		mov.L	[r10], r5
 138 009f EF 51                   		mov.L	r5, r1
 139 00a1 39 8F FF                		bsr	_QueRemove
  95:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** }
 140                             		.loc 2 95 1
 141 00a4 03                      		nop
 142 00a5 3F AA 02                		rtsd	#8, r10-r10
 143                             	.LFE14:
 146                             	_knl_isTaskIndependent:
 147                             	.LFB16:
 148                             		.file 3 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\kernel\\sysdepend\\cpu\\core\\rxv2\\cpu_s
   1:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
   2:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *----------------------------------------------------------------------
   3:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *    micro T-Kernel 3.00.03
   4:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *
   5:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *    Copyright (C) 2006-2021 by Ken Sakamura.
   6:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *    This software is distributed under the T-License 2.2.
   7:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *----------------------------------------------------------------------
   8:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *
   9:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.
  10:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *
  11:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *----------------------------------------------------------------------
  12:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  13:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  14:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  15:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *	cpu_status.h (RXv2)
  16:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *	CPU-Dependent Status Definition
  17:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  18:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  19:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #ifndef _SYSDEPEND_CPU_CORE_STATUS_
  20:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define _SYSDEPEND_CPU_CORE_STATUS_
  21:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  22:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #include <tk/syslib.h>
  23:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #include <sys/sysdef.h>
  24:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  25:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #include "sysdepend.h"
  26:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  27:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  * Start/End critical section
  28:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  29:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define BEGIN_CRITICAL_SECTION	{ UINT _sr_ = disint();
  30:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define END_CRITICAL_SECTION	if ( !isDI(_sr_)			\
  31:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 				  && knl_ctxtsk != knl_schedtsk		\
  32:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 				  && !knl_isTaskIndependent()		\
  33:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 				  && !knl_dispatch_disabled ) {		\
  34:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 					knl_dispatch();			\
  35:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 				}					\
  36:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 				setint(_sr_); }
  37:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  38:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  * Start/End interrupt disable section
  39:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  40:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define BEGIN_DISABLE_INTERRUPT	{ UINT _sr_ = disint();
  41:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define END_DISABLE_INTERRUPT	setint(_sr_); }
  42:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  43:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  44:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  * Interrupt enable/disable
  45:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  46:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define ENABLE_INTERRUPT	{ setint(0); }
  47:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define DISABLE_INTERRUPT	{ disint(); }
  48:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  49:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  50:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  * Enable interrupt nesting
  51:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *	Enable the interrupt that has a higher priority than 'level.'
  52:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  53:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define ENABLE_INTERRUPT_UPTO(level)	{ setint(level); }
  54:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  55:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  56:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *  Task-independent control
  57:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  58:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** IMPORT	W	knl_taskindp;		/* Task independent status */
  59:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  60:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  61:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  * If it is the task-independent part, TRUE
  62:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  63:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** Inline BOOL knl_isTaskIndependent( void )
  64:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** {
 149                             		.loc 3 64 1
 150 00a8 7E AA                   		push.l	r10
 151                             	.LCFI8:
 152 00aa EF 0A                   		mov.L	r0, r10
 153                             	.LCFI9:
  65:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 	return ( knl_taskindp > 0 )? TRUE: FALSE;
 154                             		.loc 3 65 35
 155 00ac FB 52 00 00 00 00       		mov.L	#_knl_taskindp, r5
 156 00b2 EC 55                   		mov.L	[r5], r5
 157 00b4 61 05                   		cmp	#0, r5
 158 00b6 FC DB 5A                		scgt.L	r5
 159 00b9 5B 55                   		movu.B	r5, r5
  66:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** }
 160                             		.loc 3 66 1
 161 00bb EF 51                   		mov.L	r5, r1
 162 00bd 3F AA 01                		rtsd	#4, r10-r10
 163                             	.LFE16:
 166                             	_knl_task_alive:
 167                             	.LFB19:
 168                             		.file 4 "../kernel/tkernel/task.h"
   1:../kernel/tkernel/task.h **** /*
   2:../kernel/tkernel/task.h ****  *----------------------------------------------------------------------
   3:../kernel/tkernel/task.h ****  *    micro T-Kernel 3.00.00
   4:../kernel/tkernel/task.h ****  *
   5:../kernel/tkernel/task.h ****  *    Copyright (C) 2006-2019 by Ken Sakamura.
   6:../kernel/tkernel/task.h ****  *    This software is distributed under the T-License 2.1.
   7:../kernel/tkernel/task.h ****  *----------------------------------------------------------------------
   8:../kernel/tkernel/task.h ****  *
   9:../kernel/tkernel/task.h ****  *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.
  10:../kernel/tkernel/task.h ****  *
  11:../kernel/tkernel/task.h ****  *----------------------------------------------------------------------
  12:../kernel/tkernel/task.h ****  */
  13:../kernel/tkernel/task.h **** 
  14:../kernel/tkernel/task.h **** /*
  15:../kernel/tkernel/task.h ****  *	task.h
  16:../kernel/tkernel/task.h ****  *	Task Definition
  17:../kernel/tkernel/task.h ****  */
  18:../kernel/tkernel/task.h **** 
  19:../kernel/tkernel/task.h **** #ifndef _TASK_
  20:../kernel/tkernel/task.h **** #define _TASK_
  21:../kernel/tkernel/task.h **** 
  22:../kernel/tkernel/task.h **** /*
  23:../kernel/tkernel/task.h ****  * Internal expression of task state
  24:../kernel/tkernel/task.h ****  *	Can check with 'state & TS_WAIT' whether the task is in the wait state.
  25:../kernel/tkernel/task.h ****  *	Can check with 'state & TS_SUSPEND' whether the task is in the forced 
  26:../kernel/tkernel/task.h ****  *	wait state.
  27:../kernel/tkernel/task.h ****  */
  28:../kernel/tkernel/task.h **** typedef enum {
  29:../kernel/tkernel/task.h **** 	TS_NONEXIST	= 0,	/* Unregistered state */
  30:../kernel/tkernel/task.h **** 	TS_READY	= 1,	/* RUN or READY state */
  31:../kernel/tkernel/task.h **** 	TS_WAIT		= 2,	/* WAIT state */
  32:../kernel/tkernel/task.h **** 	TS_SUSPEND	= 4,	/* SUSPEND state */
  33:../kernel/tkernel/task.h **** 	TS_WAITSUS	= 6,	/* Both WAIT and SUSPEND state */
  34:../kernel/tkernel/task.h **** 	TS_DORMANT	= 8	/* DORMANT state */
  35:../kernel/tkernel/task.h **** } TSTAT;
  36:../kernel/tkernel/task.h **** 
  37:../kernel/tkernel/task.h **** /*
  38:../kernel/tkernel/task.h ****  * If the task is alive ( except NON-EXISTENT,DORMANT ), return TRUE.
  39:../kernel/tkernel/task.h ****  */
  40:../kernel/tkernel/task.h **** Inline BOOL knl_task_alive( TSTAT state )
  41:../kernel/tkernel/task.h **** {
 169                             		.loc 4 41 1
 170 00c0 7E AA                   		push.l	r10
 171                             	.LCFI10:
 172 00c2 71 0A FC                		add	#-4, r0, r10
 173                             	.LCFI11:
 174 00c5 EF A0                   		mov.L	r10, r0
 175 00c7 E3 A1                   		mov.L	r1, [r10]
  42:../kernel/tkernel/task.h **** 	return ( (state & (TS_READY|TS_WAIT|TS_SUSPEND)) != 0 );
 176                             		.loc 4 42 18
 177 00c9 EC A5                   		mov.L	[r10], r5
 178 00cb 64 75                   		and	#7, r5
 179                             		.loc 4 42 51
 180 00cd 61 05                   		cmp	#0, r5
 181 00cf FC DB 51                		scne.L	r5
 182 00d2 5B 55                   		movu.B	r5, r5
  43:../kernel/tkernel/task.h **** }
 183                             		.loc 4 43 1
 184 00d4 EF 51                   		mov.L	r5, r1
 185 00d6 3F AA 02                		rtsd	#8, r10-r10
 186                             	.LFE19:
 189                             	_knl_wait_cancel:
 190                             	.LFB30:
 191                             		.file 5 "../kernel/tkernel/wait.h"
   1:../kernel/tkernel/wait.h **** /*
   2:../kernel/tkernel/wait.h ****  *----------------------------------------------------------------------
   3:../kernel/tkernel/wait.h ****  *    micro T-Kernel 3.00.00
   4:../kernel/tkernel/wait.h ****  *
   5:../kernel/tkernel/wait.h ****  *    Copyright (C) 2006-2019 by Ken Sakamura.
   6:../kernel/tkernel/wait.h ****  *    This software is distributed under the T-License 2.1.
   7:../kernel/tkernel/wait.h ****  *----------------------------------------------------------------------
   8:../kernel/tkernel/wait.h ****  *
   9:../kernel/tkernel/wait.h ****  *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.
  10:../kernel/tkernel/wait.h ****  *
  11:../kernel/tkernel/wait.h ****  *----------------------------------------------------------------------
  12:../kernel/tkernel/wait.h ****  */
  13:../kernel/tkernel/wait.h **** 
  14:../kernel/tkernel/wait.h **** /*
  15:../kernel/tkernel/wait.h ****  *	wait.h
  16:../kernel/tkernel/wait.h ****  *	Definition of Common Routine for Synchronization
  17:../kernel/tkernel/wait.h ****  */
  18:../kernel/tkernel/wait.h **** 
  19:../kernel/tkernel/wait.h **** #ifndef _WAIT_
  20:../kernel/tkernel/wait.h **** #define _WAIT_
  21:../kernel/tkernel/wait.h **** 
  22:../kernel/tkernel/wait.h **** #include <sys/queue.h>
  23:../kernel/tkernel/wait.h **** #include "timer.h"
  24:../kernel/tkernel/wait.h **** #include "task.h"
  25:../kernel/tkernel/wait.h **** 
  26:../kernel/tkernel/wait.h **** /*
  27:../kernel/tkernel/wait.h ****  * Release wait state of the task.
  28:../kernel/tkernel/wait.h ****  *	Remove the task from the timer queue and the wait queue, then
  29:../kernel/tkernel/wait.h ****  *	update the task state. 'wait_release_ok' sends E_OK to the
  30:../kernel/tkernel/wait.h ****  *	wait released task.
  31:../kernel/tkernel/wait.h ****  *	'wait_release_ok_recd' is normal wait release as well as
  32:../kernel/tkernel/wait.h ****  *	'wait_release_ok', but it sends 'ercd' to the wait released task.
  33:../kernel/tkernel/wait.h ****  *	It needs to be ercd >= 0. 
  34:../kernel/tkernel/wait.h ****  *	'wait_release_ng' sends 'ercd' to the wait released task. Use for
  35:../kernel/tkernel/wait.h ****  *	releasing the forced wait task. It needs to be ercd < 0.
  36:../kernel/tkernel/wait.h ****  *	'wait_release_tmout' don't remove from the timer queue. Use for
  37:../kernel/tkernel/wait.h ****  *	time out processing.
  38:../kernel/tkernel/wait.h ****  */
  39:../kernel/tkernel/wait.h **** IMPORT void knl_wait_release_ok( TCB *tcb );
  40:../kernel/tkernel/wait.h **** IMPORT void knl_wait_release_ok_ercd( TCB *tcb, ER ercd );
  41:../kernel/tkernel/wait.h **** IMPORT void knl_wait_release_ng( TCB *tcb, ER ercd );
  42:../kernel/tkernel/wait.h **** IMPORT void knl_wait_release_tmout( TCB *tcb );
  43:../kernel/tkernel/wait.h **** 
  44:../kernel/tkernel/wait.h **** /*
  45:../kernel/tkernel/wait.h ****  * Cancel task wait state.
  46:../kernel/tkernel/wait.h ****  *	Remove the task from the timer queue and the wait queue.
  47:../kernel/tkernel/wait.h ****  *	Do not update the task state.
  48:../kernel/tkernel/wait.h ****  */
  49:../kernel/tkernel/wait.h **** Inline void knl_wait_cancel( TCB *tcb )
  50:../kernel/tkernel/wait.h **** {
 192                             		.loc 5 50 1
 193 00d9 7E AA                   		push.l	r10
 194                             	.LCFI12:
 195 00db 71 0A FC                		add	#-4, r0, r10
 196                             	.LCFI13:
 197 00de EF A0                   		mov.L	r10, r0
 198 00e0 E3 A1                   		mov.L	r1, [r10]
  51:../kernel/tkernel/wait.h **** 	knl_timer_delete(&tcb->wtmeb);
 199                             		.loc 5 51 2
 200 00e2 EC A5                   		mov.L	[r10], r5
 201 00e4 71 55 4C                		add	#0x4c, r5
 202 00e7 EF 51                   		mov.L	r5, r1
 203 00e9 39 AB FF                		bsr	_knl_timer_delete
  52:../kernel/tkernel/wait.h **** 	QueRemove(&tcb->tskque);
 204                             		.loc 5 52 2
 205 00ec EC A5                   		mov.L	[r10], r5
 206 00ee EF 51                   		mov.L	r5, r1
 207 00f0 39 40 FF                		bsr	_QueRemove
  53:../kernel/tkernel/wait.h **** }
 208                             		.loc 5 53 1
 209 00f3 03                      		nop
 210 00f4 3F AA 02                		rtsd	#8, r10-r10
 211                             	.LFE30:
 214                             	_knl_setup_stacd:
 215                             	.LFB35:
 216                             		.file 6 "../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h"
   1:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** /*
   2:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h ****  *----------------------------------------------------------------------
   3:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h ****  *    micro T-Kernel 3.00.01
   4:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h ****  *
   5:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h ****  *    Copyright (C) 2006-2020 by Ken Sakamura.
   6:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h ****  *    This software is distributed under the T-License 2.2.
   7:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h ****  *----------------------------------------------------------------------
   8:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h ****  *
   9:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h ****  *    Released by TRON Forum(http://www.tron.org) at 2020/05/29.
  10:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h ****  *
  11:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h ****  *----------------------------------------------------------------------
  12:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h ****  */
  13:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** 
  14:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** /*
  15:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h ****  *	cpu_task.h (RXv2)
  16:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h ****  *	CPU-Dependent Task Start Processing
  17:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h ****  */
  18:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** 
  19:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** #ifndef _SYSDEPEND_CPU_CORE_CPUTASK_
  20:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** #define _SYSDEPEND_CPU_CORE_CPUTASK_
  21:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** 
  22:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** /*
  23:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h ****  * System stack configuration at task startup
  24:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h ****  */
  25:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** typedef struct {
  26:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** #if	USE_DSP
  27:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** 	UW	acc0lo;
  28:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** 	UW	acc0hi;
  29:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** 	VW	acc0gu;	/* Saved ACC0 */
  30:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** 	UW	acc1lo;
  31:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** 	UW	acc1hi;
  32:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** 	VW	acc1gu;	/* Saved ACC1 */
  33:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** #endif
  34:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** #if	USE_FPU
  35:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** 	VW	fpsw;	/* Saved FPSW */
  36:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** #endif
  37:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** 	VW	r[15];	/* R1-R15 */
  38:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** 	void	*spc;	/* Saved return PC */
  39:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** 	VW	spsw;	/* Saved PSW */
  40:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** } SStackFrame;
  41:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** 
  42:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** /*
  43:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h ****  * Size of system stack area destroyed by 'make_dormant()'
  44:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h ****  * In other words, the size of area required to write by 'setup_context().'
  45:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h ****  */
  46:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** #if	USE_FPU && USE_DSP
  47:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** #define DORMANT_STACK_SIZE	( sizeof(VW) * 24 )	/* To 'spsw', 'spc', 'acc0', 'acc1', 'fpsw' position
  48:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** #elif USE_DSP
  49:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** #define DORMANT_STACK_SIZE	( sizeof(VW) * 23 )	/* To 'spsw', 'spc', 'acc0', 'acc1' position */
  50:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** #elif USE_FPU
  51:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** #define DORMANT_STACK_SIZE	( sizeof(VW) * 18 )	/* To 'spsw', 'spc', 'fpsw' position */
  52:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** #else
  53:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** #define DORMANT_STACK_SIZE	( sizeof(VW) * 2 )	/* To 'spsw' and 'spc' position */
  54:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** #endif
  55:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** 
  56:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** /*
  57:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h ****  * Create stack frame for task startup
  58:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h ****  *	Call from 'make_dormant()'
  59:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h ****  */
  60:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** Inline void knl_setup_context( TCB *tcb )
  61:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** {
  62:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** 	SStackFrame	*ssp;
  63:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** 	void		*pc;
  64:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** 	VW		psw;
  65:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** 
  66:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** 	ssp = (SStackFrame*)((UB*)(tcb->isstack) - (UB*)(sizeof(SStackFrame)));
  67:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** 
  68:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** 	psw = 0x00010000UL;
  69:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** 	pc = (void*)tcb->task;
  70:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** 
  71:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** 	/* CPU context initialization */
  72:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** 	ssp->spsw	= psw;	/* Initial PSW */ 
  73:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** 	ssp->spc	= pc;	/* Task startup address */
  74:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** #if	USE_FPU
  75:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** 	ssp->fpsw	= FPSW_VAL;
  76:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** #endif
  77:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** 	tcb->tskctxb.ssp = ssp;			/* System stack */
  78:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** }
  79:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** 
  80:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** /*
  81:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h ****  * Set task startup code
  82:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h ****  *	Called by 'tk_sta_tsk()' processing.
  83:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h ****  */
  84:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** Inline void knl_setup_stacd( TCB *tcb, INT stacd )
  85:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** {
 217                             		.loc 6 85 1
 218 00f7 7E AA                   		push.l	r10
 219                             	.LCFI14:
 220 00f9 71 0A F4                		add	#-12, r0, r10
 221                             	.LCFI15:
 222 00fc EF A0                   		mov.L	r10, r0
 223 00fe E7 A1 01                		mov.L	r1, 4[r10]
 224 0101 E7 A2 02                		mov.L	r2, 8[r10]
  86:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** 	SStackFrame	*ssp = tcb->tskctxb.ssp;
 225                             		.loc 6 86 15
 226 0104 ED A5 01                		mov.L	4[r10], r5
 227 0107 A9 D5                   		mov.L	24[r5], r5
 228 0109 E3 A5                   		mov.L	r5, [r10]
  87:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** 
  88:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** 	ssp->r[0] = stacd;		/* R1 */
 229                             		.loc 6 88 12
 230 010b EC A5                   		mov.L	[r10], r5
 231 010d ED A4 02                		mov.L	8[r10], r4
 232 0110 E3 54                   		mov.L	r4, [r5]
  89:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** 	ssp->r[1] = (VW)tcb->exinf;	/* R2 */
 233                             		.loc 6 89 21
 234 0112 ED A5 01                		mov.L	4[r10], r5
 235 0115 A8 DD                   		mov.L	12[r5], r5
 236                             		.loc 6 89 14
 237 0117 EF 54                   		mov.L	r5, r4
 238                             		.loc 6 89 12
 239 0119 EC A5                   		mov.L	[r10], r5
 240 011b A0 5C                   		mov.L	r4, 4[r5]
  90:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** }
 241                             		.loc 6 90 1
 242 011d 03                      		nop
 243 011e 3F AA 04                		rtsd	#16, r10-r10
 244                             	.LFE35:
 247                             	_knl_cleanup_context:
 248                             	.LFB36:
  91:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** 
  92:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** /*
  93:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h ****  * Delete task contexts
  94:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h ****  */
  95:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** Inline void knl_cleanup_context( TCB *tcb )
  96:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** {
 249                             		.loc 6 96 1
 250 0121 7E AA                   		push.l	r10
 251                             	.LCFI16:
 252 0123 71 0A FC                		add	#-4, r0, r10
 253                             	.LCFI17:
 254 0126 EF A0                   		mov.L	r10, r0
 255 0128 E3 A1                   		mov.L	r1, [r10]
  97:../kernel/tkernel/../sysdepend/rsk_rx65n/../cpu/rx65n/../core/rxv2/cpu_task.h **** }
 256                             		.loc 6 97 1
 257 012a 03                      		nop
 258 012b 3F AA 02                		rtsd	#8, r10-r10
 259                             	.LFE36:
 261                             		.global	_tk_cre_tsk
 263                             	_tk_cre_tsk:
 264                             	.LFB37:
 265                             		.file 7 "../kernel/tkernel/task_manage.c"
   1:../kernel/tkernel/task_manage.c **** /*
   2:../kernel/tkernel/task_manage.c ****  *----------------------------------------------------------------------
   3:../kernel/tkernel/task_manage.c ****  *    micro T-Kernel 3.00.02
   4:../kernel/tkernel/task_manage.c ****  *
   5:../kernel/tkernel/task_manage.c ****  *    Copyright (C) 2006-2020 by Ken Sakamura.
   6:../kernel/tkernel/task_manage.c ****  *    This software is distributed under the T-License 2.2.
   7:../kernel/tkernel/task_manage.c ****  *----------------------------------------------------------------------
   8:../kernel/tkernel/task_manage.c ****  *
   9:../kernel/tkernel/task_manage.c ****  *    Released by TRON Forum(http://www.tron.org) at 2020/10.
  10:../kernel/tkernel/task_manage.c ****  *
  11:../kernel/tkernel/task_manage.c ****  *----------------------------------------------------------------------
  12:../kernel/tkernel/task_manage.c ****  */
  13:../kernel/tkernel/task_manage.c **** 
  14:../kernel/tkernel/task_manage.c **** /*
  15:../kernel/tkernel/task_manage.c ****  *	task_manage.c
  16:../kernel/tkernel/task_manage.c ****  *	Task Management Function
  17:../kernel/tkernel/task_manage.c ****  */
  18:../kernel/tkernel/task_manage.c **** 
  19:../kernel/tkernel/task_manage.c **** #include "kernel.h"
  20:../kernel/tkernel/task_manage.c **** #include "wait.h"
  21:../kernel/tkernel/task_manage.c **** #include "check.h"
  22:../kernel/tkernel/task_manage.c **** #include <tm/tmonitor.h>
  23:../kernel/tkernel/task_manage.c **** 
  24:../kernel/tkernel/task_manage.c **** #include "../sysdepend/cpu_task.h"
  25:../kernel/tkernel/task_manage.c **** 
  26:../kernel/tkernel/task_manage.c **** /*
  27:../kernel/tkernel/task_manage.c ****  * Create task
  28:../kernel/tkernel/task_manage.c ****  */
  29:../kernel/tkernel/task_manage.c **** SYSCALL ID tk_cre_tsk( CONST T_CTSK *pk_ctsk )
  30:../kernel/tkernel/task_manage.c **** {
 266                             		.loc 7 30 1
 267 012e 7E AA                   		push.l	r10
 268                             	.LCFI18:
 269 0130 71 0A E4                		add	#-28, r0, r10
 270                             	.LCFI19:
 271 0133 EF A0                   		mov.L	r10, r0
 272 0135 E7 A1 06                		mov.L	r1, 24[r10]
  31:../kernel/tkernel/task_manage.c **** #if CHK_RSATR
  32:../kernel/tkernel/task_manage.c **** 	const ATR VALID_TSKATR = {	/* Valid value of task attribute */
 273                             		.loc 7 32 12
 274 0138 F9 AA 03 21 03          		mov.L	#0x321, 12[r10]
  33:../kernel/tkernel/task_manage.c **** 		 TA_HLNG
  34:../kernel/tkernel/task_manage.c **** 		|TA_RNG3
  35:../kernel/tkernel/task_manage.c **** 		|TA_USERBUF
  36:../kernel/tkernel/task_manage.c **** 		|TA_COPS
  37:../kernel/tkernel/task_manage.c **** #if USE_OBJECT_NAME
  38:../kernel/tkernel/task_manage.c **** 		|TA_DSNAME
  39:../kernel/tkernel/task_manage.c **** #endif
  40:../kernel/tkernel/task_manage.c **** 	};
  41:../kernel/tkernel/task_manage.c **** #endif
  42:../kernel/tkernel/task_manage.c **** 	TCB	*tcb;
  43:../kernel/tkernel/task_manage.c **** 	W	sstksz;
  44:../kernel/tkernel/task_manage.c **** 	void	*stack;
  45:../kernel/tkernel/task_manage.c **** 	ER	ercd;
  46:../kernel/tkernel/task_manage.c **** 
  47:../kernel/tkernel/task_manage.c **** 	CHECK_RSATR(pk_ctsk->tskatr, VALID_TSKATR);
 275                             		.loc 7 47 2
 276 013d ED A5 06                		mov.L	24[r10], r5
 277 0140 A8 5C                   		mov.L	4[r5], r4
 278 0142 ED A5 03                		mov.L	12[r10], r5
 279 0145 7E 05                   		not	r5
 280 0147 53 45                   		and	r4, r5
 281 0149 61 05                   		cmp	#0, r5
 282 014b 17                      		beq	.L17
 283                             		.loc 7 47 2 is_stmt 0 discriminator 1
 284 014c FB 56 F5                		mov.L	#-11, r5
 285 014f 38 41 01                		bra	.L18
 286                             	.L17:
  48:../kernel/tkernel/task_manage.c **** #if !USE_IMALLOC
  49:../kernel/tkernel/task_manage.c **** 	/* TA_USERBUF must be specified if configured in no Imalloc */
  50:../kernel/tkernel/task_manage.c **** 	CHECK_PAR((pk_ctsk->tskatr & TA_USERBUF) != 0);
  51:../kernel/tkernel/task_manage.c **** #endif
  52:../kernel/tkernel/task_manage.c **** 	CHECK_PRI(pk_ctsk->itskpri);
 287                             		.loc 7 52 2 is_stmt 1
 288 0152 ED A5 06                		mov.L	24[r10], r5
 289 0155 A8 DD                   		mov.L	12[r5], r5
 290 0157 61 05                   		cmp	#0, r5
 291 0159 2B 0C                   		ble	.L19
 292                             		.loc 7 52 2 is_stmt 0 discriminator 2
 293 015b ED A5 06                		mov.L	24[r10], r5
 294 015e A8 DD                   		mov.L	12[r5], r5
 295 0160 75 55 20                		cmp	#32, r5
 296 0163 2B 08                   		ble	.L20
 297                             	.L19:
 298                             		.loc 7 52 2 discriminator 3
 299 0165 FB 56 EF                		mov.L	#-17, r5
 300 0168 38 28 01                		bra	.L18
 301                             	.L20:
  53:../kernel/tkernel/task_manage.c **** 
  54:../kernel/tkernel/task_manage.c **** 	sstksz = pk_ctsk->stksz + DEFAULT_SYS_STKSZ;
 302                             		.loc 7 54 18 is_stmt 1
 303 016b ED A5 06                		mov.L	24[r10], r5
 304 016e A9 55                   		mov.L	16[r5], r5
 305                             		.loc 7 54 9
 306 0170 72 55 80 00             		add	#0x80, r5
 307 0174 E3 A5                   		mov.L	r5, [r10]
  55:../kernel/tkernel/task_manage.c **** 	CHECK_PAR(sstksz >= MIN_SYS_STACK_SIZE);
 308                             		.loc 7 55 2
 309 0176 EC A5                   		mov.L	[r10], r5
 310 0178 75 55 7F                		cmp	#0x7f, r5
 311 017b 2A 08                   		bgt	.L21
 312                             		.loc 7 55 2 is_stmt 0 discriminator 1
 313 017d FB 56 EF                		mov.L	#-17, r5
 314 0180 38 10 01                		bra	.L18
 315                             	.L21:
  56:../kernel/tkernel/task_manage.c **** 
  57:../kernel/tkernel/task_manage.c **** 	if ( (pk_ctsk->tskatr & TA_USERBUF) != 0 ) {
 316                             		.loc 7 57 15 is_stmt 1
 317 0183 ED A5 06                		mov.L	24[r10], r5
 318 0186 A8 5D                   		mov.L	4[r5], r5
 319                             		.loc 7 57 24
 320 0188 75 25 20                		and	#32, r5
 321                             		.loc 7 57 5
 322 018b 61 05                   		cmp	#0, r5
 323 018d 20 0C                   		beq	.L22
  58:../kernel/tkernel/task_manage.c **** 		/* Use user buffer */
  59:../kernel/tkernel/task_manage.c **** 		stack = pk_ctsk->bufptr;
 324                             		.loc 7 59 9
 325 018f ED A5 06                		mov.L	24[r10], r5
 326 0192 A9 5D                   		mov.L	20[r5], r5
 327 0194 E7 A5 01                		mov.L	r5, 4[r10]
 328 0197 2E 27                   		bra	.L23
 329                             	.L22:
  60:../kernel/tkernel/task_manage.c **** 	} else {
  61:../kernel/tkernel/task_manage.c **** #if USE_IMALLOC
  62:../kernel/tkernel/task_manage.c **** 		/* Allocate system stack area */
  63:../kernel/tkernel/task_manage.c **** 		sstksz  = (sstksz  + 7) / 8 * 8;	/* Align to a multiple of 8 */
 330                             		.loc 7 63 22
 331 0199 EC A5                   		mov.L	[r10], r5
 332 019b 62 75                   		add	#7, r5
 333                             		.loc 7 63 27
 334 019d 61 05                   		cmp	#0, r5
 335 019f 28 04                   		bge	.L24
 336 01a1 62 75                   		add	#7, r5
 337                             	.L24:
 338 01a3 6A 35                   		shar	#3, r5
 339                             		.loc 7 63 11
 340 01a5 6C 35                   		shll	#3, r5
 341 01a7 E3 A5                   		mov.L	r5, [r10]
  64:../kernel/tkernel/task_manage.c **** 		stack = knl_Imalloc((UW)sstksz);
 342                             		.loc 7 64 11
 343 01a9 EC A1                   		mov.L	[r10], r1
 344 01ab 05 00 00 00             		bsr	_knl_Imalloc
 345 01af E7 A1 01                		mov.L	r1, 4[r10]
  65:../kernel/tkernel/task_manage.c **** 		if ( stack == NULL ) {
 346                             		.loc 7 65 6
 347 01b2 ED A5 01                		mov.L	4[r10], r5
 348 01b5 61 05                   		cmp	#0, r5
 349 01b7 1F                      		bne	.L23
  66:../kernel/tkernel/task_manage.c **** 			return E_NOMEM;
 350                             		.loc 7 66 11
 351 01b8 FB 56 DF                		mov.L	#-33, r5
 352 01bb 38 D5 00                		bra	.L18
 353                             	.L23:
 354                             	.LBB2:
  67:../kernel/tkernel/task_manage.c **** 		}
  68:../kernel/tkernel/task_manage.c **** #endif
  69:../kernel/tkernel/task_manage.c **** 	}
  70:../kernel/tkernel/task_manage.c **** 
  71:../kernel/tkernel/task_manage.c **** 	BEGIN_CRITICAL_SECTION;
 355                             		.loc 7 71 2
 356 01be 05 00 00 00             		bsr	_disint
 357 01c2 E7 A1 04                		mov.L	r1, 16[r10]
  72:../kernel/tkernel/task_manage.c **** 	/* Get control block from FreeQue */
  73:../kernel/tkernel/task_manage.c **** 	tcb = (TCB*)QueRemoveNext(&knl_free_tcb);
 358                             		.loc 7 73 14
 359 01c5 FB 12 00 00 00 00       		mov.L	#_knl_free_tcb, r1
 360 01cb 39 90 FE                		bsr	_QueRemoveNext
 361 01ce E7 A1 05                		mov.L	r1, 20[r10]
  74:../kernel/tkernel/task_manage.c **** 	if ( tcb == NULL ) {
 362                             		.loc 7 74 5
 363 01d1 ED A5 05                		mov.L	20[r10], r5
 364 01d4 61 05                   		cmp	#0, r5
 365 01d6 1F                      		bne	.L25
  75:../kernel/tkernel/task_manage.c **** 		ercd = E_LIMIT;
 366                             		.loc 7 75 8
 367 01d7 F9 A6 02 DE             		mov.L	#-34, 8[r10]
  76:../kernel/tkernel/task_manage.c **** 		goto error_exit;
 368                             		.loc 7 76 3
 369 01db 2E 5E                   		bra	.L26
 370                             	.L25:
  77:../kernel/tkernel/task_manage.c **** 	}
  78:../kernel/tkernel/task_manage.c **** 
  79:../kernel/tkernel/task_manage.c **** 	/* Initialize control block */
  80:../kernel/tkernel/task_manage.c **** 	tcb->exinf     = pk_ctsk->exinf;
 371                             		.loc 7 80 26
 372 01dd ED A5 06                		mov.L	24[r10], r5
 373 01e0 EC 54                   		mov.L	[r5], r4
 374                             		.loc 7 80 17
 375 01e2 ED A5 05                		mov.L	20[r10], r5
 376 01e5 A0 DC                   		mov.L	r4, 12[r5]
  81:../kernel/tkernel/task_manage.c **** 	tcb->tskatr    = pk_ctsk->tskatr;
 377                             		.loc 7 81 26
 378 01e7 ED A5 06                		mov.L	24[r10], r5
 379 01ea A8 5C                   		mov.L	4[r5], r4
 380                             		.loc 7 81 17
 381 01ec ED A5 05                		mov.L	20[r10], r5
 382 01ef A1 54                   		mov.L	r4, 16[r5]
  82:../kernel/tkernel/task_manage.c **** 	tcb->task      = pk_ctsk->task;
 383                             		.loc 7 82 26
 384 01f1 ED A5 06                		mov.L	24[r10], r5
 385 01f4 A8 D4                   		mov.L	8[r5], r4
 386                             		.loc 7 82 17
 387 01f6 ED A5 05                		mov.L	20[r10], r5
 388 01f9 A1 5C                   		mov.L	r4, 20[r5]
  83:../kernel/tkernel/task_manage.c **** 	tcb->ipriority = (UB)int_priority(pk_ctsk->itskpri);
 389                             		.loc 7 83 23
 390 01fb ED A5 06                		mov.L	24[r10], r5
 391 01fe A8 DD                   		mov.L	12[r5], r5
 392                             		.loc 7 83 19
 393 0200 60 15                   		sub	#1, r5
 394 0202 CF 54                   		mov.B	r5, r4
 395                             		.loc 7 83 17
 396 0204 ED A5 05                		mov.L	20[r10], r5
 397 0207 C7 54 24                		mov.B	r4, 36[r5]
  84:../kernel/tkernel/task_manage.c **** 	tcb->sstksz    = sstksz;
 398                             		.loc 7 84 17
 399 020a ED A5 05                		mov.L	20[r10], r5
 400 020d EC A4                   		mov.L	[r10], r4
 401 020f A1 DC                   		mov.L	r4, 28[r5]
  85:../kernel/tkernel/task_manage.c **** #if USE_OBJECT_NAME
  86:../kernel/tkernel/task_manage.c **** 	if ( (pk_ctsk->tskatr & TA_DSNAME) != 0 ) {
  87:../kernel/tkernel/task_manage.c **** 		knl_strncpy((char*)tcb->name, (char*)pk_ctsk->dsname, OBJECT_NAME_LENGTH);
  88:../kernel/tkernel/task_manage.c **** 	}
  89:../kernel/tkernel/task_manage.c **** #endif
  90:../kernel/tkernel/task_manage.c **** 
  91:../kernel/tkernel/task_manage.c **** 	/* Set stack pointer */
  92:../kernel/tkernel/task_manage.c **** 	tcb->isstack = (VB*)stack + sstksz;
 402                             		.loc 7 92 28
 403 0211 EC A5                   		mov.L	[r10], r5
 404 0213 ED A4 01                		mov.L	4[r10], r4
 405 0216 4B 54                   		add	r5, r4
 406                             		.loc 7 92 15
 407 0218 ED A5 05                		mov.L	20[r10], r5
 408 021b A6 54                   		mov.L	r4, 96[r5]
  93:../kernel/tkernel/task_manage.c **** 
  94:../kernel/tkernel/task_manage.c **** 	/* Set initial value of task operation mode */
  95:../kernel/tkernel/task_manage.c **** 	tcb->isysmode = 1;
 409                             		.loc 7 95 16
 410 021d ED A5 05                		mov.L	20[r10], r5
 411 0220 F9 54 20 01             		mov.B	#1, 32[r5]
  96:../kernel/tkernel/task_manage.c **** 	tcb->sysmode  = 1;
 412                             		.loc 7 96 16
 413 0224 ED A5 05                		mov.L	20[r10], r5
 414 0227 3D D1 01                		mov.W	#1, 34[r5]
  97:../kernel/tkernel/task_manage.c **** 
  98:../kernel/tkernel/task_manage.c **** 	/* make it to DORMANT state */
  99:../kernel/tkernel/task_manage.c **** 	knl_make_dormant(tcb);
 415                             		.loc 7 99 2
 416 022a ED A1 05                		mov.L	20[r10], r1
 417 022d 05 00 00 00             		bsr	_knl_make_dormant
 100:../kernel/tkernel/task_manage.c **** 
 101:../kernel/tkernel/task_manage.c **** 	ercd = tcb->tskid;
 418                             		.loc 7 101 7
 419 0231 ED A5 05                		mov.L	20[r10], r5
 420 0234 A8 D5                   		mov.L	8[r5], r5
 421 0236 E7 A5 02                		mov.L	r5, 8[r10]
 422                             	.L26:
 102:../kernel/tkernel/task_manage.c **** 
 103:../kernel/tkernel/task_manage.c ****     error_exit:
 104:../kernel/tkernel/task_manage.c **** 	END_CRITICAL_SECTION;
 423                             		.loc 7 104 2
 424 0239 ED A5 04                		mov.L	16[r10], r5
 425 023c 61 F5                   		cmp	#15, r5
 426 023e 20 2E                   		beq	.L27
 427                             		.loc 7 104 2 is_stmt 0 discriminator 1
 428 0240 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 429 0246 EC 54                   		mov.L	[r5], r4
 430 0248 FB 52 00 00 00 00       		mov.L	#_knl_schedtsk, r5
 431 024e EC 55                   		mov.L	[r5], r5
 432 0250 47 54                   		cmp	r5, r4
 433 0252 20 1A                   		beq	.L27
 434                             		.loc 7 104 2 discriminator 3
 435 0254 39 54 FE                		bsr	_knl_isTaskIndependent
 436 0257 EF 15                   		mov.L	r1, r5
 437 0259 61 05                   		cmp	#0, r5
 438 025b 21 11                   		bne	.L27
 439                             		.loc 7 104 2 discriminator 5
 440 025d FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 441 0263 EC 55                   		mov.L	[r5], r5
 442 0265 61 05                   		cmp	#0, r5
 443 0267 1D                      		bne	.L27
 444                             		.loc 7 104 2 discriminator 7
 445 0268 05 00 00 00             		bsr	_knl_dispatch
 446                             		.balign 8,3,1
 447                             	.L27:
 448                             		.loc 7 104 2 discriminator 9
 449 026c ED A1 04                		mov.L	16[r10], r1
 450 026f 05 00 00 00             		bsr	_setint
 451                             	.LBE2:
 105:../kernel/tkernel/task_manage.c **** 
 106:../kernel/tkernel/task_manage.c **** #if USE_IMALLOC
 107:../kernel/tkernel/task_manage.c **** 	if ( (ercd < E_OK) && ((pk_ctsk->tskatr & TA_USERBUF) == 0) ) {
 452                             		.loc 7 107 5 is_stmt 1 discriminator 9
 453 0273 ED A5 02                		mov.L	8[r10], r5
 454 0276 61 05                   		cmp	#0, r5
 455 0278 28 14                   		bge	.L28
 456                             		.loc 7 107 33 discriminator 1
 457 027a ED A5 06                		mov.L	24[r10], r5
 458 027d A8 5D                   		mov.L	4[r5], r5
 459                             		.loc 7 107 42 discriminator 1
 460 027f 75 25 20                		and	#32, r5
 461                             		.loc 7 107 21 discriminator 1
 462 0282 61 05                   		cmp	#0, r5
 463 0284 18                      		bne	.L28
 108:../kernel/tkernel/task_manage.c **** 		knl_Ifree(stack);
 464                             		.loc 7 108 3
 465 0285 ED A1 01                		mov.L	4[r10], r1
 466 0288 05 00 00 00             		bsr	_knl_Ifree
 467                             	.L28:
 109:../kernel/tkernel/task_manage.c **** 	}
 110:../kernel/tkernel/task_manage.c **** #endif
 111:../kernel/tkernel/task_manage.c **** 
 112:../kernel/tkernel/task_manage.c **** 	return ercd;
 468                             		.loc 7 112 9
 469 028c ED A5 02                		mov.L	8[r10], r5
 470 028f 03                      		.balign 8,3,1
 471                             	.L18:
 113:../kernel/tkernel/task_manage.c **** }
 472                             		.loc 7 113 1
 473 0290 EF 51                   		mov.L	r5, r1
 474 0292 3F AA 08                		rtsd	#32, r10-r10
 475                             	.LFE37:
 478                             	_knl_del_tsk:
 479                             	.LFB38:
 114:../kernel/tkernel/task_manage.c **** 
 115:../kernel/tkernel/task_manage.c **** /*
 116:../kernel/tkernel/task_manage.c ****  * Task deletion
 117:../kernel/tkernel/task_manage.c ****  *	Call from critical section
 118:../kernel/tkernel/task_manage.c ****  */
 119:../kernel/tkernel/task_manage.c **** LOCAL void knl_del_tsk( TCB *tcb )
 120:../kernel/tkernel/task_manage.c **** {
 480                             		.loc 7 120 1
 481 0295 7E AA                   		push.l	r10
 482                             	.LCFI20:
 483 0297 71 0A F8                		add	#-8, r0, r10
 484                             	.LCFI21:
 485 029a EF A0                   		mov.L	r10, r0
 486 029c E7 A1 01                		mov.L	r1, 4[r10]
 121:../kernel/tkernel/task_manage.c **** #if USE_IMALLOC
 122:../kernel/tkernel/task_manage.c **** 	if ( (tcb->tskatr & TA_USERBUF) == 0 ) {
 487                             		.loc 7 122 11
 488 029f ED A5 01                		mov.L	4[r10], r5
 489 02a2 A9 55                   		mov.L	16[r5], r5
 490                             		.loc 7 122 20
 491 02a4 75 25 20                		and	#32, r5
 492                             		.loc 7 122 5
 493 02a7 61 05                   		cmp	#0, r5
 494 02a9 21 18                   		bne	.L30
 495                             	.LBB3:
 123:../kernel/tkernel/task_manage.c **** 		/* User buffer is not used */
 124:../kernel/tkernel/task_manage.c **** 		/* Free system stack */
 125:../kernel/tkernel/task_manage.c **** 		void *stack = (VB*)tcb->isstack - tcb->sstksz;
 496                             		.loc 7 125 25
 497 02ab ED A5 01                		mov.L	4[r10], r5
 498 02ae AE 54                   		mov.L	96[r5], r4
 499                             		.loc 7 125 40
 500 02b0 ED A5 01                		mov.L	4[r10], r5
 501 02b3 A9 DD                   		mov.L	28[r5], r5
 502                             		.loc 7 125 35
 503 02b5 7E 15                   		neg	r5
 504                             		.loc 7 125 9
 505 02b7 4B 45                   		add	r4, r5
 506 02b9 E3 A5                   		mov.L	r5, [r10]
 126:../kernel/tkernel/task_manage.c **** 		knl_Ifree(stack);
 507                             		.loc 7 126 3
 508 02bb EC A1                   		mov.L	[r10], r1
 509 02bd 05 00 00 00             		bsr	_knl_Ifree
 510                             	.L30:
 511                             	.LBE3:
 127:../kernel/tkernel/task_manage.c **** 	}
 128:../kernel/tkernel/task_manage.c **** #endif
 129:../kernel/tkernel/task_manage.c **** 
 130:../kernel/tkernel/task_manage.c **** 	/* Return control block to FreeQue */
 131:../kernel/tkernel/task_manage.c **** 	QueInsert(&tcb->tskque, &knl_free_tcb);
 512                             		.loc 7 131 2
 513 02c1 ED A5 01                		mov.L	4[r10], r5
 514 02c4 FB 22 00 00 00 00       		mov.L	#_knl_free_tcb, r2
 515 02ca EF 51                   		mov.L	r5, r1
 516 02cc 39 34 FD                		bsr	_QueInsert
 132:../kernel/tkernel/task_manage.c **** 	tcb->state = TS_NONEXIST;
 517                             		.loc 7 132 13
 518 02cf ED A5 01                		mov.L	4[r10], r5
 519 02d2 F9 54 27 00             		mov.B	#0, 39[r5]
 133:../kernel/tkernel/task_manage.c **** }
 520                             		.loc 7 133 1
 521 02d6 03                      		nop
 522 02d7 3F AA 03                		rtsd	#12, r10-r10
 523                             	.LFE38:
 525                             		.global	_tk_del_tsk
 527                             	_tk_del_tsk:
 528                             	.LFB39:
 134:../kernel/tkernel/task_manage.c **** 
 135:../kernel/tkernel/task_manage.c **** #ifdef USE_FUNC_TK_DEL_TSK
 136:../kernel/tkernel/task_manage.c **** /*
 137:../kernel/tkernel/task_manage.c ****  * Delete task 
 138:../kernel/tkernel/task_manage.c ****  */
 139:../kernel/tkernel/task_manage.c **** SYSCALL ER tk_del_tsk( ID tskid )
 140:../kernel/tkernel/task_manage.c **** {
 529                             		.loc 7 140 1
 530 02da 7E AA                   		push.l	r10
 531                             	.LCFI22:
 532 02dc 71 0A EC                		add	#-20, r0, r10
 533                             	.LCFI23:
 534 02df EF A0                   		mov.L	r10, r0
 535 02e1 E7 A1 04                		mov.L	r1, 16[r10]
 141:../kernel/tkernel/task_manage.c **** 	TCB	*tcb;
 142:../kernel/tkernel/task_manage.c **** 	TSTAT	state;
 143:../kernel/tkernel/task_manage.c **** 	ER	ercd = E_OK;
 536                             		.loc 7 143 5
 537 02e4 F8 A6 00                		mov.L	#0, [r10]
 144:../kernel/tkernel/task_manage.c **** 
 145:../kernel/tkernel/task_manage.c **** 	CHECK_TSKID(tskid);
 538                             		.loc 7 145 2
 539 02e7 39 C1 FD                		bsr	_knl_isTaskIndependent
 540 02ea EF 15                   		mov.L	r1, r5
 541 02ec 61 05                   		cmp	#0, r5
 542 02ee 21 1A                   		bne	.L32
 543                             		.loc 7 145 2 is_stmt 0 discriminator 1
 544 02f0 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 545 02f6 EC 55                   		mov.L	[r5], r5
 546 02f8 61 05                   		cmp	#0, r5
 547 02fa 20 0E                   		beq	.L32
 548                             		.loc 7 145 2 discriminator 3
 549 02fc ED A5 04                		mov.L	16[r10], r5
 550 02ff 61 05                   		cmp	#0, r5
 551 0301 1F                      		bne	.L32
 552                             		.loc 7 145 2 discriminator 5
 553 0302 FB 56 D7                		mov.L	#-41, r5
 554 0305 38 BE 00                		bra	.L33
 555                             	.L32:
 556                             		.loc 7 145 2 discriminator 6
 557 0308 ED A5 04                		mov.L	16[r10], r5
 558 030b 61 05                   		cmp	#0, r5
 559 030d 2B 0A                   		ble	.L34
 560                             		.loc 7 145 2 discriminator 8
 561 030f ED A5 04                		mov.L	16[r10], r5
 562 0312 75 55 20                		cmp	#32, r5
 563 0315 2B 08                   		ble	.L35
 564                             	.L34:
 565                             		.loc 7 145 2 discriminator 9
 566 0317 FB 56 EE                		mov.L	#-18, r5
 567 031a 38 A9 00                		bra	.L33
 568                             	.L35:
 146:../kernel/tkernel/task_manage.c **** 	CHECK_NONSELF(tskid);
 569                             		.loc 7 146 2 is_stmt 1
 570 031d 39 8B FD                		bsr	_knl_isTaskIndependent
 571 0320 EF 15                   		mov.L	r1, r5
 572 0322 61 05                   		cmp	#0, r5
 573 0324 21 23                   		bne	.L36
 574                             		.loc 7 146 2 is_stmt 0 discriminator 1
 575 0326 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 576 032c EC 55                   		mov.L	[r5], r5
 577 032e 61 05                   		cmp	#0, r5
 578 0330 20 17                   		beq	.L36
 579                             		.loc 7 146 2 discriminator 2
 580 0332 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 581 0338 EC 55                   		mov.L	[r5], r5
 582 033a A8 D5                   		mov.L	8[r5], r5
 583 033c ED A4 04                		mov.L	16[r10], r4
 584 033f 47 54                   		cmp	r5, r4
 585 0341 1E                      		bne	.L36
 586                             		.loc 7 146 2 discriminator 3
 587 0342 FB 56 D7                		mov.L	#-41, r5
 588 0345 2E 7E                   		bra	.L33
 589                             	.L36:
 147:../kernel/tkernel/task_manage.c **** 
 148:../kernel/tkernel/task_manage.c **** 	tcb = get_tcb(tskid);
 590                             		.loc 7 148 8 is_stmt 1
 591 0347 ED A5 04                		mov.L	16[r10], r5
 592 034a 60 15                   		sub	#1, r5
 593                             		.loc 7 148 6
 594 034c 75 15 68                		mul	#0x68, r5
 595 034f 70 55 00 00 00 00       		add	#_knl_tcb_table, r5
 596 0355 E7 A5 01                		mov.L	r5, 4[r10]
 597                             	.LBB4:
 149:../kernel/tkernel/task_manage.c **** 
 150:../kernel/tkernel/task_manage.c **** 	BEGIN_CRITICAL_SECTION;
 598                             		.loc 7 150 2
 599 0358 05 00 00 00             		bsr	_disint
 600 035c E7 A1 02                		mov.L	r1, 8[r10]
 151:../kernel/tkernel/task_manage.c **** 	state = (TSTAT)tcb->state;
 601                             		.loc 7 151 20
 602 035f ED A5 01                		mov.L	4[r10], r5
 603 0362 CD 55 27                		mov.B	39[r5], r5
 604                             		.loc 7 151 8
 605 0365 5B 55                   		movu.B	r5, r5
 606 0367 E7 A5 03                		mov.L	r5, 12[r10]
 152:../kernel/tkernel/task_manage.c **** 	if ( state != TS_DORMANT ) {
 607                             		.loc 7 152 5
 608 036a ED A5 03                		mov.L	12[r10], r5
 609 036d 61 85                   		cmp	#8, r5
 610 036f 20 12                   		beq	.L37
 153:../kernel/tkernel/task_manage.c **** 		ercd = ( state == TS_NONEXIST )? E_NOEXS: E_OBJ;
 611                             		.loc 7 153 43
 612 0371 ED A5 03                		mov.L	12[r10], r5
 613 0374 61 05                   		cmp	#0, r5
 614 0376 1D                      		bne	.L38
 615                             		.loc 7 153 43 is_stmt 0 discriminator 1
 616 0377 FB 56 D6                		mov.L	#-42, r5
 617 037a 0C                      		bra	.L39
 618                             	.L38:
 619                             		.loc 7 153 43 discriminator 2
 620 037b FB 56 D7                		mov.L	#-41, r5
 621                             	.L39:
 622                             		.loc 7 153 8 is_stmt 1 discriminator 4
 623 037e E3 A5                   		mov.L	r5, [r10]
 624 0380 0F                      		bra	.L40
 625                             	.L37:
 154:../kernel/tkernel/task_manage.c **** 	} else {
 155:../kernel/tkernel/task_manage.c **** 		knl_del_tsk(tcb);
 626                             		.loc 7 155 3
 627 0381 ED A1 01                		mov.L	4[r10], r1
 628 0384 39 11 FF                		bsr	_knl_del_tsk
 629                             	.L40:
 156:../kernel/tkernel/task_manage.c **** 	}
 157:../kernel/tkernel/task_manage.c **** 	END_CRITICAL_SECTION;
 630                             		.loc 7 157 2
 631 0387 ED A5 02                		mov.L	8[r10], r5
 632 038a 61 F5                   		cmp	#15, r5
 633 038c 20 2E                   		beq	.L41
 634                             		.loc 7 157 2 is_stmt 0 discriminator 1
 635 038e FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 636 0394 EC 54                   		mov.L	[r5], r4
 637 0396 FB 52 00 00 00 00       		mov.L	#_knl_schedtsk, r5
 638 039c EC 55                   		mov.L	[r5], r5
 639 039e 47 54                   		cmp	r5, r4
 640 03a0 20 1A                   		beq	.L41
 641                             		.loc 7 157 2 discriminator 3
 642 03a2 39 06 FD                		bsr	_knl_isTaskIndependent
 643 03a5 EF 15                   		mov.L	r1, r5
 644 03a7 61 05                   		cmp	#0, r5
 645 03a9 21 11                   		bne	.L41
 646                             		.loc 7 157 2 discriminator 5
 647 03ab FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 648 03b1 EC 55                   		mov.L	[r5], r5
 649 03b3 61 05                   		cmp	#0, r5
 650 03b5 1D                      		bne	.L41
 651                             		.loc 7 157 2 discriminator 7
 652 03b6 05 00 00 00             		bsr	_knl_dispatch
 653                             		.balign 8,3,1
 654                             	.L41:
 655                             		.loc 7 157 2 discriminator 9
 656 03ba ED A1 02                		mov.L	8[r10], r1
 657 03bd 05 00 00 00             		bsr	_setint
 658                             	.LBE4:
 158:../kernel/tkernel/task_manage.c **** 
 159:../kernel/tkernel/task_manage.c **** 	return ercd;
 659                             		.loc 7 159 9 is_stmt 1 discriminator 9
 660 03c1 EC A5                   		mov.L	[r10], r5
 661                             		.balign 8,3,1
 662                             	.L33:
 160:../kernel/tkernel/task_manage.c **** }
 663                             		.loc 7 160 1
 664 03c3 EF 51                   		mov.L	r5, r1
 665 03c5 3F AA 06                		rtsd	#24, r10-r10
 666                             	.LFE39:
 668                             		.global	_tk_sta_tsk
 670                             	_tk_sta_tsk:
 671                             	.LFB40:
 161:../kernel/tkernel/task_manage.c **** #endif /* USE_FUNC_TK_DEL_TSK */
 162:../kernel/tkernel/task_manage.c **** 
 163:../kernel/tkernel/task_manage.c **** /* ------------------------------------------------------------------------ */
 164:../kernel/tkernel/task_manage.c **** 
 165:../kernel/tkernel/task_manage.c **** /*
 166:../kernel/tkernel/task_manage.c ****  * Start task
 167:../kernel/tkernel/task_manage.c ****  */
 168:../kernel/tkernel/task_manage.c **** SYSCALL ER tk_sta_tsk( ID tskid, INT stacd )
 169:../kernel/tkernel/task_manage.c **** {
 672                             		.loc 7 169 1
 673 03c8 7E AA                   		push.l	r10
 674                             	.LCFI24:
 675 03ca 71 0A E8                		add	#-24, r0, r10
 676                             	.LCFI25:
 677 03cd EF A0                   		mov.L	r10, r0
 678 03cf E7 A1 04                		mov.L	r1, 16[r10]
 679 03d2 E7 A2 05                		mov.L	r2, 20[r10]
 170:../kernel/tkernel/task_manage.c **** 	TCB	*tcb;
 171:../kernel/tkernel/task_manage.c **** 	TSTAT	state;
 172:../kernel/tkernel/task_manage.c **** 	ER	ercd = E_OK;
 680                             		.loc 7 172 5
 681 03d5 F8 A6 00                		mov.L	#0, [r10]
 173:../kernel/tkernel/task_manage.c **** 
 174:../kernel/tkernel/task_manage.c **** 	CHECK_TSKID(tskid);
 682                             		.loc 7 174 2
 683 03d8 39 D0 FC                		bsr	_knl_isTaskIndependent
 684 03db EF 15                   		mov.L	r1, r5
 685 03dd 61 05                   		cmp	#0, r5
 686 03df 21 1A                   		bne	.L43
 687                             		.loc 7 174 2 is_stmt 0 discriminator 1
 688 03e1 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 689 03e7 EC 55                   		mov.L	[r5], r5
 690 03e9 61 05                   		cmp	#0, r5
 691 03eb 20 0E                   		beq	.L43
 692                             		.loc 7 174 2 discriminator 3
 693 03ed ED A5 04                		mov.L	16[r10], r5
 694 03f0 61 05                   		cmp	#0, r5
 695 03f2 1F                      		bne	.L43
 696                             		.loc 7 174 2 discriminator 5
 697 03f3 FB 56 D7                		mov.L	#-41, r5
 698 03f6 38 CB 00                		bra	.L44
 699                             	.L43:
 700                             		.loc 7 174 2 discriminator 6
 701 03f9 ED A5 04                		mov.L	16[r10], r5
 702 03fc 61 05                   		cmp	#0, r5
 703 03fe 2B 0A                   		ble	.L45
 704                             		.loc 7 174 2 discriminator 8
 705 0400 ED A5 04                		mov.L	16[r10], r5
 706 0403 75 55 20                		cmp	#32, r5
 707 0406 2B 08                   		ble	.L46
 708                             	.L45:
 709                             		.loc 7 174 2 discriminator 9
 710 0408 FB 56 EE                		mov.L	#-18, r5
 711 040b 38 B6 00                		bra	.L44
 712                             	.L46:
 175:../kernel/tkernel/task_manage.c **** 	CHECK_NONSELF(tskid);
 713                             		.loc 7 175 2 is_stmt 1
 714 040e 39 9A FC                		bsr	_knl_isTaskIndependent
 715 0411 EF 15                   		mov.L	r1, r5
 716 0413 61 05                   		cmp	#0, r5
 717 0415 21 24                   		bne	.L47
 718                             		.loc 7 175 2 is_stmt 0 discriminator 1
 719 0417 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 720 041d EC 55                   		mov.L	[r5], r5
 721 041f 61 05                   		cmp	#0, r5
 722 0421 20 18                   		beq	.L47
 723                             		.loc 7 175 2 discriminator 2
 724 0423 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 725 0429 EC 55                   		mov.L	[r5], r5
 726 042b A8 D5                   		mov.L	8[r5], r5
 727 042d ED A4 04                		mov.L	16[r10], r4
 728 0430 47 54                   		cmp	r5, r4
 729 0432 1F                      		bne	.L47
 730                             		.loc 7 175 2 discriminator 3
 731 0433 FB 56 D7                		mov.L	#-41, r5
 732 0436 38 8B 00                		bra	.L44
 733                             	.L47:
 176:../kernel/tkernel/task_manage.c **** 
 177:../kernel/tkernel/task_manage.c **** 	tcb = get_tcb(tskid);
 734                             		.loc 7 177 8 is_stmt 1
 735 0439 ED A5 04                		mov.L	16[r10], r5
 736 043c 60 15                   		sub	#1, r5
 737                             		.loc 7 177 6
 738 043e 75 15 68                		mul	#0x68, r5
 739 0441 70 55 00 00 00 00       		add	#_knl_tcb_table, r5
 740 0447 E7 A5 01                		mov.L	r5, 4[r10]
 741                             	.LBB5:
 178:../kernel/tkernel/task_manage.c **** 
 179:../kernel/tkernel/task_manage.c **** 	BEGIN_CRITICAL_SECTION;
 742                             		.loc 7 179 2
 743 044a 05 00 00 00             		bsr	_disint
 744 044e E7 A1 02                		mov.L	r1, 8[r10]
 180:../kernel/tkernel/task_manage.c **** 	state = (TSTAT)tcb->state;
 745                             		.loc 7 180 20
 746 0451 ED A5 01                		mov.L	4[r10], r5
 747 0454 CD 55 27                		mov.B	39[r5], r5
 748                             		.loc 7 180 8
 749 0457 5B 55                   		movu.B	r5, r5
 750 0459 E7 A5 03                		mov.L	r5, 12[r10]
 181:../kernel/tkernel/task_manage.c **** 	if ( state != TS_DORMANT ) {
 751                             		.loc 7 181 5
 752 045c ED A5 03                		mov.L	12[r10], r5
 753 045f 61 85                   		cmp	#8, r5
 754 0461 20 13                   		beq	.L48
 182:../kernel/tkernel/task_manage.c **** 		ercd = ( state == TS_NONEXIST )? E_NOEXS: E_OBJ;
 755                             		.loc 7 182 43
 756 0463 ED A5 03                		mov.L	12[r10], r5
 757 0466 61 05                   		cmp	#0, r5
 758 0468 1D                      		bne	.L49
 759                             		.loc 7 182 43 is_stmt 0 discriminator 1
 760 0469 FB 56 D6                		mov.L	#-42, r5
 761 046c 0C                      		bra	.L50
 762                             	.L49:
 763                             		.loc 7 182 43 discriminator 2
 764 046d FB 56 D7                		mov.L	#-41, r5
 765                             	.L50:
 766                             		.loc 7 182 8 is_stmt 1 discriminator 4
 767 0470 E3 A5                   		mov.L	r5, [r10]
 768 0472 2E 12                   		bra	.L51
 769                             	.L48:
 183:../kernel/tkernel/task_manage.c **** 	} else {
 184:../kernel/tkernel/task_manage.c **** 		knl_setup_stacd(tcb, stacd);
 770                             		.loc 7 184 3
 771 0474 ED A2 05                		mov.L	20[r10], r2
 772 0477 ED A1 01                		mov.L	4[r10], r1
 773 047a 39 7D FC                		bsr	_knl_setup_stacd
 185:../kernel/tkernel/task_manage.c **** 		knl_make_ready(tcb);
 774                             		.loc 7 185 3
 775 047d ED A1 01                		mov.L	4[r10], r1
 776 0480 05 00 00 00             		bsr	_knl_make_ready
 777                             	.L51:
 186:../kernel/tkernel/task_manage.c **** 	}
 187:../kernel/tkernel/task_manage.c **** 	END_CRITICAL_SECTION;
 778                             		.loc 7 187 2
 779 0484 ED A5 02                		mov.L	8[r10], r5
 780 0487 61 F5                   		cmp	#15, r5
 781 0489 20 2F                   		beq	.L52
 782                             		.loc 7 187 2 is_stmt 0 discriminator 1
 783 048b FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 784 0491 EC 54                   		mov.L	[r5], r4
 785 0493 FB 52 00 00 00 00       		mov.L	#_knl_schedtsk, r5
 786 0499 EC 55                   		mov.L	[r5], r5
 787 049b 47 54                   		cmp	r5, r4
 788 049d 20 1B                   		beq	.L52
 789                             		.loc 7 187 2 discriminator 3
 790 049f 39 09 FC                		bsr	_knl_isTaskIndependent
 791 04a2 EF 15                   		mov.L	r1, r5
 792 04a4 61 05                   		cmp	#0, r5
 793 04a6 21 12                   		bne	.L52
 794                             		.loc 7 187 2 discriminator 5
 795 04a8 FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 796 04ae EC 55                   		mov.L	[r5], r5
 797 04b0 61 05                   		cmp	#0, r5
 798 04b2 1E                      		bne	.L52
 799                             		.loc 7 187 2 discriminator 7
 800 04b3 05 00 00 00             		bsr	_knl_dispatch
 801 04b7 03                      		.balign 8,3,1
 802                             	.L52:
 803                             		.loc 7 187 2 discriminator 9
 804 04b8 ED A1 02                		mov.L	8[r10], r1
 805 04bb 05 00 00 00             		bsr	_setint
 806                             	.LBE5:
 188:../kernel/tkernel/task_manage.c **** 
 189:../kernel/tkernel/task_manage.c **** 	return ercd;
 807                             		.loc 7 189 9 is_stmt 1 discriminator 9
 808 04bf EC A5                   		mov.L	[r10], r5
 809                             		.balign 8,3,1
 810                             	.L44:
 190:../kernel/tkernel/task_manage.c **** }
 811                             		.loc 7 190 1
 812 04c1 EF 51                   		mov.L	r5, r1
 813 04c3 3F AA 07                		rtsd	#28, r10-r10
 814                             	.LFE40:
 817                             	_knl_ter_tsk:
 818                             	.LFB41:
 191:../kernel/tkernel/task_manage.c **** 
 192:../kernel/tkernel/task_manage.c **** /*
 193:../kernel/tkernel/task_manage.c ****  * Task finalization
 194:../kernel/tkernel/task_manage.c ****  *	Call from critical section
 195:../kernel/tkernel/task_manage.c ****  */
 196:../kernel/tkernel/task_manage.c **** LOCAL void knl_ter_tsk( TCB *tcb )
 197:../kernel/tkernel/task_manage.c **** {
 819                             		.loc 7 197 1
 820 04c6 7E AA                   		push.l	r10
 821                             	.LCFI26:
 822 04c8 71 0A F8                		add	#-8, r0, r10
 823                             	.LCFI27:
 824 04cb EF A0                   		mov.L	r10, r0
 825 04cd E7 A1 01                		mov.L	r1, 4[r10]
 198:../kernel/tkernel/task_manage.c **** 	TSTAT	state;
 199:../kernel/tkernel/task_manage.c **** 
 200:../kernel/tkernel/task_manage.c **** 	state = (TSTAT)tcb->state;
 826                             		.loc 7 200 20
 827 04d0 ED A5 01                		mov.L	4[r10], r5
 828 04d3 CD 55 27                		mov.B	39[r5], r5
 829                             		.loc 7 200 8
 830 04d6 5B 55                   		movu.B	r5, r5
 831 04d8 E3 A5                   		mov.L	r5, [r10]
 201:../kernel/tkernel/task_manage.c **** 	if ( state == TS_READY ) {
 832                             		.loc 7 201 5
 833 04da EC A5                   		mov.L	[r10], r5
 834 04dc 61 15                   		cmp	#1, r5
 835 04de 1A                      		bne	.L54
 202:../kernel/tkernel/task_manage.c **** 		knl_make_non_ready(tcb);
 836                             		.loc 7 202 3
 837 04df ED A1 01                		mov.L	4[r10], r1
 838 04e2 05 00 00 00             		bsr	_knl_make_non_ready
 839 04e6 2E 27                   		bra	.L55
 840                             	.L54:
 203:../kernel/tkernel/task_manage.c **** 
 204:../kernel/tkernel/task_manage.c **** 	} else if ( (state & TS_WAIT) != 0 ) {
 841                             		.loc 7 204 21
 842 04e8 EC A5                   		mov.L	[r10], r5
 843 04ea 64 25                   		and	#2, r5
 844                             		.loc 7 204 12
 845 04ec 61 05                   		cmp	#0, r5
 846 04ee 20 1F                   		beq	.L55
 205:../kernel/tkernel/task_manage.c **** 		knl_wait_cancel(tcb);
 847                             		.loc 7 205 3
 848 04f0 ED A1 01                		mov.L	4[r10], r1
 849 04f3 39 E6 FB                		bsr	_knl_wait_cancel
 206:../kernel/tkernel/task_manage.c **** 		if ( tcb->wspec->rel_wai_hook != NULL ) {
 850                             		.loc 7 206 11
 851 04f6 ED A5 01                		mov.L	4[r10], r5
 852 04f9 AA DD                   		mov.L	44[r5], r5
 853                             		.loc 7 206 18
 854 04fb A8 D5                   		mov.L	8[r5], r5
 855                             		.loc 7 206 6
 856 04fd 61 05                   		cmp	#0, r5
 857 04ff 20 0E                   		beq	.L55
 207:../kernel/tkernel/task_manage.c **** 			(*tcb->wspec->rel_wai_hook)(tcb);
 858                             		.loc 7 207 9
 859 0501 ED A5 01                		mov.L	4[r10], r5
 860 0504 AA DD                   		mov.L	44[r5], r5
 861                             		.loc 7 207 5
 862 0506 A8 D5                   		mov.L	8[r5], r5
 863 0508 ED A1 01                		mov.L	4[r10], r1
 864 050b 7F 15                   		jsr	r5
 865                             	.LVL0:
 866                             		.balign 8,3,1
 867                             	.L55:
 208:../kernel/tkernel/task_manage.c **** 		}
 209:../kernel/tkernel/task_manage.c **** 	}
 210:../kernel/tkernel/task_manage.c **** 
 211:../kernel/tkernel/task_manage.c **** #if USE_MUTEX == 1
 212:../kernel/tkernel/task_manage.c **** 	/* signal mutex */
 213:../kernel/tkernel/task_manage.c **** 	knl_signal_all_mutex(tcb);
 868                             		.loc 7 213 2
 869 050d ED A1 01                		mov.L	4[r10], r1
 870 0510 05 00 00 00             		bsr	_knl_signal_all_mutex
 214:../kernel/tkernel/task_manage.c **** #endif
 215:../kernel/tkernel/task_manage.c **** 
 216:../kernel/tkernel/task_manage.c **** 	knl_cleanup_context(tcb);
 871                             		.loc 7 216 2
 872 0514 ED A1 01                		mov.L	4[r10], r1
 873 0517 39 0A FC                		bsr	_knl_cleanup_context
 217:../kernel/tkernel/task_manage.c **** }
 874                             		.loc 7 217 1
 875 051a 03                      		nop
 876 051b 3F AA 03                		rtsd	#12, r10-r10
 877                             	.LFE41:
 879                             		.section C,"a",@progbits
 880                             		.p2align 2
 881                             	.LC0:
 882 0000 74 6B 5F 65 78 74 5F 74 		.string	"tk_ext_tsk was called in the task independent\n"
 882      73 6B 20 77 61 73 20 63 
 882      61 6C 6C 65 64 20 69 6E 
 882      20 74 68 65 20 74 61 73 
 882      6B 20 69 6E 64 65 70 65 
 883                             	.LC1:
 884 002f 74 6B 5F 65 78 74 5F 74 		.string	"tk_ext_tsk was called in the dispatch disabled\n"
 884      73 6B 20 77 61 73 20 63 
 884      61 6C 6C 65 64 20 69 6E 
 884      20 74 68 65 20 64 69 73 
 884      70 61 74 63 68 20 64 69 
 885                             		.section P,"ax"
 886                             		.global	_tk_ext_tsk
 888                             	_tk_ext_tsk:
 889                             	.LFB42:
 218:../kernel/tkernel/task_manage.c **** 
 219:../kernel/tkernel/task_manage.c **** #ifdef USE_FUNC_TK_EXT_TSK
 220:../kernel/tkernel/task_manage.c **** /*
 221:../kernel/tkernel/task_manage.c ****  * End its own task
 222:../kernel/tkernel/task_manage.c ****  */
 223:../kernel/tkernel/task_manage.c **** SYSCALL void tk_ext_tsk( void )
 224:../kernel/tkernel/task_manage.c **** {
 890                             		.loc 7 224 1
 891 051e 7E AA                   		push.l	r10
 892                             	.LCFI28:
 893 0520 71 0A F8                		add	#-8, r0, r10
 894                             	.LCFI29:
 895 0523 EF A0                   		mov.L	r10, r0
 225:../kernel/tkernel/task_manage.c **** #ifdef DORMANT_STACK_SIZE
 226:../kernel/tkernel/task_manage.c **** 	/* To avoid destroying stack used in 'knl_make_dormant', 
 227:../kernel/tkernel/task_manage.c **** 	   allocate the dummy area on the stack. */
 228:../kernel/tkernel/task_manage.c **** 	volatile VB _dummy[DORMANT_STACK_SIZE];
 229:../kernel/tkernel/task_manage.c **** #endif
 230:../kernel/tkernel/task_manage.c **** 
 231:../kernel/tkernel/task_manage.c **** 	/* Check context error */
 232:../kernel/tkernel/task_manage.c **** #if CHK_CTX2
 233:../kernel/tkernel/task_manage.c **** 	if ( in_indp() ) {
 896                             		.loc 7 233 7
 897 0525 39 83 FB                		bsr	_knl_isTaskIndependent
 898 0528 EF 15                   		mov.L	r1, r5
 899                             		.loc 7 233 5
 900 052a 61 05                   		cmp	#0, r5
 901 052c 21 0E                   		bne	.L57
 902                             		.loc 7 233 7 discriminator 1
 903 052e FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 904 0534 EC 55                   		mov.L	[r5], r5
 905 0536 61 05                   		cmp	#0, r5
 906 0538 21 0E                   		bne	.L58
 907                             	.L57:
 234:../kernel/tkernel/task_manage.c **** 		SYSTEM_MESSAGE("tk_ext_tsk was called in the task independent\n");
 908                             		.loc 7 234 3
 909 053a FB 12 00 00 00 00       		mov.L	#.LC0, r1
 910 0540 05 00 00 00             		bsr	_tm_putstring
 235:../kernel/tkernel/task_manage.c **** 		return;
 911                             		.loc 7 235 3
 912 0544 2E 5F                   		bra	.L56
 913                             	.L58:
 236:../kernel/tkernel/task_manage.c **** 	}
 237:../kernel/tkernel/task_manage.c **** #endif
 238:../kernel/tkernel/task_manage.c **** #if CHK_CTX1
 239:../kernel/tkernel/task_manage.c **** 	if ( in_ddsp() ) {
 914                             		.loc 7 239 7
 915 0546 FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 916 054c EC 55                   		mov.L	[r5], r5
 917                             		.loc 7 239 5
 918 054e 61 05                   		cmp	#0, r5
 919 0550 21 22                   		bne	.L60
 920                             		.loc 7 239 7 discriminator 1
 921 0552 39 56 FB                		bsr	_knl_isTaskIndependent
 922 0555 EF 15                   		mov.L	r1, r5
 923 0557 61 05                   		cmp	#0, r5
 924 0559 21 19                   		bne	.L60
 925                             		.loc 7 239 7 is_stmt 0 discriminator 2
 926 055b FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 927 0561 EC 55                   		mov.L	[r5], r5
 928 0563 61 05                   		cmp	#0, r5
 929 0565 20 0D                   		beq	.L60
 930                             		.loc 7 239 7 discriminator 3
 931 0567 05 00 00 00             		bsr	_GetCpuIntLevel
 932 056b EF 15                   		mov.L	r1, r5
 933 056d 75 55 10                		cmp	#16, r5
 934 0570 21 0C                   		bne	.L61
 935                             		.balign 8,3,5
 936                             	.L60:
 240:../kernel/tkernel/task_manage.c **** 		SYSTEM_MESSAGE("tk_ext_tsk was called in the dispatch disabled\n");
 937                             		.loc 7 240 3 is_stmt 1
 938 0572 FB 12 2F 00 00 00       		mov.L	#.LC1, r1
 939 0578 05 00 00 00             		bsr	_tm_putstring
 940                             	.L61:
 241:../kernel/tkernel/task_manage.c **** 	}
 242:../kernel/tkernel/task_manage.c **** #endif
 243:../kernel/tkernel/task_manage.c **** 
 244:../kernel/tkernel/task_manage.c **** 	DISABLE_INTERRUPT;
 941                             		.loc 7 244 2
 942 057c 05 00 00 00             		bsr	_disint
 245:../kernel/tkernel/task_manage.c **** 	knl_ter_tsk(knl_ctxtsk);
 943                             		.loc 7 245 2
 944 0580 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 945 0586 EC 55                   		mov.L	[r5], r5
 946 0588 EF 51                   		mov.L	r5, r1
 947 058a 39 3C FF                		bsr	_knl_ter_tsk
 246:../kernel/tkernel/task_manage.c **** 	knl_make_dormant(knl_ctxtsk);
 948                             		.loc 7 246 2
 949 058d FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 950 0593 EC 55                   		mov.L	[r5], r5
 951 0595 EF 51                   		mov.L	r5, r1
 952 0597 05 00 00 00             		bsr	_knl_make_dormant
 247:../kernel/tkernel/task_manage.c **** 
 248:../kernel/tkernel/task_manage.c **** 	knl_force_dispatch();
 953                             		.loc 7 248 2
 954 059b 05 00 00 00             		bsr	_knl_force_dispatch
 249:../kernel/tkernel/task_manage.c **** 	/* No return */
 250:../kernel/tkernel/task_manage.c **** 
 251:../kernel/tkernel/task_manage.c **** #ifdef DORMANT_STACK_SIZE
 252:../kernel/tkernel/task_manage.c **** 	/* Avoid WARNING (This code does not execute) */
 253:../kernel/tkernel/task_manage.c **** 	_dummy[0] = _dummy[0];
 955                             		.loc 7 253 20
 956 059f CC A5                   		mov.B	[r10], r5
 957                             		.loc 7 253 12
 958 05a1 C3 A5                   		mov.B	r5, [r10]
 959                             	.L56:
 254:../kernel/tkernel/task_manage.c **** #endif
 255:../kernel/tkernel/task_manage.c **** }
 960                             		.loc 7 255 1
 961 05a3 3F AA 03                		rtsd	#12, r10-r10
 962                             	.LFE42:
 964                             		.section C,"a",@progbits
 965 005f 00                      		.p2align 2
 966                             	.LC2:
 967 0060 74 6B 5F 65 78 64 5F 74 		.string	"tk_exd_tsk was called in the task independent\n"
 967      73 6B 20 77 61 73 20 63 
 967      61 6C 6C 65 64 20 69 6E 
 967      20 74 68 65 20 74 61 73 
 967      6B 20 69 6E 64 65 70 65 
 968                             	.LC3:
 969 008f 74 6B 5F 65 78 64 5F 74 		.string	"tk_exd_tsk was called in the dispatch disabled\n"
 969      73 6B 20 77 61 73 20 63 
 969      61 6C 6C 65 64 20 69 6E 
 969      20 74 68 65 20 64 69 73 
 969      70 61 74 63 68 20 64 69 
 970 00bf 00                      		.section P,"ax"
 971                             		.global	_tk_exd_tsk
 973                             	_tk_exd_tsk:
 974                             	.LFB43:
 256:../kernel/tkernel/task_manage.c **** #endif /* USE_FUNC_TK_EXT_TSK */
 257:../kernel/tkernel/task_manage.c **** 
 258:../kernel/tkernel/task_manage.c **** #ifdef USE_FUNC_TK_EXD_TSK
 259:../kernel/tkernel/task_manage.c **** /*
 260:../kernel/tkernel/task_manage.c ****  * End and delete its own task
 261:../kernel/tkernel/task_manage.c ****  */
 262:../kernel/tkernel/task_manage.c **** SYSCALL void tk_exd_tsk( void )
 263:../kernel/tkernel/task_manage.c **** {
 975                             		.loc 7 263 1
 976 05a6 7E AA                   		push.l	r10
 977                             	.LCFI30:
 978 05a8 EF 0A                   		mov.L	r0, r10
 979                             	.LCFI31:
 264:../kernel/tkernel/task_manage.c **** 	/* Check context error */
 265:../kernel/tkernel/task_manage.c **** #if CHK_CTX2
 266:../kernel/tkernel/task_manage.c **** 	if ( in_indp() ) {
 980                             		.loc 7 266 7
 981 05aa 39 FE FA                		bsr	_knl_isTaskIndependent
 982 05ad EF 15                   		mov.L	r1, r5
 983                             		.loc 7 266 5
 984 05af 61 05                   		cmp	#0, r5
 985 05b1 21 0E                   		bne	.L63
 986                             		.loc 7 266 7 discriminator 1
 987 05b3 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 988 05b9 EC 55                   		mov.L	[r5], r5
 989 05bb 61 05                   		cmp	#0, r5
 990 05bd 21 0E                   		bne	.L64
 991                             	.L63:
 267:../kernel/tkernel/task_manage.c **** 		SYSTEM_MESSAGE("tk_exd_tsk was called in the task independent\n");
 992                             		.loc 7 267 3
 993 05bf FB 12 60 00 00 00       		mov.L	#.LC2, r1
 994 05c5 05 00 00 00             		bsr	_tm_putstring
 268:../kernel/tkernel/task_manage.c **** 		return;
 995                             		.loc 7 268 3
 996 05c9 2E 5B                   		bra	.L62
 997                             	.L64:
 269:../kernel/tkernel/task_manage.c **** 	}
 270:../kernel/tkernel/task_manage.c **** #endif
 271:../kernel/tkernel/task_manage.c **** #if CHK_CTX1
 272:../kernel/tkernel/task_manage.c **** 	if ( in_ddsp() ) {
 998                             		.loc 7 272 7
 999 05cb FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 1000 05d1 EC 55                   		mov.L	[r5], r5
 1001                             		.loc 7 272 5
 1002 05d3 61 05                   		cmp	#0, r5
 1003 05d5 21 23                   		bne	.L66
 1004                             		.loc 7 272 7 discriminator 1
 1005 05d7 39 D1 FA                		bsr	_knl_isTaskIndependent
 1006 05da EF 15                   		mov.L	r1, r5
 1007 05dc 61 05                   		cmp	#0, r5
 1008 05de 21 1A                   		bne	.L66
 1009                             		.loc 7 272 7 is_stmt 0 discriminator 2
 1010 05e0 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1011 05e6 EC 55                   		mov.L	[r5], r5
 1012 05e8 61 05                   		cmp	#0, r5
 1013 05ea 20 0E                   		beq	.L66
 1014                             		.loc 7 272 7 discriminator 3
 1015 05ec 05 00 00 00             		bsr	_GetCpuIntLevel
 1016 05f0 EF 15                   		mov.L	r1, r5
 1017 05f2 75 55 10                		cmp	#16, r5
 1018 05f5 21 0D                   		bne	.L67
 1019 05f7 03                      		.balign 8,3,5
 1020                             	.L66:
 273:../kernel/tkernel/task_manage.c **** 		SYSTEM_MESSAGE("tk_exd_tsk was called in the dispatch disabled\n");
 1021                             		.loc 7 273 3 is_stmt 1
 1022 05f8 FB 12 8F 00 00 00       		mov.L	#.LC3, r1
 1023 05fe 05 00 00 00             		bsr	_tm_putstring
 1024                             	.L67:
 274:../kernel/tkernel/task_manage.c **** 	}
 275:../kernel/tkernel/task_manage.c **** #endif
 276:../kernel/tkernel/task_manage.c **** 
 277:../kernel/tkernel/task_manage.c **** 	DISABLE_INTERRUPT;
 1025                             		.loc 7 277 2
 1026 0602 05 00 00 00             		bsr	_disint
 278:../kernel/tkernel/task_manage.c **** 	knl_ter_tsk(knl_ctxtsk);
 1027                             		.loc 7 278 2
 1028 0606 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1029 060c EC 55                   		mov.L	[r5], r5
 1030 060e EF 51                   		mov.L	r5, r1
 1031 0610 39 B6 FE                		bsr	_knl_ter_tsk
 279:../kernel/tkernel/task_manage.c **** 	knl_del_tsk(knl_ctxtsk);
 1032                             		.loc 7 279 2
 1033 0613 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1034 0619 EC 55                   		mov.L	[r5], r5
 1035 061b EF 51                   		mov.L	r5, r1
 1036 061d 39 78 FC                		bsr	_knl_del_tsk
 280:../kernel/tkernel/task_manage.c **** 
 281:../kernel/tkernel/task_manage.c **** 	knl_force_dispatch();
 1037                             		.loc 7 281 2
 1038 0620 05 00 00 00             		bsr	_knl_force_dispatch
 1039                             	.L62:
 282:../kernel/tkernel/task_manage.c **** 	/* No return */
 283:../kernel/tkernel/task_manage.c **** }
 1040                             		.loc 7 283 1
 1041 0624 3F AA 01                		rtsd	#4, r10-r10
 1042                             	.LFE43:
 1044                             		.global	_tk_ter_tsk
 1046                             	_tk_ter_tsk:
 1047                             	.LFB44:
 284:../kernel/tkernel/task_manage.c **** #endif /* USE_FUNC_TK_EXD_TSK */
 285:../kernel/tkernel/task_manage.c **** 
 286:../kernel/tkernel/task_manage.c **** #ifdef USE_FUNC_TK_TER_TSK
 287:../kernel/tkernel/task_manage.c **** /*
 288:../kernel/tkernel/task_manage.c ****  * Termination of other task
 289:../kernel/tkernel/task_manage.c ****  */
 290:../kernel/tkernel/task_manage.c **** SYSCALL ER tk_ter_tsk( ID tskid )
 291:../kernel/tkernel/task_manage.c **** {
 1048                             		.loc 7 291 1
 1049 0627 7E AA                   		push.l	r10
 1050                             	.LCFI32:
 1051 0629 71 0A EC                		add	#-20, r0, r10
 1052                             	.LCFI33:
 1053 062c EF A0                   		mov.L	r10, r0
 1054 062e E7 A1 04                		mov.L	r1, 16[r10]
 292:../kernel/tkernel/task_manage.c **** 	TCB	*tcb;
 293:../kernel/tkernel/task_manage.c **** 	TSTAT	state;
 294:../kernel/tkernel/task_manage.c **** 	ER	ercd = E_OK;
 1055                             		.loc 7 294 5
 1056 0631 F8 A6 00                		mov.L	#0, [r10]
 295:../kernel/tkernel/task_manage.c **** 
 296:../kernel/tkernel/task_manage.c **** 	CHECK_TSKID(tskid);
 1057                             		.loc 7 296 2
 1058 0634 39 74 FA                		bsr	_knl_isTaskIndependent
 1059 0637 EF 15                   		mov.L	r1, r5
 1060 0639 61 05                   		cmp	#0, r5
 1061 063b 21 1A                   		bne	.L69
 1062                             		.loc 7 296 2 is_stmt 0 discriminator 1
 1063 063d FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1064 0643 EC 55                   		mov.L	[r5], r5
 1065 0645 61 05                   		cmp	#0, r5
 1066 0647 20 0E                   		beq	.L69
 1067                             		.loc 7 296 2 discriminator 3
 1068 0649 ED A5 04                		mov.L	16[r10], r5
 1069 064c 61 05                   		cmp	#0, r5
 1070 064e 1F                      		bne	.L69
 1071                             		.loc 7 296 2 discriminator 5
 1072 064f FB 56 D7                		mov.L	#-41, r5
 1073 0652 38 DF 00                		bra	.L70
 1074                             	.L69:
 1075                             		.loc 7 296 2 discriminator 6
 1076 0655 ED A5 04                		mov.L	16[r10], r5
 1077 0658 61 05                   		cmp	#0, r5
 1078 065a 2B 0A                   		ble	.L71
 1079                             		.loc 7 296 2 discriminator 8
 1080 065c ED A5 04                		mov.L	16[r10], r5
 1081 065f 75 55 20                		cmp	#32, r5
 1082 0662 2B 08                   		ble	.L72
 1083                             	.L71:
 1084                             		.loc 7 296 2 discriminator 9
 1085 0664 FB 56 EE                		mov.L	#-18, r5
 1086 0667 38 CA 00                		bra	.L70
 1087                             	.L72:
 297:../kernel/tkernel/task_manage.c **** 	CHECK_NONSELF(tskid);
 1088                             		.loc 7 297 2 is_stmt 1
 1089 066a 39 3E FA                		bsr	_knl_isTaskIndependent
 1090 066d EF 15                   		mov.L	r1, r5
 1091 066f 61 05                   		cmp	#0, r5
 1092 0671 21 24                   		bne	.L73
 1093                             		.loc 7 297 2 is_stmt 0 discriminator 1
 1094 0673 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1095 0679 EC 55                   		mov.L	[r5], r5
 1096 067b 61 05                   		cmp	#0, r5
 1097 067d 20 18                   		beq	.L73
 1098                             		.loc 7 297 2 discriminator 2
 1099 067f FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1100 0685 EC 55                   		mov.L	[r5], r5
 1101 0687 A8 D5                   		mov.L	8[r5], r5
 1102 0689 ED A4 04                		mov.L	16[r10], r4
 1103 068c 47 54                   		cmp	r5, r4
 1104 068e 1F                      		bne	.L73
 1105                             		.loc 7 297 2 discriminator 3
 1106 068f FB 56 D7                		mov.L	#-41, r5
 1107 0692 38 9F 00                		bra	.L70
 1108                             	.L73:
 298:../kernel/tkernel/task_manage.c **** 
 299:../kernel/tkernel/task_manage.c **** 	tcb = get_tcb(tskid);
 1109                             		.loc 7 299 8 is_stmt 1
 1110 0695 ED A5 04                		mov.L	16[r10], r5
 1111 0698 60 15                   		sub	#1, r5
 1112                             		.loc 7 299 6
 1113 069a 75 15 68                		mul	#0x68, r5
 1114 069d 70 55 00 00 00 00       		add	#_knl_tcb_table, r5
 1115 06a3 E7 A5 01                		mov.L	r5, 4[r10]
 1116                             	.LBB6:
 300:../kernel/tkernel/task_manage.c **** 
 301:../kernel/tkernel/task_manage.c **** 	BEGIN_CRITICAL_SECTION;
 1117                             		.loc 7 301 2
 1118 06a6 05 00 00 00             		bsr	_disint
 1119 06aa E7 A1 02                		mov.L	r1, 8[r10]
 302:../kernel/tkernel/task_manage.c **** 	state = (TSTAT)tcb->state;
 1120                             		.loc 7 302 20
 1121 06ad ED A5 01                		mov.L	4[r10], r5
 1122 06b0 CD 55 27                		mov.B	39[r5], r5
 1123                             		.loc 7 302 8
 1124 06b3 5B 55                   		movu.B	r5, r5
 1125 06b5 E7 A5 03                		mov.L	r5, 12[r10]
 303:../kernel/tkernel/task_manage.c **** 	if ( !knl_task_alive(state) ) {
 1126                             		.loc 7 303 8
 1127 06b8 ED A1 03                		mov.L	12[r10], r1
 1128 06bb 39 05 FA                		bsr	_knl_task_alive
 1129 06be EF 15                   		mov.L	r1, r5
 1130                             		.loc 7 303 5
 1131 06c0 61 05                   		cmp	#0, r5
 1132 06c2 21 13                   		bne	.L74
 304:../kernel/tkernel/task_manage.c **** 		ercd = ( state == TS_NONEXIST )? E_NOEXS: E_OBJ;
 1133                             		.loc 7 304 43
 1134 06c4 ED A5 03                		mov.L	12[r10], r5
 1135 06c7 61 05                   		cmp	#0, r5
 1136 06c9 1D                      		bne	.L75
 1137                             		.loc 7 304 43 is_stmt 0 discriminator 1
 1138 06ca FB 56 D6                		mov.L	#-42, r5
 1139 06cd 0C                      		bra	.L76
 1140                             	.L75:
 1141                             		.loc 7 304 43 discriminator 2
 1142 06ce FB 56 D7                		mov.L	#-41, r5
 1143                             	.L76:
 1144                             		.loc 7 304 8 is_stmt 1 discriminator 4
 1145 06d1 E3 A5                   		mov.L	r5, [r10]
 1146 06d3 2E 21                   		bra	.L77
 1147                             	.L74:
 305:../kernel/tkernel/task_manage.c **** 	} else if ( tcb->klocked ) {
 1148                             		.loc 7 305 14
 1149 06d5 ED A5 01                		mov.L	4[r10], r5
 1150 06d8 CD 55 28                		mov.B	40[r5], r5
 1151 06db 64 25                   		and	#2, r5
 1152                             		.loc 7 305 12
 1153 06dd 5B 55                   		movu.B	r5, r5
 1154 06df 61 05                   		cmp	#0, r5
 1155 06e1 16                      		beq	.L78
 306:../kernel/tkernel/task_manage.c **** 		/* Normally, it does not become this state.
 307:../kernel/tkernel/task_manage.c **** 		 * When the state is page-in wait in the virtual memory
 308:../kernel/tkernel/task_manage.c **** 		 * system and when trying to terminate any task,
 309:../kernel/tkernel/task_manage.c **** 		 * it becomes this state.
 310:../kernel/tkernel/task_manage.c **** 		 */
 311:../kernel/tkernel/task_manage.c **** 		ercd = E_OBJ;
 1156                             		.loc 7 311 8
 1157 06e2 F8 A6 D7                		mov.L	#-41, [r10]
 1158 06e5 2E 0F                   		bra	.L77
 1159                             	.L78:
 312:../kernel/tkernel/task_manage.c **** 	} else {
 313:../kernel/tkernel/task_manage.c **** 		knl_ter_tsk(tcb);
 1160                             		.loc 7 313 3
 1161 06e7 ED A1 01                		mov.L	4[r10], r1
 1162 06ea 39 DC FD                		bsr	_knl_ter_tsk
 314:../kernel/tkernel/task_manage.c **** 		knl_make_dormant(tcb);
 1163                             		.loc 7 314 3
 1164 06ed ED A1 01                		mov.L	4[r10], r1
 1165 06f0 05 00 00 00             		bsr	_knl_make_dormant
 1166                             	.L77:
 315:../kernel/tkernel/task_manage.c **** 	}
 316:../kernel/tkernel/task_manage.c **** 	END_CRITICAL_SECTION;
 1167                             		.loc 7 316 2
 1168 06f4 ED A5 02                		mov.L	8[r10], r5
 1169 06f7 61 F5                   		cmp	#15, r5
 1170 06f9 20 2F                   		beq	.L79
 1171                             		.loc 7 316 2 is_stmt 0 discriminator 1
 1172 06fb FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1173 0701 EC 54                   		mov.L	[r5], r4
 1174 0703 FB 52 00 00 00 00       		mov.L	#_knl_schedtsk, r5
 1175 0709 EC 55                   		mov.L	[r5], r5
 1176 070b 47 54                   		cmp	r5, r4
 1177 070d 20 1B                   		beq	.L79
 1178                             		.loc 7 316 2 discriminator 3
 1179 070f 39 99 F9                		bsr	_knl_isTaskIndependent
 1180 0712 EF 15                   		mov.L	r1, r5
 1181 0714 61 05                   		cmp	#0, r5
 1182 0716 21 12                   		bne	.L79
 1183                             		.loc 7 316 2 discriminator 5
 1184 0718 FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 1185 071e EC 55                   		mov.L	[r5], r5
 1186 0720 61 05                   		cmp	#0, r5
 1187 0722 1E                      		bne	.L79
 1188                             		.loc 7 316 2 discriminator 7
 1189 0723 05 00 00 00             		bsr	_knl_dispatch
 1190 0727 03                      		.balign 8,3,1
 1191                             	.L79:
 1192                             		.loc 7 316 2 discriminator 9
 1193 0728 ED A1 02                		mov.L	8[r10], r1
 1194 072b 05 00 00 00             		bsr	_setint
 1195                             	.LBE6:
 317:../kernel/tkernel/task_manage.c **** 
 318:../kernel/tkernel/task_manage.c **** 	return ercd;
 1196                             		.loc 7 318 9 is_stmt 1 discriminator 9
 1197 072f EC A5                   		mov.L	[r10], r5
 1198                             		.balign 8,3,1
 1199                             	.L70:
 319:../kernel/tkernel/task_manage.c **** }
 1200                             		.loc 7 319 1
 1201 0731 EF 51                   		mov.L	r5, r1
 1202 0733 3F AA 06                		rtsd	#24, r10-r10
 1203                             	.LFE44:
 1205                             		.global	_tk_chg_pri
 1207                             	_tk_chg_pri:
 1208                             	.LFB45:
 320:../kernel/tkernel/task_manage.c **** #endif /* USE_FUNC_TK_TER_TSK */
 321:../kernel/tkernel/task_manage.c **** 
 322:../kernel/tkernel/task_manage.c **** /* ------------------------------------------------------------------------ */
 323:../kernel/tkernel/task_manage.c **** 
 324:../kernel/tkernel/task_manage.c **** #ifdef USE_FUNC_TK_CHG_PRI
 325:../kernel/tkernel/task_manage.c **** /*
 326:../kernel/tkernel/task_manage.c ****  * Change task priority
 327:../kernel/tkernel/task_manage.c ****  */
 328:../kernel/tkernel/task_manage.c **** SYSCALL ER tk_chg_pri( ID tskid, PRI tskpri )
 329:../kernel/tkernel/task_manage.c **** {
 1209                             		.loc 7 329 1
 1210 0736 7E AA                   		push.l	r10
 1211                             	.LCFI34:
 1212 0738 71 0A E8                		add	#-24, r0, r10
 1213                             	.LCFI35:
 1214 073b EF A0                   		mov.L	r10, r0
 1215 073d E7 A1 04                		mov.L	r1, 16[r10]
 1216 0740 E7 A2 05                		mov.L	r2, 20[r10]
 330:../kernel/tkernel/task_manage.c **** 	TCB	*tcb;
 331:../kernel/tkernel/task_manage.c **** 	INT	priority;
 332:../kernel/tkernel/task_manage.c **** 	ER	ercd;
 333:../kernel/tkernel/task_manage.c **** 
 334:../kernel/tkernel/task_manage.c **** 	CHECK_TSKID_SELF(tskid);
 1217                             		.loc 7 334 2
 1218 0743 39 65 F9                		bsr	_knl_isTaskIndependent
 1219 0746 EF 15                   		mov.L	r1, r5
 1220 0748 61 05                   		cmp	#0, r5
 1221 074a 21 14                   		bne	.L81
 1222                             		.loc 7 334 2 is_stmt 0 discriminator 2
 1223 074c FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1224 0752 EC 55                   		mov.L	[r5], r5
 1225 0754 61 05                   		cmp	#0, r5
 1226 0756 10                      		beq	.L81
 1227                             		.loc 7 334 2 discriminator 4
 1228 0757 ED A5 04                		mov.L	16[r10], r5
 1229 075a 61 05                   		cmp	#0, r5
 1230 075c 20 17                   		beq	.L82
 1231                             	.L81:
 1232                             		.loc 7 334 2 discriminator 5
 1233 075e ED A5 04                		mov.L	16[r10], r5
 1234 0761 61 05                   		cmp	#0, r5
 1235 0763 2B 0A                   		ble	.L83
 1236                             		.loc 7 334 2 discriminator 7
 1237 0765 ED A5 04                		mov.L	16[r10], r5
 1238 0768 75 55 20                		cmp	#32, r5
 1239 076b 2B 08                   		ble	.L82
 1240                             	.L83:
 1241                             		.loc 7 334 2 discriminator 8
 1242 076d FB 56 EE                		mov.L	#-18, r5
 1243 0770 38 E0 00                		bra	.L84
 1244                             	.L82:
 335:../kernel/tkernel/task_manage.c **** 	CHECK_PRI_INI(tskpri);
 1245                             		.loc 7 335 2 is_stmt 1
 1246 0773 ED A5 05                		mov.L	20[r10], r5
 1247 0776 61 05                   		cmp	#0, r5
 1248 0778 20 17                   		beq	.L85
 1249                             		.loc 7 335 2 is_stmt 0 discriminator 1
 1250 077a ED A5 05                		mov.L	20[r10], r5
 1251 077d 61 05                   		cmp	#0, r5
 1252 077f 2B 0A                   		ble	.L86
 1253                             		.loc 7 335 2 discriminator 3
 1254 0781 ED A5 05                		mov.L	20[r10], r5
 1255 0784 75 55 20                		cmp	#32, r5
 1256 0787 2B 08                   		ble	.L85
 1257                             	.L86:
 1258                             		.loc 7 335 2 discriminator 4
 1259 0789 FB 56 EF                		mov.L	#-17, r5
 1260 078c 38 C4 00                		bra	.L84
 1261                             	.L85:
 336:../kernel/tkernel/task_manage.c **** 
 337:../kernel/tkernel/task_manage.c **** 	tcb = get_tcb_self(tskid);
 1262                             		.loc 7 337 8 is_stmt 1
 1263 078f ED A5 04                		mov.L	16[r10], r5
 1264 0792 61 05                   		cmp	#0, r5
 1265 0794 20 11                   		beq	.L87
 1266                             		.loc 7 337 8 is_stmt 0 discriminator 1
 1267 0796 ED A5 04                		mov.L	16[r10], r5
 1268 0799 60 15                   		sub	#1, r5
 1269 079b 75 15 68                		mul	#0x68, r5
 1270 079e 70 55 00 00 00 00       		add	#_knl_tcb_table, r5
 1271 07a4 09                      		bra	.L88
 1272                             	.L87:
 1273                             		.loc 7 337 8 discriminator 2
 1274 07a5 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1275 07ab EC 55                   		mov.L	[r5], r5
 1276                             	.L88:
 1277                             		.loc 7 337 6 is_stmt 1 discriminator 4
 1278 07ad E7 A5 02                		mov.L	r5, 8[r10]
 1279                             	.LBB7:
 338:../kernel/tkernel/task_manage.c **** 
 339:../kernel/tkernel/task_manage.c **** 	BEGIN_CRITICAL_SECTION;
 1280                             		.loc 7 339 2 discriminator 4
 1281 07b0 05 00 00 00             		bsr	_disint
 1282 07b4 E7 A1 03                		mov.L	r1, 12[r10]
 340:../kernel/tkernel/task_manage.c **** 	if ( tcb->state == TS_NONEXIST ) {
 1283                             		.loc 7 340 10 discriminator 4
 1284 07b7 ED A5 02                		mov.L	8[r10], r5
 1285 07ba CD 55 27                		mov.B	39[r5], r5
 1286                             		.loc 7 340 5 discriminator 4
 1287 07bd 5B 55                   		movu.B	r5, r5
 1288 07bf 61 05                   		cmp	#0, r5
 1289 07c1 1F                      		bne	.L89
 341:../kernel/tkernel/task_manage.c **** 		ercd = E_NOEXS;
 1290                             		.loc 7 341 8
 1291 07c2 F9 A6 01 D6             		mov.L	#-42, 4[r10]
 342:../kernel/tkernel/task_manage.c **** 		goto error_exit;
 1292                             		.loc 7 342 3
 1293 07c6 2E 4D                   		bra	.L90
 1294                             	.L89:
 343:../kernel/tkernel/task_manage.c **** 	}
 344:../kernel/tkernel/task_manage.c **** 
 345:../kernel/tkernel/task_manage.c **** 	/* Conversion priority to internal expression */
 346:../kernel/tkernel/task_manage.c **** 	if ( tskpri == TPRI_INI ) {
 1295                             		.loc 7 346 5
 1296 07c8 ED A5 05                		mov.L	20[r10], r5
 1297 07cb 61 05                   		cmp	#0, r5
 1298 07cd 21 0D                   		bne	.L91
 347:../kernel/tkernel/task_manage.c **** 		priority = tcb->ipriority;
 1299                             		.loc 7 347 17
 1300 07cf ED A5 02                		mov.L	8[r10], r5
 1301 07d2 CD 55 24                		mov.B	36[r5], r5
 1302                             		.loc 7 347 12
 1303 07d5 5B 55                   		movu.B	r5, r5
 1304 07d7 E3 A5                   		mov.L	r5, [r10]
 1305 07d9 08                      		bra	.L92
 1306                             	.L91:
 348:../kernel/tkernel/task_manage.c **** 	} else {
 349:../kernel/tkernel/task_manage.c **** 		priority = int_priority(tskpri);
 1307                             		.loc 7 349 12
 1308 07da ED A5 05                		mov.L	20[r10], r5
 1309 07dd 60 15                   		sub	#1, r5
 1310 07df E3 A5                   		mov.L	r5, [r10]
 1311                             	.L92:
 350:../kernel/tkernel/task_manage.c **** 	}
 351:../kernel/tkernel/task_manage.c **** 
 352:../kernel/tkernel/task_manage.c **** #if USE_MUTEX == 1
 353:../kernel/tkernel/task_manage.c **** 	/* Mutex priority change limit */
 354:../kernel/tkernel/task_manage.c **** 	ercd = knl_chg_pri_mutex(tcb, priority);
 1312                             		.loc 7 354 9
 1313 07e1 EC A2                   		mov.L	[r10], r2
 1314 07e3 ED A1 02                		mov.L	8[r10], r1
 1315 07e6 05 00 00 00             		bsr	_knl_chg_pri_mutex
 1316 07ea E7 A1 01                		mov.L	r1, 4[r10]
 355:../kernel/tkernel/task_manage.c **** 	if ( ercd < E_OK ) {
 1317                             		.loc 7 355 5
 1318 07ed ED A5 01                		mov.L	4[r10], r5
 1319 07f0 61 05                   		cmp	#0, r5
 1320 07f2 29 20                   		blt	.L95
 356:../kernel/tkernel/task_manage.c **** 		goto error_exit;
 357:../kernel/tkernel/task_manage.c **** 	}
 358:../kernel/tkernel/task_manage.c **** 
 359:../kernel/tkernel/task_manage.c **** 	tcb->bpriority = (UB)priority;
 1321                             		.loc 7 359 19
 1322 07f4 EC A5                   		mov.L	[r10], r5
 1323 07f6 CF 54                   		mov.B	r5, r4
 1324                             		.loc 7 359 17
 1325 07f8 ED A5 02                		mov.L	8[r10], r5
 1326 07fb C7 54 25                		mov.B	r4, 37[r5]
 360:../kernel/tkernel/task_manage.c **** 	priority = ercd;
 1327                             		.loc 7 360 11
 1328 07fe ED A5 01                		mov.L	4[r10], r5
 1329 0801 E3 A5                   		mov.L	r5, [r10]
 361:../kernel/tkernel/task_manage.c **** #else
 362:../kernel/tkernel/task_manage.c **** 	tcb->bpriority = priority;
 363:../kernel/tkernel/task_manage.c **** #endif
 364:../kernel/tkernel/task_manage.c **** 
 365:../kernel/tkernel/task_manage.c **** 	/* Change priority */
 366:../kernel/tkernel/task_manage.c **** 	knl_change_task_priority(tcb, priority);
 1330                             		.loc 7 366 2
 1331 0803 EC A2                   		mov.L	[r10], r2
 1332 0805 ED A1 02                		mov.L	8[r10], r1
 1333 0808 05 00 00 00             		bsr	_knl_change_task_priority
 367:../kernel/tkernel/task_manage.c **** 
 368:../kernel/tkernel/task_manage.c **** 	ercd = E_OK;
 1334                             		.loc 7 368 7
 1335 080c F9 A6 01 00             		mov.L	#0, 4[r10]
 1336 0810 2E 03                   		bra	.L90
 1337                             	.L95:
 356:../kernel/tkernel/task_manage.c **** 	}
 1338                             		.loc 7 356 3
 1339 0812 03                      		nop
 1340                             	.L90:
 369:../kernel/tkernel/task_manage.c ****     error_exit:
 370:../kernel/tkernel/task_manage.c **** 	END_CRITICAL_SECTION;
 1341                             		.loc 7 370 2
 1342 0813 ED A5 03                		mov.L	12[r10], r5
 1343 0816 61 F5                   		cmp	#15, r5
 1344 0818 20 2E                   		beq	.L94
 1345                             		.loc 7 370 2 is_stmt 0 discriminator 1
 1346 081a FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1347 0820 EC 54                   		mov.L	[r5], r4
 1348 0822 FB 52 00 00 00 00       		mov.L	#_knl_schedtsk, r5
 1349 0828 EC 55                   		mov.L	[r5], r5
 1350 082a 47 54                   		cmp	r5, r4
 1351 082c 20 1A                   		beq	.L94
 1352                             		.loc 7 370 2 discriminator 3
 1353 082e 39 7A F8                		bsr	_knl_isTaskIndependent
 1354 0831 EF 15                   		mov.L	r1, r5
 1355 0833 61 05                   		cmp	#0, r5
 1356 0835 21 11                   		bne	.L94
 1357                             		.loc 7 370 2 discriminator 5
 1358 0837 FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 1359 083d EC 55                   		mov.L	[r5], r5
 1360 083f 61 05                   		cmp	#0, r5
 1361 0841 1D                      		bne	.L94
 1362                             		.loc 7 370 2 discriminator 7
 1363 0842 05 00 00 00             		bsr	_knl_dispatch
 1364                             		.balign 8,3,1
 1365                             	.L94:
 1366                             		.loc 7 370 2 discriminator 9
 1367 0846 ED A1 03                		mov.L	12[r10], r1
 1368 0849 05 00 00 00             		bsr	_setint
 1369                             	.LBE7:
 371:../kernel/tkernel/task_manage.c **** 
 372:../kernel/tkernel/task_manage.c **** 	return ercd;
 1370                             		.loc 7 372 9 is_stmt 1 discriminator 9
 1371 084d ED A5 01                		mov.L	4[r10], r5
 1372                             	.L84:
 373:../kernel/tkernel/task_manage.c **** }
 1373                             		.loc 7 373 1
 1374 0850 EF 51                   		mov.L	r5, r1
 1375 0852 3F AA 07                		rtsd	#28, r10-r10
 1376                             	.LFE45:
 1378                             		.global	_tk_rot_rdq
 1380                             	_tk_rot_rdq:
 1381                             	.LFB46:
 374:../kernel/tkernel/task_manage.c **** #endif /* USE_FUNC_TK_CHG_PRI */
 375:../kernel/tkernel/task_manage.c **** 
 376:../kernel/tkernel/task_manage.c **** #ifdef USE_FUNC_TK_ROT_RDQ
 377:../kernel/tkernel/task_manage.c **** /*
 378:../kernel/tkernel/task_manage.c ****  * Rotate ready queue
 379:../kernel/tkernel/task_manage.c ****  */
 380:../kernel/tkernel/task_manage.c **** SYSCALL ER tk_rot_rdq( PRI tskpri )
 381:../kernel/tkernel/task_manage.c **** {
 1382                             		.loc 7 381 1
 1383 0855 7E AA                   		push.l	r10
 1384                             	.LCFI36:
 1385 0857 71 0A F8                		add	#-8, r0, r10
 1386                             	.LCFI37:
 1387 085a EF A0                   		mov.L	r10, r0
 1388 085c E7 A1 01                		mov.L	r1, 4[r10]
 382:../kernel/tkernel/task_manage.c **** 	CHECK_PRI_RUN(tskpri);
 1389                             		.loc 7 382 2
 1390 085f ED A5 01                		mov.L	4[r10], r5
 1391 0862 61 05                   		cmp	#0, r5
 1392 0864 20 17                   		beq	.L97
 1393                             		.loc 7 382 2 is_stmt 0 discriminator 1
 1394 0866 ED A5 01                		mov.L	4[r10], r5
 1395 0869 61 05                   		cmp	#0, r5
 1396 086b 2B 0A                   		ble	.L98
 1397                             		.loc 7 382 2 discriminator 3
 1398 086d ED A5 01                		mov.L	4[r10], r5
 1399 0870 75 55 20                		cmp	#32, r5
 1400 0873 2B 08                   		ble	.L97
 1401                             	.L98:
 1402                             		.loc 7 382 2 discriminator 4
 1403 0875 FB 56 EF                		mov.L	#-17, r5
 1404 0878 38 84 00                		bra	.L99
 1405                             	.L97:
 1406                             	.LBB8:
 383:../kernel/tkernel/task_manage.c **** 
 384:../kernel/tkernel/task_manage.c **** 	BEGIN_CRITICAL_SECTION;
 1407                             		.loc 7 384 2 is_stmt 1
 1408 087b 05 00 00 00             		bsr	_disint
 1409 087f E3 A1                   		mov.L	r1, [r10]
 385:../kernel/tkernel/task_manage.c **** 	if ( tskpri == TPRI_RUN ) {
 1410                             		.loc 7 385 5
 1411 0881 ED A5 01                		mov.L	4[r10], r5
 1412 0884 61 05                   		cmp	#0, r5
 1413 0886 21 31                   		bne	.L100
 386:../kernel/tkernel/task_manage.c **** 		if ( in_indp() ) {
 1414                             		.loc 7 386 8
 1415 0888 39 20 F8                		bsr	_knl_isTaskIndependent
 1416 088b EF 15                   		mov.L	r1, r5
 1417                             		.loc 7 386 6
 1418 088d 61 05                   		cmp	#0, r5
 1419 088f 21 0D                   		bne	.L101
 1420                             		.loc 7 386 8 discriminator 1
 1421 0891 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1422 0897 EC 55                   		mov.L	[r5], r5
 1423 0899 61 05                   		cmp	#0, r5
 1424 089b 1F                      		bne	.L102
 1425                             	.L101:
 387:../kernel/tkernel/task_manage.c **** 			knl_rotate_ready_queue_run();
 1426                             		.loc 7 387 4
 1427 089c 05 00 00 00             		bsr	_knl_rotate_ready_queue_run
 1428 08a0 2E 22                   		bra	.L104
 1429                             	.L102:
 388:../kernel/tkernel/task_manage.c **** 		} else {
 389:../kernel/tkernel/task_manage.c **** 			knl_rotate_ready_queue(knl_ctxtsk->priority);
 1430                             		.loc 7 389 37
 1431 08a2 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1432 08a8 EC 55                   		mov.L	[r5], r5
 1433 08aa CD 55 26                		mov.B	38[r5], r5
 1434                             		.loc 7 389 4
 1435 08ad 5B 55                   		movu.B	r5, r5
 1436 08af EF 51                   		mov.L	r5, r1
 1437 08b1 05 00 00 00             		bsr	_knl_rotate_ready_queue
 1438 08b5 2E 0D                   		bra	.L104
 1439                             	.L100:
 390:../kernel/tkernel/task_manage.c **** 		}
 391:../kernel/tkernel/task_manage.c **** 	} else {
 392:../kernel/tkernel/task_manage.c **** 		knl_rotate_ready_queue(int_priority(tskpri));
 1440                             		.loc 7 392 3
 1441 08b7 ED A5 01                		mov.L	4[r10], r5
 1442 08ba 60 15                   		sub	#1, r5
 1443 08bc EF 51                   		mov.L	r5, r1
 1444 08be 05 00 00 00             		bsr	_knl_rotate_ready_queue
 1445                             	.L104:
 393:../kernel/tkernel/task_manage.c **** 	}
 394:../kernel/tkernel/task_manage.c **** 	END_CRITICAL_SECTION;
 1446                             		.loc 7 394 2
 1447 08c2 EC A5                   		mov.L	[r10], r5
 1448 08c4 61 F5                   		cmp	#15, r5
 1449 08c6 20 2E                   		beq	.L105
 1450                             		.loc 7 394 2 is_stmt 0 discriminator 1
 1451 08c8 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1452 08ce EC 54                   		mov.L	[r5], r4
 1453 08d0 FB 52 00 00 00 00       		mov.L	#_knl_schedtsk, r5
 1454 08d6 EC 55                   		mov.L	[r5], r5
 1455 08d8 47 54                   		cmp	r5, r4
 1456 08da 20 1A                   		beq	.L105
 1457                             		.loc 7 394 2 discriminator 3
 1458 08dc 39 CC F7                		bsr	_knl_isTaskIndependent
 1459 08df EF 15                   		mov.L	r1, r5
 1460 08e1 61 05                   		cmp	#0, r5
 1461 08e3 21 11                   		bne	.L105
 1462                             		.loc 7 394 2 discriminator 5
 1463 08e5 FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 1464 08eb EC 55                   		mov.L	[r5], r5
 1465 08ed 61 05                   		cmp	#0, r5
 1466 08ef 1D                      		bne	.L105
 1467                             		.loc 7 394 2 discriminator 7
 1468 08f0 05 00 00 00             		bsr	_knl_dispatch
 1469                             		.balign 8,3,1
 1470                             	.L105:
 1471                             		.loc 7 394 2 discriminator 9
 1472 08f4 EC A1                   		mov.L	[r10], r1
 1473 08f6 05 00 00 00             		bsr	_setint
 1474                             	.LBE8:
 395:../kernel/tkernel/task_manage.c **** 
 396:../kernel/tkernel/task_manage.c **** 	return E_OK;
 1475                             		.loc 7 396 9 is_stmt 1 discriminator 9
 1476 08fa 66 05                   		mov.L	#0, r5
 1477                             	.L99:
 397:../kernel/tkernel/task_manage.c **** }
 1478                             		.loc 7 397 1
 1479 08fc EF 51                   		mov.L	r5, r1
 1480 08fe 3F AA 03                		rtsd	#12, r10-r10
 1481                             	.LFE46:
 1483                             		.global	_tk_get_tid
 1485                             	_tk_get_tid:
 1486                             	.LFB47:
 398:../kernel/tkernel/task_manage.c **** #endif /* USE_FUNC_TK_ROT_RDQ */
 399:../kernel/tkernel/task_manage.c **** 
 400:../kernel/tkernel/task_manage.c **** /* ------------------------------------------------------------------------ */
 401:../kernel/tkernel/task_manage.c **** 
 402:../kernel/tkernel/task_manage.c **** #ifdef USE_FUNC_TK_GET_TID
 403:../kernel/tkernel/task_manage.c **** /*
 404:../kernel/tkernel/task_manage.c ****  * Refer task ID at execution
 405:../kernel/tkernel/task_manage.c ****  */
 406:../kernel/tkernel/task_manage.c **** SYSCALL ID tk_get_tid( void )
 407:../kernel/tkernel/task_manage.c **** {
 1487                             		.loc 7 407 1
 1488 0901 7E AA                   		push.l	r10
 1489                             	.LCFI38:
 1490 0903 EF 0A                   		mov.L	r0, r10
 1491                             	.LCFI39:
 408:../kernel/tkernel/task_manage.c **** 	return ( knl_ctxtsk == NULL )? 0: knl_ctxtsk->tskid;
 1492                             		.loc 7 408 22
 1493 0905 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1494 090b EC 55                   		mov.L	[r5], r5
 1495                             		.loc 7 408 34
 1496 090d 61 05                   		cmp	#0, r5
 1497 090f 20 0D                   		beq	.L107
 1498                             		.loc 7 408 46 discriminator 1
 1499 0911 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1500 0917 EC 55                   		mov.L	[r5], r5
 1501                             		.loc 7 408 34 discriminator 1
 1502 0919 A8 D5                   		mov.L	8[r5], r5
 1503 091b 0B                      		bra	.L109
 1504                             	.L107:
 1505                             		.loc 7 408 34 is_stmt 0 discriminator 2
 1506 091c 66 05                   		mov.L	#0, r5
 1507                             	.L109:
 409:../kernel/tkernel/task_manage.c **** }
 1508                             		.loc 7 409 1 is_stmt 1 discriminator 5
 1509 091e EF 51                   		mov.L	r5, r1
 1510 0920 3F AA 01                		rtsd	#4, r10-r10
 1511                             	.LFE47:
 1513                             		.global	_tk_ref_tsk
 1515                             	_tk_ref_tsk:
 1516                             	.LFB48:
 410:../kernel/tkernel/task_manage.c **** #endif /* USE_FUNC_TK_GET_TID */
 411:../kernel/tkernel/task_manage.c **** 
 412:../kernel/tkernel/task_manage.c **** #ifdef USE_FUNC_TK_REF_TSK
 413:../kernel/tkernel/task_manage.c **** /*
 414:../kernel/tkernel/task_manage.c ****  * Refer task state
 415:../kernel/tkernel/task_manage.c ****  */
 416:../kernel/tkernel/task_manage.c **** SYSCALL ER tk_ref_tsk( ID tskid, T_RTSK *pk_rtsk )
 417:../kernel/tkernel/task_manage.c **** {
 1517                             		.loc 7 417 1
 1518 0923 7E AA                   		push.l	r10
 1519                             	.LCFI40:
 1520 0925 71 0A E8                		add	#-24, r0, r10
 1521                             	.LCFI41:
 1522 0928 EF A0                   		mov.L	r10, r0
 1523 092a E7 A1 04                		mov.L	r1, 16[r10]
 1524 092d E7 A2 05                		mov.L	r2, 20[r10]
 418:../kernel/tkernel/task_manage.c **** 	TCB	*tcb;
 419:../kernel/tkernel/task_manage.c **** 	TSTAT	state;
 420:../kernel/tkernel/task_manage.c **** 	ER	ercd = E_OK;
 1525                             		.loc 7 420 5
 1526 0930 F8 A6 00                		mov.L	#0, [r10]
 421:../kernel/tkernel/task_manage.c **** 
 422:../kernel/tkernel/task_manage.c **** 	CHECK_TSKID_SELF(tskid);
 1527                             		.loc 7 422 2
 1528 0933 39 75 F7                		bsr	_knl_isTaskIndependent
 1529 0936 EF 15                   		mov.L	r1, r5
 1530 0938 61 05                   		cmp	#0, r5
 1531 093a 21 14                   		bne	.L111
 1532                             		.loc 7 422 2 is_stmt 0 discriminator 2
 1533 093c FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1534 0942 EC 55                   		mov.L	[r5], r5
 1535 0944 61 05                   		cmp	#0, r5
 1536 0946 10                      		beq	.L111
 1537                             		.loc 7 422 2 discriminator 4
 1538 0947 ED A5 04                		mov.L	16[r10], r5
 1539 094a 61 05                   		cmp	#0, r5
 1540 094c 20 17                   		beq	.L112
 1541                             	.L111:
 1542                             		.loc 7 422 2 discriminator 5
 1543 094e ED A5 04                		mov.L	16[r10], r5
 1544 0951 61 05                   		cmp	#0, r5
 1545 0953 2B 0A                   		ble	.L113
 1546                             		.loc 7 422 2 discriminator 7
 1547 0955 ED A5 04                		mov.L	16[r10], r5
 1548 0958 75 55 20                		cmp	#32, r5
 1549 095b 2B 08                   		ble	.L112
 1550                             	.L113:
 1551                             		.loc 7 422 2 discriminator 8
 1552 095d FB 56 EE                		mov.L	#-18, r5
 1553 0960 38 11 01                		bra	.L114
 1554                             	.L112:
 423:../kernel/tkernel/task_manage.c **** 
 424:../kernel/tkernel/task_manage.c **** 	tcb = get_tcb_self(tskid);
 1555                             		.loc 7 424 8 is_stmt 1
 1556 0963 ED A5 04                		mov.L	16[r10], r5
 1557 0966 61 05                   		cmp	#0, r5
 1558 0968 20 11                   		beq	.L115
 1559                             		.loc 7 424 8 is_stmt 0 discriminator 1
 1560 096a ED A5 04                		mov.L	16[r10], r5
 1561 096d 60 15                   		sub	#1, r5
 1562 096f 75 15 68                		mul	#0x68, r5
 1563 0972 70 55 00 00 00 00       		add	#_knl_tcb_table, r5
 1564 0978 09                      		bra	.L116
 1565                             	.L115:
 1566                             		.loc 7 424 8 discriminator 2
 1567 0979 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1568 097f EC 55                   		mov.L	[r5], r5
 1569                             	.L116:
 1570                             		.loc 7 424 6 is_stmt 1 discriminator 4
 1571 0981 E7 A5 01                		mov.L	r5, 4[r10]
 425:../kernel/tkernel/task_manage.c **** 
 426:../kernel/tkernel/task_manage.c **** 	knl_memset(pk_rtsk, 0, sizeof(*pk_rtsk));
 1572                             		.loc 7 426 2 discriminator 4
 1573 0984 75 43 20                		mov.L	#32, r3
 1574 0987 66 02                   		mov.L	#0, r2
 1575 0989 ED A1 05                		mov.L	20[r10], r1
 1576 098c 05 00 00 00             		bsr	_knl_memset
 1577                             	.LBB9:
 427:../kernel/tkernel/task_manage.c **** 
 428:../kernel/tkernel/task_manage.c **** 	BEGIN_CRITICAL_SECTION;
 1578                             		.loc 7 428 2 discriminator 4
 1579 0990 05 00 00 00             		bsr	_disint
 1580 0994 E7 A1 02                		mov.L	r1, 8[r10]
 429:../kernel/tkernel/task_manage.c **** 	state = (TSTAT)tcb->state;
 1581                             		.loc 7 429 20 discriminator 4
 1582 0997 ED A5 01                		mov.L	4[r10], r5
 1583 099a CD 55 27                		mov.B	39[r5], r5
 1584                             		.loc 7 429 8 discriminator 4
 1585 099d 5B 55                   		movu.B	r5, r5
 1586 099f E7 A5 03                		mov.L	r5, 12[r10]
 430:../kernel/tkernel/task_manage.c **** 	if ( state == TS_NONEXIST ) {
 1587                             		.loc 7 430 5 discriminator 4
 1588 09a2 ED A5 03                		mov.L	12[r10], r5
 1589 09a5 61 05                   		cmp	#0, r5
 1590 09a7 1F                      		bne	.L117
 431:../kernel/tkernel/task_manage.c **** 		ercd = E_NOEXS;
 1591                             		.loc 7 431 8
 1592 09a8 F8 A6 D6                		mov.L	#-42, [r10]
 1593 09ab 38 89 00                		bra	.L118
 1594                             	.L117:
 432:../kernel/tkernel/task_manage.c **** 	} else {
 433:../kernel/tkernel/task_manage.c **** 		if ( ( state == TS_READY ) && ( tcb == knl_ctxtsk ) ) {
 1595                             		.loc 7 433 6
 1596 09ae ED A5 03                		mov.L	12[r10], r5
 1597 09b1 61 15                   		cmp	#1, r5
 1598 09b3 21 18                   		bne	.L119
 1599                             		.loc 7 433 39 discriminator 1
 1600 09b5 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1601 09bb EC 55                   		mov.L	[r5], r5
 1602                             		.loc 7 433 30 discriminator 1
 1603 09bd ED A4 01                		mov.L	4[r10], r4
 1604 09c0 47 54                   		cmp	r5, r4
 1605 09c2 19                      		bne	.L119
 434:../kernel/tkernel/task_manage.c **** 			pk_rtsk->tskstat = TTS_RUN;
 1606                             		.loc 7 434 21
 1607 09c3 ED A5 05                		mov.L	20[r10], r5
 1608 09c6 3E 53 01                		mov.L	#1, 12[r5]
 1609 09c9 2E 0E                   		bra	.L120
 1610                             	.L119:
 435:../kernel/tkernel/task_manage.c **** 		} else {
 436:../kernel/tkernel/task_manage.c **** 			pk_rtsk->tskstat = (UINT)state << 1;
 1611                             		.loc 7 436 35
 1612 09cb ED A5 03                		mov.L	12[r10], r5
 1613 09ce 4B 55                   		add	r5, r5
 1614 09d0 EF 54                   		mov.L	r5, r4
 1615                             		.loc 7 436 21
 1616 09d2 ED A5 05                		mov.L	20[r10], r5
 1617 09d5 A0 DC                   		mov.L	r4, 12[r5]
 1618                             	.L120:
 437:../kernel/tkernel/task_manage.c **** 		}
 438:../kernel/tkernel/task_manage.c **** 		if ( (state & TS_WAIT) != 0 ) {
 1619                             		.loc 7 438 15
 1620 09d7 ED A5 03                		mov.L	12[r10], r5
 1621 09da 64 25                   		and	#2, r5
 1622                             		.loc 7 438 6
 1623 09dc 61 05                   		cmp	#0, r5
 1624 09de 20 18                   		beq	.L121
 439:../kernel/tkernel/task_manage.c **** 			pk_rtsk->tskwait = tcb->wspec->tskwait;
 1625                             		.loc 7 439 26
 1626 09e0 ED A5 01                		mov.L	4[r10], r5
 1627 09e3 AA DD                   		mov.L	44[r5], r5
 1628                             		.loc 7 439 33
 1629 09e5 EC 54                   		mov.L	[r5], r4
 1630                             		.loc 7 439 21
 1631 09e7 ED A5 05                		mov.L	20[r10], r5
 1632 09ea A1 54                   		mov.L	r4, 16[r5]
 440:../kernel/tkernel/task_manage.c **** 			pk_rtsk->wid     = tcb->wid;
 1633                             		.loc 7 440 26
 1634 09ec ED A5 01                		mov.L	4[r10], r5
 1635 09ef AB 54                   		mov.L	48[r5], r4
 1636                             		.loc 7 440 21
 1637 09f1 ED A5 05                		mov.L	20[r10], r5
 1638 09f4 A1 5C                   		mov.L	r4, 20[r5]
 1639                             	.L121:
 441:../kernel/tkernel/task_manage.c **** 		}
 442:../kernel/tkernel/task_manage.c **** 		pk_rtsk->exinf     = tcb->exinf;
 1640                             		.loc 7 442 27
 1641 09f6 ED A5 01                		mov.L	4[r10], r5
 1642 09f9 A8 DC                   		mov.L	12[r5], r4
 1643                             		.loc 7 442 22
 1644 09fb ED A5 05                		mov.L	20[r10], r5
 1645 09fe E3 54                   		mov.L	r4, [r5]
 443:../kernel/tkernel/task_manage.c **** 		pk_rtsk->tskpri    = ext_tskpri(tcb->priority);
 1646                             		.loc 7 443 24
 1647 0a00 ED A5 01                		mov.L	4[r10], r5
 1648 0a03 CD 55 26                		mov.B	38[r5], r5
 1649 0a06 5B 55                   		movu.B	r5, r5
 1650 0a08 71 54 01                		add	#1, r5, r4
 1651                             		.loc 7 443 22
 1652 0a0b ED A5 05                		mov.L	20[r10], r5
 1653 0a0e A0 5C                   		mov.L	r4, 4[r5]
 444:../kernel/tkernel/task_manage.c **** 		pk_rtsk->tskbpri   = ext_tskpri(tcb->bpriority);
 1654                             		.loc 7 444 24
 1655 0a10 ED A5 01                		mov.L	4[r10], r5
 1656 0a13 CD 55 25                		mov.B	37[r5], r5
 1657 0a16 5B 55                   		movu.B	r5, r5
 1658 0a18 71 54 01                		add	#1, r5, r4
 1659                             		.loc 7 444 22
 1660 0a1b ED A5 05                		mov.L	20[r10], r5
 1661 0a1e A0 D4                   		mov.L	r4, 8[r5]
 445:../kernel/tkernel/task_manage.c **** 		pk_rtsk->wupcnt    = tcb->wupcnt;
 1662                             		.loc 7 445 27
 1663 0a20 ED A5 01                		mov.L	4[r10], r5
 1664 0a23 AB 5C                   		mov.L	52[r5], r4
 1665                             		.loc 7 445 22
 1666 0a25 ED A5 05                		mov.L	20[r10], r5
 1667 0a28 A1 D4                   		mov.L	r4, 24[r5]
 446:../kernel/tkernel/task_manage.c **** 		pk_rtsk->suscnt    = tcb->suscnt;
 1668                             		.loc 7 446 27
 1669 0a2a ED A5 01                		mov.L	4[r10], r5
 1670 0a2d AB D4                   		mov.L	56[r5], r4
 1671                             		.loc 7 446 22
 1672 0a2f ED A5 05                		mov.L	20[r10], r5
 1673 0a32 A1 DC                   		mov.L	r4, 28[r5]
 1674                             	.L118:
 447:../kernel/tkernel/task_manage.c **** 	}
 448:../kernel/tkernel/task_manage.c **** 	END_CRITICAL_SECTION;
 1675                             		.loc 7 448 2
 1676 0a34 ED A5 02                		mov.L	8[r10], r5
 1677 0a37 61 F5                   		cmp	#15, r5
 1678 0a39 20 2F                   		beq	.L122
 1679                             		.loc 7 448 2 is_stmt 0 discriminator 1
 1680 0a3b FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1681 0a41 EC 54                   		mov.L	[r5], r4
 1682 0a43 FB 52 00 00 00 00       		mov.L	#_knl_schedtsk, r5
 1683 0a49 EC 55                   		mov.L	[r5], r5
 1684 0a4b 47 54                   		cmp	r5, r4
 1685 0a4d 20 1B                   		beq	.L122
 1686                             		.loc 7 448 2 discriminator 3
 1687 0a4f 39 59 F6                		bsr	_knl_isTaskIndependent
 1688 0a52 EF 15                   		mov.L	r1, r5
 1689 0a54 61 05                   		cmp	#0, r5
 1690 0a56 21 12                   		bne	.L122
 1691                             		.loc 7 448 2 discriminator 5
 1692 0a58 FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 1693 0a5e EC 55                   		mov.L	[r5], r5
 1694 0a60 61 05                   		cmp	#0, r5
 1695 0a62 1E                      		bne	.L122
 1696                             		.loc 7 448 2 discriminator 7
 1697 0a63 05 00 00 00             		bsr	_knl_dispatch
 1698 0a67 03                      		.balign 8,3,1
 1699                             	.L122:
 1700                             		.loc 7 448 2 discriminator 9
 1701 0a68 ED A1 02                		mov.L	8[r10], r1
 1702 0a6b 05 00 00 00             		bsr	_setint
 1703                             	.LBE9:
 449:../kernel/tkernel/task_manage.c **** 
 450:../kernel/tkernel/task_manage.c **** 	return ercd;
 1704                             		.loc 7 450 9 is_stmt 1 discriminator 9
 1705 0a6f EC A5                   		mov.L	[r10], r5
 1706                             	.L114:
 451:../kernel/tkernel/task_manage.c **** }
 1707                             		.loc 7 451 1
 1708 0a71 EF 51                   		mov.L	r5, r1
 1709 0a73 3F AA 07                		rtsd	#28, r10-r10
 1710                             	.LFE48:
 1712                             		.global	_tk_rel_wai
 1714                             	_tk_rel_wai:
 1715                             	.LFB49:
 452:../kernel/tkernel/task_manage.c **** #endif /* USE_FUNC_TK_REF_TSK */
 453:../kernel/tkernel/task_manage.c **** 
 454:../kernel/tkernel/task_manage.c **** /* ------------------------------------------------------------------------ */
 455:../kernel/tkernel/task_manage.c **** 
 456:../kernel/tkernel/task_manage.c **** 
 457:../kernel/tkernel/task_manage.c **** #ifdef USE_FUNC_TK_REL_WAI
 458:../kernel/tkernel/task_manage.c **** /*
 459:../kernel/tkernel/task_manage.c ****  * Release wait
 460:../kernel/tkernel/task_manage.c ****  */
 461:../kernel/tkernel/task_manage.c **** SYSCALL ER tk_rel_wai( ID tskid )
 462:../kernel/tkernel/task_manage.c **** {
 1716                             		.loc 7 462 1
 1717 0a76 7E AA                   		push.l	r10
 1718                             	.LCFI42:
 1719 0a78 71 0A EC                		add	#-20, r0, r10
 1720                             	.LCFI43:
 1721 0a7b EF A0                   		mov.L	r10, r0
 1722 0a7d E7 A1 04                		mov.L	r1, 16[r10]
 463:../kernel/tkernel/task_manage.c **** 	TCB	*tcb;
 464:../kernel/tkernel/task_manage.c **** 	TSTAT	state;
 465:../kernel/tkernel/task_manage.c **** 	ER	ercd = E_OK;
 1723                             		.loc 7 465 5
 1724 0a80 F8 A6 00                		mov.L	#0, [r10]
 466:../kernel/tkernel/task_manage.c **** 
 467:../kernel/tkernel/task_manage.c **** 	CHECK_TSKID(tskid);
 1725                             		.loc 7 467 2
 1726 0a83 39 25 F6                		bsr	_knl_isTaskIndependent
 1727 0a86 EF 15                   		mov.L	r1, r5
 1728 0a88 61 05                   		cmp	#0, r5
 1729 0a8a 21 1A                   		bne	.L124
 1730                             		.loc 7 467 2 is_stmt 0 discriminator 1
 1731 0a8c FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1732 0a92 EC 55                   		mov.L	[r5], r5
 1733 0a94 61 05                   		cmp	#0, r5
 1734 0a96 20 0E                   		beq	.L124
 1735                             		.loc 7 467 2 discriminator 3
 1736 0a98 ED A5 04                		mov.L	16[r10], r5
 1737 0a9b 61 05                   		cmp	#0, r5
 1738 0a9d 1F                      		bne	.L124
 1739                             		.loc 7 467 2 discriminator 5
 1740 0a9e FB 56 D7                		mov.L	#-41, r5
 1741 0aa1 38 9B 00                		bra	.L125
 1742                             	.L124:
 1743                             		.loc 7 467 2 discriminator 6
 1744 0aa4 ED A5 04                		mov.L	16[r10], r5
 1745 0aa7 61 05                   		cmp	#0, r5
 1746 0aa9 2B 0A                   		ble	.L126
 1747                             		.loc 7 467 2 discriminator 8
 1748 0aab ED A5 04                		mov.L	16[r10], r5
 1749 0aae 75 55 20                		cmp	#32, r5
 1750 0ab1 2B 08                   		ble	.L127
 1751                             	.L126:
 1752                             		.loc 7 467 2 discriminator 9
 1753 0ab3 FB 56 EE                		mov.L	#-18, r5
 1754 0ab6 38 86 00                		bra	.L125
 1755                             	.L127:
 468:../kernel/tkernel/task_manage.c **** 
 469:../kernel/tkernel/task_manage.c **** 	tcb = get_tcb(tskid);
 1756                             		.loc 7 469 8 is_stmt 1
 1757 0ab9 ED A5 04                		mov.L	16[r10], r5
 1758 0abc 60 15                   		sub	#1, r5
 1759                             		.loc 7 469 6
 1760 0abe 75 15 68                		mul	#0x68, r5
 1761 0ac1 70 55 00 00 00 00       		add	#_knl_tcb_table, r5
 1762 0ac7 E7 A5 01                		mov.L	r5, 4[r10]
 1763                             	.LBB10:
 470:../kernel/tkernel/task_manage.c **** 
 471:../kernel/tkernel/task_manage.c **** 	BEGIN_CRITICAL_SECTION;
 1764                             		.loc 7 471 2
 1765 0aca 05 00 00 00             		bsr	_disint
 1766 0ace E7 A1 02                		mov.L	r1, 8[r10]
 472:../kernel/tkernel/task_manage.c **** 	state = (TSTAT)tcb->state;
 1767                             		.loc 7 472 20
 1768 0ad1 ED A5 01                		mov.L	4[r10], r5
 1769 0ad4 CD 55 27                		mov.B	39[r5], r5
 1770                             		.loc 7 472 8
 1771 0ad7 5B 55                   		movu.B	r5, r5
 1772 0ad9 E7 A5 03                		mov.L	r5, 12[r10]
 473:../kernel/tkernel/task_manage.c **** 	if ( (state & TS_WAIT) == 0 ) {
 1773                             		.loc 7 473 14
 1774 0adc ED A5 03                		mov.L	12[r10], r5
 1775 0adf 64 25                   		and	#2, r5
 1776                             		.loc 7 473 5
 1777 0ae1 61 05                   		cmp	#0, r5
 1778 0ae3 21 13                   		bne	.L128
 474:../kernel/tkernel/task_manage.c **** 		ercd = ( state == TS_NONEXIST )? E_NOEXS: E_OBJ;
 1779                             		.loc 7 474 43
 1780 0ae5 ED A5 03                		mov.L	12[r10], r5
 1781 0ae8 61 05                   		cmp	#0, r5
 1782 0aea 1D                      		bne	.L129
 1783                             		.loc 7 474 43 is_stmt 0 discriminator 1
 1784 0aeb FB 56 D6                		mov.L	#-42, r5
 1785 0aee 0C                      		bra	.L130
 1786                             	.L129:
 1787                             		.loc 7 474 43 discriminator 2
 1788 0aef FB 56 D7                		mov.L	#-41, r5
 1789                             	.L130:
 1790                             		.loc 7 474 8 is_stmt 1 discriminator 4
 1791 0af2 E3 A5                   		mov.L	r5, [r10]
 1792 0af4 2E 0C                   		bra	.L131
 1793                             	.L128:
 475:../kernel/tkernel/task_manage.c **** 	} else {
 476:../kernel/tkernel/task_manage.c **** 		knl_wait_release_ng(tcb, E_RLWAI);
 1794                             		.loc 7 476 3
 1795 0af6 FB 26 CF                		mov.L	#-49, r2
 1796 0af9 ED A1 01                		mov.L	4[r10], r1
 1797 0afc 05 00 00 00             		bsr	_knl_wait_release_ng
 1798                             	.L131:
 477:../kernel/tkernel/task_manage.c **** 	}
 478:../kernel/tkernel/task_manage.c **** 	END_CRITICAL_SECTION;
 1799                             		.loc 7 478 2
 1800 0b00 ED A5 02                		mov.L	8[r10], r5
 1801 0b03 61 F5                   		cmp	#15, r5
 1802 0b05 20 2E                   		beq	.L132
 1803                             		.loc 7 478 2 is_stmt 0 discriminator 1
 1804 0b07 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1805 0b0d EC 54                   		mov.L	[r5], r4
 1806 0b0f FB 52 00 00 00 00       		mov.L	#_knl_schedtsk, r5
 1807 0b15 EC 55                   		mov.L	[r5], r5
 1808 0b17 47 54                   		cmp	r5, r4
 1809 0b19 20 1A                   		beq	.L132
 1810                             		.loc 7 478 2 discriminator 3
 1811 0b1b 39 8D F5                		bsr	_knl_isTaskIndependent
 1812 0b1e EF 15                   		mov.L	r1, r5
 1813 0b20 61 05                   		cmp	#0, r5
 1814 0b22 21 11                   		bne	.L132
 1815                             		.loc 7 478 2 discriminator 5
 1816 0b24 FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 1817 0b2a EC 55                   		mov.L	[r5], r5
 1818 0b2c 61 05                   		cmp	#0, r5
 1819 0b2e 1D                      		bne	.L132
 1820                             		.loc 7 478 2 discriminator 7
 1821 0b2f 05 00 00 00             		bsr	_knl_dispatch
 1822                             		.balign 8,3,1
 1823                             	.L132:
 1824                             		.loc 7 478 2 discriminator 9
 1825 0b33 ED A1 02                		mov.L	8[r10], r1
 1826 0b36 05 00 00 00             		bsr	_setint
 1827                             	.LBE10:
 479:../kernel/tkernel/task_manage.c **** 
 480:../kernel/tkernel/task_manage.c **** 	return ercd;
 1828                             		.loc 7 480 9 is_stmt 1 discriminator 9
 1829 0b3a EC A5                   		mov.L	[r10], r5
 1830                             	.L125:
 481:../kernel/tkernel/task_manage.c **** }
 1831                             		.loc 7 481 1
 1832 0b3c EF 51                   		mov.L	r5, r1
 1833 0b3e 3F AA 06                		rtsd	#24, r10-r10
 1834                             	.LFE49:
 2269                             	.Letext0:
 2270                             		.file 8 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\include/tk/typedef.h"
 2271                             		.file 9 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\include/tk/syscall.h"
 2272                             		.file 10 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\kernel\\knlinc/kernel.h"
 2273                             		.file 11 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\kernel\\tkernel\\winfo.h"
 2274                             		.file 12 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\kernel\\tkernel\\mutex.h"
 2275                             		.file 13 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\kernel\\sysdepend\\cpu\\core\\rxv2\\sysd
 2276                             		.file 14 "../kernel/tkernel/ready_queue.h"
