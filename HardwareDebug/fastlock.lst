   1                             		.file	"fastlock.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   5                             	_Inc:
   6                             	.LFB6:
   7                             		.file 1 "../lib/libtk/fastlock.c"
   1:../lib/libtk/fastlock.c **** /*
   2:../lib/libtk/fastlock.c ****  *----------------------------------------------------------------------
   3:../lib/libtk/fastlock.c ****  *    micro T-Kernel 3.00.00
   4:../lib/libtk/fastlock.c ****  *
   5:../lib/libtk/fastlock.c ****  *    Copyright (C) 2006-2019 by Ken Sakamura.
   6:../lib/libtk/fastlock.c ****  *    This software is distributed under the T-License 2.1.
   7:../lib/libtk/fastlock.c ****  *----------------------------------------------------------------------
   8:../lib/libtk/fastlock.c ****  *
   9:../lib/libtk/fastlock.c ****  *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.
  10:../lib/libtk/fastlock.c ****  *
  11:../lib/libtk/fastlock.c ****  *----------------------------------------------------------------------
  12:../lib/libtk/fastlock.c ****  */
  13:../lib/libtk/fastlock.c **** 
  14:../lib/libtk/fastlock.c **** /*
  15:../lib/libtk/fastlock.c ****  *	fastlock.c
  16:../lib/libtk/fastlock.c ****  *
  17:../lib/libtk/fastlock.c ****  *	High-speed exclusive control lock 
  18:../lib/libtk/fastlock.c ****  */
  19:../lib/libtk/fastlock.c **** 
  20:../lib/libtk/fastlock.c **** #include <config.h>
  21:../lib/libtk/fastlock.c **** #include <tk/tkernel.h>
  22:../lib/libtk/fastlock.c **** 
  23:../lib/libtk/fastlock.c **** #if USE_FAST_LOCK
  24:../lib/libtk/fastlock.c **** /* ------------------------------------------------------------------------ */
  25:../lib/libtk/fastlock.c **** /*
  26:../lib/libtk/fastlock.c ****  *	Inc	Increment cnt, in result if cnt >  0, returns positive value.
  27:../lib/libtk/fastlock.c ****  *		If cnt <= 0, returns 0 or negative value.
  28:../lib/libtk/fastlock.c ****  *	Dec	Decrement cnt, in result if cnt >= 0, returns positive value.
  29:../lib/libtk/fastlock.c ****  *		If cnt <  0, returns 0 or negative value. 
  30:../lib/libtk/fastlock.c ****  *	Increment/Decrement and evaluation of the associated result must
  31:../lib/libtk/fastlock.c ****  *	be executed exclusively.
  32:../lib/libtk/fastlock.c ****  */
  33:../lib/libtk/fastlock.c **** 
  34:../lib/libtk/fastlock.c **** Inline INT Inc( FastLock *lock )
  35:../lib/libtk/fastlock.c **** {
   8                             		.loc 1 35 1
   9 0000 7E AA                   		push.l	r10
  10                             	.LCFI0:
  11 0002 71 0A F4                		add	#-12, r0, r10
  12                             	.LCFI1:
  13 0005 EF A0                   		mov.L	r10, r0
  14 0007 E7 A1 02                		mov.L	r1, 8[r10]
  36:../lib/libtk/fastlock.c **** 	UINT	imask;
  37:../lib/libtk/fastlock.c **** 	INT	c;
  38:../lib/libtk/fastlock.c **** 	DI(imask);
  15                             		.loc 1 38 2
  16 000a 05 00 00 00             		bsr	_disint
  17 000e E3 A1                   		mov.L	r1, [r10]
  39:../lib/libtk/fastlock.c **** 	c = ++lock->cnt;
  18                             		.loc 1 39 12
  19 0010 ED A5 02                		mov.L	8[r10], r5
  20 0013 EC 55                   		mov.L	[r5], r5
  21                             		.loc 1 39 6
  22 0015 71 54 01                		add	#1, r5, r4
  23                             		.loc 1 39 4
  24 0018 ED A5 02                		mov.L	8[r10], r5
  25 001b E3 54                   		mov.L	r4, [r5]
  26 001d ED A5 02                		mov.L	8[r10], r5
  27 0020 EC 55                   		mov.L	[r5], r5
  28 0022 E7 A5 01                		mov.L	r5, 4[r10]
  40:../lib/libtk/fastlock.c **** 	EI(imask);
  29                             		.loc 1 40 2
  30 0025 EC A1                   		mov.L	[r10], r1
  31 0027 05 00 00 00             		bsr	_setint
  41:../lib/libtk/fastlock.c **** 	return c;
  32                             		.loc 1 41 9
  33 002b ED A5 01                		mov.L	4[r10], r5
  42:../lib/libtk/fastlock.c **** }
  34                             		.loc 1 42 1
  35 002e EF 51                   		mov.L	r5, r1
  36 0030 3F AA 04                		rtsd	#16, r10-r10
  37                             	.LFE6:
  40                             	_Dec:
  41                             	.LFB7:
  43:../lib/libtk/fastlock.c **** Inline INT Dec( FastLock *lock )
  44:../lib/libtk/fastlock.c **** {
  42                             		.loc 1 44 1
  43 0033 7E AA                   		push.l	r10
  44                             	.LCFI2:
  45 0035 71 0A F4                		add	#-12, r0, r10
  46                             	.LCFI3:
  47 0038 EF A0                   		mov.L	r10, r0
  48 003a E7 A1 02                		mov.L	r1, 8[r10]
  45:../lib/libtk/fastlock.c **** 	UINT	imask;
  46:../lib/libtk/fastlock.c **** 	INT	c;
  47:../lib/libtk/fastlock.c **** 	DI(imask);
  49                             		.loc 1 47 2
  50 003d 05 00 00 00             		bsr	_disint
  51 0041 E3 A1                   		mov.L	r1, [r10]
  48:../lib/libtk/fastlock.c **** 	c = lock->cnt--;
  52                             		.loc 1 48 10
  53 0043 ED A5 02                		mov.L	8[r10], r5
  54 0046 EC 55                   		mov.L	[r5], r5
  55                             		.loc 1 48 15
  56 0048 71 53 FF                		add	#-1, r5, r3
  57 004b ED A4 02                		mov.L	8[r10], r4
  58 004e E3 43                   		mov.L	r3, [r4]
  59                             		.loc 1 48 4
  60 0050 E7 A5 01                		mov.L	r5, 4[r10]
  49:../lib/libtk/fastlock.c **** 	EI(imask);
  61                             		.loc 1 49 2
  62 0053 EC A1                   		mov.L	[r10], r1
  63 0055 05 00 00 00             		bsr	_setint
  50:../lib/libtk/fastlock.c **** 	return c;
  64                             		.loc 1 50 9
  65 0059 ED A5 01                		mov.L	4[r10], r5
  51:../lib/libtk/fastlock.c **** }
  66                             		.loc 1 51 1
  67 005c EF 51                   		mov.L	r5, r1
  68 005e 3F AA 04                		rtsd	#16, r10-r10
  69                             	.LFE7:
  71                             		.global	_Lock
  73                             	_Lock:
  74                             	.LFB8:
  52:../lib/libtk/fastlock.c **** 
  53:../lib/libtk/fastlock.c **** /*
  54:../lib/libtk/fastlock.c ****  * Lock 
  55:../lib/libtk/fastlock.c ****  */
  56:../lib/libtk/fastlock.c **** EXPORT void Lock( FastLock *lock )
  57:../lib/libtk/fastlock.c **** {
  75                             		.loc 1 57 1
  76 0061 7E AA                   		push.l	r10
  77                             	.LCFI4:
  78 0063 71 0A FC                		add	#-4, r0, r10
  79                             	.LCFI5:
  80 0066 EF A0                   		mov.L	r10, r0
  81 0068 E3 A1                   		mov.L	r1, [r10]
  58:../lib/libtk/fastlock.c **** 	if ( Inc(lock) > 0 ) {
  82                             		.loc 1 58 7
  83 006a EC A1                   		mov.L	[r10], r1
  84 006c 39 94 FF                		bsr	_Inc
  85 006f EF 15                   		mov.L	r1, r5
  86                             		.loc 1 58 5
  87 0071 61 05                   		cmp	#0, r5
  88 0073 2B 11                   		ble	.L7
  59:../lib/libtk/fastlock.c **** 		tk_wai_sem(lock->id, 1, TMO_FEVR);
  89                             		.loc 1 59 3
  90 0075 EC A5                   		mov.L	[r10], r5
  91 0077 A8 5D                   		mov.L	4[r5], r5
  92 0079 FB 36 FF                		mov.L	#-1, r3
  93 007c 66 12                   		mov.L	#1, r2
  94 007e EF 51                   		mov.L	r5, r1
  95 0080 05 00 00 00             		bsr	_tk_wai_sem
  96                             	.L7:
  60:../lib/libtk/fastlock.c **** 	}
  61:../lib/libtk/fastlock.c **** }
  97                             		.loc 1 61 1
  98 0084 03                      		nop
  99 0085 3F AA 02                		rtsd	#8, r10-r10
 100                             	.LFE8:
 102                             		.global	_Unlock
 104                             	_Unlock:
 105                             	.LFB9:
  62:../lib/libtk/fastlock.c **** 
  63:../lib/libtk/fastlock.c **** /*
  64:../lib/libtk/fastlock.c ****  * Lock release
  65:../lib/libtk/fastlock.c ****  */
  66:../lib/libtk/fastlock.c **** EXPORT void Unlock( FastLock *lock )
  67:../lib/libtk/fastlock.c **** {
 106                             		.loc 1 67 1
 107 0088 7E AA                   		push.l	r10
 108                             	.LCFI6:
 109 008a 71 0A FC                		add	#-4, r0, r10
 110                             	.LCFI7:
 111 008d EF A0                   		mov.L	r10, r0
 112 008f E3 A1                   		mov.L	r1, [r10]
  68:../lib/libtk/fastlock.c **** 	if ( Dec(lock) > 0 ) {
 113                             		.loc 1 68 7
 114 0091 EC A1                   		mov.L	[r10], r1
 115 0093 39 A0 FF                		bsr	_Dec
 116 0096 EF 15                   		mov.L	r1, r5
 117                             		.loc 1 68 5
 118 0098 61 05                   		cmp	#0, r5
 119 009a 2B 0E                   		ble	.L10
  69:../lib/libtk/fastlock.c **** 		tk_sig_sem(lock->id, 1);
 120                             		.loc 1 69 3
 121 009c EC A5                   		mov.L	[r10], r5
 122 009e A8 5D                   		mov.L	4[r5], r5
 123 00a0 66 12                   		mov.L	#1, r2
 124 00a2 EF 51                   		mov.L	r5, r1
 125 00a4 05 00 00 00             		bsr	_tk_sig_sem
 126                             	.L10:
  70:../lib/libtk/fastlock.c **** 	}
  71:../lib/libtk/fastlock.c **** }
 127                             		.loc 1 71 1
 128 00a8 03                      		nop
 129 00a9 3F AA 02                		rtsd	#8, r10-r10
 130                             	.LFE9:
 132                             		.section C,"a",@progbits
 133                             		.p2align 2
 134                             	.LC0:
 135 0000 46 4C 4F 43 00          		.string	"FLOC"
 136 0005 00 00 00                		.section P,"ax"
 137                             		.global	_CreateLock
 139                             	_CreateLock:
 140                             	.LFB10:
  72:../lib/libtk/fastlock.c **** 
  73:../lib/libtk/fastlock.c **** /*
  74:../lib/libtk/fastlock.c ****  * Create high-speed lock 
  75:../lib/libtk/fastlock.c ****  */
  76:../lib/libtk/fastlock.c **** EXPORT ER CreateLock( FastLock *lock, CONST UB *name )
  77:../lib/libtk/fastlock.c **** {
 141                             		.loc 1 77 1
 142 00ac 7E AA                   		push.l	r10
 143                             	.LCFI8:
 144 00ae 71 0A D8                		add	#-40, r0, r10
 145                             	.LCFI9:
 146 00b1 EF A0                   		mov.L	r10, r0
 147 00b3 E7 A1 08                		mov.L	r1, 32[r10]
 148 00b6 E7 A2 09                		mov.L	r2, 36[r10]
  78:../lib/libtk/fastlock.c **** 	T_CSEM	csem;
  79:../lib/libtk/fastlock.c **** 	ER	ercd;
  80:../lib/libtk/fastlock.c **** 
  81:../lib/libtk/fastlock.c **** 	csem.sematr  = TA_TPRI;
 149                             		.loc 1 81 15
 150 00b9 F9 A6 05 01             		mov.L	#1, 20[r10]
  82:../lib/libtk/fastlock.c **** 	csem.isemcnt = 0;
 151                             		.loc 1 82 15
 152 00bd F9 A6 06 00             		mov.L	#0, 24[r10]
  83:../lib/libtk/fastlock.c **** 	csem.maxsem  = 1;
 153                             		.loc 1 83 15
 154 00c1 F9 A6 07 01             		mov.L	#1, 28[r10]
 155                             	.LBB2:
  84:../lib/libtk/fastlock.c **** 	SetOBJNAME(csem.exinf, "FLOC");
 156                             		.loc 1 84 2
 157 00c5 71 A5 10                		add	#16, r10, r5
 158 00c8 E3 A5                   		mov.L	r5, [r10]
 159 00ca F9 A2 01 00 00 00 00    		mov.L	#.LC0, 4[r10]
 160 00d1 F9 A6 02 00             		mov.L	#0, 8[r10]
 161 00d5 2E 1E                   		bra	.L12
 162                             	.L13:
 163                             		.loc 1 84 2 is_stmt 0 discriminator 3
 164 00d7 ED A4 01                		mov.L	4[r10], r4
 165 00da 71 45 01                		add	#1, r4, r5
 166 00dd E7 A5 01                		mov.L	r5, 4[r10]
 167 00e0 EC A5                   		mov.L	[r10], r5
 168 00e2 71 53 01                		add	#1, r5, r3
 169 00e5 E3 A3                   		mov.L	r3, [r10]
 170 00e7 CC 44                   		mov.B	[r4], r4
 171 00e9 C3 54                   		mov.B	r4, [r5]
 172 00eb ED A5 02                		mov.L	8[r10], r5
 173 00ee 62 15                   		add	#1, r5
 174 00f0 E7 A5 02                		mov.L	r5, 8[r10]
 175                             	.L12:
 176                             		.loc 1 84 2 discriminator 1
 177 00f3 ED A5 02                		mov.L	8[r10], r5
 178 00f6 61 35                   		cmp	#3, r5
 179 00f8 2B DF                   		ble	.L13
 180                             	.LBE2:
  85:../lib/libtk/fastlock.c **** 
  86:../lib/libtk/fastlock.c **** 	ercd = tk_cre_sem(&csem);
 181                             		.loc 1 86 9 is_stmt 1
 182 00fa 71 A5 10                		add	#16, r10, r5
 183 00fd EF 51                   		mov.L	r5, r1
 184 00ff 05 00 00 00             		bsr	_tk_cre_sem
 185 0103 E7 A1 03                		mov.L	r1, 12[r10]
  87:../lib/libtk/fastlock.c **** 	if ( ercd < E_OK ) {
 186                             		.loc 1 87 5
 187 0106 ED A5 03                		mov.L	12[r10], r5
 188 0109 61 05                   		cmp	#0, r5
 189 010b 28 07                   		bge	.L14
  88:../lib/libtk/fastlock.c **** 		return ercd;
 190                             		.loc 1 88 10
 191 010d ED A5 03                		mov.L	12[r10], r5
 192 0110 2E 1A                   		bra	.L16
 193                             	.L14:
  89:../lib/libtk/fastlock.c **** 	}
  90:../lib/libtk/fastlock.c **** 
  91:../lib/libtk/fastlock.c **** 	lock->id = ercd;
 194                             		.loc 1 91 11
 195 0112 ED A5 08                		mov.L	32[r10], r5
 196 0115 ED A4 03                		mov.L	12[r10], r4
 197 0118 A0 5C                   		mov.L	r4, 4[r5]
  92:../lib/libtk/fastlock.c **** 	lock->cnt = -1;
 198                             		.loc 1 92 12
 199 011a ED A5 08                		mov.L	32[r10], r5
 200 011d F8 56 FF                		mov.L	#-1, [r5]
  93:../lib/libtk/fastlock.c **** 	lock->name = name;
 201                             		.loc 1 93 13
 202 0120 ED A5 08                		mov.L	32[r10], r5
 203 0123 ED A4 09                		mov.L	36[r10], r4
 204 0126 A0 D4                   		mov.L	r4, 8[r5]
  94:../lib/libtk/fastlock.c ****   
  95:../lib/libtk/fastlock.c **** 	return E_OK;
 205                             		.loc 1 95 9
 206 0128 66 05                   		mov.L	#0, r5
 207                             	.L16:
  96:../lib/libtk/fastlock.c **** }
 208                             		.loc 1 96 1 discriminator 1
 209 012a EF 51                   		mov.L	r5, r1
 210 012c 3F AA 0B                		rtsd	#44, r10-r10
 211                             	.LFE10:
 213                             		.global	_DeleteLock
 215                             	_DeleteLock:
 216                             	.LFB11:
  97:../lib/libtk/fastlock.c **** 
  98:../lib/libtk/fastlock.c **** /*
  99:../lib/libtk/fastlock.c ****  * Delete high-speed lock
 100:../lib/libtk/fastlock.c ****  */
 101:../lib/libtk/fastlock.c **** EXPORT void DeleteLock( FastLock *lock )
 102:../lib/libtk/fastlock.c **** {
 217                             		.loc 1 102 1
 218 012f 7E AA                   		push.l	r10
 219                             	.LCFI10:
 220 0131 71 0A FC                		add	#-4, r0, r10
 221                             	.LCFI11:
 222 0134 EF A0                   		mov.L	r10, r0
 223 0136 E3 A1                   		mov.L	r1, [r10]
 103:../lib/libtk/fastlock.c **** 	if ( lock->id > 0 ) {
 224                             		.loc 1 103 11
 225 0138 EC A5                   		mov.L	[r10], r5
 226 013a A8 5D                   		mov.L	4[r5], r5
 227                             		.loc 1 103 5
 228 013c 61 05                   		cmp	#0, r5
 229 013e 2B 0C                   		ble	.L18
 104:../lib/libtk/fastlock.c **** 		tk_del_sem(lock->id);
 230                             		.loc 1 104 3
 231 0140 EC A5                   		mov.L	[r10], r5
 232 0142 A8 5D                   		mov.L	4[r5], r5
 233 0144 EF 51                   		mov.L	r5, r1
 234 0146 05 00 00 00             		bsr	_tk_del_sem
 235                             	.L18:
 105:../lib/libtk/fastlock.c **** 	}
 106:../lib/libtk/fastlock.c **** 	lock->id = 0;
 236                             		.loc 1 106 11
 237 014a EC A5                   		mov.L	[r10], r5
 238 014c 3E 51 00                		mov.L	#0, 4[r5]
 107:../lib/libtk/fastlock.c **** }
 239                             		.loc 1 107 1
 240 014f 03                      		nop
 241 0150 3F AA 02                		rtsd	#8, r10-r10
 242                             	.LFE11:
 376                             	.Letext0:
 377                             		.file 2 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\include/tk/typedef.h"
 378                             		.file 3 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\include/tk/syscall.h"
 379                             		.file 4 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\include/tk/syslib.h"
