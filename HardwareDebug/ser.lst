   1                             		.file	"ser.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   5                             	_buff_init:
   6                             	.LFB6:
   7                             		.file 1 "../device/ser/ser.h"
   1:../device/ser/ser.h **** ﻿/*
   2:../device/ser/ser.h ****  *----------------------------------------------------------------------
   3:../device/ser/ser.h ****  *    Device Driver for μT-Kernel 3.0
   4:../device/ser/ser.h ****  *
   5:../device/ser/ser.h ****  *    Copyright (C) 2020-2022 by Ken Sakamura.
   6:../device/ser/ser.h ****  *    This software is distributed under the T-License 2.2.
   7:../device/ser/ser.h ****  *----------------------------------------------------------------------
   8:../device/ser/ser.h ****  *
   9:../device/ser/ser.h ****  *    Released by TRON Forum(http://www.tron.org) at 2022/02.
  10:../device/ser/ser.h ****  *
  11:../device/ser/ser.h ****  *----------------------------------------------------------------------
  12:../device/ser/ser.h ****  */
  13:../device/ser/ser.h **** 
  14:../device/ser/ser.h **** /*
  15:../device/ser/ser.h ****  *	dev_ser.h
  16:../device/ser/ser.h ****  *	Serial communication device driver
  17:../device/ser/ser.h ****  *	Driver local definition
  18:../device/ser/ser.h ****  */
  19:../device/ser/ser.h **** 
  20:../device/ser/ser.h **** #ifndef	__DEV_SER_H__
  21:../device/ser/ser.h **** #define	__DEV_SER_H__
  22:../device/ser/ser.h **** 
  23:../device/ser/ser.h **** #include "../include/dev_ser.h"
  24:../device/ser/ser.h **** #include "../common/drvif/msdrvif.h"
  25:../device/ser/ser.h **** #include "ser_cnf.h"
  26:../device/ser/ser.h **** 
  27:../device/ser/ser.h **** /*----------------------------------------------------------------------*/
  28:../device/ser/ser.h **** /* Hardware dependent definition
  29:../device/ser/ser.h ****  */
  30:../device/ser/ser.h **** #define DEVDEF_SER_PATH_(a)	#a
  31:../device/ser/ser.h **** #define DEVDEF_SER_PATH(a)	DEVDEF_SER_PATH_(a)
  32:../device/ser/ser.h **** #define DEVDEF_SER_SYSDEP()	DEVDEF_SER_PATH(sysdepend/TARGET_CPU_DIR/ser_sysdep.h)
  33:../device/ser/ser.h **** #include DEVDEF_SER_SYSDEP()
  34:../device/ser/ser.h **** 
  35:../device/ser/ser.h **** /*----------------------------------------------------------------------
  36:../device/ser/ser.h ****  * Communication data buffer
  37:../device/ser/ser.h ****  */
  38:../device/ser/ser.h **** typedef struct {
  39:../device/ser/ser.h **** 	UW	top;
  40:../device/ser/ser.h **** 	UW	tail;
  41:../device/ser/ser.h **** 	ID	wait_tskid;
  42:../device/ser/ser.h **** 	UB	data[DEVCONF_SER_BUFFSIZE];
  43:../device/ser/ser.h **** } T_SER_BUFF;
  44:../device/ser/ser.h **** 
  45:../device/ser/ser.h **** Inline	void buff_init(T_SER_BUFF *buff)
  46:../device/ser/ser.h **** {
   8                             		.loc 1 46 1
   9 0000 7E AA                   		push.l	r10
  10                             	.LCFI0:
  11 0002 71 0A FC                		add	#-4, r0, r10
  12                             	.LCFI1:
  13 0005 EF A0                   		mov.L	r10, r0
  14 0007 E3 A1                   		mov.L	r1, [r10]
  47:../device/ser/ser.h **** 	buff->top = buff->tail = buff->wait_tskid = 0;
  15                             		.loc 1 47 44
  16 0009 EC A5                   		mov.L	[r10], r5
  17 000b 3E 52 00                		mov.L	#0, 8[r5]
  18                             		.loc 1 47 25
  19 000e EC A5                   		mov.L	[r10], r5
  20 0010 3E 51 00                		mov.L	#0, 4[r5]
  21                             		.loc 1 47 18
  22 0013 EC A5                   		mov.L	[r10], r5
  23 0015 A8 5C                   		mov.L	4[r5], r4
  24                             		.loc 1 47 12
  25 0017 EC A5                   		mov.L	[r10], r5
  26 0019 E3 54                   		mov.L	r4, [r5]
  48:../device/ser/ser.h **** }
  27                             		.loc 1 48 1
  28 001b 03                      		nop
  29 001c 3F AA 02                		rtsd	#8, r10-r10
  30                             	.LFE6:
  32                             		.local	_dev_ser_cb
  33                             		.comm	_dev_ser_cb,52,4
  34                             		.global	_dev_ser_get_snddat
  36                             	_dev_ser_get_snddat:
  37                             	.LFB7:
  38                             		.file 2 "../device/ser/ser.c"
   1:../device/ser/ser.c **** ﻿/*
   2:../device/ser/ser.c ****  *----------------------------------------------------------------------
   3:../device/ser/ser.c ****  *    Device Driver for μT-Kernel 3.0
   4:../device/ser/ser.c ****  *
   5:../device/ser/ser.c ****  *    Copyright (C) 2020-2022 by Ken Sakamura.
   6:../device/ser/ser.c ****  *    This software is distributed under the T-License 2.2.
   7:../device/ser/ser.c ****  *----------------------------------------------------------------------
   8:../device/ser/ser.c ****  *
   9:../device/ser/ser.c ****  *    Released by TRON Forum(http://www.tron.org) at 2022/02.
  10:../device/ser/ser.c ****  *
  11:../device/ser/ser.c ****  *----------------------------------------------------------------------
  12:../device/ser/ser.c ****  */
  13:../device/ser/ser.c **** #include <sys/machine.h>
  14:../device/ser/ser.c **** #include <tk/tkernel.h>
  15:../device/ser/ser.c **** #include <tstdlib.h>
  16:../device/ser/ser.c **** 
  17:../device/ser/ser.c **** #include "ser.h"
  18:../device/ser/ser.c **** #include "../include/dev_def.h"
  19:../device/ser/ser.c **** #if DEV_SER_ENABLE
  20:../device/ser/ser.c **** /*
  21:../device/ser/ser.c ****  *	ser.c
  22:../device/ser/ser.c ****  *	Serial communication driver
  23:../device/ser/ser.c **** */
  24:../device/ser/ser.c **** 
  25:../device/ser/ser.c **** /*----------------------------------------------------------------------*/
  26:../device/ser/ser.c **** /* Serial Device driver Control block
  27:../device/ser/ser.c ****  */
  28:../device/ser/ser.c **** #if TK_SUPPORT_MEMLIB
  29:../device/ser/ser.c **** 
  30:../device/ser/ser.c **** LOCAL T_SER_DCB	*dev_ser_cb[DEV_SER_UNITNM];
  31:../device/ser/ser.c **** #define		get_dcb_mem(unit,a)	(dev_ser_cb[unit]->a)
  32:../device/ser/ser.c **** 
  33:../device/ser/ser.c **** #else
  34:../device/ser/ser.c **** 
  35:../device/ser/ser.c **** LOCAL T_SER_DCB	dev_ser_cb[DEV_SER_UNITNM];
  36:../device/ser/ser.c **** #define		get_dcb_mem(unit,a)	(dev_ser_cb[unit].a)
  37:../device/ser/ser.c **** 
  38:../device/ser/ser.c **** #endif
  39:../device/ser/ser.c **** 
  40:../device/ser/ser.c **** /*----------------------------------------------------------------------*/
  41:../device/ser/ser.c **** /* Serial device driver low-level interface
  42:../device/ser/ser.c ****  *
  43:../device/ser/ser.c ****  *	Called from a low level interrupt handler.
  44:../device/ser/ser.c ****  */
  45:../device/ser/ser.c **** EXPORT BOOL dev_ser_get_snddat(UW unit, UW *data)
  46:../device/ser/ser.c **** {
  39                             		.loc 2 46 1
  40 001f 7E AA                   		push.l	r10
  41                             	.LCFI2:
  42 0021 71 0A F4                		add	#-12, r0, r10
  43                             	.LCFI3:
  44 0024 EF A0                   		mov.L	r10, r0
  45 0026 E7 A1 01                		mov.L	r1, 4[r10]
  46 0029 E7 A2 02                		mov.L	r2, 8[r10]
  47:../device/ser/ser.c **** 	T_SER_BUFF	*p_buff;
  48:../device/ser/ser.c **** 
  49:../device/ser/ser.c **** 	p_buff = &get_dcb_mem(unit, snd_buff);
  47                             		.loc 2 49 12
  48 002c FB 52 00 00 00 00       		mov.L	#_dev_ser_cb, r5
  49 0032 ED A4 01                		mov.L	4[r10], r4
  50 0035 FE 64 55                		mov.L	[r4,r5], r5
  51                             		.loc 2 49 9
  52 0038 71 55 2C                		add	#44, r5
  53 003b E3 A5                   		mov.L	r5, [r10]
  50:../device/ser/ser.c **** 	if(p_buff->top != p_buff->tail) {
  54                             		.loc 2 50 11
  55 003d EC A5                   		mov.L	[r10], r5
  56 003f EC 54                   		mov.L	[r5], r4
  57                             		.loc 2 50 26
  58 0041 EC A5                   		mov.L	[r10], r5
  59 0043 A8 5D                   		mov.L	4[r5], r5
  60                             		.loc 2 50 4
  61 0045 47 54                   		cmp	r5, r4
  62 0047 20 46                   		beq	.L3
  51:../device/ser/ser.c **** 		*data = p_buff->data[p_buff->tail];
  63                             		.loc 2 51 30
  64 0049 EC A5                   		mov.L	[r10], r5
  65 004b A8 5D                   		mov.L	4[r5], r5
  66                             		.loc 2 51 23
  67 004d EC A4                   		mov.L	[r10], r4
  68 004f 4B 45                   		add	r4, r5
  69 0051 8B 55                   		mov.B	12[r5], r5
  70 0053 5B 54                   		movu.B	r5, r4
  71                             		.loc 2 51 9
  72 0055 ED A5 02                		mov.L	8[r10], r5
  73 0058 E3 54                   		mov.L	r4, [r5]
  52:../device/ser/ser.c **** 		if(++p_buff->tail >= DEVCONF_SER_BUFFSIZE) p_buff->tail = 0;
  74                             		.loc 2 52 14
  75 005a EC A5                   		mov.L	[r10], r5
  76 005c A8 5D                   		mov.L	4[r5], r5
  77                             		.loc 2 52 6
  78 005e 71 54 01                		add	#1, r5, r4
  79                             		.loc 2 52 5
  80 0061 EC A5                   		mov.L	[r10], r5
  81 0063 A0 5C                   		mov.L	r4, 4[r5]
  82                             		.loc 2 52 14
  83 0065 EC A5                   		mov.L	[r10], r5
  84 0067 A8 5D                   		mov.L	4[r5], r5
  85                             		.loc 2 52 5
  86 0069 75 55 31                		cmp	#49, r5
  87 006c 25 07                   		bleu	.L4
  88                             		.loc 2 52 59 discriminator 1
  89 006e EC A5                   		mov.L	[r10], r5
  90 0070 3E 51 00                		mov.L	#0, 4[r5]
  91                             	.L4:
  53:../device/ser/ser.c **** 
  54:../device/ser/ser.c **** 		if(p_buff->wait_tskid) {
  92                             		.loc 2 54 12
  93 0073 EC A5                   		mov.L	[r10], r5
  94 0075 A8 D5                   		mov.L	8[r5], r5
  95                             		.loc 2 54 5
  96 0077 61 05                   		cmp	#0, r5
  97 0079 20 11                   		beq	.L5
  55:../device/ser/ser.c **** 			tk_wup_tsk( p_buff->wait_tskid);
  98                             		.loc 2 55 4
  99 007b EC A5                   		mov.L	[r10], r5
 100 007d A8 D5                   		mov.L	8[r5], r5
 101 007f EF 51                   		mov.L	r5, r1
 102 0081 05 00 00 00             		bsr	_tk_wup_tsk
  56:../device/ser/ser.c **** 			p_buff->wait_tskid = 0;
 103                             		.loc 2 56 23
 104 0085 EC A5                   		mov.L	[r10], r5
 105 0087 3E 52 00                		mov.L	#0, 8[r5]
 106                             	.L5:
  57:../device/ser/ser.c **** 		}
  58:../device/ser/ser.c **** 		return TRUE;
 107                             		.loc 2 58 10
 108 008a 66 15                   		mov.L	#1, r5
 109 008c 0B                      		bra	.L6
 110                             	.L3:
  59:../device/ser/ser.c **** 	} else {
  60:../device/ser/ser.c **** 		return FALSE;
 111                             		.loc 2 60 10
 112 008d 66 05                   		mov.L	#0, r5
 113                             	.L6:
  61:../device/ser/ser.c **** 	}
  62:../device/ser/ser.c **** }
 114                             		.loc 2 62 1
 115 008f EF 51                   		mov.L	r5, r1
 116 0091 3F AA 04                		rtsd	#16, r10-r10
 117                             	.LFE7:
 119                             		.global	_dev_ser_notify_rcv
 121                             	_dev_ser_notify_rcv:
 122                             	.LFB8:
  63:../device/ser/ser.c **** 
  64:../device/ser/ser.c **** EXPORT void dev_ser_notify_rcv(UW unit, UW data)
  65:../device/ser/ser.c **** {
 123                             		.loc 2 65 1
 124 0094 7E AA                   		push.l	r10
 125                             	.LCFI4:
 126 0096 71 0A F0                		add	#-16, r0, r10
 127                             	.LCFI5:
 128 0099 EF A0                   		mov.L	r10, r0
 129 009b E7 A1 02                		mov.L	r1, 8[r10]
 130 009e E7 A2 03                		mov.L	r2, 12[r10]
  66:../device/ser/ser.c **** 	T_SER_BUFF	*p_buff;
  67:../device/ser/ser.c **** 	INT		next;
  68:../device/ser/ser.c **** 
  69:../device/ser/ser.c **** 	p_buff = &get_dcb_mem( unit, rcv_buff);
 131                             		.loc 2 69 12
 132 00a1 FB 52 00 00 00 00       		mov.L	#_dev_ser_cb, r5
 133 00a7 ED A4 02                		mov.L	8[r10], r4
 134 00aa FE 64 55                		mov.L	[r4,r5], r5
 135                             		.loc 2 69 9
 136 00ad 71 55 6C                		add	#0x6c, r5
 137 00b0 E7 A5 01                		mov.L	r5, 4[r10]
  70:../device/ser/ser.c **** 	next = p_buff->top + 1;
 138                             		.loc 2 70 15
 139 00b3 ED A5 01                		mov.L	4[r10], r5
 140 00b6 EC 55                   		mov.L	[r5], r5
 141                             		.loc 2 70 21
 142 00b8 62 15                   		add	#1, r5
 143                             		.loc 2 70 7
 144 00ba E3 A5                   		mov.L	r5, [r10]
  71:../device/ser/ser.c **** 	if(next >= DEVCONF_SER_BUFFSIZE) next = 0;
 145                             		.loc 2 71 4
 146 00bc EC A5                   		mov.L	[r10], r5
 147 00be 75 55 31                		cmp	#49, r5
 148 00c1 2B 05                   		ble	.L8
 149                             		.loc 2 71 40 discriminator 1
 150 00c3 F8 A6 00                		mov.L	#0, [r10]
 151                             	.L8:
  72:../device/ser/ser.c **** 	if(next != p_buff->tail) {
 152                             		.loc 2 72 19
 153 00c6 ED A5 01                		mov.L	4[r10], r5
 154 00c9 A8 5C                   		mov.L	4[r5], r4
 155                             		.loc 2 72 10
 156 00cb EC A5                   		mov.L	[r10], r5
 157                             		.loc 2 72 4
 158 00cd 47 54                   		cmp	r5, r4
 159 00cf 20 1C                   		beq	.L9
  73:../device/ser/ser.c **** 		p_buff->data[p_buff->top] = data;
 160                             		.loc 2 73 22
 161 00d1 ED A5 01                		mov.L	4[r10], r5
 162 00d4 EC 55                   		mov.L	[r5], r5
 163                             		.loc 2 73 29
 164 00d6 ED A4 03                		mov.L	12[r10], r4
 165 00d9 CF 43                   		mov.B	r4, r3
 166 00db ED A4 01                		mov.L	4[r10], r4
 167 00de 4B 45                   		add	r4, r5
 168 00e0 83 53                   		mov.B	r3, 12[r5]
  74:../device/ser/ser.c **** 		p_buff->top = next;
 169                             		.loc 2 74 15
 170 00e2 EC A4                   		mov.L	[r10], r4
 171 00e4 ED A5 01                		mov.L	4[r10], r5
 172 00e7 E3 54                   		mov.L	r4, [r5]
 173 00e9 2E 0C                   		bra	.L10
 174                             	.L9:
  75:../device/ser/ser.c **** 	} else {	
  76:../device/ser/ser.c **** 		dev_ser_notify_err( unit, DEV_SER_ERR_ROVR);	/* Buffer over flow */
 175                             		.loc 2 76 3
 176 00eb 75 42 80                		mov.L	#0x80, r2
 177 00ee ED A1 02                		mov.L	8[r10], r1
 178 00f1 05 00 00 00             		bsr	_dev_ser_notify_err
 179                             	.L10:
  77:../device/ser/ser.c **** 	}
  78:../device/ser/ser.c **** 
  79:../device/ser/ser.c **** 	if(p_buff->wait_tskid) {
 180                             		.loc 2 79 11
 181 00f5 ED A5 01                		mov.L	4[r10], r5
 182 00f8 A8 D5                   		mov.L	8[r5], r5
 183                             		.loc 2 79 4
 184 00fa 61 05                   		cmp	#0, r5
 185 00fc 20 13                   		beq	.L12
  80:../device/ser/ser.c **** 		tk_wup_tsk( p_buff->wait_tskid);
 186                             		.loc 2 80 3
 187 00fe ED A5 01                		mov.L	4[r10], r5
 188 0101 A8 D5                   		mov.L	8[r5], r5
 189 0103 EF 51                   		mov.L	r5, r1
 190 0105 05 00 00 00             		bsr	_tk_wup_tsk
  81:../device/ser/ser.c **** 		p_buff->wait_tskid = 0;
 191                             		.loc 2 81 22
 192 0109 ED A5 01                		mov.L	4[r10], r5
 193 010c 3E 52 00                		mov.L	#0, 8[r5]
 194                             	.L12:
  82:../device/ser/ser.c **** 	}
  83:../device/ser/ser.c **** 
  84:../device/ser/ser.c **** }
 195                             		.loc 2 84 1
 196 010f 03                      		nop
 197 0110 3F AA 05                		rtsd	#20, r10-r10
 198                             	.LFE8:
 200                             		.global	_dev_ser_notify_err
 202                             	_dev_ser_notify_err:
 203                             	.LFB9:
  85:../device/ser/ser.c **** 
  86:../device/ser/ser.c **** EXPORT void dev_ser_notify_err(UW unit, UW err)
  87:../device/ser/ser.c **** {
 204                             		.loc 2 87 1
 205 0113 7E AA                   		push.l	r10
 206                             	.LCFI6:
 207 0115 71 0A F8                		add	#-8, r0, r10
 208                             	.LCFI7:
 209 0118 EF A0                   		mov.L	r10, r0
 210 011a E3 A1                   		mov.L	r1, [r10]
 211 011c E7 A2 01                		mov.L	r2, 4[r10]
  88:../device/ser/ser.c **** 	get_dcb_mem(unit, com_error) |= err;	
 212                             		.loc 2 88 2
 213 011f FB 52 00 00 00 00       		mov.L	#_dev_ser_cb, r5
 214 0125 EC A4                   		mov.L	[r10], r4
 215 0127 FE 64 55                		mov.L	[r4,r5], r5
 216                             		.loc 2 88 31
 217 012a A9 5B                   		mov.L	20[r5], r3
 218                             		.loc 2 88 2
 219 012c FB 52 00 00 00 00       		mov.L	#_dev_ser_cb, r5
 220 0132 EC A4                   		mov.L	[r10], r4
 221 0134 FE 64 55                		mov.L	[r4,r5], r5
 222                             		.loc 2 88 31
 223 0137 ED A4 01                		mov.L	4[r10], r4
 224 013a 57 34                   		or	r3, r4
 225 013c A1 5C                   		mov.L	r4, 20[r5]
  89:../device/ser/ser.c **** }
 226                             		.loc 2 89 1
 227 013e 03                      		nop
 228 013f 3F AA 03                		rtsd	#12, r10-r10
 229                             	.LFE9:
 232                             	_set_atr_size:
 233                             	.LFB10:
  90:../device/ser/ser.c **** 
  91:../device/ser/ser.c **** /*----------------------------------------------------------------------*/
  92:../device/ser/ser.c **** /* Attribute data control
  93:../device/ser/ser.c ****  */
  94:../device/ser/ser.c **** 
  95:../device/ser/ser.c **** LOCAL ER set_atr_size(T_DEVREQ *req)
  96:../device/ser/ser.c **** {
 234                             		.loc 2 96 1
 235 0142 7E AA                   		push.l	r10
 236                             	.LCFI8:
 237 0144 71 0A FC                		add	#-4, r0, r10
 238                             	.LCFI9:
 239 0147 EF A0                   		mov.L	r10, r0
 240 0149 E3 A1                   		mov.L	r1, [r10]
  97:../device/ser/ser.c **** 	switch(req->start) {
 241                             		.loc 2 97 12
 242 014b EC A5                   		mov.L	[r10], r5
 243 014d A9 55                   		mov.L	16[r5], r5
 244                             		.loc 2 97 2
 245 014f 75 05 9A                		cmp	#-102, r5
 246 0152 2A 0E                   		bgt	.L15
 247 0154 75 05 99                		cmp	#-103, r5
 248 0157 28 21                   		bge	.L16
 249 0159 75 05 98                		cmp	#-104, r5
 250 015c 20 15                   		beq	.L17
 251 015e 2E 20                   		bra	.L18
 252                             	.L15:
 253 0160 75 05 9C                		cmp	#-100, r5
 254 0163 2B 0E                   		ble	.L17
 255 0165 75 05 FF                		cmp	#-1, r5
 256 0168 21 16                   		bne	.L18
  98:../device/ser/ser.c **** 	case TDN_EVENT:			/* MBF ID for event notification */
  99:../device/ser/ser.c **** 		req->asize = sizeof(ID);
 257                             		.loc 2 99 14
 258 016a EC A5                   		mov.L	[r10], r5
 259 016c 3E 57 04                		mov.L	#4, 28[r5]
 100:../device/ser/ser.c **** 		break;
 260                             		.loc 2 100 3
 261 016f 2E 13                   		bra	.L19
 262                             	.L17:
 101:../device/ser/ser.c **** 	case TDN_SER_MODE:		/* Communication mode */
 102:../device/ser/ser.c **** 	case TDN_SER_SPEED:		/* Communication speed */
 103:../device/ser/ser.c **** 	case TDN_SER_COMERR:		/* Communication Error */
 104:../device/ser/ser.c **** 		req->asize = sizeof(UW);
 263                             		.loc 2 104 14
 264 0171 EC A5                   		mov.L	[r10], r5
 265 0173 3E 57 04                		mov.L	#4, 28[r5]
 105:../device/ser/ser.c **** 		break;
 266                             		.loc 2 105 3
 267 0176 2E 0C                   		bra	.L19
 268                             	.L16:
 106:../device/ser/ser.c **** 	case TDN_SER_SNDTMO:		/* Send timeout */
 107:../device/ser/ser.c **** 	case TDN_SER_RCVTMO:		/* Receive timeout */
 108:../device/ser/ser.c **** 		req->asize = sizeof(TMO);
 269                             		.loc 2 108 14
 270 0178 EC A5                   		mov.L	[r10], r5
 271 017a 3E 57 04                		mov.L	#4, 28[r5]
 109:../device/ser/ser.c **** 		break;
 272                             		.loc 2 109 3
 273 017d 0D                      		bra	.L19
 274                             	.L18:
 110:../device/ser/ser.c **** 	default:
 111:../device/ser/ser.c **** 		return E_PAR;
 275                             		.loc 2 111 10
 276 017e FB 56 EF                		mov.L	#-17, r5
 277 0181 0B                      		bra	.L20
 278                             	.L19:
 112:../device/ser/ser.c **** 	}
 113:../device/ser/ser.c **** 	return E_OK;
 279                             		.loc 2 113 9
 280 0182 66 05                   		mov.L	#0, r5
 281                             	.L20:
 114:../device/ser/ser.c **** }
 282                             		.loc 2 114 1
 283 0184 EF 51                   		mov.L	r5, r1
 284 0186 3F AA 02                		rtsd	#8, r10-r10
 285                             	.LFE10:
 288                             	_read_atr:
 289                             	.LFB11:
 115:../device/ser/ser.c **** 
 116:../device/ser/ser.c **** LOCAL ER read_atr(T_SER_DCB *p_dcb, T_DEVREQ *req)
 117:../device/ser/ser.c **** {
 290                             		.loc 2 117 1
 291 0189 7E AA                   		push.l	r10
 292                             	.LCFI10:
 293 018b 71 0A F0                		add	#-16, r0, r10
 294                             	.LCFI11:
 295 018e EF A0                   		mov.L	r10, r0
 296 0190 E7 A1 02                		mov.L	r1, 8[r10]
 297 0193 E7 A2 03                		mov.L	r2, 12[r10]
 118:../device/ser/ser.c **** 	UINT	imask;
 119:../device/ser/ser.c **** 	ER	err;
 120:../device/ser/ser.c **** 
 121:../device/ser/ser.c **** 	err = set_atr_size(req);
 298                             		.loc 2 121 8
 299 0196 ED A1 03                		mov.L	12[r10], r1
 300 0199 39 A9 FF                		bsr	_set_atr_size
 301 019c E3 A1                   		mov.L	r1, [r10]
 122:../device/ser/ser.c **** 	if(err != E_OK) return err;
 302                             		.loc 2 122 4
 303 019e EC A5                   		mov.L	[r10], r5
 304 01a0 61 05                   		cmp	#0, r5
 305 01a2 16                      		beq	.L22
 306                             		.loc 2 122 25 discriminator 1
 307 01a3 EC A5                   		mov.L	[r10], r5
 308 01a5 38 A6 00                		bra	.L23
 309                             	.L22:
 123:../device/ser/ser.c **** 
 124:../device/ser/ser.c **** 	if(req->size) {
 310                             		.loc 2 124 8
 311 01a8 ED A5 03                		mov.L	12[r10], r5
 312 01ab A9 5D                   		mov.L	20[r5], r5
 313                             		.loc 2 124 4
 314 01ad 61 05                   		cmp	#0, r5
 315 01af 3A 99 00                		beq	.L32
 125:../device/ser/ser.c **** 		switch(req->start) {
 316                             		.loc 2 125 13
 317 01b2 ED A5 03                		mov.L	12[r10], r5
 318 01b5 A9 55                   		mov.L	16[r5], r5
 319                             		.loc 2 125 3
 320 01b7 75 05 9A                		cmp	#-102, r5
 321 01ba 20 4C                   		beq	.L25
 322 01bc 75 05 9A                		cmp	#-102, r5
 323 01bf 2A 0E                   		bgt	.L26
 324 01c1 75 05 98                		cmp	#-104, r5
 325 01c4 20 5E                   		beq	.L27
 326 01c6 75 05 99                		cmp	#-103, r5
 327 01c9 20 4B                   		beq	.L28
 328 01cb 2E 78                   		bra	.L29
 329                             	.L26:
 330 01cd 75 05 9C                		cmp	#-100, r5
 331 01d0 20 1A                   		beq	.L30
 332 01d2 75 05 9C                		cmp	#-100, r5
 333 01d5 29 23                   		blt	.L31
 334 01d7 75 05 FF                		cmp	#-1, r5
 335 01da 21 69                   		bne	.L29
 126:../device/ser/ser.c **** 		case TDN_EVENT:			/* MBF ID for event notification */
 127:../device/ser/ser.c **** 			*(ID*)req->buf = p_dcb->evtmbfid;
 336                             		.loc 2 127 13
 337 01dc ED A5 03                		mov.L	12[r10], r5
 338 01df A9 D5                   		mov.L	24[r5], r5
 339                             		.loc 2 127 26
 340 01e1 ED A4 02                		mov.L	8[r10], r4
 341 01e4 A8 C4                   		mov.L	8[r4], r4
 342                             		.loc 2 127 19
 343 01e6 E3 54                   		mov.L	r4, [r5]
 128:../device/ser/ser.c **** 			break;
 344                             		.loc 2 128 4
 345 01e8 2E 61                   		bra	.L24
 346                             	.L30:
 129:../device/ser/ser.c **** 		case TDN_SER_MODE:		/* Communication mode */
 130:../device/ser/ser.c **** 			*(UW*)req->buf = p_dcb->com_mode;
 347                             		.loc 2 130 13
 348 01ea ED A5 03                		mov.L	12[r10], r5
 349 01ed A9 D5                   		mov.L	24[r5], r5
 350                             		.loc 2 130 26
 351 01ef ED A4 02                		mov.L	8[r10], r4
 352 01f2 A8 CC                   		mov.L	12[r4], r4
 353                             		.loc 2 130 19
 354 01f4 E3 54                   		mov.L	r4, [r5]
 131:../device/ser/ser.c **** 			break;
 355                             		.loc 2 131 4
 356 01f6 2E 53                   		bra	.L24
 357                             	.L31:
 132:../device/ser/ser.c **** 		case TDN_SER_SPEED:		/* Communication speed */
 133:../device/ser/ser.c **** 			*(UW*)req->buf = p_dcb->com_speed;
 358                             		.loc 2 133 13
 359 01f8 ED A5 03                		mov.L	12[r10], r5
 360 01fb A9 D5                   		mov.L	24[r5], r5
 361                             		.loc 2 133 26
 362 01fd ED A4 02                		mov.L	8[r10], r4
 363 0200 A9 44                   		mov.L	16[r4], r4
 364                             		.loc 2 133 19
 365 0202 E3 54                   		mov.L	r4, [r5]
 134:../device/ser/ser.c **** 			break;
 366                             		.loc 2 134 4
 367 0204 2E 45                   		bra	.L24
 368                             	.L25:
 135:../device/ser/ser.c **** 		case TDN_SER_SNDTMO:		/* Send timeout */
 136:../device/ser/ser.c **** 			*(TMO*)req->buf = p_dcb->snd_tmo;
 369                             		.loc 2 136 14
 370 0206 ED A5 03                		mov.L	12[r10], r5
 371 0209 A9 D5                   		mov.L	24[r5], r5
 372                             		.loc 2 136 27
 373 020b ED A4 02                		mov.L	8[r10], r4
 374 020e A9 C4                   		mov.L	24[r4], r4
 375                             		.loc 2 136 20
 376 0210 E3 54                   		mov.L	r4, [r5]
 137:../device/ser/ser.c **** 			break;
 377                             		.loc 2 137 4
 378 0212 2E 37                   		bra	.L24
 379                             	.L28:
 138:../device/ser/ser.c **** 		case TDN_SER_RCVTMO:		/* Receive timeout */
 139:../device/ser/ser.c **** 			*(TMO*)req->buf = p_dcb->rcv_tmo;
 380                             		.loc 2 139 14
 381 0214 ED A5 03                		mov.L	12[r10], r5
 382 0217 A9 D5                   		mov.L	24[r5], r5
 383                             		.loc 2 139 27
 384 0219 ED A4 02                		mov.L	8[r10], r4
 385 021c A9 CC                   		mov.L	28[r4], r4
 386                             		.loc 2 139 20
 387 021e E3 54                   		mov.L	r4, [r5]
 140:../device/ser/ser.c **** 			break;
 388                             		.loc 2 140 4
 389 0220 2E 29                   		bra	.L24
 390                             	.L27:
 141:../device/ser/ser.c **** 		case TDN_SER_COMERR:		/* Communication Error */
 142:../device/ser/ser.c **** 			DI(imask);
 391                             		.loc 2 142 4
 392 0222 05 00 00 00             		bsr	_disint
 393 0226 E7 A1 01                		mov.L	r1, 4[r10]
 143:../device/ser/ser.c **** 			*(UW*)req->buf = p_dcb->com_error;
 394                             		.loc 2 143 13
 395 0229 ED A5 03                		mov.L	12[r10], r5
 396 022c A9 D5                   		mov.L	24[r5], r5
 397                             		.loc 2 143 26
 398 022e ED A4 02                		mov.L	8[r10], r4
 399 0231 A9 4C                   		mov.L	20[r4], r4
 400                             		.loc 2 143 19
 401 0233 E3 54                   		mov.L	r4, [r5]
 144:../device/ser/ser.c **** 			p_dcb->com_error = 0;
 402                             		.loc 2 144 21
 403 0235 ED A5 02                		mov.L	8[r10], r5
 404 0238 3E 55 00                		mov.L	#0, 20[r5]
 145:../device/ser/ser.c **** 			EI(imask);
 405                             		.loc 2 145 4
 406 023b ED A1 01                		mov.L	4[r10], r1
 407 023e 05 00 00 00             		bsr	_setint
 146:../device/ser/ser.c **** 			break;
 408                             		.loc 2 146 4
 409 0242 0F                      		bra	.L24
 410                             	.L29:
 147:../device/ser/ser.c **** 		case TDN_SER_BREAK:		/* Send Break */
 148:../device/ser/ser.c **** 			/* no break */
 149:../device/ser/ser.c **** 		default:
 150:../device/ser/ser.c **** 			err = E_PAR;
 411                             		.loc 2 150 8
 412 0243 F8 A6 EF                		mov.L	#-17, [r10]
 413 0246 2E 03                   		bra	.L24
 414                             	.L32:
 151:../device/ser/ser.c **** 		}
 152:../device/ser/ser.c **** 	}
 415                             		.loc 2 152 2
 416 0248 03                      		nop
 417                             		.balign 8,3,1
 418                             	.L24:
 153:../device/ser/ser.c **** 	return err;
 419                             		.loc 2 153 9
 420 0249 EC A5                   		mov.L	[r10], r5
 421                             	.L23:
 154:../device/ser/ser.c **** }
 422                             		.loc 2 154 1
 423 024b EF 51                   		mov.L	r5, r1
 424 024d 3F AA 05                		rtsd	#20, r10-r10
 425                             	.LFE11:
 428                             	_write_atr:
 429                             	.LFB12:
 155:../device/ser/ser.c **** 
 156:../device/ser/ser.c **** LOCAL ER write_atr(T_SER_DCB *p_dcb, T_DEVREQ *req)
 157:../device/ser/ser.c **** {
 430                             		.loc 2 157 1
 431 0250 7E AA                   		push.l	r10
 432                             	.LCFI12:
 433 0252 71 0A F4                		add	#-12, r0, r10
 434                             	.LCFI13:
 435 0255 EF A0                   		mov.L	r10, r0
 436 0257 E7 A1 01                		mov.L	r1, 4[r10]
 437 025a E7 A2 02                		mov.L	r2, 8[r10]
 158:../device/ser/ser.c **** 	ER	err;
 159:../device/ser/ser.c **** 
 160:../device/ser/ser.c **** 	err = set_atr_size(req);
 438                             		.loc 2 160 8
 439 025d ED A1 02                		mov.L	8[r10], r1
 440 0260 39 E2 FE                		bsr	_set_atr_size
 441 0263 E3 A1                   		mov.L	r1, [r10]
 161:../device/ser/ser.c **** 	if(err != E_OK) return err;
 442                             		.loc 2 161 4
 443 0265 EC A5                   		mov.L	[r10], r5
 444 0267 61 05                   		cmp	#0, r5
 445 0269 16                      		beq	.L34
 446                             		.loc 2 161 25 discriminator 1
 447 026a EC A5                   		mov.L	[r10], r5
 448 026c 38 CE 00                		bra	.L35
 449                             	.L34:
 162:../device/ser/ser.c **** 
 163:../device/ser/ser.c **** 	if(req->size) {
 450                             		.loc 2 163 8
 451 026f ED A5 02                		mov.L	8[r10], r5
 452 0272 A9 5D                   		mov.L	20[r5], r5
 453                             		.loc 2 163 4
 454 0274 61 05                   		cmp	#0, r5
 455 0276 3A C1 00                		beq	.L44
 164:../device/ser/ser.c **** 		switch(req->start) {
 456                             		.loc 2 164 13
 457 0279 ED A5 02                		mov.L	8[r10], r5
 458 027c A9 55                   		mov.L	16[r5], r5
 459                             		.loc 2 164 3
 460 027e 75 05 9A                		cmp	#-102, r5
 461 0281 20 7C                   		beq	.L37
 462 0283 75 05 9A                		cmp	#-102, r5
 463 0286 2A 10                   		bgt	.L38
 464 0288 75 05 97                		cmp	#-105, r5
 465 028b 3A 8E 00                		beq	.L39
 466 028e 75 05 99                		cmp	#-103, r5
 467 0291 20 7A                   		beq	.L40
 468 0293 38 9F 00                		bra	.L41
 469                             	.L38:
 470 0296 75 05 9C                		cmp	#-100, r5
 471 0299 20 1C                   		beq	.L42
 472 029b 75 05 9C                		cmp	#-100, r5
 473 029e 29 3B                   		blt	.L43
 474 02a0 75 05 FF                		cmp	#-1, r5
 475 02a3 3B 8F 00                		bne	.L41
 165:../device/ser/ser.c **** 		case TDN_EVENT:			/* Message buffer ID for event notification */
 166:../device/ser/ser.c **** 			p_dcb->evtmbfid = *(ID*)req->buf;
 476                             		.loc 2 166 31
 477 02a6 ED A5 02                		mov.L	8[r10], r5
 478 02a9 A9 D5                   		mov.L	24[r5], r5
 479                             		.loc 2 166 22
 480 02ab EC 54                   		mov.L	[r5], r4
 481                             		.loc 2 166 20
 482 02ad ED A5 01                		mov.L	4[r10], r5
 483 02b0 A0 D4                   		mov.L	r4, 8[r5]
 167:../device/ser/ser.c **** 			break;
 484                             		.loc 2 167 4
 485 02b2 38 86 00                		bra	.L36
 486                             	.L42:
 168:../device/ser/ser.c **** 		case TDN_SER_MODE:		/* Communication mode */
 169:../device/ser/ser.c **** 			p_dcb->com_mode = *(UW*)req->buf;
 487                             		.loc 2 169 31
 488 02b5 ED A5 02                		mov.L	8[r10], r5
 489 02b8 A9 D5                   		mov.L	24[r5], r5
 490                             		.loc 2 169 22
 491 02ba EC 54                   		mov.L	[r5], r4
 492                             		.loc 2 169 20
 493 02bc ED A5 01                		mov.L	4[r10], r5
 494 02bf A0 DC                   		mov.L	r4, 12[r5]
 170:../device/ser/ser.c **** 			err = dev_ser_llctl( p_dcb->unit, LLD_SER_MODE, p_dcb->com_mode);
 495                             		.loc 2 170 10
 496 02c1 ED A5 01                		mov.L	4[r10], r5
 497 02c4 EC 54                   		mov.L	[r5], r4
 498 02c6 ED A5 01                		mov.L	4[r10], r5
 499 02c9 A8 DD                   		mov.L	12[r5], r5
 500 02cb EF 53                   		mov.L	r5, r3
 501 02cd 66 02                   		mov.L	#0, r2
 502 02cf EF 41                   		mov.L	r4, r1
 503 02d1 05 00 00 00             		bsr	_dev_ser_llctl
 504 02d5 E3 A1                   		mov.L	r1, [r10]
 171:../device/ser/ser.c **** 			break;
 505                             		.loc 2 171 4
 506 02d7 2E 61                   		bra	.L36
 507                             	.L43:
 172:../device/ser/ser.c **** 		case TDN_SER_SPEED:		/* Communication speed */
 173:../device/ser/ser.c **** 			p_dcb->com_speed = *(UW*)req->buf;
 508                             		.loc 2 173 32
 509 02d9 ED A5 02                		mov.L	8[r10], r5
 510 02dc A9 D5                   		mov.L	24[r5], r5
 511                             		.loc 2 173 23
 512 02de EC 54                   		mov.L	[r5], r4
 513                             		.loc 2 173 21
 514 02e0 ED A5 01                		mov.L	4[r10], r5
 515 02e3 A1 54                   		mov.L	r4, 16[r5]
 174:../device/ser/ser.c **** 			err = dev_ser_llctl( p_dcb->unit, LLD_SER_SPEED, p_dcb->com_speed);
 516                             		.loc 2 174 10
 517 02e5 ED A5 01                		mov.L	4[r10], r5
 518 02e8 EC 54                   		mov.L	[r5], r4
 519 02ea ED A5 01                		mov.L	4[r10], r5
 520 02ed A9 55                   		mov.L	16[r5], r5
 521 02ef EF 53                   		mov.L	r5, r3
 522 02f1 66 12                   		mov.L	#1, r2
 523 02f3 EF 41                   		mov.L	r4, r1
 524 02f5 05 00 00 00             		bsr	_dev_ser_llctl
 525 02f9 E3 A1                   		mov.L	r1, [r10]
 175:../device/ser/ser.c **** 			break;
 526                             		.loc 2 175 4
 527 02fb 2E 3D                   		bra	.L36
 528                             	.L37:
 176:../device/ser/ser.c **** 		case TDN_SER_SNDTMO:		/* Send timeout */
 177:../device/ser/ser.c **** 			p_dcb->snd_tmo = *(TMO*)req->buf;
 529                             		.loc 2 177 31
 530 02fd ED A5 02                		mov.L	8[r10], r5
 531 0300 A9 D5                   		mov.L	24[r5], r5
 532                             		.loc 2 177 21
 533 0302 EC 54                   		mov.L	[r5], r4
 534                             		.loc 2 177 19
 535 0304 ED A5 01                		mov.L	4[r10], r5
 536 0307 A1 D4                   		mov.L	r4, 24[r5]
 178:../device/ser/ser.c **** 			break;
 537                             		.loc 2 178 4
 538 0309 2E 2F                   		bra	.L36
 539                             	.L40:
 179:../device/ser/ser.c **** 		case TDN_SER_RCVTMO:		/* Receive timeout */
 180:../device/ser/ser.c **** 			p_dcb->rcv_tmo = *(TMO*)req->buf;
 540                             		.loc 2 180 31
 541 030b ED A5 02                		mov.L	8[r10], r5
 542 030e A9 D5                   		mov.L	24[r5], r5
 543                             		.loc 2 180 21
 544 0310 EC 54                   		mov.L	[r5], r4
 545                             		.loc 2 180 19
 546 0312 ED A5 01                		mov.L	4[r10], r5
 547 0315 A1 DC                   		mov.L	r4, 28[r5]
 181:../device/ser/ser.c **** 			break;
 548                             		.loc 2 181 4
 549 0317 2E 21                   		bra	.L36
 550                             	.L39:
 182:../device/ser/ser.c **** 		case TDN_SER_BREAK:		/* Send Break */
 183:../device/ser/ser.c **** 			err = dev_ser_llctl( p_dcb->unit, LLD_SER_BREAK, *(UW*)req->buf);
 551                             		.loc 2 183 10
 552 0319 ED A5 01                		mov.L	4[r10], r5
 553 031c EC 54                   		mov.L	[r5], r4
 554                             		.loc 2 183 62
 555 031e ED A5 02                		mov.L	8[r10], r5
 556 0321 A9 D5                   		mov.L	24[r5], r5
 557                             		.loc 2 183 10
 558 0323 EC 55                   		mov.L	[r5], r5
 559 0325 EF 53                   		mov.L	r5, r3
 560 0327 66 52                   		mov.L	#5, r2
 561 0329 EF 41                   		mov.L	r4, r1
 562 032b 05 00 00 00             		bsr	_dev_ser_llctl
 563 032f E3 A1                   		mov.L	r1, [r10]
 184:../device/ser/ser.c **** 			break;
 564                             		.loc 2 184 4
 565 0331 0F                      		bra	.L36
 566                             	.L41:
 185:../device/ser/ser.c **** 		default:
 186:../device/ser/ser.c **** 			err = E_PAR;
 567                             		.loc 2 186 8
 568 0332 F8 A6 EF                		mov.L	#-17, [r10]
 569 0335 2E 03                   		bra	.L36
 570                             	.L44:
 187:../device/ser/ser.c **** 		}
 188:../device/ser/ser.c **** 	}
 571                             		.loc 2 188 2
 572 0337 03                      		nop
 573                             		.balign 8,3,1
 574                             	.L36:
 189:../device/ser/ser.c **** 	return err;
 575                             		.loc 2 189 9
 576 0338 EC A5                   		mov.L	[r10], r5
 577                             	.L35:
 190:../device/ser/ser.c **** }
 578                             		.loc 2 190 1
 579 033a EF 51                   		mov.L	r5, r1
 580 033c 3F AA 04                		rtsd	#16, r10-r10
 581                             	.LFE12:
 584                             	_read_data:
 585                             	.LFB13:
 191:../device/ser/ser.c **** 
 192:../device/ser/ser.c **** /*----------------------------------------------------------------------*/
 193:../device/ser/ser.c **** /*　Device-specific data control
 194:../device/ser/ser.c ****  */
 195:../device/ser/ser.c **** 
 196:../device/ser/ser.c **** LOCAL ER read_data( T_SER_DCB *p_dcb, T_DEVREQ *req)
 197:../device/ser/ser.c **** {
 586                             		.loc 2 197 1
 587 033f 7E AA                   		push.l	r10
 588                             	.LCFI14:
 589 0341 71 0A E4                		add	#-28, r0, r10
 590                             	.LCFI15:
 591 0344 EF A0                   		mov.L	r10, r0
 592 0346 E7 A1 05                		mov.L	r1, 20[r10]
 593 0349 E7 A2 06                		mov.L	r2, 24[r10]
 198:../device/ser/ser.c **** 	T_SER_BUFF	*p_buff;
 199:../device/ser/ser.c **** 	UW		tail;
 200:../device/ser/ser.c **** 	UB		*pd;
 201:../device/ser/ser.c **** 	SZ		rsize;
 202:../device/ser/ser.c **** 	ER		err;
 203:../device/ser/ser.c **** 
 204:../device/ser/ser.c **** 	p_buff	= &p_dcb->rcv_buff;
 594                             		.loc 2 204 9
 595 034c ED A5 05                		mov.L	20[r10], r5
 596 034f 71 55 6C                		add	#0x6c, r5
 597 0352 E7 A5 04                		mov.L	r5, 16[r10]
 205:../device/ser/ser.c **** 	tail	= p_buff->tail;
 598                             		.loc 2 205 7
 599 0355 ED A5 04                		mov.L	16[r10], r5
 600 0358 A8 5D                   		mov.L	4[r5], r5
 601 035a E3 A5                   		mov.L	r5, [r10]
 206:../device/ser/ser.c **** 	pd	= req->buf;
 602                             		.loc 2 206 5
 603 035c ED A5 06                		mov.L	24[r10], r5
 604 035f A9 D5                   		mov.L	24[r5], r5
 605 0361 E7 A5 01                		mov.L	r5, 4[r10]
 207:../device/ser/ser.c **** 	rsize	= req->size;
 606                             		.loc 2 207 8
 607 0364 ED A5 06                		mov.L	24[r10], r5
 608 0367 A9 5D                   		mov.L	20[r5], r5
 609 0369 E7 A5 02                		mov.L	r5, 8[r10]
 208:../device/ser/ser.c **** 	err	= E_OK;
 610                             		.loc 2 208 6
 611 036c F9 A6 03 00             		mov.L	#0, 12[r10]
 209:../device/ser/ser.c **** 
 210:../device/ser/ser.c **** 	if(rsize != 0 ) {		/* size != 0 : Receive data */
 612                             		.loc 2 210 4
 613 0370 ED A5 02                		mov.L	8[r10], r5
 614 0373 61 05                   		cmp	#0, r5
 615 0375 3A B0 00                		beq	.L46
 211:../device/ser/ser.c **** 		while(rsize) {
 616                             		.loc 2 211 8
 617 0378 38 91 00                		bra	.L47
 618                             	.L51:
 212:../device/ser/ser.c **** 			DisableInt(p_dcb->intno_rcv);	/* Disable Receive Int. */
 619                             		.loc 2 212 4
 620 037b ED A5 05                		mov.L	20[r10], r5
 621 037e AA 55                   		mov.L	32[r5], r5
 622 0380 EF 51                   		mov.L	r5, r1
 623 0382 05 00 00 00             		bsr	_DisableInt
 213:../device/ser/ser.c **** 			if(p_buff->top != tail) {
 624                             		.loc 2 213 13
 625 0386 ED A5 04                		mov.L	16[r10], r5
 626 0389 EC 55                   		mov.L	[r5], r5
 627                             		.loc 2 213 6
 628 038b EC A4                   		mov.L	[r10], r4
 629 038d 47 54                   		cmp	r5, r4
 630 038f 20 48                   		beq	.L48
 214:../device/ser/ser.c **** 				*pd++ = p_buff->data[tail++];
 631                             		.loc 2 214 30
 632 0391 EC A4                   		mov.L	[r10], r4
 633 0393 71 45 01                		add	#1, r4, r5
 634 0396 E3 A5                   		mov.L	r5, [r10]
 635                             		.loc 2 214 8
 636 0398 ED A5 01                		mov.L	4[r10], r5
 637 039b 71 53 01                		add	#1, r5, r3
 638 039e E7 A3 01                		mov.L	r3, 4[r10]
 639                             		.loc 2 214 25
 640 03a1 ED A3 04                		mov.L	16[r10], r3
 641 03a4 4B 34                   		add	r3, r4
 642 03a6 8B 44                   		mov.B	12[r4], r4
 643                             		.loc 2 214 11
 644 03a8 C3 54                   		mov.B	r4, [r5]
 215:../device/ser/ser.c **** 				if(tail >= DEVCONF_SER_BUFFSIZE ) tail = 0;
 645                             		.loc 2 215 7
 646 03aa EC A5                   		mov.L	[r10], r5
 647 03ac 75 55 31                		cmp	#49, r5
 648 03af 25 05                   		bleu	.L49
 649                             		.loc 2 215 44 discriminator 1
 650 03b1 F8 A6 00                		mov.L	#0, [r10]
 651                             	.L49:
 216:../device/ser/ser.c **** 				p_buff->tail = tail;
 652                             		.loc 2 216 18
 653 03b4 ED A5 04                		mov.L	16[r10], r5
 654 03b7 EC A4                   		mov.L	[r10], r4
 655 03b9 A0 5C                   		mov.L	r4, 4[r5]
 217:../device/ser/ser.c **** 				EnableInt(p_dcb->intno_rcv, p_dcb->int_pri);	/* Enable Receive Int. */
 656                             		.loc 2 217 5
 657 03bb ED A5 05                		mov.L	20[r10], r5
 658 03be AA 54                   		mov.L	32[r5], r4
 659                             		.loc 2 217 38
 660 03c0 ED A5 05                		mov.L	20[r10], r5
 661 03c3 AA D5                   		mov.L	40[r5], r5
 662                             		.loc 2 217 5
 663 03c5 EF 52                   		mov.L	r5, r2
 664 03c7 EF 41                   		mov.L	r4, r1
 665 03c9 05 00 00 00             		bsr	_EnableInt
 218:../device/ser/ser.c **** 				rsize--;
 666                             		.loc 2 218 10
 667 03cd ED A5 02                		mov.L	8[r10], r5
 668 03d0 60 15                   		sub	#1, r5
 669 03d2 E7 A5 02                		mov.L	r5, 8[r10]
 670 03d5 2E 34                   		bra	.L47
 671                             	.L48:
 219:../device/ser/ser.c **** 			} else {
 220:../device/ser/ser.c **** 				p_buff->wait_tskid = tk_get_tid();
 672                             		.loc 2 220 26
 673 03d7 05 00 00 00             		bsr	_tk_get_tid
 674 03db EF 14                   		mov.L	r1, r4
 675                             		.loc 2 220 24
 676 03dd ED A5 04                		mov.L	16[r10], r5
 677 03e0 A0 D4                   		mov.L	r4, 8[r5]
 221:../device/ser/ser.c **** 				EnableInt(p_dcb->intno_rcv, p_dcb->int_pri);	/* Enable Receive Int. */
 678                             		.loc 2 221 5
 679 03e2 ED A5 05                		mov.L	20[r10], r5
 680 03e5 AA 54                   		mov.L	32[r5], r4
 681                             		.loc 2 221 38
 682 03e7 ED A5 05                		mov.L	20[r10], r5
 683 03ea AA D5                   		mov.L	40[r5], r5
 684                             		.loc 2 221 5
 685 03ec EF 52                   		mov.L	r5, r2
 686 03ee EF 41                   		mov.L	r4, r1
 687 03f0 05 00 00 00             		bsr	_EnableInt
 222:../device/ser/ser.c **** 				err = tk_slp_tsk(p_dcb->rcv_tmo);
 688                             		.loc 2 222 11
 689 03f4 ED A5 05                		mov.L	20[r10], r5
 690 03f7 A9 DD                   		mov.L	28[r5], r5
 691 03f9 EF 51                   		mov.L	r5, r1
 692 03fb 05 00 00 00             		bsr	_tk_slp_tsk
 693 03ff E7 A1 03                		mov.L	r1, 12[r10]
 223:../device/ser/ser.c **** 				if( err != E_OK) break;
 694                             		.loc 2 223 7
 695 0402 ED A5 03                		mov.L	12[r10], r5
 696 0405 61 05                   		cmp	#0, r5
 697 0407 21 0C                   		bne	.L55
 698                             	.L47:
 211:../device/ser/ser.c **** 			DisableInt(p_dcb->intno_rcv);	/* Disable Receive Int. */
 699                             		.loc 2 211 8
 700 0409 ED A5 02                		mov.L	8[r10], r5
 701 040c 61 05                   		cmp	#0, r5
 702 040e 3B 6D FF                		bne	.L51
 703 0411 2E 03                   		bra	.L50
 704                             	.L55:
 705                             		.loc 2 223 5
 706 0413 03                      		nop
 707                             	.L50:
 224:../device/ser/ser.c **** 			}
 225:../device/ser/ser.c **** 		}
 226:../device/ser/ser.c **** 		req->asize = req->size - rsize;
 708                             		.loc 2 226 19
 709 0414 ED A5 06                		mov.L	24[r10], r5
 710 0417 A9 5C                   		mov.L	20[r5], r4
 711                             		.loc 2 226 26
 712 0419 ED A5 02                		mov.L	8[r10], r5
 713 041c 43 54                   		sub	r5, r4
 714                             		.loc 2 226 14
 715 041e ED A5 06                		mov.L	24[r10], r5
 716 0421 A1 DC                   		mov.L	r4, 28[r5]
 717 0423 2E 2A                   		bra	.L52
 718                             	.L46:
 227:../device/ser/ser.c **** 	} else {		/* size = 0: Get the number of readable data */
 228:../device/ser/ser.c **** 		/* Disable Receive Int. */
 229:../device/ser/ser.c **** 		rsize = p_buff->top - p_buff->tail;
 719                             		.loc 2 229 17
 720 0425 ED A5 04                		mov.L	16[r10], r5
 721 0428 EC 54                   		mov.L	[r5], r4
 722                             		.loc 2 229 31
 723 042a ED A5 04                		mov.L	16[r10], r5
 724 042d A8 5D                   		mov.L	4[r5], r5
 725                             		.loc 2 229 23
 726 042f FF 05 54                		sub	r5, r4, r5
 727                             		.loc 2 229 9
 728 0432 E7 A5 02                		mov.L	r5, 8[r10]
 230:../device/ser/ser.c **** 		/* Enable Receive Int. */
 231:../device/ser/ser.c **** 		if(rsize < 0) {
 729                             		.loc 2 231 5
 730 0435 ED A5 02                		mov.L	8[r10], r5
 731 0438 61 05                   		cmp	#0, r5
 732 043a 28 0B                   		bge	.L53
 232:../device/ser/ser.c **** 			rsize += DEVCONF_SER_BUFFSIZE;
 733                             		.loc 2 232 10
 734 043c ED A5 02                		mov.L	8[r10], r5
 735 043f 71 55 32                		add	#50, r5
 736 0442 E7 A5 02                		mov.L	r5, 8[r10]
 737                             	.L53:
 233:../device/ser/ser.c **** 		}
 234:../device/ser/ser.c **** 		req->asize = rsize;
 738                             		.loc 2 234 14
 739 0445 ED A5 06                		mov.L	24[r10], r5
 740 0448 ED A4 02                		mov.L	8[r10], r4
 741 044b A1 DC                   		mov.L	r4, 28[r5]
 742                             	.L52:
 235:../device/ser/ser.c **** 	}
 236:../device/ser/ser.c **** 
 237:../device/ser/ser.c **** 	return err;
 743                             		.loc 2 237 9
 744 044d ED A5 03                		mov.L	12[r10], r5
 238:../device/ser/ser.c **** }
 745                             		.loc 2 238 1
 746 0450 EF 51                   		mov.L	r5, r1
 747 0452 3F AA 08                		rtsd	#32, r10-r10
 748                             	.LFE13:
 751                             	_write_data:
 752                             	.LFB14:
 239:../device/ser/ser.c **** 
 240:../device/ser/ser.c **** LOCAL ER write_data( T_SER_DCB *p_dcb, T_DEVREQ *req)
 241:../device/ser/ser.c **** {
 753                             		.loc 2 241 1
 754 0455 7E AA                   		push.l	r10
 755                             	.LCFI16:
 756 0457 71 0A E0                		add	#-32, r0, r10
 757                             	.LCFI17:
 758 045a EF A0                   		mov.L	r10, r0
 759 045c E7 A1 06                		mov.L	r1, 24[r10]
 760 045f E7 A2 07                		mov.L	r2, 28[r10]
 242:../device/ser/ser.c **** 	T_SER_BUFF	*p_buff;
 243:../device/ser/ser.c **** 	UW		next;
 244:../device/ser/ser.c **** 	UB		*pd;
 245:../device/ser/ser.c **** 	INT		ssize;
 246:../device/ser/ser.c **** 	ER		err;
 247:../device/ser/ser.c **** 	BOOL		s;
 248:../device/ser/ser.c **** 
 249:../device/ser/ser.c **** 	p_buff	= &p_dcb->snd_buff;
 761                             		.loc 2 249 9
 762 0462 ED A5 06                		mov.L	24[r10], r5
 763 0465 71 55 2C                		add	#44, r5
 764 0468 E7 A5 05                		mov.L	r5, 20[r10]
 250:../device/ser/ser.c **** 	pd	= req->buf;
 765                             		.loc 2 250 5
 766 046b ED A5 07                		mov.L	28[r10], r5
 767 046e A9 D5                   		mov.L	24[r5], r5
 768 0470 E7 A5 01                		mov.L	r5, 4[r10]
 251:../device/ser/ser.c **** 	ssize	= req->size;
 769                             		.loc 2 251 8
 770 0473 ED A5 07                		mov.L	28[r10], r5
 771 0476 A9 5D                   		mov.L	20[r5], r5
 772 0478 E7 A5 02                		mov.L	r5, 8[r10]
 252:../device/ser/ser.c **** 	err	= E_OK;
 773                             		.loc 2 252 6
 774 047b F9 A6 03 00             		mov.L	#0, 12[r10]
 253:../device/ser/ser.c **** 
 254:../device/ser/ser.c **** 	if(ssize != 0) {		/* size != 0 : Send data */
 775                             		.loc 2 254 4
 776 047f ED A5 02                		mov.L	8[r10], r5
 777 0482 61 05                   		cmp	#0, r5
 778 0484 3A FD 00                		beq	.L57
 255:../device/ser/ser.c **** 		while(ssize) {
 779                             		.loc 2 255 8
 780 0487 38 DE 00                		bra	.L58
 781                             	.L65:
 256:../device/ser/ser.c **** 			next = p_buff->top + 1;
 782                             		.loc 2 256 17
 783 048a ED A5 05                		mov.L	20[r10], r5
 784 048d EC 55                   		mov.L	[r5], r5
 785                             		.loc 2 256 9
 786 048f 62 15                   		add	#1, r5
 787 0491 E3 A5                   		mov.L	r5, [r10]
 257:../device/ser/ser.c **** 			if(next >= DEVCONF_SER_BUFFSIZE) next = 0;
 788                             		.loc 2 257 6
 789 0493 EC A5                   		mov.L	[r10], r5
 790 0495 75 55 31                		cmp	#49, r5
 791 0498 25 05                   		bleu	.L59
 792                             		.loc 2 257 42 discriminator 1
 793 049a F8 A6 00                		mov.L	#0, [r10]
 794                             	.L59:
 258:../device/ser/ser.c **** 			
 259:../device/ser/ser.c **** 			DisableInt(p_dcb->intno_snd);	/* Disable Send Int. */
 795                             		.loc 2 259 4
 796 049d ED A5 06                		mov.L	24[r10], r5
 797 04a0 AA 5D                   		mov.L	36[r5], r5
 798 04a2 EF 51                   		mov.L	r5, r1
 799 04a4 05 00 00 00             		bsr	_DisableInt
 260:../device/ser/ser.c **** 			if(next != p_buff->tail) {
 800                             		.loc 2 260 21
 801 04a8 ED A5 05                		mov.L	20[r10], r5
 802 04ab A8 5D                   		mov.L	4[r5], r5
 803                             		.loc 2 260 6
 804 04ad EC A4                   		mov.L	[r10], r4
 805 04af 47 54                   		cmp	r5, r4
 806 04b1 3A 82 00                		beq	.L60
 261:../device/ser/ser.c **** 				s = FALSE;
 807                             		.loc 2 261 7
 808 04b4 F9 A6 04 00             		mov.L	#0, 16[r10]
 262:../device/ser/ser.c **** 				if(p_buff->top == p_buff->tail) {
 809                             		.loc 2 262 14
 810 04b8 ED A5 05                		mov.L	20[r10], r5
 811 04bb EC 54                   		mov.L	[r5], r4
 812                             		.loc 2 262 29
 813 04bd ED A5 05                		mov.L	20[r10], r5
 814 04c0 A8 5D                   		mov.L	4[r5], r5
 815                             		.loc 2 262 7
 816 04c2 47 54                   		cmp	r5, r4
 817 04c4 21 24                   		bne	.L61
 263:../device/ser/ser.c **** 					s = (E_OK == dev_ser_llctl( p_dcb->unit, LLD_SER_SEND, *pd));
 818                             		.loc 2 263 19
 819 04c6 ED A5 06                		mov.L	24[r10], r5
 820 04c9 EC 54                   		mov.L	[r5], r4
 821                             		.loc 2 263 61
 822 04cb ED A5 01                		mov.L	4[r10], r5
 823 04ce CC 55                   		mov.B	[r5], r5
 824                             		.loc 2 263 19
 825 04d0 5B 55                   		movu.B	r5, r5
 826 04d2 EF 53                   		mov.L	r5, r3
 827 04d4 66 42                   		mov.L	#4, r2
 828 04d6 EF 41                   		mov.L	r4, r1
 829 04d8 05 00 00 00             		bsr	_dev_ser_llctl
 830 04dc EF 15                   		mov.L	r1, r5
 831                             		.loc 2 263 16
 832 04de 61 05                   		cmp	#0, r5
 833 04e0 FC DB 50                		sceq.L	r5
 834                             		.loc 2 263 8
 835 04e3 5B 55                   		movu.B	r5, r5
 836 04e5 E7 A5 04                		mov.L	r5, 16[r10]
 837                             	.L61:
 264:../device/ser/ser.c **** 				}
 265:../device/ser/ser.c **** 				if(s) {		/* Successful transmission. */
 838                             		.loc 2 265 7
 839 04e8 ED A5 04                		mov.L	16[r10], r5
 840 04eb 61 05                   		cmp	#0, r5
 841 04ed 20 0C                   		beq	.L62
 266:../device/ser/ser.c **** 					pd++;
 842                             		.loc 2 266 8
 843 04ef ED A5 01                		mov.L	4[r10], r5
 844 04f2 62 15                   		add	#1, r5
 845 04f4 E7 A5 01                		mov.L	r5, 4[r10]
 846 04f7 2E 20                   		bra	.L63
 847                             	.L62:
 267:../device/ser/ser.c **** 				} else {	/* FIFO is full. */
 268:../device/ser/ser.c **** 					p_buff->data[p_buff->top] = *pd++;
 848                             		.loc 2 268 37
 849 04f9 ED A5 01                		mov.L	4[r10], r5
 850 04fc 71 54 01                		add	#1, r5, r4
 851 04ff E7 A4 01                		mov.L	r4, 4[r10]
 852                             		.loc 2 268 25
 853 0502 ED A4 05                		mov.L	20[r10], r4
 854 0505 EC 44                   		mov.L	[r4], r4
 855                             		.loc 2 268 34
 856 0507 CC 53                   		mov.B	[r5], r3
 857                             		.loc 2 268 32
 858 0509 ED A5 05                		mov.L	20[r10], r5
 859 050c 4B 45                   		add	r4, r5
 860 050e 83 53                   		mov.B	r3, 12[r5]
 269:../device/ser/ser.c **** 					p_buff->top = next;
 861                             		.loc 2 269 18
 862 0510 ED A5 05                		mov.L	20[r10], r5
 863 0513 EC A4                   		mov.L	[r10], r4
 864 0515 E3 54                   		mov.L	r4, [r5]
 865                             	.L63:
 270:../device/ser/ser.c **** 				}
 271:../device/ser/ser.c **** 				EnableInt(p_dcb->intno_snd, p_dcb->int_pri);	/* Enable Send Int. */
 866                             		.loc 2 271 5
 867 0517 ED A5 06                		mov.L	24[r10], r5
 868 051a AA 5C                   		mov.L	36[r5], r4
 869                             		.loc 2 271 38
 870 051c ED A5 06                		mov.L	24[r10], r5
 871 051f AA D5                   		mov.L	40[r5], r5
 872                             		.loc 2 271 5
 873 0521 EF 52                   		mov.L	r5, r2
 874 0523 EF 41                   		mov.L	r4, r1
 875 0525 05 00 00 00             		bsr	_EnableInt
 272:../device/ser/ser.c **** 				ssize--;
 876                             		.loc 2 272 10
 877 0529 ED A5 02                		mov.L	8[r10], r5
 878 052c 60 15                   		sub	#1, r5
 879 052e E7 A5 02                		mov.L	r5, 8[r10]
 880 0531 2E 34                   		bra	.L58
 881                             	.L60:
 273:../device/ser/ser.c **** 			} else {
 274:../device/ser/ser.c **** 				p_buff->wait_tskid = tk_get_tid();
 882                             		.loc 2 274 26
 883 0533 05 00 00 00             		bsr	_tk_get_tid
 884 0537 EF 14                   		mov.L	r1, r4
 885                             		.loc 2 274 24
 886 0539 ED A5 05                		mov.L	20[r10], r5
 887 053c A0 D4                   		mov.L	r4, 8[r5]
 275:../device/ser/ser.c **** 				EnableInt(p_dcb->intno_snd, p_dcb->int_pri);	/* Enable Send Int. */
 888                             		.loc 2 275 5
 889 053e ED A5 06                		mov.L	24[r10], r5
 890 0541 AA 5C                   		mov.L	36[r5], r4
 891                             		.loc 2 275 38
 892 0543 ED A5 06                		mov.L	24[r10], r5
 893 0546 AA D5                   		mov.L	40[r5], r5
 894                             		.loc 2 275 5
 895 0548 EF 52                   		mov.L	r5, r2
 896 054a EF 41                   		mov.L	r4, r1
 897 054c 05 00 00 00             		bsr	_EnableInt
 276:../device/ser/ser.c **** 				err = tk_slp_tsk(p_dcb->snd_tmo);
 898                             		.loc 2 276 11
 899 0550 ED A5 06                		mov.L	24[r10], r5
 900 0553 A9 D5                   		mov.L	24[r5], r5
 901 0555 EF 51                   		mov.L	r5, r1
 902 0557 05 00 00 00             		bsr	_tk_slp_tsk
 903 055b E7 A1 03                		mov.L	r1, 12[r10]
 277:../device/ser/ser.c **** 				if(err != E_OK) break;
 904                             		.loc 2 277 7
 905 055e ED A5 03                		mov.L	12[r10], r5
 906 0561 61 05                   		cmp	#0, r5
 907 0563 21 0C                   		bne	.L69
 908                             	.L58:
 255:../device/ser/ser.c **** 			next = p_buff->top + 1;
 909                             		.loc 2 255 8
 910 0565 ED A5 02                		mov.L	8[r10], r5
 911 0568 61 05                   		cmp	#0, r5
 912 056a 3B 20 FF                		bne	.L65
 913 056d 2E 03                   		bra	.L64
 914                             	.L69:
 915                             		.loc 2 277 5
 916 056f 03                      		nop
 917                             	.L64:
 278:../device/ser/ser.c **** 			}
 279:../device/ser/ser.c **** 		}
 280:../device/ser/ser.c **** 		req->asize = req->size - ssize;
 918                             		.loc 2 280 19
 919 0570 ED A5 07                		mov.L	28[r10], r5
 920 0573 A9 5C                   		mov.L	20[r5], r4
 921                             		.loc 2 280 26
 922 0575 ED A5 02                		mov.L	8[r10], r5
 923 0578 43 54                   		sub	r5, r4
 924                             		.loc 2 280 14
 925 057a ED A5 07                		mov.L	28[r10], r5
 926 057d A1 DC                   		mov.L	r4, 28[r5]
 927 057f 2E 4C                   		bra	.L66
 928                             	.L57:
 281:../device/ser/ser.c **** 	} else {		/* size = 0: Get the number of writable data */
 282:../device/ser/ser.c **** 		DisableInt(p_dcb->intno_snd);			/* Disable Send Int. */
 929                             		.loc 2 282 3
 930 0581 ED A5 06                		mov.L	24[r10], r5
 931 0584 AA 5D                   		mov.L	36[r5], r5
 932 0586 EF 51                   		mov.L	r5, r1
 933 0588 05 00 00 00             		bsr	_DisableInt
 283:../device/ser/ser.c **** 		ssize = p_buff->top - p_buff->tail;
 934                             		.loc 2 283 17
 935 058c ED A5 05                		mov.L	20[r10], r5
 936 058f EC 54                   		mov.L	[r5], r4
 937                             		.loc 2 283 31
 938 0591 ED A5 05                		mov.L	20[r10], r5
 939 0594 A8 5D                   		mov.L	4[r5], r5
 940                             		.loc 2 283 23
 941 0596 FF 05 54                		sub	r5, r4, r5
 942                             		.loc 2 283 9
 943 0599 E7 A5 02                		mov.L	r5, 8[r10]
 284:../device/ser/ser.c **** 		EnableInt(p_dcb->intno_snd, p_dcb->int_pri);	/* Enable send Int. */
 944                             		.loc 2 284 3
 945 059c ED A5 06                		mov.L	24[r10], r5
 946 059f AA 5C                   		mov.L	36[r5], r4
 947                             		.loc 2 284 36
 948 05a1 ED A5 06                		mov.L	24[r10], r5
 949 05a4 AA D5                   		mov.L	40[r5], r5
 950                             		.loc 2 284 3
 951 05a6 EF 52                   		mov.L	r5, r2
 952 05a8 EF 41                   		mov.L	r4, r1
 953 05aa 05 00 00 00             		bsr	_EnableInt
 285:../device/ser/ser.c **** 		if(ssize < 0) {
 954                             		.loc 2 285 5
 955 05ae ED A5 02                		mov.L	8[r10], r5
 956 05b1 61 05                   		cmp	#0, r5
 957 05b3 28 0B                   		bge	.L67
 286:../device/ser/ser.c **** 			ssize += DEVCONF_SER_BUFFSIZE;
 958                             		.loc 2 286 10
 959 05b5 ED A5 02                		mov.L	8[r10], r5
 960 05b8 71 55 32                		add	#50, r5
 961 05bb E7 A5 02                		mov.L	r5, 8[r10]
 962                             	.L67:
 287:../device/ser/ser.c **** 		}
 288:../device/ser/ser.c **** 		req->asize = DEVCONF_SER_BUFFSIZE - ssize;
 963                             		.loc 2 288 37
 964 05be 75 44 32                		mov.L	#50, r4
 965 05c1 ED A5 02                		mov.L	8[r10], r5
 966 05c4 43 54                   		sub	r5, r4
 967                             		.loc 2 288 14
 968 05c6 ED A5 07                		mov.L	28[r10], r5
 969 05c9 A1 DC                   		mov.L	r4, 28[r5]
 970                             	.L66:
 289:../device/ser/ser.c **** 	}
 290:../device/ser/ser.c **** 
 291:../device/ser/ser.c **** 	return err;
 971                             		.loc 2 291 9
 972 05cb ED A5 03                		mov.L	12[r10], r5
 292:../device/ser/ser.c **** }
 973                             		.loc 2 292 1
 974 05ce EF 51                   		mov.L	r5, r1
 975 05d0 3F AA 09                		rtsd	#36, r10-r10
 976                             	.LFE14:
 978                             		.global	_dev_ser_openfn
 980                             	_dev_ser_openfn:
 981                             	.LFB15:
 293:../device/ser/ser.c **** 
 294:../device/ser/ser.c **** /*----------------------------------------------------------------------
 295:../device/ser/ser.c ****  * mSDI I/F function
 296:../device/ser/ser.c ****  */
 297:../device/ser/ser.c **** /*----------------------------------------------------------------------
 298:../device/ser/ser.c ****  * Open device
 299:../device/ser/ser.c ****  */
 300:../device/ser/ser.c **** ER dev_ser_openfn( ID devid, UINT omode, T_MSDI *p_msdi)
 301:../device/ser/ser.c **** {
 982                             		.loc 2 301 1
 983 05d3 7E AA                   		push.l	r10
 984                             	.LCFI18:
 985 05d5 71 0A EC                		add	#-20, r0, r10
 986                             	.LCFI19:
 987 05d8 EF A0                   		mov.L	r10, r0
 988 05da E7 A1 02                		mov.L	r1, 8[r10]
 989 05dd E7 A2 03                		mov.L	r2, 12[r10]
 990 05e0 E7 A3 04                		mov.L	r3, 16[r10]
 302:../device/ser/ser.c **** 	T_SER_DCB	*p_dcb;
 303:../device/ser/ser.c **** 	ER		err;
 304:../device/ser/ser.c **** 
 305:../device/ser/ser.c **** 	p_dcb = (T_SER_DCB*)p_msdi->dmsdi.exinf;
 991                             		.loc 2 305 8
 992 05e3 ED A5 04                		mov.L	16[r10], r5
 993 05e6 A9 55                   		mov.L	16[r5], r5
 994 05e8 E3 A5                   		mov.L	r5, [r10]
 306:../device/ser/ser.c **** 
 307:../device/ser/ser.c **** 	/* Device Open operation */
 308:../device/ser/ser.c **** 	p_dcb->omode = omode;
 995                             		.loc 2 308 15
 996 05ea EC A5                   		mov.L	[r10], r5
 997 05ec ED A4 03                		mov.L	12[r10], r4
 998 05ef A0 5C                   		mov.L	r4, 4[r5]
 309:../device/ser/ser.c **** 	buff_init(&p_dcb->snd_buff);
 999                             		.loc 2 309 2
 1000 05f1 EC A5                   		mov.L	[r10], r5
 1001 05f3 71 55 2C                		add	#44, r5
 1002 05f6 EF 51                   		mov.L	r5, r1
 1003 05f8 39 08 FA                		bsr	_buff_init
 310:../device/ser/ser.c **** 	buff_init(&p_dcb->rcv_buff);
 1004                             		.loc 2 310 2
 1005 05fb EC A5                   		mov.L	[r10], r5
 1006 05fd 71 55 6C                		add	#0x6c, r5
 1007 0600 EF 51                   		mov.L	r5, r1
 1008 0602 39 FE F9                		bsr	_buff_init
 311:../device/ser/ser.c **** 
 312:../device/ser/ser.c **** 	err = dev_ser_llctl(p_dcb->unit, LLD_SER_START, 0);
 1009                             		.loc 2 312 8
 1010 0605 EC A5                   		mov.L	[r10], r5
 1011 0607 EC 55                   		mov.L	[r5], r5
 1012 0609 66 03                   		mov.L	#0, r3
 1013 060b 66 22                   		mov.L	#2, r2
 1014 060d EF 51                   		mov.L	r5, r1
 1015 060f 05 00 00 00             		bsr	_dev_ser_llctl
 1016 0613 E7 A1 01                		mov.L	r1, 4[r10]
 313:../device/ser/ser.c **** 
 314:../device/ser/ser.c **** 	return err;
 1017                             		.loc 2 314 9
 1018 0616 ED A5 01                		mov.L	4[r10], r5
 315:../device/ser/ser.c **** }
 1019                             		.loc 2 315 1
 1020 0619 EF 51                   		mov.L	r5, r1
 1021 061b 3F AA 06                		rtsd	#24, r10-r10
 1022                             	.LFE15:
 1024                             		.global	_dev_ser_closefn
 1026                             	_dev_ser_closefn:
 1027                             	.LFB16:
 316:../device/ser/ser.c **** 
 317:../device/ser/ser.c **** /*----------------------------------------------------------------------
 318:../device/ser/ser.c ****  * Close Device
 319:../device/ser/ser.c ****  */
 320:../device/ser/ser.c **** ER dev_ser_closefn( ID devid, UINT option, T_MSDI *p_msdi)
 321:../device/ser/ser.c **** {
 1028                             		.loc 2 321 1
 1029 061e 7E AA                   		push.l	r10
 1030                             	.LCFI20:
 1031 0620 71 0A EC                		add	#-20, r0, r10
 1032                             	.LCFI21:
 1033 0623 EF A0                   		mov.L	r10, r0
 1034 0625 E7 A1 02                		mov.L	r1, 8[r10]
 1035 0628 E7 A2 03                		mov.L	r2, 12[r10]
 1036 062b E7 A3 04                		mov.L	r3, 16[r10]
 322:../device/ser/ser.c **** 	T_SER_DCB	*p_dcb;
 323:../device/ser/ser.c **** 	ER		err;
 324:../device/ser/ser.c **** 
 325:../device/ser/ser.c **** 	p_dcb = (T_SER_DCB*)(p_msdi->dmsdi.exinf);
 1037                             		.loc 2 325 8
 1038 062e ED A5 04                		mov.L	16[r10], r5
 1039 0631 A9 55                   		mov.L	16[r5], r5
 1040 0633 E3 A5                   		mov.L	r5, [r10]
 326:../device/ser/ser.c **** 
 327:../device/ser/ser.c **** 	/* Device Close operation */
 328:../device/ser/ser.c **** 	err = dev_ser_llctl(p_dcb->unit, LLD_SER_STOP, 0);
 1041                             		.loc 2 328 8
 1042 0635 EC A5                   		mov.L	[r10], r5
 1043 0637 EC 55                   		mov.L	[r5], r5
 1044 0639 66 03                   		mov.L	#0, r3
 1045 063b 66 32                   		mov.L	#3, r2
 1046 063d EF 51                   		mov.L	r5, r1
 1047 063f 05 00 00 00             		bsr	_dev_ser_llctl
 1048 0643 E7 A1 01                		mov.L	r1, 4[r10]
 329:../device/ser/ser.c **** 	
 330:../device/ser/ser.c **** 	return err;
 1049                             		.loc 2 330 9
 1050 0646 ED A5 01                		mov.L	4[r10], r5
 331:../device/ser/ser.c **** }
 1051                             		.loc 2 331 1
 1052 0649 EF 51                   		mov.L	r5, r1
 1053 064b 3F AA 06                		rtsd	#24, r10-r10
 1054                             	.LFE16:
 1056                             		.global	_dev_ser_readfn
 1058                             	_dev_ser_readfn:
 1059                             	.LFB17:
 332:../device/ser/ser.c **** 
 333:../device/ser/ser.c **** /*----------------------------------------------------------------------
 334:../device/ser/ser.c ****  * Read Device
 335:../device/ser/ser.c ****  */
 336:../device/ser/ser.c **** ER dev_ser_readfn( T_DEVREQ *req, T_MSDI *p_msdi)
 337:../device/ser/ser.c **** {
 1060                             		.loc 2 337 1
 1061 064e 7E AA                   		push.l	r10
 1062                             	.LCFI22:
 1063 0650 71 0A F0                		add	#-16, r0, r10
 1064                             	.LCFI23:
 1065 0653 EF A0                   		mov.L	r10, r0
 1066 0655 E7 A1 02                		mov.L	r1, 8[r10]
 1067 0658 E7 A2 03                		mov.L	r2, 12[r10]
 338:../device/ser/ser.c **** 	T_SER_DCB	*p_dcb;
 339:../device/ser/ser.c **** 	ER		err;
 340:../device/ser/ser.c **** 
 341:../device/ser/ser.c **** 	p_dcb = (T_SER_DCB*)(p_msdi->dmsdi.exinf);
 1068                             		.loc 2 341 8
 1069 065b ED A5 03                		mov.L	12[r10], r5
 1070 065e A9 55                   		mov.L	16[r5], r5
 1071 0660 E7 A5 01                		mov.L	r5, 4[r10]
 342:../device/ser/ser.c **** 
 343:../device/ser/ser.c **** 	if(req->start >= 0) {	// Device specific data
 1072                             		.loc 2 343 8
 1073 0663 ED A5 02                		mov.L	8[r10], r5
 1074 0666 A9 55                   		mov.L	16[r5], r5
 1075                             		.loc 2 343 4
 1076 0668 61 05                   		cmp	#0, r5
 1077 066a 29 1F                   		blt	.L75
 344:../device/ser/ser.c **** 		if( p_dcb->omode & TD_READ ) {
 1078                             		.loc 2 344 12
 1079 066c ED A5 01                		mov.L	4[r10], r5
 1080 066f A8 5D                   		mov.L	4[r5], r5
 1081                             		.loc 2 344 20
 1082 0671 64 15                   		and	#1, r5
 1083                             		.loc 2 344 5
 1084 0673 61 05                   		cmp	#0, r5
 1085 0675 20 0F                   		beq	.L76
 345:../device/ser/ser.c **** 			err = read_data( p_dcb, req);
 1086                             		.loc 2 345 10
 1087 0677 ED A2 02                		mov.L	8[r10], r2
 1088 067a ED A1 01                		mov.L	4[r10], r1
 1089 067d 39 C2 FC                		bsr	_read_data
 1090 0680 E3 A1                   		mov.L	r1, [r10]
 1091 0682 2E 12                   		bra	.L78
 1092                             	.L76:
 346:../device/ser/ser.c **** 		} else {
 347:../device/ser/ser.c **** 			err = E_OACV;
 1093                             		.loc 2 347 8
 1094 0684 F8 A6 E5                		mov.L	#-27, [r10]
 1095 0687 2E 0D                   		bra	.L78
 1096                             	.L75:
 348:../device/ser/ser.c **** 		}
 349:../device/ser/ser.c **** 	} else {		// Device attribute data
 350:../device/ser/ser.c **** 		err = read_atr( p_dcb, req);
 1097                             		.loc 2 350 9
 1098 0689 ED A2 02                		mov.L	8[r10], r2
 1099 068c ED A1 01                		mov.L	4[r10], r1
 1100 068f 39 FA FA                		bsr	_read_atr
 1101 0692 E3 A1                   		mov.L	r1, [r10]
 1102                             	.L78:
 351:../device/ser/ser.c **** 	}
 352:../device/ser/ser.c **** 
 353:../device/ser/ser.c **** 	return err;
 1103                             		.loc 2 353 9
 1104 0694 EC A5                   		mov.L	[r10], r5
 354:../device/ser/ser.c **** }
 1105                             		.loc 2 354 1
 1106 0696 EF 51                   		mov.L	r5, r1
 1107 0698 3F AA 05                		rtsd	#20, r10-r10
 1108                             	.LFE17:
 1110                             		.global	_dev_ser_writefn
 1112                             	_dev_ser_writefn:
 1113                             	.LFB18:
 355:../device/ser/ser.c **** 
 356:../device/ser/ser.c **** /*----------------------------------------------------------------------
 357:../device/ser/ser.c ****  * Write Device
 358:../device/ser/ser.c ****  */
 359:../device/ser/ser.c **** ER dev_ser_writefn( T_DEVREQ *req, T_MSDI *p_msdi)
 360:../device/ser/ser.c **** {
 1114                             		.loc 2 360 1
 1115 069b 7E AA                   		push.l	r10
 1116                             	.LCFI24:
 1117 069d 71 0A F0                		add	#-16, r0, r10
 1118                             	.LCFI25:
 1119 06a0 EF A0                   		mov.L	r10, r0
 1120 06a2 E7 A1 02                		mov.L	r1, 8[r10]
 1121 06a5 E7 A2 03                		mov.L	r2, 12[r10]
 361:../device/ser/ser.c **** 	T_SER_DCB	*p_dcb;
 362:../device/ser/ser.c **** 	ER		err;
 363:../device/ser/ser.c **** 
 364:../device/ser/ser.c **** 	p_dcb = (T_SER_DCB*)(p_msdi->dmsdi.exinf);
 1122                             		.loc 2 364 8
 1123 06a8 ED A5 03                		mov.L	12[r10], r5
 1124 06ab A9 55                   		mov.L	16[r5], r5
 1125 06ad E7 A5 01                		mov.L	r5, 4[r10]
 365:../device/ser/ser.c **** 
 366:../device/ser/ser.c **** 	if(req->start >= 0) {	// Device specific data
 1126                             		.loc 2 366 8
 1127 06b0 ED A5 02                		mov.L	8[r10], r5
 1128 06b3 A9 55                   		mov.L	16[r5], r5
 1129                             		.loc 2 366 4
 1130 06b5 61 05                   		cmp	#0, r5
 1131 06b7 29 1F                   		blt	.L81
 367:../device/ser/ser.c **** 		if( p_dcb->omode & TD_WRITE) {
 1132                             		.loc 2 367 12
 1133 06b9 ED A5 01                		mov.L	4[r10], r5
 1134 06bc A8 5D                   		mov.L	4[r5], r5
 1135                             		.loc 2 367 20
 1136 06be 64 25                   		and	#2, r5
 1137                             		.loc 2 367 5
 1138 06c0 61 05                   		cmp	#0, r5
 1139 06c2 20 0F                   		beq	.L82
 368:../device/ser/ser.c **** 			err = write_data( p_dcb, req);
 1140                             		.loc 2 368 10
 1141 06c4 ED A2 02                		mov.L	8[r10], r2
 1142 06c7 ED A1 01                		mov.L	4[r10], r1
 1143 06ca 39 8B FD                		bsr	_write_data
 1144 06cd E3 A1                   		mov.L	r1, [r10]
 1145 06cf 2E 12                   		bra	.L84
 1146                             	.L82:
 369:../device/ser/ser.c **** 		} else {
 370:../device/ser/ser.c **** 			err = E_OACV;
 1147                             		.loc 2 370 8
 1148 06d1 F8 A6 E5                		mov.L	#-27, [r10]
 1149 06d4 2E 0D                   		bra	.L84
 1150                             	.L81:
 371:../device/ser/ser.c **** 		}
 372:../device/ser/ser.c **** 	} else {		// Device attribute data
 373:../device/ser/ser.c **** 		err = write_atr( p_dcb, req);
 1151                             		.loc 2 373 9
 1152 06d6 ED A2 02                		mov.L	8[r10], r2
 1153 06d9 ED A1 01                		mov.L	4[r10], r1
 1154 06dc 39 74 FB                		bsr	_write_atr
 1155 06df E3 A1                   		mov.L	r1, [r10]
 1156                             	.L84:
 374:../device/ser/ser.c **** 	}
 375:../device/ser/ser.c **** 
 376:../device/ser/ser.c **** 	return err;
 1157                             		.loc 2 376 9
 1158 06e1 EC A5                   		mov.L	[r10], r5
 377:../device/ser/ser.c **** }
 1159                             		.loc 2 377 1
 1160 06e3 EF 51                   		mov.L	r5, r1
 1161 06e5 3F AA 05                		rtsd	#20, r10-r10
 1162                             	.LFE18:
 1164                             		.global	_dev_ser_eventfn
 1166                             	_dev_ser_eventfn:
 1167                             	.LFB19:
 378:../device/ser/ser.c **** 
 379:../device/ser/ser.c **** /*----------------------------------------------------------------------
 380:../device/ser/ser.c ****  * Event Device
 381:../device/ser/ser.c ****  */
 382:../device/ser/ser.c **** ER dev_ser_eventfn( INT evttyp, void *evtinf, T_MSDI *p_msdi)
 383:../device/ser/ser.c **** {
 1168                             		.loc 2 383 1
 1169 06e8 7E AA                   		push.l	r10
 1170                             	.LCFI26:
 1171 06ea 71 0A F4                		add	#-12, r0, r10
 1172                             	.LCFI27:
 1173 06ed EF A0                   		mov.L	r10, r0
 1174 06ef E3 A1                   		mov.L	r1, [r10]
 1175 06f1 E7 A2 01                		mov.L	r2, 4[r10]
 1176 06f4 E7 A3 02                		mov.L	r3, 8[r10]
 384:../device/ser/ser.c **** 	return E_NOSPT;
 1177                             		.loc 2 384 9
 1178 06f7 FB 56 F7                		mov.L	#-9, r5
 385:../device/ser/ser.c **** }
 1179                             		.loc 2 385 1
 1180 06fa EF 51                   		mov.L	r5, r1
 1181 06fc 3F AA 04                		rtsd	#16, r10-r10
 1182                             	.LFE19:
 1184                             		.section C,"a",@progbits
 1185                             		.p2align 2
 1186                             	.LC0:
 1187 0000 73 65 72 00             		.string	"ser"
 1188                             		.section P,"ax"
 1189                             		.global	_dev_init_ser
 1191                             	_dev_init_ser:
 1192                             	.LFB20:
 386:../device/ser/ser.c **** 
 387:../device/ser/ser.c **** /*----------------------------------------------------------------------
 388:../device/ser/ser.c ****  * Serial communication Device initialization and registration
 389:../device/ser/ser.c ****  */
 390:../device/ser/ser.c **** EXPORT ER dev_init_ser( UW unit )
 391:../device/ser/ser.c **** {
 1193                             		.loc 2 391 1
 1194 06ff 7E AA                   		push.l	r10
 1195                             	.LCFI28:
 1196 0701 71 0A B4                		add	#-76, r0, r10
 1197                             	.LCFI29:
 1198 0704 EF A0                   		mov.L	r10, r0
 1199 0706 E7 A1 12                		mov.L	r1, 72[r10]
 392:../device/ser/ser.c **** 	T_SER_DCB	*p_dcb;
 393:../device/ser/ser.c **** 	T_IDEV		idev;
 394:../device/ser/ser.c **** 	T_MSDI		*p_msdi;
 395:../device/ser/ser.c **** 	T_DMSDI		dmsdi;
 396:../device/ser/ser.c **** 	ER		err;
 397:../device/ser/ser.c **** 	INT		i;
 398:../device/ser/ser.c **** 
 399:../device/ser/ser.c **** 	if( unit >= DEV_SER_UNITNM) return E_PAR;
 1200                             		.loc 2 399 4
 1201 0709 ED A5 12                		mov.L	72[r10], r5
 1202 070c 61 C5                   		cmp	#12, r5
 1203 070e 25 08                   		bleu	.L89
 1204                             		.loc 2 399 37 discriminator 1
 1205 0710 FB 56 EF                		mov.L	#-17, r5
 1206 0713 38 28 01                		bra	.L96
 1207                             	.L89:
 400:../device/ser/ser.c **** 
 401:../device/ser/ser.c **** #if TK_SUPPORT_MEMLIB
 402:../device/ser/ser.c **** 	p_dcb = (T_SER_DCB*)Kmalloc(sizeof(T_SER_DCB));
 1208                             		.loc 2 402 22
 1209 0716 75 41 AC                		mov.L	#0xac, r1
 1210 0719 05 00 00 00             		bsr	_Kmalloc
 1211 071d E7 A1 01                		mov.L	r1, 4[r10]
 403:../device/ser/ser.c **** 	if( p_dcb == NULL) return E_NOMEM;
 1212                             		.loc 2 403 4
 1213 0720 ED A5 01                		mov.L	4[r10], r5
 1214 0723 61 05                   		cmp	#0, r5
 1215 0725 1F                      		bne	.L91
 1216                             		.loc 2 403 28 discriminator 1
 1217 0726 FB 56 DF                		mov.L	#-33, r5
 1218 0729 38 12 01                		bra	.L96
 1219                             	.L91:
 404:../device/ser/ser.c **** 	dev_ser_cb[unit]	= p_dcb;
 1220                             		.loc 2 404 19
 1221 072c FB 52 00 00 00 00       		mov.L	#_dev_ser_cb, r5
 1222 0732 ED A4 12                		mov.L	72[r10], r4
 1223 0735 ED A3 01                		mov.L	4[r10], r3
 1224 0738 FE 24 53                		mov.L	r3, [r4,r5]
 405:../device/ser/ser.c **** #else
 406:../device/ser/ser.c **** 	p_dcb = &dev_ser_cb[unit];
 407:../device/ser/ser.c **** #endif
 408:../device/ser/ser.c **** 
 409:../device/ser/ser.c **** 	/* Device registration information */
 410:../device/ser/ser.c **** 	dmsdi.exinf	= p_dcb;
 1225                             		.loc 2 410 14
 1226 073b ED A5 01                		mov.L	4[r10], r5
 1227 073e E7 A5 05                		mov.L	r5, 20[r10]
 411:../device/ser/ser.c **** 	dmsdi.drvatr	= 0;			/* Driver attributes */
 1228                             		.loc 2 411 15
 1229 0741 F9 A6 09 00             		mov.L	#0, 36[r10]
 412:../device/ser/ser.c **** 	dmsdi.devatr	= TDK_UNDEF;		/* Device attributes */
 1230                             		.loc 2 412 15
 1231 0745 F9 A6 0A 00             		mov.L	#0, 40[r10]
 413:../device/ser/ser.c **** 	dmsdi.nsub	= 0;			/* Number of subunits */
 1232                             		.loc 2 413 13
 1233 0749 F9 A6 0B 00             		mov.L	#0, 44[r10]
 414:../device/ser/ser.c **** 	dmsdi.blksz	= 1;			/* Unique data block size (-1 = unknown) */
 1234                             		.loc 2 414 14
 1235 074d F9 A6 0C 01             		mov.L	#1, 48[r10]
 415:../device/ser/ser.c **** 	dmsdi.openfn	= dev_ser_openfn;
 1236                             		.loc 2 415 15
 1237 0751 F9 A2 0D 00 00 00 00    		mov.L	#_dev_ser_openfn, 52[r10]
 416:../device/ser/ser.c **** 	dmsdi.closefn	= dev_ser_closefn;
 1238                             		.loc 2 416 16
 1239 0758 F9 A2 0E 00 00 00 00    		mov.L	#_dev_ser_closefn, 56[r10]
 417:../device/ser/ser.c **** 	dmsdi.readfn	= dev_ser_readfn;
 1240                             		.loc 2 417 15
 1241 075f F9 A2 0F 00 00 00 00    		mov.L	#_dev_ser_readfn, 60[r10]
 418:../device/ser/ser.c **** 	dmsdi.writefn	= dev_ser_writefn;
 1242                             		.loc 2 418 16
 1243 0766 F9 A2 10 00 00 00 00    		mov.L	#_dev_ser_writefn, 64[r10]
 419:../device/ser/ser.c **** 	dmsdi.eventfn	= dev_ser_eventfn;
 1244                             		.loc 2 419 16
 1245 076d F9 A2 11 00 00 00 00    		mov.L	#_dev_ser_eventfn, 68[r10]
 420:../device/ser/ser.c **** 	
 421:../device/ser/ser.c **** 	knl_strcpy( (char*)dmsdi.devnm, DEVCNF_SER_DEVNAME);
 1246                             		.loc 2 421 2
 1247 0774 71 A5 14                		add	#20, r10, r5
 1248 0777 62 45                   		add	#4, r5
 1249 0779 FB 22 00 00 00 00       		mov.L	#.LC0, r2
 1250 077f EF 51                   		mov.L	r5, r1
 1251 0781 05 00 00 00             		bsr	_knl_strcpy
 422:../device/ser/ser.c **** 	i = knl_strlen(DEVCNF_SER_DEVNAME);
 1252                             		.loc 2 422 6
 1253 0785 FB 12 00 00 00 00       		mov.L	#.LC0, r1
 1254 078b 05 00 00 00             		bsr	_knl_strlen
 1255 078f E7 A1 02                		mov.L	r1, 8[r10]
 423:../device/ser/ser.c **** 	dmsdi.devnm[i] = (UB)('a' + unit);
 1256                             		.loc 2 423 19
 1257 0792 ED A5 12                		mov.L	72[r10], r5
 1258 0795 71 55 61                		add	#0x61, r5
 1259 0798 CF 54                   		mov.B	r5, r4
 1260                             		.loc 2 423 17
 1261 079a 71 A5 18                		add	#24, r10, r5
 1262 079d 06 89 A5 02             		add	8[r10].L, r5
 1263 07a1 C3 54                   		mov.B	r4, [r5]
 424:../device/ser/ser.c **** 	dmsdi.devnm[i+1] = 0;
 1264                             		.loc 2 424 15
 1265 07a3 ED A5 02                		mov.L	8[r10], r5
 1266 07a6 62 15                   		add	#1, r5
 1267                             		.loc 2 424 19
 1268 07a8 4B A5                   		add	r10, r5
 1269 07aa 3C D8 00                		mov.B	#0, 24[r5]
 425:../device/ser/ser.c **** 
 426:../device/ser/ser.c **** 	err = msdi_def_dev( &dmsdi, &idev, &p_msdi);
 1270                             		.loc 2 426 8
 1271 07ad 71 A3 10                		add	#16, r10, r3
 1272 07b0 71 A4 0C                		add	#12, r10, r4
 1273 07b3 71 A5 14                		add	#20, r10, r5
 1274 07b6 EF 42                   		mov.L	r4, r2
 1275 07b8 EF 51                   		mov.L	r5, r1
 1276 07ba 05 00 00 00             		bsr	_msdi_def_dev
 1277 07be E3 A1                   		mov.L	r1, [r10]
 427:../device/ser/ser.c **** 	if(err != E_OK) goto err_2;
 1278                             		.loc 2 427 4
 1279 07c0 EC A5                   		mov.L	[r10], r5
 1280 07c2 61 05                   		cmp	#0, r5
 1281 07c4 21 6D                   		bne	.L98
 428:../device/ser/ser.c **** 
 429:../device/ser/ser.c **** 	p_dcb->unit	= unit;
 1282                             		.loc 2 429 14
 1283 07c6 ED A5 01                		mov.L	4[r10], r5
 1284 07c9 ED A4 12                		mov.L	72[r10], r4
 1285 07cc E3 54                   		mov.L	r4, [r5]
 430:../device/ser/ser.c **** 	p_dcb->evtmbfid	= idev.evtmbfid;
 1286                             		.loc 2 430 24
 1287 07ce ED A4 03                		mov.L	12[r10], r4
 1288                             		.loc 2 430 18
 1289 07d1 ED A5 01                		mov.L	4[r10], r5
 1290 07d4 A0 D4                   		mov.L	r4, 8[r5]
 431:../device/ser/ser.c **** 
 432:../device/ser/ser.c **** 	/* Low-level device initialization */
 433:../device/ser/ser.c **** 	err = dev_ser_llinit( p_dcb);
 1291                             		.loc 2 433 8
 1292 07d6 ED A1 01                		mov.L	4[r10], r1
 1293 07d9 05 00 00 00             		bsr	_dev_ser_llinit
 1294 07dd E3 A1                   		mov.L	r1, [r10]
 434:../device/ser/ser.c **** 	if(err != E_OK) goto err_1;
 1295                             		.loc 2 434 4
 1296 07df EC A5                   		mov.L	[r10], r5
 1297 07e1 61 05                   		cmp	#0, r5
 1298 07e3 21 42                   		bne	.L99
 435:../device/ser/ser.c **** 
 436:../device/ser/ser.c **** 	/* Set default value for attribute data */
 437:../device/ser/ser.c **** 	p_dcb->com_speed = DEVCNF_SER_SPEED;
 1299                             		.loc 2 437 19
 1300 07e5 ED A5 01                		mov.L	4[r10], r5
 1301 07e8 F9 5E 04 00 C2 01       		mov.L	#0x1c200, 16[r5]
 438:../device/ser/ser.c **** 	dev_ser_llctl( unit, LLD_SER_SPEED, DEVCNF_SER_SPEED);
 1302                             		.loc 2 438 2
 1303 07ee FB 3E 00 C2 01          		mov.L	#0x1c200, r3
 1304 07f3 66 12                   		mov.L	#1, r2
 1305 07f5 ED A1 12                		mov.L	72[r10], r1
 1306 07f8 05 00 00 00             		bsr	_dev_ser_llctl
 439:../device/ser/ser.c **** 	p_dcb->com_mode = DEVCNF_SER_MODE;
 1307                             		.loc 2 439 18
 1308 07fc ED A5 01                		mov.L	4[r10], r5
 1309 07ff F9 5E 03 00 C0 00       		mov.L	#0xc000, 12[r5]
 440:../device/ser/ser.c **** 	dev_ser_llctl( unit, LLD_SER_MODE, DEVCNF_SER_MODE);
 1310                             		.loc 2 440 2
 1311 0805 FB 3E 00 C0 00          		mov.L	#0xc000, r3
 1312 080a 66 02                   		mov.L	#0, r2
 1313 080c ED A1 12                		mov.L	72[r10], r1
 1314 080f 05 00 00 00             		bsr	_dev_ser_llctl
 441:../device/ser/ser.c **** 	p_dcb->snd_tmo = DEVCNF_SER_SND_TMO;
 1315                             		.loc 2 441 17
 1316 0813 ED A5 01                		mov.L	4[r10], r5
 1317 0816 F9 56 06 FF             		mov.L	#-1, 24[r5]
 442:../device/ser/ser.c **** 	p_dcb->rcv_tmo = DEVCNF_SER_RCV_TMO;
 1318                             		.loc 2 442 17
 1319 081a ED A5 01                		mov.L	4[r10], r5
 1320 081d F9 56 07 FF             		mov.L	#-1, 28[r5]
 443:../device/ser/ser.c **** 
 444:../device/ser/ser.c **** 	return E_OK;
 1321                             		.loc 2 444 9
 1322 0821 66 05                   		mov.L	#0, r5
 1323 0823 2E 18                   		bra	.L96
 1324                             	.L99:
 434:../device/ser/ser.c **** 
 1325                             		.loc 2 434 18
 1326 0825 03                      		nop
 1327                             	.L95:
 445:../device/ser/ser.c **** 
 446:../device/ser/ser.c **** err_1:
 447:../device/ser/ser.c **** 	msdi_del_dev(p_msdi);
 1328                             		.loc 2 447 2
 1329 0826 ED A5 04                		mov.L	16[r10], r5
 1330 0829 EF 51                   		mov.L	r5, r1
 1331 082b 05 00 00 00             		bsr	_msdi_del_dev
 1332 082f 2E 03                   		bra	.L93
 1333                             	.L98:
 427:../device/ser/ser.c **** 
 1334                             		.loc 2 427 18
 1335 0831 03                      		nop
 1336                             	.L93:
 448:../device/ser/ser.c **** err_2:
 449:../device/ser/ser.c **** 	Kfree(p_dcb);
 1337                             		.loc 2 449 2
 1338 0832 ED A1 01                		mov.L	4[r10], r1
 1339 0835 05 00 00 00             		bsr	_Kfree
 450:../device/ser/ser.c **** 	return err;
 1340                             		.loc 2 450 9
 1341 0839 EC A5                   		mov.L	[r10], r5
 1342                             		.balign 8,3,1
 1343                             	.L96:
 451:../device/ser/ser.c **** }
 1344                             		.loc 2 451 1 discriminator 1
 1345 083b EF 51                   		mov.L	r5, r1
 1346 083d 3F AA 14                		rtsd	#80, r10-r10
 1347                             	.LFE20:
 1652                             	.Letext0:
 1653                             		.file 3 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\include/tk/typedef.h"
 1654                             		.file 4 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\include/tk/syscall.h"
 1655                             		.file 5 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\include/tk/syslib.h"
 1656                             		.file 6 "../device/ser/../common/drvif/msdrvif.h"
 1657                             		.file 7 "../device/ser/../include/dev_ser.h"
