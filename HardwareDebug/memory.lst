   1                             		.file	"memory.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   5                             	_QueInit:
   6                             	.LFB6:
   7                             		.file 1 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\include/sys/queue.h"
   1:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
   2:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *----------------------------------------------------------------------
   3:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *    micro T-Kernel 3.00.00
   4:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *
   5:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *    Copyright (C) 2006-2019 by Ken Sakamura.
   6:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *    This software is distributed under the T-License 2.1.
   7:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *----------------------------------------------------------------------
   8:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *
   9:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.
  10:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *
  11:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *----------------------------------------------------------------------
  12:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  13:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  14:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  15:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	queue.h
  16:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *
  17:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	Queuing operation
  18:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  19:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  20:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** #ifndef	__SYS_QUEUE_H__
  21:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** #define __SYS_QUEUE_H__
  22:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  23:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** #include <tk/tkernel.h>
  24:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  25:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** #ifdef __cplusplus
  26:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** extern "C" {
  27:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** #endif
  28:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  29:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  30:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  * Double-link queue (ring)
  31:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  32:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** typedef struct queue {
  33:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	struct queue	*next;
  34:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	struct queue	*prev;
  35:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** } QUEUE;
  36:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  37:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  38:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  * Queue initialization 
  39:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  40:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** Inline void QueInit( QUEUE *que )
  41:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** {
   8                             		.loc 1 41 1
   9 0000 7E AA                   		push.l	r10
  10                             	.LCFI0:
  11 0002 71 0A FC                		add	#-4, r0, r10
  12                             	.LCFI1:
  13 0005 EF A0                   		mov.L	r10, r0
  14 0007 E3 A1                   		mov.L	r1, [r10]
  42:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	que->next = (struct queue *)que;
  15                             		.loc 1 42 12
  16 0009 EC A5                   		mov.L	[r10], r5
  17 000b EC A4                   		mov.L	[r10], r4
  18 000d E3 54                   		mov.L	r4, [r5]
  43:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	que->prev = (struct queue *)que;
  19                             		.loc 1 43 12
  20 000f EC A5                   		mov.L	[r10], r5
  21 0011 EC A4                   		mov.L	[r10], r4
  22 0013 A0 5C                   		mov.L	r4, 4[r5]
  44:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** }
  23                             		.loc 1 44 1
  24 0015 03                      		nop
  25 0016 3F AA 02                		rtsd	#8, r10-r10
  26                             	.LFE6:
  29                             	_QueInsert:
  30                             	.LFB8:
  45:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  46:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  47:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  * TRUE if the queue is empty 
  48:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  49:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** Inline BOOL isQueEmpty( QUEUE *que )
  50:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** {
  51:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	return ( que->next == que )? TRUE: FALSE;
  52:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** }
  53:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  54:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  55:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  * Insert in queue 
  56:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	Inserts entry directly prior to que 
  57:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  58:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** Inline void QueInsert( QUEUE *entry, QUEUE *que )
  59:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** {
  31                             		.loc 1 59 1
  32 0019 7E AA                   		push.l	r10
  33                             	.LCFI2:
  34 001b 71 0A F8                		add	#-8, r0, r10
  35                             	.LCFI3:
  36 001e EF A0                   		mov.L	r10, r0
  37 0020 E3 A1                   		mov.L	r1, [r10]
  38 0022 E7 A2 01                		mov.L	r2, 4[r10]
  60:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	entry->prev = (struct queue*) que->prev;
  39                             		.loc 1 60 16
  40 0025 ED A5 01                		mov.L	4[r10], r5
  41 0028 A8 5C                   		mov.L	4[r5], r4
  42                             		.loc 1 60 14
  43 002a EC A5                   		mov.L	[r10], r5
  44 002c A0 5C                   		mov.L	r4, 4[r5]
  61:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	entry->next = que;
  45                             		.loc 1 61 14
  46 002e EC A5                   		mov.L	[r10], r5
  47 0030 ED A4 01                		mov.L	4[r10], r4
  48 0033 E3 54                   		mov.L	r4, [r5]
  62:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	que->prev->next = entry;
  49                             		.loc 1 62 5
  50 0035 ED A5 01                		mov.L	4[r10], r5
  51 0038 A8 5D                   		mov.L	4[r5], r5
  52                             		.loc 1 62 18
  53 003a EC A4                   		mov.L	[r10], r4
  54 003c E3 54                   		mov.L	r4, [r5]
  63:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	que->prev = entry;
  55                             		.loc 1 63 12
  56 003e ED A5 01                		mov.L	4[r10], r5
  57 0041 EC A4                   		mov.L	[r10], r4
  58 0043 A0 5C                   		mov.L	r4, 4[r5]
  64:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** }
  59                             		.loc 1 64 1
  60 0045 03                      		nop
  61 0046 3F AA 03                		rtsd	#12, r10-r10
  62                             	.LFE8:
  65                             	_QueRemove:
  66                             	.LFB9:
  65:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  66:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  67:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  * Delete from queue 
  68:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	Deletes entry from queue 
  69:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	No action is performed if entry is empty. 
  70:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  71:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** Inline void QueRemove( QUEUE *entry )
  72:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** {
  67                             		.loc 1 72 1
  68 0049 7E AA                   		push.l	r10
  69                             	.LCFI4:
  70 004b 71 0A FC                		add	#-4, r0, r10
  71                             	.LCFI5:
  72 004e EF A0                   		mov.L	r10, r0
  73 0050 E3 A1                   		mov.L	r1, [r10]
  73:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	if ( entry->next != entry ) {
  74                             		.loc 1 73 12
  75 0052 EC A5                   		mov.L	[r10], r5
  76 0054 EC 55                   		mov.L	[r5], r5
  77                             		.loc 1 73 5
  78 0056 EC A4                   		mov.L	[r10], r4
  79 0058 47 54                   		cmp	r5, r4
  80 005a 20 16                   		beq	.L5
  74:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 		entry->prev->next = (struct queue*) entry->next;
  81                             		.loc 1 74 8
  82 005c EC A5                   		mov.L	[r10], r5
  83 005e A8 5D                   		mov.L	4[r5], r5
  84                             		.loc 1 74 23
  85 0060 EC A4                   		mov.L	[r10], r4
  86 0062 EC 44                   		mov.L	[r4], r4
  87                             		.loc 1 74 21
  88 0064 E3 54                   		mov.L	r4, [r5]
  75:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 		entry->next->prev = (struct queue*) entry->prev;
  89                             		.loc 1 75 8
  90 0066 EC A5                   		mov.L	[r10], r5
  91 0068 EC 55                   		mov.L	[r5], r5
  92                             		.loc 1 75 23
  93 006a EC A4                   		mov.L	[r10], r4
  94 006c A8 4C                   		mov.L	4[r4], r4
  95                             		.loc 1 75 21
  96 006e A0 5C                   		mov.L	r4, 4[r5]
  97                             	.L5:
  76:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	}
  77:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** }
  98                             		.loc 1 77 1
  99 0070 03                      		nop
 100 0071 3F AA 02                		rtsd	#8, r10-r10
 101                             	.LFE9:
 103                             		.global	_knl_searchFreeArea
 105                             	_knl_searchFreeArea:
 106                             	.LFB20:
 107                             		.file 2 "../kernel/tkernel/memory.c"
   1:../kernel/tkernel/memory.c **** /*
   2:../kernel/tkernel/memory.c ****  *----------------------------------------------------------------------
   3:../kernel/tkernel/memory.c ****  *    micro T-Kernel 3.00.02
   4:../kernel/tkernel/memory.c ****  *
   5:../kernel/tkernel/memory.c ****  *    Copyright (C) 2006-2020 by Ken Sakamura.
   6:../kernel/tkernel/memory.c ****  *    This software is distributed under the T-License 2.2.
   7:../kernel/tkernel/memory.c ****  *----------------------------------------------------------------------
   8:../kernel/tkernel/memory.c ****  *
   9:../kernel/tkernel/memory.c ****  *    Released by TRON Forum(http://www.tron.org) at 2020/10/21 .
  10:../kernel/tkernel/memory.c ****  *
  11:../kernel/tkernel/memory.c ****  *----------------------------------------------------------------------
  12:../kernel/tkernel/memory.c ****  */
  13:../kernel/tkernel/memory.c **** 
  14:../kernel/tkernel/memory.c **** /*
  15:../kernel/tkernel/memory.c ****  *	memory.c
  16:../kernel/tkernel/memory.c ****  *	In-kernel dynamic memory management
  17:../kernel/tkernel/memory.c ****  */
  18:../kernel/tkernel/memory.c **** 
  19:../kernel/tkernel/memory.c **** #include "kernel.h"
  20:../kernel/tkernel/memory.c **** #include "memory.h"
  21:../kernel/tkernel/memory.c **** 
  22:../kernel/tkernel/memory.c **** /*
  23:../kernel/tkernel/memory.c ****  * FreeQue search
  24:../kernel/tkernel/memory.c ****  *	Search the free area whose size is equal to 'blksz',
  25:../kernel/tkernel/memory.c ****  *	or larger than
  26:../kernel/tkernel/memory.c ****  *      'blksz' but closest.
  27:../kernel/tkernel/memory.c ****  *	If it does not exist, return '&imacb->freeque'.
  28:../kernel/tkernel/memory.c ****  */
  29:../kernel/tkernel/memory.c **** EXPORT QUEUE* knl_searchFreeArea( IMACB *imacb, W blksz )
  30:../kernel/tkernel/memory.c **** {
 108                             		.loc 2 30 1
 109 0074 7E AA                   		push.l	r10
 110                             	.LCFI6:
 111 0076 71 0A F0                		add	#-16, r0, r10
 112                             	.LCFI7:
 113 0079 EF A0                   		mov.L	r10, r0
 114 007b E7 A1 02                		mov.L	r1, 8[r10]
 115 007e E7 A2 03                		mov.L	r2, 12[r10]
  31:../kernel/tkernel/memory.c **** 	QUEUE	*q = &imacb->freeque;
 116                             		.loc 2 31 9
 117 0081 ED A5 02                		mov.L	8[r10], r5
 118 0084 62 C5                   		add	#12, r5
 119 0086 E3 A5                   		mov.L	r5, [r10]
  32:../kernel/tkernel/memory.c **** 
  33:../kernel/tkernel/memory.c **** 	/* For area whose memory pool size is less than 1/4,
  34:../kernel/tkernel/memory.c **** 	   search from smaller size.
  35:../kernel/tkernel/memory.c **** 	   Otherwise, search from larger size. */
  36:../kernel/tkernel/memory.c **** 	if ( blksz > imacb->memsz / 4 ) {
 120                             		.loc 2 36 20
 121 0088 ED A5 02                		mov.L	8[r10], r5
 122 008b EC 55                   		mov.L	[r5], r5
 123                             		.loc 2 36 28
 124 008d 61 05                   		cmp	#0, r5
 125 008f 28 04                   		bge	.L7
 126 0091 62 35                   		add	#3, r5
 127                             	.L7:
 128 0093 6A 25                   		shar	#2, r5
 129                             		.loc 2 36 5
 130 0095 ED A4 03                		mov.L	12[r10], r4
 131 0098 47 54                   		cmp	r5, r4
 132 009a 2B 61                   		ble	.L16
 133                             	.LBB2:
  37:../kernel/tkernel/memory.c **** 		/* Search from larger size. */
  38:../kernel/tkernel/memory.c **** 		W fsz = 0;
 134                             		.loc 2 38 5
 135 009c F9 A6 01 00             		mov.L	#0, 4[r10]
  39:../kernel/tkernel/memory.c **** 		while ( (q = q->prev) != &imacb->freeque ) {
 136                             		.loc 2 39 9
 137 00a0 2E 29                   		bra	.L9
 138                             	.L13:
  40:../kernel/tkernel/memory.c **** 			fsz = FreeSize(q);
 139                             		.loc 2 40 10
 140 00a2 EC A5                   		mov.L	[r10], r5
 141 00a4 62 85                   		add	#8, r5
 142 00a6 A8 5D                   		mov.L	4[r5], r5
 143                             		.loc 2 40 8
 144 00a8 E7 A5 01                		mov.L	r5, 4[r10]
  41:../kernel/tkernel/memory.c **** 			if ( fsz <= blksz ) {
 145                             		.loc 2 41 7
 146 00ab ED A4 01                		mov.L	4[r10], r4
 147 00ae ED A5 03                		mov.L	12[r10], r5
 148 00b1 47 54                   		cmp	r5, r4
 149 00b3 2A 16                   		bgt	.L9
  42:../kernel/tkernel/memory.c **** 				return ( fsz < blksz )? q->next: q;
 150                             		.loc 2 42 36
 151 00b5 ED A4 01                		mov.L	4[r10], r4
 152 00b8 ED A5 03                		mov.L	12[r10], r5
 153 00bb 47 54                   		cmp	r5, r4
 154 00bd 28 08                   		bge	.L10
 155                             		.loc 2 42 36 is_stmt 0 discriminator 1
 156 00bf EC A5                   		mov.L	[r10], r5
 157 00c1 EC 55                   		mov.L	[r5], r5
 158 00c3 2E 4E                   		bra	.L12
 159                             	.L10:
 160                             		.loc 2 42 36 discriminator 2
 161 00c5 EC A5                   		mov.L	[r10], r5
 162 00c7 2E 4A                   		bra	.L12
 163                             	.L9:
  39:../kernel/tkernel/memory.c **** 			fsz = FreeSize(q);
 164                             		.loc 2 39 14 is_stmt 1
 165 00c9 EC A5                   		mov.L	[r10], r5
 166 00cb A8 5D                   		mov.L	4[r5], r5
 167 00cd E3 A5                   		mov.L	r5, [r10]
  39:../kernel/tkernel/memory.c **** 			fsz = FreeSize(q);
 168                             		.loc 2 39 28
 169 00cf ED A5 02                		mov.L	8[r10], r5
 170 00d2 62 C5                   		add	#12, r5
  39:../kernel/tkernel/memory.c **** 			fsz = FreeSize(q);
 171                             		.loc 2 39 9
 172 00d4 EC A4                   		mov.L	[r10], r4
 173 00d6 47 54                   		cmp	r5, r4
 174 00d8 21 CA                   		bne	.L13
  43:../kernel/tkernel/memory.c **** 			}
  44:../kernel/tkernel/memory.c **** 		}
  45:../kernel/tkernel/memory.c **** 		return ( fsz >= blksz )? q->next: q;
 175                             		.loc 2 45 35
 176 00da ED A4 01                		mov.L	4[r10], r4
 177 00dd ED A5 03                		mov.L	12[r10], r5
 178 00e0 47 54                   		cmp	r5, r4
 179 00e2 29 08                   		blt	.L14
 180                             		.loc 2 45 35 is_stmt 0 discriminator 1
 181 00e4 EC A5                   		mov.L	[r10], r5
 182 00e6 EC 55                   		mov.L	[r5], r5
 183 00e8 2E 29                   		bra	.L12
 184                             	.L14:
 185                             		.loc 2 45 35 discriminator 2
 186 00ea EC A5                   		mov.L	[r10], r5
 187 00ec 2E 25                   		bra	.L12
 188                             	.L18:
 189                             	.LBE2:
  46:../kernel/tkernel/memory.c **** 	} else {
  47:../kernel/tkernel/memory.c **** 		/* Search from smaller size. */
  48:../kernel/tkernel/memory.c **** 		while ( (q = q->next) != &imacb->freeque ) {
  49:../kernel/tkernel/memory.c **** 			if ( FreeSize(q) >= blksz ) {
 190                             		.loc 2 49 9 is_stmt 1
 191 00ee EC A5                   		mov.L	[r10], r5
 192 00f0 62 85                   		add	#8, r5
 193 00f2 A8 5D                   		mov.L	4[r5], r5
 194                             		.loc 2 49 7
 195 00f4 ED A4 03                		mov.L	12[r10], r4
 196 00f7 47 54                   		cmp	r5, r4
 197 00f9 2B 15                   		ble	.L19
 198                             	.L16:
  48:../kernel/tkernel/memory.c **** 			if ( FreeSize(q) >= blksz ) {
 199                             		.loc 2 48 14
 200 00fb EC A5                   		mov.L	[r10], r5
 201 00fd EC 55                   		mov.L	[r5], r5
 202 00ff E3 A5                   		mov.L	r5, [r10]
  48:../kernel/tkernel/memory.c **** 			if ( FreeSize(q) >= blksz ) {
 203                             		.loc 2 48 28
 204 0101 ED A5 02                		mov.L	8[r10], r5
 205 0104 62 C5                   		add	#12, r5
  48:../kernel/tkernel/memory.c **** 			if ( FreeSize(q) >= blksz ) {
 206                             		.loc 2 48 9
 207 0106 EC A4                   		mov.L	[r10], r4
 208 0108 47 54                   		cmp	r5, r4
 209 010a 21 E4                   		bne	.L18
 210 010c 2E 03                   		bra	.L17
 211                             	.L19:
  50:../kernel/tkernel/memory.c **** 				break;
 212                             		.loc 2 50 5
 213 010e 03                      		nop
 214                             	.L17:
  51:../kernel/tkernel/memory.c **** 			}
  52:../kernel/tkernel/memory.c **** 		}
  53:../kernel/tkernel/memory.c **** 		return q;
 215                             		.loc 2 53 10
 216 010f EC A5                   		mov.L	[r10], r5
 217                             		.balign 8,3,1
 218                             	.L12:
  54:../kernel/tkernel/memory.c **** 	}
  55:../kernel/tkernel/memory.c **** }
 219                             		.loc 2 55 1
 220 0111 EF 51                   		mov.L	r5, r1
 221 0113 3F AA 05                		rtsd	#20, r10-r10
 222                             	.LFE20:
 224                             		.global	_knl_appendFreeArea
 226                             	_knl_appendFreeArea:
 227                             	.LFB21:
  56:../kernel/tkernel/memory.c **** 
  57:../kernel/tkernel/memory.c **** 
  58:../kernel/tkernel/memory.c **** /*
  59:../kernel/tkernel/memory.c ****  * Registration of free area on FreeQue
  60:../kernel/tkernel/memory.c ****  *	FreeQue is composed of 2 types: Queue that links the
  61:../kernel/tkernel/memory.c ****  *	different size of areas by size and queue that links the
  62:../kernel/tkernel/memory.c ****  *	same size of areas.
  63:../kernel/tkernel/memory.c ****  *
  64:../kernel/tkernel/memory.c ****  *	freeque
  65:../kernel/tkernel/memory.c ****  *	|
  66:../kernel/tkernel/memory.c ****  *	|   +-----------------------+	    +-----------------------+
  67:../kernel/tkernel/memory.c ****  *	|   | AreaQue		    |	    | AreaQue		    |
  68:../kernel/tkernel/memory.c ****  *	|   +-----------------------+	    +-----------------------+
  69:../kernel/tkernel/memory.c ****  *	*---> FreeQue Size order    |	    | EmptyQue		    |
  70:../kernel/tkernel/memory.c ****  *	|   | FreeQue Same size   --------->| FreeQue Same size   ----->
  71:../kernel/tkernel/memory.c ****  *	|   |			    |	    |			    |
  72:../kernel/tkernel/memory.c ****  *	|   |			    |	    |			    |
  73:../kernel/tkernel/memory.c ****  *	|   +-----------------------+	    +-----------------------+
  74:../kernel/tkernel/memory.c ****  *	|   | AreaQue		    |	    | AreaQue		    |
  75:../kernel/tkernel/memory.c ****  *	v   +-----------------------+	    +-----------------------+
  76:../kernel/tkernel/memory.c ****  */
  77:../kernel/tkernel/memory.c **** EXPORT void knl_appendFreeArea( IMACB *imacb, QUEUE *aq )
  78:../kernel/tkernel/memory.c **** {
 228                             		.loc 2 78 1
 229 0116 7E AA                   		push.l	r10
 230                             	.LCFI8:
 231 0118 71 0A F0                		add	#-16, r0, r10
 232                             	.LCFI9:
 233 011b EF A0                   		mov.L	r10, r0
 234 011d E7 A1 02                		mov.L	r1, 8[r10]
 235 0120 E7 A2 03                		mov.L	r2, 12[r10]
  79:../kernel/tkernel/memory.c **** 	QUEUE	*fq;
  80:../kernel/tkernel/memory.c **** 	W	size = AreaSize(aq);
 236                             		.loc 2 80 11
 237 0123 ED A5 03                		mov.L	12[r10], r5
 238 0126 EC 54                   		mov.L	[r5], r4
 239 0128 ED A5 03                		mov.L	12[r10], r5
 240 012b 62 85                   		add	#8, r5
 241                             		.loc 2 80 4
 242 012d FF 05 54                		sub	r5, r4, r5
 243 0130 E3 A5                   		mov.L	r5, [r10]
  81:../kernel/tkernel/memory.c **** 
  82:../kernel/tkernel/memory.c **** 	/* Registration position search */
  83:../kernel/tkernel/memory.c **** 	/*  Search the free area whose size is equal to 'blksz',
  84:../kernel/tkernel/memory.c **** 	 *  or larger than 'blksz' but closest.
  85:../kernel/tkernel/memory.c **** 	 *  If it does not exist, return '&imacb->freeque'.
  86:../kernel/tkernel/memory.c **** 	 */
  87:../kernel/tkernel/memory.c **** 	fq = knl_searchFreeArea(imacb, size);
 244                             		.loc 2 87 7
 245 0132 EC A2                   		mov.L	[r10], r2
 246 0134 ED A1 02                		mov.L	8[r10], r1
 247 0137 05 00 00 00             		bsr	_knl_searchFreeArea
 248 013b E7 A1 01                		mov.L	r1, 4[r10]
  88:../kernel/tkernel/memory.c **** 
  89:../kernel/tkernel/memory.c **** 	/* Register */
  90:../kernel/tkernel/memory.c **** 	clrAreaFlag(aq, AREA_USE);
 249                             		.loc 2 90 2
 250 013e ED A5 03                		mov.L	12[r10], r5
 251 0141 A8 5D                   		mov.L	4[r5], r5
 252 0143 75 25 FE                		and	#-2, r5
 253 0146 EF 54                   		mov.L	r5, r4
 254 0148 ED A5 03                		mov.L	12[r10], r5
 255 014b A0 5C                   		mov.L	r4, 4[r5]
  91:../kernel/tkernel/memory.c **** 	if ( fq != &imacb->freeque && FreeSize(fq) == size ) {
 256                             		.loc 2 91 13
 257 014d ED A5 02                		mov.L	8[r10], r5
 258 0150 62 C5                   		add	#12, r5
 259                             		.loc 2 91 5
 260 0152 ED A4 01                		mov.L	4[r10], r4
 261 0155 47 54                   		cmp	r5, r4
 262 0157 20 5F                   		beq	.L21
 263                             		.loc 2 91 32 discriminator 1
 264 0159 ED A5 01                		mov.L	4[r10], r5
 265 015c 62 85                   		add	#8, r5
 266 015e A8 5D                   		mov.L	4[r5], r5
 267                             		.loc 2 91 29 discriminator 1
 268 0160 EC A4                   		mov.L	[r10], r4
 269 0162 47 54                   		cmp	r5, r4
 270 0164 21 52                   		bne	.L21
  92:../kernel/tkernel/memory.c **** 		/* FreeQue Same size */
  93:../kernel/tkernel/memory.c **** 		(aq + 2)->next = (fq + 1)->next;
 271                             		.loc 2 93 24
 272 0166 ED A5 01                		mov.L	4[r10], r5
 273 0169 71 54 08                		add	#8, r5, r4
 274                             		.loc 2 93 7
 275 016c ED A5 03                		mov.L	12[r10], r5
 276 016f 71 55 10                		add	#16, r5
 277                             		.loc 2 93 28
 278 0172 EC 44                   		mov.L	[r4], r4
 279                             		.loc 2 93 18
 280 0174 E3 54                   		mov.L	r4, [r5]
  94:../kernel/tkernel/memory.c **** 		(fq + 1)->next = aq + 2;
 281                             		.loc 2 94 7
 282 0176 ED A5 01                		mov.L	4[r10], r5
 283 0179 62 85                   		add	#8, r5
 284                             		.loc 2 94 23
 285 017b ED A4 03                		mov.L	12[r10], r4
 286 017e 71 44 10                		add	#16, r4
 287                             		.loc 2 94 18
 288 0181 E3 54                   		mov.L	r4, [r5]
  95:../kernel/tkernel/memory.c **** 		(aq + 2)->prev = fq + 1;
 289                             		.loc 2 95 7
 290 0183 ED A5 03                		mov.L	12[r10], r5
 291 0186 71 55 10                		add	#16, r5
 292                             		.loc 2 95 23
 293 0189 ED A4 01                		mov.L	4[r10], r4
 294 018c 62 84                   		add	#8, r4
 295                             		.loc 2 95 18
 296 018e A0 5C                   		mov.L	r4, 4[r5]
  96:../kernel/tkernel/memory.c **** 		if( (aq + 2)->next != NULL ) {
 297                             		.loc 2 96 11
 298 0190 ED A5 03                		mov.L	12[r10], r5
 299 0193 71 55 10                		add	#16, r5
 300                             		.loc 2 96 15
 301 0196 EC 55                   		mov.L	[r5], r5
 302                             		.loc 2 96 5
 303 0198 61 05                   		cmp	#0, r5
 304 019a 20 12                   		beq	.L22
  97:../kernel/tkernel/memory.c **** 			(aq + 2)->next->prev = aq + 2;
 305                             		.loc 2 97 8
 306 019c ED A5 03                		mov.L	12[r10], r5
 307 019f 71 55 10                		add	#16, r5
 308                             		.loc 2 97 12
 309 01a2 EC 55                   		mov.L	[r5], r5
 310                             		.loc 2 97 30
 311 01a4 ED A4 03                		mov.L	12[r10], r4
 312 01a7 71 44 10                		add	#16, r4
 313                             		.loc 2 97 25
 314 01aa A0 5C                   		mov.L	r4, 4[r5]
 315                             	.L22:
  98:../kernel/tkernel/memory.c **** 		}
  99:../kernel/tkernel/memory.c **** 		(aq + 1)->next = NULL;
 316                             		.loc 2 99 7
 317 01ac ED A5 03                		mov.L	12[r10], r5
 318 01af 62 85                   		add	#8, r5
 319                             		.loc 2 99 18
 320 01b1 F8 56 00                		mov.L	#0, [r5]
 321 01b4 2E 22                   		bra	.L23
 322                             	.L21:
 100:../kernel/tkernel/memory.c **** 	} else {
 101:../kernel/tkernel/memory.c **** 		/* FreeQue Size order */
 102:../kernel/tkernel/memory.c **** 		QueInsert(aq + 1, fq);
 323                             		.loc 2 102 3
 324 01b6 ED A5 03                		mov.L	12[r10], r5
 325 01b9 62 85                   		add	#8, r5
 326 01bb ED A2 01                		mov.L	4[r10], r2
 327 01be EF 51                   		mov.L	r5, r1
 328 01c0 39 59 FE                		bsr	_QueInsert
 103:../kernel/tkernel/memory.c **** 		(aq + 2)->next = NULL;
 329                             		.loc 2 103 7
 330 01c3 ED A5 03                		mov.L	12[r10], r5
 331 01c6 71 55 10                		add	#16, r5
 332                             		.loc 2 103 18
 333 01c9 F8 56 00                		mov.L	#0, [r5]
 104:../kernel/tkernel/memory.c **** 		(aq + 2)->prev = (QUEUE*)size;
 334                             		.loc 2 104 7
 335 01cc ED A5 03                		mov.L	12[r10], r5
 336 01cf 71 55 10                		add	#16, r5
 337                             		.loc 2 104 20
 338 01d2 EC A4                   		mov.L	[r10], r4
 339                             		.loc 2 104 18
 340 01d4 A0 5C                   		mov.L	r4, 4[r5]
 341                             	.L23:
 105:../kernel/tkernel/memory.c **** 	}
 106:../kernel/tkernel/memory.c **** }
 342                             		.loc 2 106 1
 343 01d6 03                      		nop
 344 01d7 3F AA 05                		rtsd	#20, r10-r10
 345                             	.LFE21:
 347                             		.global	_knl_removeFreeQue
 349                             	_knl_removeFreeQue:
 350                             	.LFB22:
 107:../kernel/tkernel/memory.c **** 
 108:../kernel/tkernel/memory.c **** /*
 109:../kernel/tkernel/memory.c ****  * Delete from FreeQue
 110:../kernel/tkernel/memory.c ****  */
 111:../kernel/tkernel/memory.c **** EXPORT void knl_removeFreeQue( QUEUE *fq )
 112:../kernel/tkernel/memory.c **** {
 351                             		.loc 2 112 1
 352 01da 7E AA                   		push.l	r10
 353                             	.LCFI10:
 354 01dc 71 0A FC                		add	#-4, r0, r10
 355                             	.LCFI11:
 356 01df EF A0                   		mov.L	r10, r0
 357 01e1 E3 A1                   		mov.L	r1, [r10]
 113:../kernel/tkernel/memory.c **** 	if ( fq->next == NULL ) {	/* FreeQue Same size */
 358                             		.loc 2 113 9
 359 01e3 EC A5                   		mov.L	[r10], r5
 360 01e5 EC 55                   		mov.L	[r5], r5
 361                             		.loc 2 113 5
 362 01e7 61 05                   		cmp	#0, r5
 363 01e9 21 2A                   		bne	.L25
 114:../kernel/tkernel/memory.c **** 		(fq + 1)->prev->next = (fq + 1)->next;
 364                             		.loc 2 114 30
 365 01eb EC A5                   		mov.L	[r10], r5
 366 01ed 62 85                   		add	#8, r5
 367                             		.loc 2 114 7
 368 01ef EC A4                   		mov.L	[r10], r4
 369 01f1 62 84                   		add	#8, r4
 370                             		.loc 2 114 11
 371 01f3 A8 4C                   		mov.L	4[r4], r4
 372                             		.loc 2 114 34
 373 01f5 EC 55                   		mov.L	[r5], r5
 374                             		.loc 2 114 24
 375 01f7 E3 45                   		mov.L	r5, [r4]
 115:../kernel/tkernel/memory.c **** 		if ( (fq + 1)->next != NULL ) {
 376                             		.loc 2 115 12
 377 01f9 EC A5                   		mov.L	[r10], r5
 378 01fb 62 85                   		add	#8, r5
 379                             		.loc 2 115 16
 380 01fd EC 55                   		mov.L	[r5], r5
 381                             		.loc 2 115 6
 382 01ff 61 05                   		cmp	#0, r5
 383 0201 20 3E                   		beq	.L29
 116:../kernel/tkernel/memory.c **** 			(fq + 1)->next->prev = (fq + 1)->prev;
 384                             		.loc 2 116 31
 385 0203 EC A5                   		mov.L	[r10], r5
 386 0205 62 85                   		add	#8, r5
 387                             		.loc 2 116 8
 388 0207 EC A4                   		mov.L	[r10], r4
 389 0209 62 84                   		add	#8, r4
 390                             		.loc 2 116 12
 391 020b EC 44                   		mov.L	[r4], r4
 392                             		.loc 2 116 35
 393 020d A8 5D                   		mov.L	4[r5], r5
 394                             		.loc 2 116 25
 395 020f A0 4D                   		mov.L	r5, 4[r4]
 117:../kernel/tkernel/memory.c **** 		}
 118:../kernel/tkernel/memory.c **** 	} else {			/* FreeQue Size order */
 119:../kernel/tkernel/memory.c **** 		if ( (fq + 1)->next != NULL ) {		/* having FreeQue Same size */
 120:../kernel/tkernel/memory.c **** 			QueInsert((fq + 1)->next - 1, fq);
 121:../kernel/tkernel/memory.c **** 			(fq + 1)->next->prev = (fq + 1)->prev;
 122:../kernel/tkernel/memory.c **** 		}
 123:../kernel/tkernel/memory.c **** 		QueRemove(fq);
 124:../kernel/tkernel/memory.c **** 	}
 125:../kernel/tkernel/memory.c **** }
 396                             		.loc 2 125 1
 397 0211 2E 2E                   		bra	.L29
 398                             	.L25:
 119:../kernel/tkernel/memory.c **** 			QueInsert((fq + 1)->next - 1, fq);
 399                             		.loc 2 119 12
 400 0213 EC A5                   		mov.L	[r10], r5
 401 0215 62 85                   		add	#8, r5
 119:../kernel/tkernel/memory.c **** 			QueInsert((fq + 1)->next - 1, fq);
 402                             		.loc 2 119 16
 403 0217 EC 55                   		mov.L	[r5], r5
 119:../kernel/tkernel/memory.c **** 			QueInsert((fq + 1)->next - 1, fq);
 404                             		.loc 2 119 6
 405 0219 61 05                   		cmp	#0, r5
 406 021b 20 1F                   		beq	.L28
 120:../kernel/tkernel/memory.c **** 			(fq + 1)->next->prev = (fq + 1)->prev;
 407                             		.loc 2 120 18
 408 021d EC A5                   		mov.L	[r10], r5
 409 021f 62 85                   		add	#8, r5
 120:../kernel/tkernel/memory.c **** 			(fq + 1)->next->prev = (fq + 1)->prev;
 410                             		.loc 2 120 22
 411 0221 EC 55                   		mov.L	[r5], r5
 120:../kernel/tkernel/memory.c **** 			(fq + 1)->next->prev = (fq + 1)->prev;
 412                             		.loc 2 120 29
 413 0223 60 85                   		sub	#8, r5
 120:../kernel/tkernel/memory.c **** 			(fq + 1)->next->prev = (fq + 1)->prev;
 414                             		.loc 2 120 4
 415 0225 EC A2                   		mov.L	[r10], r2
 416 0227 EF 51                   		mov.L	r5, r1
 417 0229 39 F0 FD                		bsr	_QueInsert
 121:../kernel/tkernel/memory.c **** 		}
 418                             		.loc 2 121 31
 419 022c EC A5                   		mov.L	[r10], r5
 420 022e 62 85                   		add	#8, r5
 121:../kernel/tkernel/memory.c **** 		}
 421                             		.loc 2 121 8
 422 0230 EC A4                   		mov.L	[r10], r4
 423 0232 62 84                   		add	#8, r4
 121:../kernel/tkernel/memory.c **** 		}
 424                             		.loc 2 121 12
 425 0234 EC 44                   		mov.L	[r4], r4
 121:../kernel/tkernel/memory.c **** 		}
 426                             		.loc 2 121 35
 427 0236 A8 5D                   		mov.L	4[r5], r5
 121:../kernel/tkernel/memory.c **** 		}
 428                             		.loc 2 121 25
 429 0238 A0 4D                   		mov.L	r5, 4[r4]
 430                             	.L28:
 123:../kernel/tkernel/memory.c **** 	}
 431                             		.loc 2 123 3
 432 023a EC A1                   		mov.L	[r10], r1
 433 023c 39 0D FE                		bsr	_QueRemove
 434                             	.L29:
 435                             		.loc 2 125 1
 436 023f 03                      		nop
 437 0240 3F AA 02                		rtsd	#8, r10-r10
 438                             	.LFE22:
 440                             		.global	_knl_insertAreaQue
 442                             	_knl_insertAreaQue:
 443                             	.LFB23:
 126:../kernel/tkernel/memory.c **** 
 127:../kernel/tkernel/memory.c **** /*
 128:../kernel/tkernel/memory.c ****  * Register area
 129:../kernel/tkernel/memory.c ****  *	Insert 'ent' just after 'que.'
 130:../kernel/tkernel/memory.c ****  */
 131:../kernel/tkernel/memory.c **** EXPORT void knl_insertAreaQue( QUEUE *que, QUEUE *ent )
 132:../kernel/tkernel/memory.c **** {
 444                             		.loc 2 132 1
 445 0243 7E AA                   		push.l	r10
 446                             	.LCFI12:
 447 0245 71 0A F8                		add	#-8, r0, r10
 448                             	.LCFI13:
 449 0248 EF A0                   		mov.L	r10, r0
 450 024a E3 A1                   		mov.L	r1, [r10]
 451 024c E7 A2 01                		mov.L	r2, 4[r10]
 133:../kernel/tkernel/memory.c **** 	ent->prev = que;
 452                             		.loc 2 133 12
 453 024f ED A5 01                		mov.L	4[r10], r5
 454 0252 EC A4                   		mov.L	[r10], r4
 455 0254 A0 5C                   		mov.L	r4, 4[r5]
 134:../kernel/tkernel/memory.c **** 	ent->next = que->next;
 456                             		.loc 2 134 17
 457 0256 EC A5                   		mov.L	[r10], r5
 458 0258 EC 54                   		mov.L	[r5], r4
 459                             		.loc 2 134 12
 460 025a ED A5 01                		mov.L	4[r10], r5
 461 025d E3 54                   		mov.L	r4, [r5]
 135:../kernel/tkernel/memory.c **** 	Assign(que->next->prev, ent);
 462                             		.loc 2 135 2
 463 025f EC A5                   		mov.L	[r10], r5
 464 0261 EC 55                   		mov.L	[r5], r5
 465 0263 A8 5D                   		mov.L	4[r5], r5
 466 0265 64 15                   		and	#1, r5
 467 0267 ED A4 01                		mov.L	4[r10], r4
 468 026a 57 54                   		or	r5, r4
 469 026c EC A5                   		mov.L	[r10], r5
 470 026e EC 55                   		mov.L	[r5], r5
 471 0270 A0 5C                   		mov.L	r4, 4[r5]
 136:../kernel/tkernel/memory.c **** 	que->next = ent;
 472                             		.loc 2 136 12
 473 0272 EC A5                   		mov.L	[r10], r5
 474 0274 ED A4 01                		mov.L	4[r10], r4
 475 0277 E3 54                   		mov.L	r4, [r5]
 137:../kernel/tkernel/memory.c **** }
 476                             		.loc 2 137 1
 477 0279 03                      		nop
 478 027a 3F AA 03                		rtsd	#12, r10-r10
 479                             	.LFE23:
 481                             		.global	_knl_removeAreaQue
 483                             	_knl_removeAreaQue:
 484                             	.LFB24:
 138:../kernel/tkernel/memory.c **** 
 139:../kernel/tkernel/memory.c **** /*
 140:../kernel/tkernel/memory.c ****  * Delete area
 141:../kernel/tkernel/memory.c ****  */
 142:../kernel/tkernel/memory.c **** EXPORT void knl_removeAreaQue( QUEUE *aq )
 143:../kernel/tkernel/memory.c **** {
 485                             		.loc 2 143 1
 486 027d 7E AA                   		push.l	r10
 487                             	.LCFI14:
 488 027f 71 0A FC                		add	#-4, r0, r10
 489                             	.LCFI15:
 490 0282 EF A0                   		mov.L	r10, r0
 491 0284 E3 A1                   		mov.L	r1, [r10]
 144:../kernel/tkernel/memory.c **** 	Mask(aq->prev)->next = aq->next;
 492                             		.loc 2 144 2
 493 0286 EC A5                   		mov.L	[r10], r5
 494 0288 A8 5D                   		mov.L	4[r5], r5
 495 028a 75 25 FE                		and	#-2, r5
 496                             		.loc 2 144 27
 497 028d EC A4                   		mov.L	[r10], r4
 498 028f EC 44                   		mov.L	[r4], r4
 499                             		.loc 2 144 23
 500 0291 E3 54                   		mov.L	r4, [r5]
 145:../kernel/tkernel/memory.c **** 	Assign(aq->next->prev, Mask(aq->prev));
 501                             		.loc 2 145 2
 502 0293 EC A5                   		mov.L	[r10], r5
 503 0295 EC 55                   		mov.L	[r5], r5
 504 0297 A8 5D                   		mov.L	4[r5], r5
 505 0299 66 14                   		mov.L	#1, r4
 506 029b 53 54                   		and	r5, r4
 507 029d EC A5                   		mov.L	[r10], r5
 508 029f A8 5D                   		mov.L	4[r5], r5
 509 02a1 75 25 FE                		and	#-2, r5
 510 02a4 57 54                   		or	r5, r4
 511 02a6 EC A5                   		mov.L	[r10], r5
 512 02a8 EC 55                   		mov.L	[r5], r5
 513 02aa A0 5C                   		mov.L	r4, 4[r5]
 146:../kernel/tkernel/memory.c **** }
 514                             		.loc 2 146 1
 515 02ac 03                      		nop
 516 02ad 3F AA 02                		rtsd	#8, r10-r10
 517                             	.LFE24:
 519                             		.global	_knl_imacb
 520                             		.section	.noinit,"aw"
 521                             		.balign 4
 524                             	_knl_imacb:
 525 0000 00 00 00 00             		.zero	4
 526                             		.section P,"ax"
 527                             		.global	_knl_Imalloc
 529                             	_knl_Imalloc:
 530                             	.LFB25:
 147:../kernel/tkernel/memory.c **** 
 148:../kernel/tkernel/memory.c **** /* ------------------------------------------------------------------------ */
 149:../kernel/tkernel/memory.c **** 
 150:../kernel/tkernel/memory.c **** #if USE_IMALLOC
 151:../kernel/tkernel/memory.c **** /* ------------------------------------------------------------------------ */
 152:../kernel/tkernel/memory.c **** 
 153:../kernel/tkernel/memory.c **** Noinit(EXPORT IMACB *knl_imacb);
 154:../kernel/tkernel/memory.c **** 
 155:../kernel/tkernel/memory.c **** /* ------------------------------------------------------------------------ */
 156:../kernel/tkernel/memory.c **** 
 157:../kernel/tkernel/memory.c **** /*
 158:../kernel/tkernel/memory.c ****  * Memory allocate
 159:../kernel/tkernel/memory.c ****  */
 160:../kernel/tkernel/memory.c **** EXPORT void* knl_Imalloc( SZ size )
 161:../kernel/tkernel/memory.c **** {
 531                             		.loc 2 161 1
 532 02b0 7E AA                   		push.l	r10
 533                             	.LCFI16:
 534 02b2 71 0A EC                		add	#-20, r0, r10
 535                             	.LCFI17:
 536 02b5 EF A0                   		mov.L	r10, r0
 537 02b7 E7 A1 04                		mov.L	r1, 16[r10]
 162:../kernel/tkernel/memory.c **** 	QUEUE	*q, *aq, *aq2;
 163:../kernel/tkernel/memory.c **** 	UINT	imask;
 164:../kernel/tkernel/memory.c **** 
 165:../kernel/tkernel/memory.c **** 	/* If it is smaller than the minimum fragment size,
 166:../kernel/tkernel/memory.c **** 	   allocate the minimum size to it. */
 167:../kernel/tkernel/memory.c **** 	if( size <= 0 ) {
 538                             		.loc 2 167 4
 539 02ba ED A5 04                		mov.L	16[r10], r5
 540 02bd 61 05                   		cmp	#0, r5
 541 02bf 2A 07                   		bgt	.L33
 168:../kernel/tkernel/memory.c **** 		return (void *)NULL;
 542                             		.loc 2 168 10
 543 02c1 66 05                   		mov.L	#0, r5
 544 02c3 38 A8 00                		bra	.L34
 545                             	.L33:
 169:../kernel/tkernel/memory.c **** 	} else 	if ( size < MIN_FRAGMENT ) {
 546                             		.loc 2 169 20
 547 02c6 ED A5 04                		mov.L	16[r10], r5
 548                             		.loc 2 169 13
 549 02c9 61 F5                   		cmp	#15, r5
 550 02cb 24 08                   		bgtu	.L35
 170:../kernel/tkernel/memory.c **** 		size = MIN_FRAGMENT;
 551                             		.loc 2 170 8
 552 02cd F9 A6 04 10             		mov.L	#16, 16[r10]
 553 02d1 2E 0D                   		bra	.L36
 554                             	.L35:
 171:../kernel/tkernel/memory.c **** 	} else {
 172:../kernel/tkernel/memory.c **** 		size = ROUND(size);
 555                             		.loc 2 172 10
 556 02d3 ED A5 04                		mov.L	16[r10], r5
 557 02d6 62 75                   		add	#7, r5
 558                             		.loc 2 172 8
 559 02d8 75 25 F8                		and	#-8, r5
 560 02db E7 A5 04                		mov.L	r5, 16[r10]
 561                             	.L36:
 173:../kernel/tkernel/memory.c **** 	}
 174:../kernel/tkernel/memory.c **** 
 175:../kernel/tkernel/memory.c **** 	DI(imask);  /* Exclusive control by interrupt disable */
 562                             		.loc 2 175 2
 563 02de 05 00 00 00             		bsr	_disint
 564 02e2 E7 A1 01                		mov.L	r1, 4[r10]
 176:../kernel/tkernel/memory.c **** 
 177:../kernel/tkernel/memory.c **** 	/* Search FreeQue */
 178:../kernel/tkernel/memory.c **** 	q = knl_searchFreeArea(knl_imacb, size);
 565                             		.loc 2 178 6
 566 02e5 FB 52 00 00 00 00       		mov.L	#_knl_imacb, r5
 567 02eb EC 55                   		mov.L	[r5], r5
 568 02ed ED A2 04                		mov.L	16[r10], r2
 569 02f0 EF 51                   		mov.L	r5, r1
 570 02f2 05 00 00 00             		bsr	_knl_searchFreeArea
 571 02f6 E3 A1                   		mov.L	r1, [r10]
 179:../kernel/tkernel/memory.c **** 	if ( q == &(knl_imacb->freeque) ) {
 572                             		.loc 2 179 23
 573 02f8 FB 52 00 00 00 00       		mov.L	#_knl_imacb, r5
 574 02fe EC 55                   		mov.L	[r5], r5
 575                             		.loc 2 179 12
 576 0300 62 C5                   		add	#12, r5
 577                             		.loc 2 179 5
 578 0302 EC A4                   		mov.L	[r10], r4
 579 0304 47 54                   		cmp	r5, r4
 580 0306 1E                      		bne	.L37
 180:../kernel/tkernel/memory.c **** 		q = NULL; /* Insufficient memory */
 581                             		.loc 2 180 5
 582 0307 F8 A6 00                		mov.L	#0, [r10]
 181:../kernel/tkernel/memory.c **** 		goto err_ret;
 583                             		.loc 2 181 3
 584 030a 2E 58                   		bra	.L38
 585                             	.L37:
 182:../kernel/tkernel/memory.c **** 	}
 183:../kernel/tkernel/memory.c **** 
 184:../kernel/tkernel/memory.c **** 	/* There is free area: Split from FreeQue once */
 185:../kernel/tkernel/memory.c **** 	knl_removeFreeQue(q);
 586                             		.loc 2 185 2
 587 030c EC A1                   		mov.L	[r10], r1
 588 030e 05 00 00 00             		bsr	_knl_removeFreeQue
 186:../kernel/tkernel/memory.c **** 
 187:../kernel/tkernel/memory.c **** 	aq = q - 1;
 589                             		.loc 2 187 5
 590 0312 EC A5                   		mov.L	[r10], r5
 591 0314 60 85                   		sub	#8, r5
 592 0316 E7 A5 02                		mov.L	r5, 8[r10]
 188:../kernel/tkernel/memory.c **** 
 189:../kernel/tkernel/memory.c **** 	/* If there are fragments smaller than the minimum fragment size,
 190:../kernel/tkernel/memory.c **** 	   allocate them also */
 191:../kernel/tkernel/memory.c **** 	if ( FreeSize(q) - size >= MIN_FRAGMENT + sizeof(QUEUE) ) {
 593                             		.loc 2 191 7
 594 0319 EC A5                   		mov.L	[r10], r5
 595 031b 62 85                   		add	#8, r5
 596 031d A8 5D                   		mov.L	4[r5], r5
 597 031f EF 54                   		mov.L	r5, r4
 598                             		.loc 2 191 19
 599 0321 ED A5 04                		mov.L	16[r10], r5
 600 0324 FF 05 54                		sub	r5, r4, r5
 601                             		.loc 2 191 5
 602 0327 75 55 17                		cmp	#23, r5
 603 032a 25 2A                   		bleu	.L39
 192:../kernel/tkernel/memory.c **** 
 193:../kernel/tkernel/memory.c **** 		/* Divide area into 2 */
 194:../kernel/tkernel/memory.c **** 		aq2 = (QUEUE*)((VB*)(aq + 1) + size);
 604                             		.loc 2 194 32
 605 032c ED A5 04                		mov.L	16[r10], r5
 606 032f 62 85                   		add	#8, r5
 607                             		.loc 2 194 7
 608 0331 ED A4 02                		mov.L	8[r10], r4
 609 0334 4B 45                   		add	r4, r5
 610 0336 E7 A5 03                		mov.L	r5, 12[r10]
 195:../kernel/tkernel/memory.c **** 		knl_insertAreaQue(aq, aq2);
 611                             		.loc 2 195 3
 612 0339 ED A2 03                		mov.L	12[r10], r2
 613 033c ED A1 02                		mov.L	8[r10], r1
 614 033f 05 00 00 00             		bsr	_knl_insertAreaQue
 196:../kernel/tkernel/memory.c **** 
 197:../kernel/tkernel/memory.c **** 		/* Register remaining area to FreeQue */
 198:../kernel/tkernel/memory.c **** 		knl_appendFreeArea(knl_imacb, aq2);
 615                             		.loc 2 198 3
 616 0343 FB 52 00 00 00 00       		mov.L	#_knl_imacb, r5
 617 0349 EC 55                   		mov.L	[r5], r5
 618 034b ED A2 03                		mov.L	12[r10], r2
 619 034e EF 51                   		mov.L	r5, r1
 620 0350 05 00 00 00             		bsr	_knl_appendFreeArea
 621                             	.L39:
 199:../kernel/tkernel/memory.c **** 	}
 200:../kernel/tkernel/memory.c **** 	setAreaFlag(aq, AREA_USE);
 622                             		.loc 2 200 2
 623 0354 ED A5 02                		mov.L	8[r10], r5
 624 0357 A8 5D                   		mov.L	4[r5], r5
 625 0359 65 15                   		or	#1, r5
 626 035b EF 54                   		mov.L	r5, r4
 627 035d ED A5 02                		mov.L	8[r10], r5
 628 0360 A0 5C                   		mov.L	r4, 4[r5]
 629                             	.L38:
 201:../kernel/tkernel/memory.c **** 
 202:../kernel/tkernel/memory.c **** err_ret:
 203:../kernel/tkernel/memory.c **** 	EI(imask);
 630                             		.loc 2 203 2
 631 0362 ED A1 01                		mov.L	4[r10], r1
 632 0365 05 00 00 00             		bsr	_setint
 204:../kernel/tkernel/memory.c **** 
 205:../kernel/tkernel/memory.c **** 	return (void *)q;
 633                             		.loc 2 205 9
 634 0369 EC A5                   		mov.L	[r10], r5
 635                             	.L34:
 206:../kernel/tkernel/memory.c **** }
 636                             		.loc 2 206 1
 637 036b EF 51                   		mov.L	r5, r1
 638 036d 3F AA 06                		rtsd	#24, r10-r10
 639                             	.LFE25:
 641                             		.global	_knl_Icalloc
 643                             	_knl_Icalloc:
 644                             	.LFB26:
 207:../kernel/tkernel/memory.c **** 
 208:../kernel/tkernel/memory.c **** /*
 209:../kernel/tkernel/memory.c ****  * Memory allocate  and clear
 210:../kernel/tkernel/memory.c ****  */
 211:../kernel/tkernel/memory.c **** EXPORT void* knl_Icalloc( SZ nmemb, SZ size )
 212:../kernel/tkernel/memory.c **** {
 645                             		.loc 2 212 1
 646 0370 7E AA                   		push.l	r10
 647                             	.LCFI18:
 648 0372 71 0A F0                		add	#-16, r0, r10
 649                             	.LCFI19:
 650 0375 EF A0                   		mov.L	r10, r0
 651 0377 E7 A1 02                		mov.L	r1, 8[r10]
 652 037a E7 A2 03                		mov.L	r2, 12[r10]
 213:../kernel/tkernel/memory.c **** 	SZ	sz = nmemb * size;
 653                             		.loc 2 213 5
 654 037d ED A4 02                		mov.L	8[r10], r4
 655 0380 ED A5 03                		mov.L	12[r10], r5
 656 0383 4F 45                   		mul	r4, r5
 657 0385 E3 A5                   		mov.L	r5, [r10]
 214:../kernel/tkernel/memory.c **** 	void	*mem;
 215:../kernel/tkernel/memory.c **** 
 216:../kernel/tkernel/memory.c **** 	mem = knl_Imalloc(sz);
 658                             		.loc 2 216 8
 659 0387 EC A1                   		mov.L	[r10], r1
 660 0389 05 00 00 00             		bsr	_knl_Imalloc
 661 038d E7 A1 01                		mov.L	r1, 4[r10]
 217:../kernel/tkernel/memory.c **** 	if ( mem == NULL ) {
 662                             		.loc 2 217 5
 663 0390 ED A5 01                		mov.L	4[r10], r5
 664 0393 61 05                   		cmp	#0, r5
 665 0395 1D                      		bne	.L41
 218:../kernel/tkernel/memory.c **** 		return NULL;
 666                             		.loc 2 218 10
 667 0396 66 05                   		mov.L	#0, r5
 668 0398 2E 10                   		bra	.L42
 669                             	.L41:
 219:../kernel/tkernel/memory.c **** 	}
 220:../kernel/tkernel/memory.c **** 
 221:../kernel/tkernel/memory.c **** 	knl_memset(mem, 0, sz);
 670                             		.loc 2 221 2
 671 039a EC A3                   		mov.L	[r10], r3
 672 039c 66 02                   		mov.L	#0, r2
 673 039e ED A1 01                		mov.L	4[r10], r1
 674 03a1 05 00 00 00             		bsr	_knl_memset
 222:../kernel/tkernel/memory.c **** 
 223:../kernel/tkernel/memory.c **** 	return mem;
 675                             		.loc 2 223 9
 676 03a5 ED A5 01                		mov.L	4[r10], r5
 677                             	.L42:
 224:../kernel/tkernel/memory.c **** }
 678                             		.loc 2 224 1
 679 03a8 EF 51                   		mov.L	r5, r1
 680 03aa 3F AA 05                		rtsd	#20, r10-r10
 681                             	.LFE26:
 683                             		.global	_knl_Irealloc
 685                             	_knl_Irealloc:
 686                             	.LFB27:
 225:../kernel/tkernel/memory.c **** 
 226:../kernel/tkernel/memory.c **** 
 227:../kernel/tkernel/memory.c **** /*
 228:../kernel/tkernel/memory.c ****  * Memory allocation size change
 229:../kernel/tkernel/memory.c ****  */
 230:../kernel/tkernel/memory.c **** EXPORT void* knl_Irealloc( void *ptr, SZ size )
 231:../kernel/tkernel/memory.c **** {
 687                             		.loc 2 231 1
 688 03ad 7E AA                   		push.l	r10
 689                             	.LCFI20:
 690 03af 71 0A EC                		add	#-20, r0, r10
 691                             	.LCFI21:
 692 03b2 EF A0                   		mov.L	r10, r0
 693 03b4 E7 A1 03                		mov.L	r1, 12[r10]
 694 03b7 E7 A2 04                		mov.L	r2, 16[r10]
 232:../kernel/tkernel/memory.c **** 	void	*newptr;
 233:../kernel/tkernel/memory.c **** 	QUEUE	*aq;
 234:../kernel/tkernel/memory.c **** 	SZ	oldsz;
 235:../kernel/tkernel/memory.c **** 
 236:../kernel/tkernel/memory.c **** 	if(size != 0) {
 695                             		.loc 2 236 4
 696 03ba ED A5 04                		mov.L	16[r10], r5
 697 03bd 61 05                   		cmp	#0, r5
 698 03bf 20 14                   		beq	.L44
 237:../kernel/tkernel/memory.c **** 		newptr = knl_Imalloc(size);
 699                             		.loc 2 237 12
 700 03c1 ED A1 04                		mov.L	16[r10], r1
 701 03c4 05 00 00 00             		bsr	_knl_Imalloc
 702 03c8 E3 A1                   		mov.L	r1, [r10]
 238:../kernel/tkernel/memory.c **** 		if(newptr == NULL) {
 703                             		.loc 2 238 5
 704 03ca EC A5                   		mov.L	[r10], r5
 705 03cc 61 05                   		cmp	#0, r5
 706 03ce 18                      		bne	.L45
 239:../kernel/tkernel/memory.c **** 			return NULL;
 707                             		.loc 2 239 11
 708 03cf 66 05                   		mov.L	#0, r5
 709 03d1 2E 47                   		bra	.L46
 710                             	.L44:
 240:../kernel/tkernel/memory.c **** 		}
 241:../kernel/tkernel/memory.c **** 	} else {
 242:../kernel/tkernel/memory.c **** 		newptr = NULL;
 711                             		.loc 2 242 10
 712 03d3 F8 A6 00                		mov.L	#0, [r10]
 713                             	.L45:
 243:../kernel/tkernel/memory.c **** 	}
 244:../kernel/tkernel/memory.c **** 
 245:../kernel/tkernel/memory.c **** 	if(ptr != NULL) {
 714                             		.loc 2 245 4
 715 03d6 ED A5 03                		mov.L	12[r10], r5
 716 03d9 61 05                   		cmp	#0, r5
 717 03db 20 3B                   		beq	.L47
 246:../kernel/tkernel/memory.c **** 		if(newptr != NULL) {
 718                             		.loc 2 246 5
 719 03dd EC A5                   		mov.L	[r10], r5
 720 03df 61 05                   		cmp	#0, r5
 721 03e1 20 2E                   		beq	.L48
 247:../kernel/tkernel/memory.c **** 			aq = (QUEUE*)ptr - 1;
 722                             		.loc 2 247 7
 723 03e3 ED A5 03                		mov.L	12[r10], r5
 724 03e6 60 85                   		sub	#8, r5
 725 03e8 E7 A5 01                		mov.L	r5, 4[r10]
 248:../kernel/tkernel/memory.c **** 			oldsz = (SZ)AreaSize(aq);
 726                             		.loc 2 248 16
 727 03eb ED A5 01                		mov.L	4[r10], r5
 728 03ee EC 54                   		mov.L	[r5], r4
 729 03f0 ED A5 01                		mov.L	4[r10], r5
 730 03f3 62 85                   		add	#8, r5
 731                             		.loc 2 248 10
 732 03f5 FF 05 54                		sub	r5, r4, r5
 733 03f8 E7 A5 02                		mov.L	r5, 8[r10]
 249:../kernel/tkernel/memory.c **** 			knl_memcpy(newptr, ptr, (size > oldsz)?oldsz:size);
 734                             		.loc 2 249 4
 735 03fb ED A4 04                		mov.L	16[r10], r4
 736 03fe ED A5 02                		mov.L	8[r10], r5
 737 0401 FC 17 45                		min	r4, r5
 738 0404 EF 53                   		mov.L	r5, r3
 739 0406 ED A2 03                		mov.L	12[r10], r2
 740 0409 EC A1                   		mov.L	[r10], r1
 741 040b 05 00 00 00             		bsr	_knl_memcpy
 742                             	.L48:
 250:../kernel/tkernel/memory.c **** 		}
 251:../kernel/tkernel/memory.c **** 		knl_Ifree(ptr);
 743                             		.loc 2 251 3
 744 040f ED A1 03                		mov.L	12[r10], r1
 745 0412 05 00 00 00             		bsr	_knl_Ifree
 746                             	.L47:
 252:../kernel/tkernel/memory.c **** 	}
 253:../kernel/tkernel/memory.c **** 
 254:../kernel/tkernel/memory.c **** 	return newptr;
 747                             		.loc 2 254 9
 748 0416 EC A5                   		mov.L	[r10], r5
 749                             	.L46:
 255:../kernel/tkernel/memory.c **** }
 750                             		.loc 2 255 1
 751 0418 EF 51                   		mov.L	r5, r1
 752 041a 3F AA 06                		rtsd	#24, r10-r10
 753                             	.LFE27:
 755                             		.global	_knl_Ifree
 757                             	_knl_Ifree:
 758                             	.LFB28:
 256:../kernel/tkernel/memory.c **** 
 257:../kernel/tkernel/memory.c **** 
 258:../kernel/tkernel/memory.c **** /*
 259:../kernel/tkernel/memory.c ****  * Free memory
 260:../kernel/tkernel/memory.c ****  */
 261:../kernel/tkernel/memory.c **** EXPORT void  knl_Ifree( void *ptr )
 262:../kernel/tkernel/memory.c **** {
 759                             		.loc 2 262 1
 760 041d 7E AA                   		push.l	r10
 761                             	.LCFI22:
 762 041f 71 0A F4                		add	#-12, r0, r10
 763                             	.LCFI23:
 764 0422 EF A0                   		mov.L	r10, r0
 765 0424 E7 A1 02                		mov.L	r1, 8[r10]
 263:../kernel/tkernel/memory.c **** 	QUEUE	*aq;
 264:../kernel/tkernel/memory.c **** 	UINT	imask;
 265:../kernel/tkernel/memory.c **** 
 266:../kernel/tkernel/memory.c **** 	DI(imask);  /* Exclusive control by interrupt disable */
 766                             		.loc 2 266 2
 767 0427 05 00 00 00             		bsr	_disint
 768 042b E7 A1 01                		mov.L	r1, 4[r10]
 267:../kernel/tkernel/memory.c **** 
 268:../kernel/tkernel/memory.c **** 	aq = (QUEUE*)ptr - 1;
 769                             		.loc 2 268 5
 770 042e ED A5 02                		mov.L	8[r10], r5
 771 0431 60 85                   		sub	#8, r5
 772 0433 E3 A5                   		mov.L	r5, [r10]
 269:../kernel/tkernel/memory.c **** 	clrAreaFlag(aq, AREA_USE);
 773                             		.loc 2 269 2
 774 0435 EC A5                   		mov.L	[r10], r5
 775 0437 A8 5D                   		mov.L	4[r5], r5
 776 0439 75 25 FE                		and	#-2, r5
 777 043c EF 54                   		mov.L	r5, r4
 778 043e EC A5                   		mov.L	[r10], r5
 779 0440 A0 5C                   		mov.L	r4, 4[r5]
 270:../kernel/tkernel/memory.c **** 
 271:../kernel/tkernel/memory.c **** 	if ( !chkAreaFlag(aq->next, AREA_USE) ) {
 780                             		.loc 2 271 8
 781 0442 EC A5                   		mov.L	[r10], r5
 782 0444 EC 55                   		mov.L	[r5], r5
 783 0446 A8 5D                   		mov.L	4[r5], r5
 784 0448 64 15                   		and	#1, r5
 785                             		.loc 2 271 5
 786 044a 61 05                   		cmp	#0, r5
 787 044c 21 18                   		bne	.L50
 272:../kernel/tkernel/memory.c **** 		/* Merge with free area in after location */
 273:../kernel/tkernel/memory.c **** 		knl_removeFreeQue(aq->next + 1);
 788                             		.loc 2 273 23
 789 044e EC A5                   		mov.L	[r10], r5
 790 0450 EC 55                   		mov.L	[r5], r5
 791                             		.loc 2 273 30
 792 0452 62 85                   		add	#8, r5
 793                             		.loc 2 273 3
 794 0454 EF 51                   		mov.L	r5, r1
 795 0456 05 00 00 00             		bsr	_knl_removeFreeQue
 274:../kernel/tkernel/memory.c **** 		knl_removeAreaQue(aq->next);
 796                             		.loc 2 274 23
 797 045a EC A5                   		mov.L	[r10], r5
 798 045c EC 55                   		mov.L	[r5], r5
 799                             		.loc 2 274 3
 800 045e EF 51                   		mov.L	r5, r1
 801 0460 05 00 00 00             		bsr	_knl_removeAreaQue
 802                             	.L50:
 275:../kernel/tkernel/memory.c **** 	}
 276:../kernel/tkernel/memory.c **** 
 277:../kernel/tkernel/memory.c **** 	if ( !chkAreaFlag(aq->prev, AREA_USE) ) {
 803                             		.loc 2 277 8
 804 0464 EC A5                   		mov.L	[r10], r5
 805 0466 A8 5D                   		mov.L	4[r5], r5
 806 0468 A8 5D                   		mov.L	4[r5], r5
 807 046a 64 15                   		and	#1, r5
 808                             		.loc 2 277 5
 809 046c 61 05                   		cmp	#0, r5
 810 046e 21 1C                   		bne	.L51
 278:../kernel/tkernel/memory.c **** 		/* Merge with free area in front location */
 279:../kernel/tkernel/memory.c **** 		aq = aq->prev;
 811                             		.loc 2 279 6
 812 0470 EC A5                   		mov.L	[r10], r5
 813 0472 A8 5D                   		mov.L	4[r5], r5
 814 0474 E3 A5                   		mov.L	r5, [r10]
 280:../kernel/tkernel/memory.c **** 		knl_removeFreeQue(aq + 1);
 815                             		.loc 2 280 3
 816 0476 EC A5                   		mov.L	[r10], r5
 817 0478 62 85                   		add	#8, r5
 818 047a EF 51                   		mov.L	r5, r1
 819 047c 05 00 00 00             		bsr	_knl_removeFreeQue
 281:../kernel/tkernel/memory.c **** 		knl_removeAreaQue(aq->next);
 820                             		.loc 2 281 23
 821 0480 EC A5                   		mov.L	[r10], r5
 822 0482 EC 55                   		mov.L	[r5], r5
 823                             		.loc 2 281 3
 824 0484 EF 51                   		mov.L	r5, r1
 825 0486 05 00 00 00             		bsr	_knl_removeAreaQue
 826                             	.L51:
 282:../kernel/tkernel/memory.c **** 	}
 283:../kernel/tkernel/memory.c **** 
 284:../kernel/tkernel/memory.c **** 	knl_appendFreeArea(knl_imacb, aq);
 827                             		.loc 2 284 2
 828 048a FB 52 00 00 00 00       		mov.L	#_knl_imacb, r5
 829 0490 EC 55                   		mov.L	[r5], r5
 830 0492 EC A2                   		mov.L	[r10], r2
 831 0494 EF 51                   		mov.L	r5, r1
 832 0496 05 00 00 00             		bsr	_knl_appendFreeArea
 285:../kernel/tkernel/memory.c **** 
 286:../kernel/tkernel/memory.c **** 	EI(imask);
 833                             		.loc 2 286 2
 834 049a ED A1 01                		mov.L	4[r10], r1
 835 049d 05 00 00 00             		bsr	_setint
 287:../kernel/tkernel/memory.c **** }
 836                             		.loc 2 287 1
 837 04a1 03                      		nop
 838 04a2 3F AA 04                		rtsd	#16, r10-r10
 839                             	.LFE28:
 842                             	_initIMACB:
 843                             	.LFB29:
 288:../kernel/tkernel/memory.c **** 
 289:../kernel/tkernel/memory.c **** 
 290:../kernel/tkernel/memory.c **** /* ------------------------------------------------------------------------ */
 291:../kernel/tkernel/memory.c **** 
 292:../kernel/tkernel/memory.c **** /*
 293:../kernel/tkernel/memory.c ****  * IMACB Initialization 
 294:../kernel/tkernel/memory.c ****  */
 295:../kernel/tkernel/memory.c **** LOCAL void initIMACB( void )
 296:../kernel/tkernel/memory.c **** {
 844                             		.loc 2 296 1
 845 04a5 7E AA                   		push.l	r10
 846                             	.LCFI24:
 847 04a7 EF 0A                   		mov.L	r0, r10
 848                             	.LCFI25:
 297:../kernel/tkernel/memory.c **** 	QueInit(&(knl_imacb->areaque));
 849                             		.loc 2 297 21
 850 04a9 FB 52 00 00 00 00       		mov.L	#_knl_imacb, r5
 851 04af EC 55                   		mov.L	[r5], r5
 852                             		.loc 2 297 2
 853 04b1 62 45                   		add	#4, r5
 854 04b3 EF 51                   		mov.L	r5, r1
 855 04b5 39 4B FB                		bsr	_QueInit
 298:../kernel/tkernel/memory.c **** 	QueInit(&(knl_imacb->freeque));
 856                             		.loc 2 298 21
 857 04b8 FB 52 00 00 00 00       		mov.L	#_knl_imacb, r5
 858 04be EC 55                   		mov.L	[r5], r5
 859                             		.loc 2 298 2
 860 04c0 62 C5                   		add	#12, r5
 861 04c2 EF 51                   		mov.L	r5, r1
 862 04c4 39 3C FB                		bsr	_QueInit
 299:../kernel/tkernel/memory.c **** }
 863                             		.loc 2 299 1
 864 04c7 03                      		nop
 865 04c8 3F AA 01                		rtsd	#4, r10-r10
 866                             	.LFE29:
 868                             		.global	_knl_init_Imalloc
 870                             	_knl_init_Imalloc:
 871                             	.LFB30:
 300:../kernel/tkernel/memory.c **** 
 301:../kernel/tkernel/memory.c **** /*
 302:../kernel/tkernel/memory.c ****  * Imalloc initial setting 
 303:../kernel/tkernel/memory.c ****  */
 304:../kernel/tkernel/memory.c **** EXPORT ER knl_init_Imalloc( void )
 305:../kernel/tkernel/memory.c **** {
 872                             		.loc 2 305 1
 873 04cb 7E AA                   		push.l	r10
 874                             	.LCFI26:
 875 04cd 71 0A F8                		add	#-8, r0, r10
 876                             	.LCFI27:
 877 04d0 EF A0                   		mov.L	r10, r0
 306:../kernel/tkernel/memory.c **** 	QUEUE	*top, *end;
 307:../kernel/tkernel/memory.c **** 
 308:../kernel/tkernel/memory.c **** 	/* Align top with 4 byte unit alignment for IMACB */
 309:../kernel/tkernel/memory.c **** 	knl_lowmem_top = (void *)(((UW)knl_lowmem_top + 3) & ~0x00000003UL);
 878                             		.loc 2 309 29
 879 04d2 FB 52 00 00 00 00       		mov.L	#_knl_lowmem_top, r5
 880 04d8 EC 55                   		mov.L	[r5], r5
 881                             		.loc 2 309 48
 882 04da 62 35                   		add	#3, r5
 883                             		.loc 2 309 53
 884 04dc 75 25 FC                		and	#-4, r5
 885                             		.loc 2 309 19
 886 04df EF 54                   		mov.L	r5, r4
 887                             		.loc 2 309 17
 888 04e1 FB 52 00 00 00 00       		mov.L	#_knl_lowmem_top, r5
 889 04e7 E3 54                   		mov.L	r4, [r5]
 310:../kernel/tkernel/memory.c **** 	knl_imacb = (IMACB*)knl_lowmem_top;
 890                             		.loc 2 310 12
 891 04e9 FB 52 00 00 00 00       		mov.L	#_knl_lowmem_top, r5
 892 04ef EC 54                   		mov.L	[r5], r4
 893 04f1 FB 52 00 00 00 00       		mov.L	#_knl_imacb, r5
 894 04f7 E3 54                   		mov.L	r4, [r5]
 311:../kernel/tkernel/memory.c **** 	knl_lowmem_top = (void *)((UW)knl_lowmem_top + sizeof(IMACB));
 895                             		.loc 2 311 28
 896 04f9 FB 52 00 00 00 00       		mov.L	#_knl_lowmem_top, r5
 897 04ff EC 55                   		mov.L	[r5], r5
 898                             		.loc 2 311 47
 899 0501 71 55 14                		add	#20, r5
 900                             		.loc 2 311 19
 901 0504 EF 54                   		mov.L	r5, r4
 902                             		.loc 2 311 17
 903 0506 FB 52 00 00 00 00       		mov.L	#_knl_lowmem_top, r5
 904 050c E3 54                   		mov.L	r4, [r5]
 312:../kernel/tkernel/memory.c **** 
 313:../kernel/tkernel/memory.c **** 	/* Align top with 8 byte unit alignment */
 314:../kernel/tkernel/memory.c **** 	knl_lowmem_top = (void *)(((UW)knl_lowmem_top + 7) & ~0x00000007UL);
 905                             		.loc 2 314 29
 906 050e FB 52 00 00 00 00       		mov.L	#_knl_lowmem_top, r5
 907 0514 EC 55                   		mov.L	[r5], r5
 908                             		.loc 2 314 48
 909 0516 62 75                   		add	#7, r5
 910                             		.loc 2 314 53
 911 0518 75 25 F8                		and	#-8, r5
 912                             		.loc 2 314 19
 913 051b EF 54                   		mov.L	r5, r4
 914                             		.loc 2 314 17
 915 051d FB 52 00 00 00 00       		mov.L	#_knl_lowmem_top, r5
 916 0523 E3 54                   		mov.L	r4, [r5]
 315:../kernel/tkernel/memory.c **** 	top = (QUEUE*)knl_lowmem_top;
 917                             		.loc 2 315 6
 918 0525 FB 52 00 00 00 00       		mov.L	#_knl_lowmem_top, r5
 919 052b EC 55                   		mov.L	[r5], r5
 920 052d E3 A5                   		mov.L	r5, [r10]
 316:../kernel/tkernel/memory.c **** 	knl_imacb->memsz = (W)((UW)knl_lowmem_limit - (UW)knl_lowmem_top - sizeof(QUEUE)*2);
 921                             		.loc 2 316 25
 922 052f FB 52 00 00 00 00       		mov.L	#_knl_lowmem_limit, r5
 923 0535 EC 55                   		mov.L	[r5], r5
 924 0537 EF 54                   		mov.L	r5, r4
 925                             		.loc 2 316 48
 926 0539 FB 52 00 00 00 00       		mov.L	#_knl_lowmem_top, r5
 927 053f EC 55                   		mov.L	[r5], r5
 928                             		.loc 2 316 46
 929 0541 FF 05 54                		sub	r5, r4, r5
 930                             		.loc 2 316 67
 931 0544 71 54 F0                		add	#-16, r5, r4
 932                             		.loc 2 316 11
 933 0547 FB 52 00 00 00 00       		mov.L	#_knl_imacb, r5
 934 054d EC 55                   		mov.L	[r5], r5
 935                             		.loc 2 316 19
 936 054f E3 54                   		mov.L	r4, [r5]
 317:../kernel/tkernel/memory.c **** 
 318:../kernel/tkernel/memory.c **** 	knl_lowmem_top = knl_lowmem_limit;  /* Update memory free space */
 937                             		.loc 2 318 17
 938 0551 FB 52 00 00 00 00       		mov.L	#_knl_lowmem_limit, r5
 939 0557 EC 54                   		mov.L	[r5], r4
 940 0559 FB 52 00 00 00 00       		mov.L	#_knl_lowmem_top, r5
 941 055f E3 54                   		mov.L	r4, [r5]
 319:../kernel/tkernel/memory.c **** 
 320:../kernel/tkernel/memory.c **** 	initIMACB();
 942                             		.loc 2 320 2
 943 0561 39 44 FF                		bsr	_initIMACB
 321:../kernel/tkernel/memory.c **** 
 322:../kernel/tkernel/memory.c **** 	/* Register on AreaQue */
 323:../kernel/tkernel/memory.c **** 	end = (QUEUE*)((VB*)top + knl_imacb->memsz) + 1;
 944                             		.loc 2 323 37
 945 0564 FB 52 00 00 00 00       		mov.L	#_knl_imacb, r5
 946 056a EC 55                   		mov.L	[r5], r5
 947 056c EC 55                   		mov.L	[r5], r5
 948                             		.loc 2 323 46
 949 056e 62 85                   		add	#8, r5
 950                             		.loc 2 323 6
 951 0570 EC A4                   		mov.L	[r10], r4
 952 0572 4B 45                   		add	r4, r5
 953 0574 E7 A5 01                		mov.L	r5, 4[r10]
 324:../kernel/tkernel/memory.c **** 	knl_insertAreaQue(&knl_imacb->areaque, end);
 954                             		.loc 2 324 30
 955 0577 FB 52 00 00 00 00       		mov.L	#_knl_imacb, r5
 956 057d EC 55                   		mov.L	[r5], r5
 957                             		.loc 2 324 2
 958 057f 62 45                   		add	#4, r5
 959 0581 ED A2 01                		mov.L	4[r10], r2
 960 0584 EF 51                   		mov.L	r5, r1
 961 0586 05 00 00 00             		bsr	_knl_insertAreaQue
 325:../kernel/tkernel/memory.c **** 	knl_insertAreaQue(&knl_imacb->areaque, top);
 962                             		.loc 2 325 30
 963 058a FB 52 00 00 00 00       		mov.L	#_knl_imacb, r5
 964 0590 EC 55                   		mov.L	[r5], r5
 965                             		.loc 2 325 2
 966 0592 62 45                   		add	#4, r5
 967 0594 EC A2                   		mov.L	[r10], r2
 968 0596 EF 51                   		mov.L	r5, r1
 969 0598 05 00 00 00             		bsr	_knl_insertAreaQue
 326:../kernel/tkernel/memory.c **** 	setAreaFlag(end, AREA_USE);
 970                             		.loc 2 326 2
 971 059c ED A5 01                		mov.L	4[r10], r5
 972 059f A8 5D                   		mov.L	4[r5], r5
 973 05a1 65 15                   		or	#1, r5
 974 05a3 EF 54                   		mov.L	r5, r4
 975 05a5 ED A5 01                		mov.L	4[r10], r5
 976 05a8 A0 5C                   		mov.L	r4, 4[r5]
 327:../kernel/tkernel/memory.c **** 	setAreaFlag(&knl_imacb->areaque, AREA_USE);
 977                             		.loc 2 327 2
 978 05aa FB 52 00 00 00 00       		mov.L	#_knl_imacb, r5
 979 05b0 EC 55                   		mov.L	[r5], r5
 980 05b2 A8 D5                   		mov.L	8[r5], r5
 981 05b4 66 14                   		mov.L	#1, r4
 982 05b6 57 54                   		or	r5, r4
 983 05b8 FB 52 00 00 00 00       		mov.L	#_knl_imacb, r5
 984 05be EC 55                   		mov.L	[r5], r5
 985 05c0 A0 D4                   		mov.L	r4, 8[r5]
 328:../kernel/tkernel/memory.c **** 
 329:../kernel/tkernel/memory.c **** 	knl_appendFreeArea(knl_imacb, top);
 986                             		.loc 2 329 2
 987 05c2 FB 52 00 00 00 00       		mov.L	#_knl_imacb, r5
 988 05c8 EC 55                   		mov.L	[r5], r5
 989 05ca EC A2                   		mov.L	[r10], r2
 990 05cc EF 51                   		mov.L	r5, r1
 991 05ce 05 00 00 00             		bsr	_knl_appendFreeArea
 330:../kernel/tkernel/memory.c **** 
 331:../kernel/tkernel/memory.c **** 	return E_OK;
 992                             		.loc 2 331 9
 993 05d2 66 05                   		mov.L	#0, r5
 332:../kernel/tkernel/memory.c **** }
 994                             		.loc 2 332 1
 995 05d4 EF 51                   		mov.L	r5, r1
 996 05d6 3F AA 03                		rtsd	#12, r10-r10
 997                             	.LFE30:
 1282                             	.Letext0:
 1283                             		.file 3 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\include/tk/typedef.h"
 1284                             		.file 4 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\include/tk/syscall.h"
 1285                             		.file 5 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\kernel\\knlinc/kernel.h"
 1286                             		.file 6 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\kernel\\tkernel\\timer.h"
 1287                             		.file 7 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\kernel\\tkernel\\winfo.h"
 1288                             		.file 8 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\kernel\\tkernel\\mutex.h"
 1289                             		.file 9 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\kernel\\sysdepend\\cpu\\core\\rxv2\\sysde
 1290                             		.file 10 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\kernel\\sysdepend\\cpu\\core\\rxv2\\cpu_
 1291                             		.file 11 "../kernel/tkernel/memory.h"
