   1                             		.file	"timer.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   5                             	_out_h:
   6                             	.LFB1:
   7                             		.file 1 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_tbrx65n\\include\\tk\\sysdepend\\cpu\\rx65n\\syslib
   1:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** /*
   2:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h ****  *----------------------------------------------------------------------
   3:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h ****  *    micro T-Kernel 3.00.06.B0
   4:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h ****  *
   5:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h ****  *    Copyright (C) 2022 by Ken Sakamura.
   6:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h ****  *    This software is distributed under the T-License 2.2.
   7:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h ****  *----------------------------------------------------------------------
   8:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h ****  *
   9:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h ****  *    Released by TRON Forum(http://www.tron.org) at 2022/04.
  10:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h ****  *
  11:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h ****  *----------------------------------------------------------------------
  12:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h ****  */
  13:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** /*
  14:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h ****  *	syslib.h
  15:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h ****  *
  16:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h ****  *	micro T-Kernel System Library  (RX65N depended)
  17:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h ****  */
  18:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** 
  19:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** #ifndef __TK_SYSLIB_CPU_DEPEND_H__
  20:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** #define __TK_SYSLIB_CPU_DEPEND_H__
  21:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** 
  22:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** #include "../core/rxv2/syslib.h"
  23:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** 
  24:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** /*----------------------------------------------------------------------*/
  25:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** /*
  26:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h ****  * Interrupt controller Control
  27:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h ****  *
  28:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h ****  */
  29:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** #define IM_LEVEL	0x0004		/* Level trigger */
  30:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** #define IM_EDGE		0x0000		/* Edge trigger */
  31:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** 
  32:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** #define IM_HI		0x0000		/* H level/Interrupt at rising edge */
  33:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** #define IM_LOW		0x0001		/* L level/Interrupt at falling edge */
  34:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** #define IM_BOTH		0x0003		/* L level/Interrupt at both edge */
  35:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** 
  36:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** /* ------------------------------------------------------------------------ */
  37:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** /*
  38:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h ****  * I/O port access
  39:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h ****  *	for memory mapped I/O
  40:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h ****  */
  41:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** Inline void out_w( UW port, UW data )
  42:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** {
  43:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** 	*(_UW*)port = data;
  44:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** }
  45:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** Inline void out_h( UW port, UH data )
  46:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** {
   8                             		.loc 1 46 1
   9 0000 7E AA                   		push.l	r10
  10                             	.LCFI0:
  11 0002 71 0A F8                		add	#-8, r0, r10
  12                             	.LCFI1:
  13 0005 EF A0                   		mov.L	r10, r0
  14 0007 E3 A1                   		mov.L	r1, [r10]
  15 0009 D7 A2 02                		mov.W	r2, 4[r10]
  47:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** 	*(_UH*)port = data;
  16                             		.loc 1 47 3
  17 000c EC A5                   		mov.L	[r10], r5
  18                             		.loc 1 47 14
  19 000e DD A4 02                		mov.W	4[r10], r4
  20 0011 D3 54                   		mov.W	r4, [r5]
  48:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** }
  21                             		.loc 1 48 1
  22 0013 03                      		nop
  23 0014 3F AA 03                		rtsd	#12, r10-r10
  24                             	.LFE1:
  27                             	_in_h:
  28                             	.LFB4:
  49:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** Inline void out_b( UW port, UB data )
  50:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** {
  51:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** 	*(_UB*)port = data;
  52:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** }
  53:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** 
  54:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** Inline UW in_w( UW port )
  55:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** {
  56:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** 	return *(_UW*)port;
  57:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** }
  58:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** Inline UH in_h( UW port )
  59:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** {
  29                             		.loc 1 59 1
  30 0017 7E AA                   		push.l	r10
  31                             	.LCFI2:
  32 0019 71 0A FC                		add	#-4, r0, r10
  33                             	.LCFI3:
  34 001c EF A0                   		mov.L	r10, r0
  35 001e E3 A1                   		mov.L	r1, [r10]
  60:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** 	return *(_UH*)port;
  36                             		.loc 1 60 10
  37 0020 EC A5                   		mov.L	[r10], r5
  38                             		.loc 1 60 9
  39 0022 DC 55                   		mov.W	[r5], r5
  40 0024 5F 55                   		movu.W	r5, r5
  61:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include\tk\sysdepend\cpu\rx65n\syslib.h **** }
  41                             		.loc 1 61 1
  42 0026 EF 51                   		mov.L	r5, r1
  43 0028 3F AA 02                		rtsd	#8, r10-r10
  44                             	.LFE4:
  47                             	_QueInit:
  48                             	.LFB6:
  49                             		.file 2 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_tbrx65n\\include/sys/queue.h"
   1:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** /*
   2:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *----------------------------------------------------------------------
   3:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *    micro T-Kernel 3.00.00
   4:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *
   5:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *    Copyright (C) 2006-2019 by Ken Sakamura.
   6:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *    This software is distributed under the T-License 2.1.
   7:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *----------------------------------------------------------------------
   8:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *
   9:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.
  10:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *
  11:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *----------------------------------------------------------------------
  12:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  */
  13:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 
  14:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** /*
  15:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *	queue.h
  16:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *
  17:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *	Queuing operation
  18:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  */
  19:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 
  20:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** #ifndef	__SYS_QUEUE_H__
  21:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** #define __SYS_QUEUE_H__
  22:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 
  23:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** #include <tk/tkernel.h>
  24:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 
  25:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** #ifdef __cplusplus
  26:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** extern "C" {
  27:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** #endif
  28:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 
  29:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** /*
  30:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  * Double-link queue (ring)
  31:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  */
  32:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** typedef struct queue {
  33:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	struct queue	*next;
  34:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	struct queue	*prev;
  35:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** } QUEUE;
  36:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 
  37:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** /*
  38:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  * Queue initialization 
  39:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  */
  40:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** Inline void QueInit( QUEUE *que )
  41:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** {
  50                             		.loc 2 41 1
  51 002b 7E AA                   		push.l	r10
  52                             	.LCFI4:
  53 002d 71 0A FC                		add	#-4, r0, r10
  54                             	.LCFI5:
  55 0030 EF A0                   		mov.L	r10, r0
  56 0032 E3 A1                   		mov.L	r1, [r10]
  42:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	que->next = (struct queue *)que;
  57                             		.loc 2 42 12
  58 0034 EC A5                   		mov.L	[r10], r5
  59 0036 EC A4                   		mov.L	[r10], r4
  60 0038 E3 54                   		mov.L	r4, [r5]
  43:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	que->prev = (struct queue *)que;
  61                             		.loc 2 43 12
  62 003a EC A5                   		mov.L	[r10], r5
  63 003c EC A4                   		mov.L	[r10], r4
  64 003e A0 5C                   		mov.L	r4, 4[r5]
  44:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** }
  65                             		.loc 2 44 1
  66 0040 03                      		nop
  67 0041 3F AA 02                		rtsd	#8, r10-r10
  68                             	.LFE6:
  71                             	_isQueEmpty:
  72                             	.LFB7:
  45:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 
  46:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** /*
  47:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  * TRUE if the queue is empty 
  48:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  */
  49:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** Inline BOOL isQueEmpty( QUEUE *que )
  50:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** {
  73                             		.loc 2 50 1
  74 0044 7E AA                   		push.l	r10
  75                             	.LCFI6:
  76 0046 71 0A FC                		add	#-4, r0, r10
  77                             	.LCFI7:
  78 0049 EF A0                   		mov.L	r10, r0
  79 004b E3 A1                   		mov.L	r1, [r10]
  51:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	return ( que->next == que )? TRUE: FALSE;
  80                             		.loc 2 51 14
  81 004d EC A5                   		mov.L	[r10], r5
  82 004f EC 55                   		mov.L	[r5], r5
  83                             		.loc 2 51 35
  84 0051 EC A4                   		mov.L	[r10], r4
  85 0053 47 54                   		cmp	r5, r4
  86 0055 FC DB 50                		sceq.L	r5
  87 0058 5B 55                   		movu.B	r5, r5
  52:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** }
  88                             		.loc 2 52 1
  89 005a EF 51                   		mov.L	r5, r1
  90 005c 3F AA 02                		rtsd	#8, r10-r10
  91                             	.LFE7:
  94                             	_QueInsert:
  95                             	.LFB8:
  53:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 
  54:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** /*
  55:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  * Insert in queue 
  56:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *	Inserts entry directly prior to que 
  57:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  */
  58:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** Inline void QueInsert( QUEUE *entry, QUEUE *que )
  59:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** {
  96                             		.loc 2 59 1
  97 005f 7E AA                   		push.l	r10
  98                             	.LCFI8:
  99 0061 71 0A F8                		add	#-8, r0, r10
 100                             	.LCFI9:
 101 0064 EF A0                   		mov.L	r10, r0
 102 0066 E3 A1                   		mov.L	r1, [r10]
 103 0068 E7 A2 01                		mov.L	r2, 4[r10]
  60:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	entry->prev = (struct queue*) que->prev;
 104                             		.loc 2 60 16
 105 006b ED A5 01                		mov.L	4[r10], r5
 106 006e A8 5C                   		mov.L	4[r5], r4
 107                             		.loc 2 60 14
 108 0070 EC A5                   		mov.L	[r10], r5
 109 0072 A0 5C                   		mov.L	r4, 4[r5]
  61:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	entry->next = que;
 110                             		.loc 2 61 14
 111 0074 EC A5                   		mov.L	[r10], r5
 112 0076 ED A4 01                		mov.L	4[r10], r4
 113 0079 E3 54                   		mov.L	r4, [r5]
  62:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	que->prev->next = entry;
 114                             		.loc 2 62 5
 115 007b ED A5 01                		mov.L	4[r10], r5
 116 007e A8 5D                   		mov.L	4[r5], r5
 117                             		.loc 2 62 18
 118 0080 EC A4                   		mov.L	[r10], r4
 119 0082 E3 54                   		mov.L	r4, [r5]
  63:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	que->prev = entry;
 120                             		.loc 2 63 12
 121 0084 ED A5 01                		mov.L	4[r10], r5
 122 0087 EC A4                   		mov.L	[r10], r4
 123 0089 A0 5C                   		mov.L	r4, 4[r5]
  64:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** }
 124                             		.loc 2 64 1
 125 008b 03                      		nop
 126 008c 3F AA 03                		rtsd	#12, r10-r10
 127                             	.LFE8:
 130                             	_QueRemove:
 131                             	.LFB9:
  65:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 
  66:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** /*
  67:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  * Delete from queue 
  68:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *	Deletes entry from queue 
  69:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *	No action is performed if entry is empty. 
  70:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  */
  71:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** Inline void QueRemove( QUEUE *entry )
  72:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** {
 132                             		.loc 2 72 1
 133 008f 7E AA                   		push.l	r10
 134                             	.LCFI10:
 135 0091 71 0A FC                		add	#-4, r0, r10
 136                             	.LCFI11:
 137 0094 EF A0                   		mov.L	r10, r0
 138 0096 E3 A1                   		mov.L	r1, [r10]
  73:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	if ( entry->next != entry ) {
 139                             		.loc 2 73 12
 140 0098 EC A5                   		mov.L	[r10], r5
 141 009a EC 55                   		mov.L	[r5], r5
 142                             		.loc 2 73 5
 143 009c EC A4                   		mov.L	[r10], r4
 144 009e 47 54                   		cmp	r5, r4
 145 00a0 20 16                   		beq	.L10
  74:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 		entry->prev->next = (struct queue*) entry->next;
 146                             		.loc 2 74 8
 147 00a2 EC A5                   		mov.L	[r10], r5
 148 00a4 A8 5D                   		mov.L	4[r5], r5
 149                             		.loc 2 74 23
 150 00a6 EC A4                   		mov.L	[r10], r4
 151 00a8 EC 44                   		mov.L	[r4], r4
 152                             		.loc 2 74 21
 153 00aa E3 54                   		mov.L	r4, [r5]
  75:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 		entry->next->prev = (struct queue*) entry->prev;
 154                             		.loc 2 75 8
 155 00ac EC A5                   		mov.L	[r10], r5
 156 00ae EC 55                   		mov.L	[r5], r5
 157                             		.loc 2 75 23
 158 00b0 EC A4                   		mov.L	[r10], r4
 159 00b2 A8 4C                   		mov.L	4[r4], r4
 160                             		.loc 2 75 21
 161 00b4 A0 5C                   		mov.L	r4, 4[r5]
 162                             	.L10:
  76:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	}
  77:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** }
 163                             		.loc 2 77 1
 164 00b6 03                      		nop
 165 00b7 3F AA 02                		rtsd	#8, r10-r10
 166                             	.LFE9:
 169                             	_knl_abstim_reached:
 170                             	.LFB13:
 171                             		.file 3 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_tbrx65n\\kernel\\tkernel\\timer.h"
   1:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h **** /*
   2:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h ****  *----------------------------------------------------------------------
   3:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h ****  *    micro T-Kernel 3.00.00
   4:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h ****  *
   5:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h ****  *    Copyright (C) 2006-2019 by Ken Sakamura.
   6:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h ****  *    This software is distributed under the T-License 2.1.
   7:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h ****  *----------------------------------------------------------------------
   8:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h ****  *
   9:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h ****  *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.
  10:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h ****  *
  11:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h ****  *----------------------------------------------------------------------
  12:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h ****  */
  13:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h **** 
  14:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h **** /*
  15:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h ****  *	timer.h
  16:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h ****  *	System Timer Module Definition
  17:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h ****  */
  18:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h **** 
  19:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h **** #ifndef _TIMER_
  20:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h **** #define _TIMER_
  21:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h **** 
  22:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h **** #include "longlong.h"
  23:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h **** 
  24:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h **** /*
  25:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h ****  * SYSTIM internal expression and conversion
  26:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h ****  */
  27:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h **** typedef	D	LSYSTIM;	/* SYSTIM int. expression */
  28:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h **** 
  29:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h **** Inline LSYSTIM knl_toLSYSTIM( CONST SYSTIM *time )
  30:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h **** {
  31:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h **** 	LSYSTIM		ltime;
  32:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h **** 
  33:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h **** 	hilo_ll(ltime, time->hi, time->lo);
  34:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h **** 
  35:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h **** 	return ltime;
  36:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h **** }
  37:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h **** 
  38:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h **** Inline SYSTIM knl_toSYSTIM( LSYSTIM ltime )
  39:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h **** {
  40:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h **** 	SYSTIM		time;
  41:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h **** 
  42:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h **** 	ll_hilo(time.hi, time.lo, ltime);
  43:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h **** 
  44:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h **** 	return time;
  45:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h **** }
  46:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h **** 
  47:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h **** /*
  48:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h ****  * Absolute time (can be considered the lower 32bit of SYSTIM)
  49:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h ****  */
  50:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h **** typedef	UW	ABSTIM;
  51:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h **** 
  52:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h **** #define ABSTIM_DIFF_MIN  (0x7FFFFFFF)
  53:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h **** 
  54:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h **** Inline BOOL knl_abstim_reached( ABSTIM curtim, ABSTIM evttim )
  55:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h **** {
 172                             		.loc 3 55 1
 173 00ba 7E AA                   		push.l	r10
 174                             	.LCFI12:
 175 00bc 71 0A F8                		add	#-8, r0, r10
 176                             	.LCFI13:
 177 00bf EF A0                   		mov.L	r10, r0
 178 00c1 E3 A1                   		mov.L	r1, [r10]
 179 00c3 E7 A2 01                		mov.L	r2, 4[r10]
  56:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h **** 	return (ABSTIM)(curtim - evttim) <= (ABSTIM)ABSTIM_DIFF_MIN;
 180                             		.loc 3 56 25
 181 00c6 EC A4                   		mov.L	[r10], r4
 182 00c8 ED A5 01                		mov.L	4[r10], r5
 183 00cb FF 05 54                		sub	r5, r4, r5
 184                             		.loc 3 56 35
 185 00ce 7E 05                   		not	r5
 186 00d0 69 F5                   		shlr	#31, r5
 187 00d2 5B 55                   		movu.B	r5, r5
  57:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\tkernel\timer.h **** }
 188                             		.loc 3 57 1
 189 00d4 EF 51                   		mov.L	r5, r1
 190 00d6 3F AA 03                		rtsd	#12, r10-r10
 191                             	.LFE13:
 194                             	_knl_isTaskIndependent:
 195                             	.LFB16:
 196                             		.file 4 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_tbrx65n\\kernel\\sysdepend\\cpu\\core\\rxv2\\cpu_st
   1:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
   2:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *----------------------------------------------------------------------
   3:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *    micro T-Kernel 3.00.03
   4:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *
   5:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *    Copyright (C) 2006-2021 by Ken Sakamura.
   6:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *    This software is distributed under the T-License 2.2.
   7:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *----------------------------------------------------------------------
   8:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *
   9:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.
  10:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *
  11:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *----------------------------------------------------------------------
  12:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  13:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  14:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  15:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *	cpu_status.h (RXv2)
  16:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *	CPU-Dependent Status Definition
  17:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  18:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  19:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #ifndef _SYSDEPEND_CPU_CORE_STATUS_
  20:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define _SYSDEPEND_CPU_CORE_STATUS_
  21:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  22:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #include <tk/syslib.h>
  23:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #include <sys/sysdef.h>
  24:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  25:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #include "sysdepend.h"
  26:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  27:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  * Start/End critical section
  28:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  29:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define BEGIN_CRITICAL_SECTION	{ UINT _sr_ = disint();
  30:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define END_CRITICAL_SECTION	if ( !isDI(_sr_)			\
  31:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 				  && knl_ctxtsk != knl_schedtsk		\
  32:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 				  && !knl_isTaskIndependent()		\
  33:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 				  && !knl_dispatch_disabled ) {		\
  34:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 					knl_dispatch();			\
  35:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 				}					\
  36:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 				setint(_sr_); }
  37:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  38:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  * Start/End interrupt disable section
  39:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  40:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define BEGIN_DISABLE_INTERRUPT	{ UINT _sr_ = disint();
  41:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define END_DISABLE_INTERRUPT	setint(_sr_); }
  42:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  43:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  44:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  * Interrupt enable/disable
  45:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  46:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define ENABLE_INTERRUPT	{ setint(0); }
  47:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define DISABLE_INTERRUPT	{ disint(); }
  48:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  49:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  50:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  * Enable interrupt nesting
  51:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *	Enable the interrupt that has a higher priority than 'level.'
  52:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  53:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define ENABLE_INTERRUPT_UPTO(level)	{ setint(level); }
  54:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  55:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  56:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *  Task-independent control
  57:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  58:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** IMPORT	W	knl_taskindp;		/* Task independent status */
  59:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  60:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  61:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  * If it is the task-independent part, TRUE
  62:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  63:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** Inline BOOL knl_isTaskIndependent( void )
  64:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** {
 197                             		.loc 4 64 1
 198 00d9 7E AA                   		push.l	r10
 199                             	.LCFI14:
 200 00db EF 0A                   		mov.L	r0, r10
 201                             	.LCFI15:
  65:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 	return ( knl_taskindp > 0 )? TRUE: FALSE;
 202                             		.loc 4 65 35
 203 00dd FB 52 00 00 00 00       		mov.L	#_knl_taskindp, r5
 204 00e3 EC 55                   		mov.L	[r5], r5
 205 00e5 61 05                   		cmp	#0, r5
 206 00e7 FC DB 5A                		scgt.L	r5
 207 00ea 5B 55                   		movu.B	r5, r5
  66:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** }
 208                             		.loc 4 66 1
 209 00ec EF 51                   		mov.L	r5, r1
 210 00ee 3F AA 01                		rtsd	#4, r10-r10
 211                             	.LFE16:
 214                             	_knl_start_hw_timer:
 215                             	.LFB19:
 216                             		.file 5 "../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h"
   1:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** /*
   2:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h ****  *----------------------------------------------------------------------
   3:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h ****  *    micro T-Kernel 3.00.01
   4:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h ****  *
   5:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h ****  *    Copyright (C) 2006-2020 by Ken Sakamura.
   6:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h ****  *    This software is distributed under the T-License 2.2.
   7:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h ****  *----------------------------------------------------------------------
   8:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h ****  *
   9:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h ****  *    Released by TRON Forum(http://www.tron.org) at 2020/05/29.
  10:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h ****  *
  11:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h ****  *----------------------------------------------------------------------
  12:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h ****  */
  13:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** 
  14:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** /*
  15:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h ****  *	sys_timer.h (RXv2)
  16:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h ****  *	Hardware-Dependent System Timer (SysTick) Processing
  17:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h ****  */
  18:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** 
  19:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** #ifndef _SYSDEPEND_CPU_CORE_SYSTIMER_
  20:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** #define _SYSDEPEND_CPU_CORE_SYSTIMER_
  21:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** 
  22:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** /*
  23:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h ****  * Timer start processing
  24:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h ****  *	Initialize the timer and start the periodical timer interrupt.
  25:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h ****  */
  26:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** Inline void knl_start_hw_timer( void )
  27:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** {
 217                             		.loc 5 27 1
 218 00f1 7E AA                   		push.l	r10
 219                             	.LCFI16:
 220 00f3 EF 0A                   		mov.L	r0, r10
 221                             	.LCFI17:
  28:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** 
  29:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** 	/* set Timer Count */
  30:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** 	out_h(CMT0_COR, SYSCLK_ICLK/PCLK_DIV/1000*TIMER_PERIOD/CMCR_DIV - 1);
 222                             		.loc 5 30 2
 223 00f5 FB 2A 3D 49             		mov	#0x493d, r2
 224 00f9 FB 1E 06 80 08          		mov.L	#0x88006, r1
 225 00fe 39 02 FF                		bsr	_out_h
  31:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** 
  32:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** 	/* Interrupt is Enable, Set Frequency Dividing */
  33:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** 	out_h(CMT0_CR, CMT0_CR_CMIE | CMCR_CKS_PLCK8);
 226                             		.loc 5 33 2
 227 0101 75 42 41                		mov	#0x41, r2
 228 0104 FB 1E 02 80 08          		mov.L	#0x88002, r1
 229 0109 39 F7 FE                		bsr	_out_h
  34:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** 
  35:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** 	/* CMI0 Interrupt Enable, Interrupt Level is 15. */
  36:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** 	EnableInt( INTNO_SYS_TICK , INTLEVEL_SYS_TICK);
 230                             		.loc 5 36 2
 231 010c 66 F2                   		mov.L	#15, r2
 232 010e 75 41 1C                		mov.L	#28, r1
 233 0111 05 00 00 00             		bsr	_EnableInt
  37:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** 
  38:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** 	/* Start timer count */
  39:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** 	out_h(CMT_STR0, CMT_STR0_STR0);
 234                             		.loc 5 39 2
 235 0115 66 12                   		mov	#1, r2
 236 0117 FB 1E 00 80 08          		mov.L	#0x88000, r1
 237 011c 39 E4 FE                		bsr	_out_h
  40:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** }
 238                             		.loc 5 40 1
 239 011f 03                      		nop
 240 0120 3F AA 01                		rtsd	#4, r10-r10
 241                             	.LFE19:
 244                             	_knl_clear_hw_timer_interrupt:
 245                             	.LFB20:
  41:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** 
  42:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** /*
  43:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h ****  * Clear timer interrupt
  44:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h ****  *	Clear the timer interrupt request. Depending on the type of
  45:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h ****  *	hardware, there are two timings for clearing: at the beginning
  46:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h ****  *	and the end of the interrupt handler.
  47:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h ****  *	'clear_hw_timer_interrupt()' is called at the beginning of the
  48:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h ****  *	timer interrupt handler.
  49:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h ****  *	'end_of_hw_timer_interrupt()' is called at the end of the timer
  50:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h ****  *	interrupt handler.
  51:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h ****  *	Use either or both according to hardware.
  52:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h ****  */
  53:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** Inline void knl_clear_hw_timer_interrupt( void )
  54:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** {
 246                             		.loc 5 54 1
 247 0123 7E AA                   		push.l	r10
 248                             	.LCFI18:
 249 0125 EF 0A                   		mov.L	r0, r10
 250                             	.LCFI19:
  55:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** 	/* Nothing required to do at this point */
  56:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** }
 251                             		.loc 5 56 1
 252 0127 03                      		nop
 253 0128 3F AA 01                		rtsd	#4, r10-r10
 254                             	.LFE20:
 257                             	_knl_end_of_hw_timer_interrupt:
 258                             	.LFB21:
  57:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** 
  58:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** Inline void knl_end_of_hw_timer_interrupt( void )
  59:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** {
 259                             		.loc 5 59 1
 260 012b 7E AA                   		push.l	r10
 261                             	.LCFI20:
 262 012d EF 0A                   		mov.L	r0, r10
 263                             	.LCFI21:
  60:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** 	/* Nothing required to do at this point */
  61:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** }
 264                             		.loc 5 61 1
 265 012f 03                      		nop
 266 0130 3F AA 01                		rtsd	#4, r10-r10
 267                             	.LFE21:
 270                             	_knl_terminate_hw_timer:
 271                             	.LFB22:
  62:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** 
  63:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** /*
  64:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h ****  * Timer stop processing
  65:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h ****  *	Stop the timer operation.
  66:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h ****  *	Called when system stops.
  67:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h ****  */
  68:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** Inline void knl_terminate_hw_timer( void )
  69:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** {
 272                             		.loc 5 69 1
 273 0133 7E AA                   		push.l	r10
 274                             	.LCFI22:
 275 0135 71 0A FC                		add	#-4, r0, r10
 276                             	.LCFI23:
 277 0138 EF A0                   		mov.L	r10, r0
  70:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** 	UH	cmstr0;
  71:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** 
  72:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** 	DisableInt( INTNO_SYS_TICK );	/* Disable timer interrupt */
 278                             		.loc 5 72 2
 279 013a 75 41 1C                		mov.L	#28, r1
 280 013d 05 00 00 00             		bsr	_DisableInt
  73:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** 
  74:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** 	out_h(CMT0_CR, 0);		/* Disable compare match interrupt */
 281                             		.loc 5 74 2
 282 0141 66 02                   		mov	#0, r2
 283 0143 FB 1E 02 80 08          		mov.L	#0x88002, r1
 284 0148 39 B8 FE                		bsr	_out_h
  75:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** 	cmstr0 = in_h(CMT_STR0) & ~(CMT_STR0_STR0);
 285                             		.loc 5 75 11
 286 014b FB 1E 00 80 08          		mov.L	#0x88000, r1
 287 0150 39 C7 FE                		bsr	_in_h
 288 0153 EF 15                   		mov.L	r1, r5
 289                             		.loc 5 75 9
 290 0155 75 25 FE                		and	#-2, r5
 291 0158 D3 A5                   		mov.W	r5, [r10]
  76:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** 	out_h(CMT_STR0, cmstr0);	/* Stop timer count */
 292                             		.loc 5 76 2
 293 015a DC A2                   		mov.W	[r10], r2
 294 015c FB 1E 00 80 08          		mov.L	#0x88000, r1
 295 0161 39 9F FE                		bsr	_out_h
  77:../kernel/tkernel/../sysdepend/rtb_rx65n/../cpu/rx65n/../core/rxv2/sys_timer.h **** }
 296                             		.loc 5 77 1
 297 0164 03                      		nop
 298 0165 3F AA 02                		rtsd	#8, r10-r10
 299                             	.LFE22:
 301                             		.global	_knl_current_time
 302                             		.section	.noinit,"aw"
 303                             		.balign 4
 306                             	_knl_current_time:
 307 0000 00 00 00 00 00 00 00 00 		.zero	8
 308                             		.global	_knl_real_time_ofs
 309                             		.balign 4
 312                             	_knl_real_time_ofs:
 313 0008 00 00 00 00 00 00 00 00 		.zero	8
 314                             		.global	_knl_timer_queue
 315                             		.balign 4
 318                             	_knl_timer_queue:
 319 0010 00 00 00 00 00 00 00 00 		.zero	8
 320                             		.section P,"ax"
 321                             		.global	_knl_timer_startup
 323                             	_knl_timer_startup:
 324                             	.LFB24:
 325                             		.file 6 "../kernel/tkernel/timer.c"
   1:../kernel/tkernel/timer.c **** /*
   2:../kernel/tkernel/timer.c ****  *----------------------------------------------------------------------
   3:../kernel/tkernel/timer.c ****  *    micro T-Kernel 3.00.00
   4:../kernel/tkernel/timer.c ****  *
   5:../kernel/tkernel/timer.c ****  *    Copyright (C) 2006-2019 by Ken Sakamura.
   6:../kernel/tkernel/timer.c ****  *    This software is distributed under the T-License 2.1.
   7:../kernel/tkernel/timer.c ****  *----------------------------------------------------------------------
   8:../kernel/tkernel/timer.c ****  *
   9:../kernel/tkernel/timer.c ****  *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.
  10:../kernel/tkernel/timer.c ****  *
  11:../kernel/tkernel/timer.c ****  *----------------------------------------------------------------------
  12:../kernel/tkernel/timer.c ****  */
  13:../kernel/tkernel/timer.c **** 
  14:../kernel/tkernel/timer.c **** /*
  15:../kernel/tkernel/timer.c ****  *	timer.c
  16:../kernel/tkernel/timer.c ****  *	Timer Control
  17:../kernel/tkernel/timer.c ****  */
  18:../kernel/tkernel/timer.c **** 
  19:../kernel/tkernel/timer.c **** #include "kernel.h"
  20:../kernel/tkernel/timer.c **** #include "timer.h"
  21:../kernel/tkernel/timer.c **** #include "../sysdepend/sys_timer.h"
  22:../kernel/tkernel/timer.c **** 
  23:../kernel/tkernel/timer.c **** /*
  24:../kernel/tkernel/timer.c ****  * Current time (Software clock)
  25:../kernel/tkernel/timer.c ****  *	'current_time' shows the total operation time since
  26:../kernel/tkernel/timer.c ****  *	operating system Starts. 'real_time_ofs' shows difference
  27:../kernel/tkernel/timer.c ****  *	between the current time and the operating system clock
  28:../kernel/tkernel/timer.c ****  *	(current_time). Do not change 'current_time' when setting
  29:../kernel/tkernel/timer.c ****  *	time by 'set_tim()'. Set 'real_time_ofs' with the time  	 
  30:../kernel/tkernel/timer.c ****  *   	difference between 'current_time' and setup time.
  31:../kernel/tkernel/timer.c ****  *	Therefore 'current_time' does not affect with time change
  32:../kernel/tkernel/timer.c ****  *	and it increases simply.
  33:../kernel/tkernel/timer.c ****  */
  34:../kernel/tkernel/timer.c **** Noinit(EXPORT LSYSTIM	knl_current_time);	/* System operation time */
  35:../kernel/tkernel/timer.c **** Noinit(EXPORT LSYSTIM	knl_real_time_ofs);	/* Actual time - System operation time */
  36:../kernel/tkernel/timer.c **** 
  37:../kernel/tkernel/timer.c **** /* 
  38:../kernel/tkernel/timer.c ****  * Timer event queue
  39:../kernel/tkernel/timer.c ****  */
  40:../kernel/tkernel/timer.c **** Noinit(EXPORT QUEUE	knl_timer_queue);
  41:../kernel/tkernel/timer.c **** 
  42:../kernel/tkernel/timer.c **** /*
  43:../kernel/tkernel/timer.c ****  * Start system timer
  44:../kernel/tkernel/timer.c ****  */
  45:../kernel/tkernel/timer.c **** EXPORT ER knl_timer_startup( void )
  46:../kernel/tkernel/timer.c **** {
 326                             		.loc 6 46 1
 327 0168 7E AA                   		push.l	r10
 328                             	.LCFI24:
 329 016a 7E A6                   		push.l	r6
 330                             	.LCFI25:
 331 016c EF 0A                   		mov.L	r0, r10
 332                             	.LCFI26:
  47:../kernel/tkernel/timer.c **** 	knl_current_time = knl_real_time_ofs = uitoll(0);
 333                             		.loc 6 47 39
 334 016e FB 52 00 00 00 00       		mov.L	#_knl_real_time_ofs, r5
 335 0174 F8 56 00                		mov.L	#0, [r5]
 336 0177 3E 51 00                		mov.L	#0, 4[r5]
 337                             		.loc 6 47 19
 338 017a FB 42 00 00 00 00       		mov.L	#_knl_real_time_ofs, r4
 339 0180 EC 45                   		mov.L	[r4], r5
 340 0182 A8 4E                   		mov.L	4[r4], r6
 341 0184 FB 42 00 00 00 00       		mov.L	#_knl_current_time, r4
 342 018a E3 45                   		mov.L	r5, [r4]
 343 018c A0 4E                   		mov.L	r6, 4[r4]
  48:../kernel/tkernel/timer.c **** 	QueInit(&knl_timer_queue);
 344                             		.loc 6 48 2
 345 018e FB 12 00 00 00 00       		mov.L	#_knl_timer_queue, r1
 346 0194 39 97 FE                		bsr	_QueInit
  49:../kernel/tkernel/timer.c **** 
  50:../kernel/tkernel/timer.c **** 	/* Start timer interrupt */
  51:../kernel/tkernel/timer.c **** 	knl_start_hw_timer();
 347                             		.loc 6 51 2
 348 0197 39 5A FF                		bsr	_knl_start_hw_timer
  52:../kernel/tkernel/timer.c **** 
  53:../kernel/tkernel/timer.c **** 	return E_OK;
 349                             		.loc 6 53 9
 350 019a 66 05                   		mov.L	#0, r5
  54:../kernel/tkernel/timer.c **** }
 351                             		.loc 6 54 1
 352 019c EF 51                   		mov.L	r5, r1
 353 019e 7E B6                   		pop	r6
 354 01a0 7E BA                   		pop	r10
 355 01a2 02                      		rts
 356                             	.LFE24:
 358                             		.global	_knl_timer_shutdown
 360                             	_knl_timer_shutdown:
 361                             	.LFB25:
  55:../kernel/tkernel/timer.c **** 
  56:../kernel/tkernel/timer.c **** #if USE_SHUTDOWN
  57:../kernel/tkernel/timer.c **** /*
  58:../kernel/tkernel/timer.c ****  * Stop system timer
  59:../kernel/tkernel/timer.c ****  */
  60:../kernel/tkernel/timer.c **** EXPORT void knl_timer_shutdown( void )
  61:../kernel/tkernel/timer.c **** {
 362                             		.loc 6 61 1
 363 01a3 7E AA                   		push.l	r10
 364                             	.LCFI27:
 365 01a5 EF 0A                   		mov.L	r0, r10
 366                             	.LCFI28:
  62:../kernel/tkernel/timer.c **** 	knl_terminate_hw_timer();
 367                             		.loc 6 62 2
 368 01a7 39 8C FF                		bsr	_knl_terminate_hw_timer
  63:../kernel/tkernel/timer.c **** }
 369                             		.loc 6 63 1
 370 01aa 03                      		nop
 371 01ab 3F AA 01                		rtsd	#4, r10-r10
 372                             	.LFE25:
 375                             	_knl_enqueue_tmeb:
 376                             	.LFB26:
  64:../kernel/tkernel/timer.c **** #endif /* USE_SHUTDOWN */
  65:../kernel/tkernel/timer.c **** 
  66:../kernel/tkernel/timer.c **** 
  67:../kernel/tkernel/timer.c **** /*
  68:../kernel/tkernel/timer.c ****  * Insert timer event to timer event queue
  69:../kernel/tkernel/timer.c ****  */
  70:../kernel/tkernel/timer.c **** LOCAL void knl_enqueue_tmeb( TMEB *event )
  71:../kernel/tkernel/timer.c **** {
 377                             		.loc 6 71 1
 378 01ae 7E AA                   		push.l	r10
 379                             	.LCFI29:
 380 01b0 7E A6                   		push.l	r6
 381                             	.LCFI30:
 382 01b2 71 0A F4                		add	#-12, r0, r10
 383                             	.LCFI31:
 384 01b5 EF A0                   		mov.L	r10, r0
 385 01b7 E7 A1 02                		mov.L	r1, 8[r10]
  72:../kernel/tkernel/timer.c **** 	QUEUE	*q;
  73:../kernel/tkernel/timer.c **** 	ABSTIM	ofs = lltoul(knl_current_time) - ABSTIM_DIFF_MIN;
 386                             		.loc 6 73 15
 387 01ba FB 42 00 00 00 00       		mov.L	#_knl_current_time, r4
 388 01c0 EC 45                   		mov.L	[r4], r5
 389 01c2 A8 4E                   		mov.L	4[r4], r6
 390                             		.loc 6 73 9
 391 01c4 70 55 01 00 00 80       		add	#-2147483647, r5
 392 01ca E7 A5 01                		mov.L	r5, 4[r10]
  74:../kernel/tkernel/timer.c **** 
  75:../kernel/tkernel/timer.c **** 	for ( q = knl_timer_queue.next; q != &knl_timer_queue; q = q->next ) {
 393                             		.loc 6 75 10
 394 01cd FB 52 00 00 00 00       		mov.L	#_knl_timer_queue, r5
 395 01d3 EC 55                   		mov.L	[r5], r5
 396 01d5 E3 A5                   		mov.L	r5, [r10]
 397                             		.loc 6 75 2
 398 01d7 2E 20                   		bra	.L23
 399                             	.L26:
  76:../kernel/tkernel/timer.c **** 		if ( (ABSTIM)(event->time - ofs) < (ABSTIM)((((TMEB*)q)->time) - ofs) ) {
 400                             		.loc 6 76 22
 401 01d9 ED A5 02                		mov.L	8[r10], r5
 402 01dc A8 D4                   		mov.L	8[r5], r4
 403                             		.loc 6 76 29
 404 01de ED A5 01                		mov.L	4[r10], r5
 405 01e1 43 54                   		sub	r5, r4
 406                             		.loc 6 76 58
 407 01e3 EC A5                   		mov.L	[r10], r5
 408 01e5 A8 D3                   		mov.L	8[r5], r3
 409                             		.loc 6 76 66
 410 01e7 ED A5 01                		mov.L	4[r10], r5
 411 01ea FF 05 53                		sub	r5, r3, r5
 412                             		.loc 6 76 6
 413 01ed 47 54                   		cmp	r5, r4
 414 01ef 23 14                   		bltu	.L27
  75:../kernel/tkernel/timer.c **** 		if ( (ABSTIM)(event->time - ofs) < (ABSTIM)((((TMEB*)q)->time) - ofs) ) {
 415                             		.loc 6 75 59 discriminator 2
 416 01f1 EC A5                   		mov.L	[r10], r5
 417 01f3 EC 55                   		mov.L	[r5], r5
 418 01f5 E3 A5                   		mov.L	r5, [r10]
 419                             	.L23:
  75:../kernel/tkernel/timer.c **** 		if ( (ABSTIM)(event->time - ofs) < (ABSTIM)((((TMEB*)q)->time) - ofs) ) {
 420                             		.loc 6 75 2 discriminator 1
 421 01f7 EC A5                   		mov.L	[r10], r5
 422 01f9 74 05 00 00 00 00       		cmp	#_knl_timer_queue, r5
 423 01ff 21 DA                   		bne	.L26
 424 0201 2E 03                   		bra	.L25
 425                             	.L27:
  77:../kernel/tkernel/timer.c **** 			break;
 426                             		.loc 6 77 4
 427 0203 03                      		nop
 428                             	.L25:
  78:../kernel/tkernel/timer.c **** 		}
  79:../kernel/tkernel/timer.c **** 	}
  80:../kernel/tkernel/timer.c **** 	QueInsert(&event->queue, q);
 429                             		.loc 6 80 2
 430 0204 ED A5 02                		mov.L	8[r10], r5
 431 0207 EC A2                   		mov.L	[r10], r2
 432 0209 EF 51                   		mov.L	r5, r1
 433 020b 39 54 FE                		bsr	_QueInsert
  81:../kernel/tkernel/timer.c **** }
 434                             		.loc 6 81 1
 435 020e 03                      		nop
 436 020f 62 C0                   		add	#12, r0
 437 0211 7E B6                   		pop	r6
 438 0213 7E BA                   		pop	r10
 439 0215 02                      		rts
 440                             	.LFE26:
 442                             		.global	_knl_timer_insert
 444                             	_knl_timer_insert:
 445                             	.LFB27:
  82:../kernel/tkernel/timer.c **** 
  83:../kernel/tkernel/timer.c **** /*
  84:../kernel/tkernel/timer.c ****  * Set timeout event
  85:../kernel/tkernel/timer.c ****  *	Register the timer event 'event' onto the timer queue to
  86:../kernel/tkernel/timer.c ****  *	start after the timeout 'tmout'. At timeout, start with the
  87:../kernel/tkernel/timer.c ****  *	argument 'arg' on the callback function 'callback'.
  88:../kernel/tkernel/timer.c ****  *	When 'tmout' is TMO_FEVR, do not register onto the timer
  89:../kernel/tkernel/timer.c ****  *	queue, but initialize queue area in case 'timer_delete' 
  90:../kernel/tkernel/timer.c ****  *	is called later.
  91:../kernel/tkernel/timer.c ****  *
  92:../kernel/tkernel/timer.c ****  *	"include/tk/typedef.h"
  93:../kernel/tkernel/timer.c ****  *	typedef	W		TMO;
  94:../kernel/tkernel/timer.c ****  *	typedef UW		RELTIM;
  95:../kernel/tkernel/timer.c ****  *	#define TMO_FEVR	(-1)
  96:../kernel/tkernel/timer.c ****  */
  97:../kernel/tkernel/timer.c **** EXPORT void knl_timer_insert( TMEB *event, TMO tmout, CBACK callback, void *arg )
  98:../kernel/tkernel/timer.c **** {
 446                             		.loc 6 98 1
 447 0216 7E AA                   		push.l	r10
 448                             	.LCFI32:
 449 0218 7E A6                   		push.l	r6
 450                             	.LCFI33:
 451 021a 71 0A F0                		add	#-16, r0, r10
 452                             	.LCFI34:
 453 021d EF A0                   		mov.L	r10, r0
 454 021f E3 A1                   		mov.L	r1, [r10]
 455 0221 E7 A2 01                		mov.L	r2, 4[r10]
 456 0224 E7 A3 02                		mov.L	r3, 8[r10]
 457 0227 E7 A4 03                		mov.L	r4, 12[r10]
  99:../kernel/tkernel/timer.c **** 	event->callback = callback;
 458                             		.loc 6 99 18
 459 022a EC A5                   		mov.L	[r10], r5
 460 022c ED A4 02                		mov.L	8[r10], r4
 461 022f A0 DC                   		mov.L	r4, 12[r5]
 100:../kernel/tkernel/timer.c **** 	event->arg = arg;
 462                             		.loc 6 100 13
 463 0231 EC A5                   		mov.L	[r10], r5
 464 0233 ED A4 03                		mov.L	12[r10], r4
 465 0236 A1 54                   		mov.L	r4, 16[r5]
 101:../kernel/tkernel/timer.c **** 
 102:../kernel/tkernel/timer.c **** 	if ( tmout == TMO_FEVR ) {
 466                             		.loc 6 102 5
 467 0238 ED A5 01                		mov.L	4[r10], r5
 468 023b 75 05 FF                		cmp	#-1, r5
 469 023e 1A                      		bne	.L29
 103:../kernel/tkernel/timer.c **** 		QueInit(&event->queue);
 470                             		.loc 6 103 3
 471 023f EC A5                   		mov.L	[r10], r5
 472 0241 EF 51                   		mov.L	r5, r1
 473 0243 39 E8 FD                		bsr	_QueInit
 104:../kernel/tkernel/timer.c **** 	} else {
 105:../kernel/tkernel/timer.c **** 		/* To guarantee longer wait time specified by 'tmout',
 106:../kernel/tkernel/timer.c **** 		   add TIMER_PERIOD on wait time */
 107:../kernel/tkernel/timer.c **** 		event->time = lltoul(knl_current_time) + tmout + TIMER_PERIOD;
 108:../kernel/tkernel/timer.c **** 		knl_enqueue_tmeb(event);
 109:../kernel/tkernel/timer.c **** 	}
 110:../kernel/tkernel/timer.c **** }
 474                             		.loc 6 110 1
 475 0246 2E 1F                   		bra	.L31
 476                             	.L29:
 107:../kernel/tkernel/timer.c **** 		knl_enqueue_tmeb(event);
 477                             		.loc 6 107 17
 478 0248 FB 42 00 00 00 00       		mov.L	#_knl_current_time, r4
 479 024e EC 45                   		mov.L	[r4], r5
 480 0250 A8 4E                   		mov.L	4[r4], r6
 481 0252 EF 54                   		mov.L	r5, r4
 107:../kernel/tkernel/timer.c **** 		knl_enqueue_tmeb(event);
 482                             		.loc 6 107 42
 483 0254 ED A5 01                		mov.L	4[r10], r5
 484 0257 4B 45                   		add	r4, r5
 107:../kernel/tkernel/timer.c **** 		knl_enqueue_tmeb(event);
 485                             		.loc 6 107 50
 486 0259 71 54 0A                		add	#10, r5, r4
 107:../kernel/tkernel/timer.c **** 		knl_enqueue_tmeb(event);
 487                             		.loc 6 107 15
 488 025c EC A5                   		mov.L	[r10], r5
 489 025e A0 D4                   		mov.L	r4, 8[r5]
 108:../kernel/tkernel/timer.c **** 	}
 490                             		.loc 6 108 3
 491 0260 EC A1                   		mov.L	[r10], r1
 492 0262 39 4C FF                		bsr	_knl_enqueue_tmeb
 493                             	.L31:
 494                             		.loc 6 110 1
 495 0265 03                      		nop
 496 0266 71 00 10                		add	#16, r0
 497 0269 7E B6                   		pop	r6
 498 026b 7E BA                   		pop	r10
 499 026d 02                      		rts
 500                             	.LFE27:
 502                             		.global	_knl_timer_insert_reltim
 504                             	_knl_timer_insert_reltim:
 505                             	.LFB28:
 111:../kernel/tkernel/timer.c **** 
 112:../kernel/tkernel/timer.c **** EXPORT void knl_timer_insert_reltim( TMEB *event, RELTIM tmout, CBACK callback, void *arg )
 113:../kernel/tkernel/timer.c **** {
 506                             		.loc 6 113 1
 507 026e 7E AA                   		push.l	r10
 508                             	.LCFI35:
 509 0270 7E A6                   		push.l	r6
 510                             	.LCFI36:
 511 0272 71 0A F0                		add	#-16, r0, r10
 512                             	.LCFI37:
 513 0275 EF A0                   		mov.L	r10, r0
 514 0277 E3 A1                   		mov.L	r1, [r10]
 515 0279 E7 A2 01                		mov.L	r2, 4[r10]
 516 027c E7 A3 02                		mov.L	r3, 8[r10]
 517 027f E7 A4 03                		mov.L	r4, 12[r10]
 114:../kernel/tkernel/timer.c **** 	event->callback = callback;
 518                             		.loc 6 114 18
 519 0282 EC A5                   		mov.L	[r10], r5
 520 0284 ED A4 02                		mov.L	8[r10], r4
 521 0287 A0 DC                   		mov.L	r4, 12[r5]
 115:../kernel/tkernel/timer.c **** 	event->arg = arg;
 522                             		.loc 6 115 13
 523 0289 EC A5                   		mov.L	[r10], r5
 524 028b ED A4 03                		mov.L	12[r10], r4
 525 028e A1 54                   		mov.L	r4, 16[r5]
 116:../kernel/tkernel/timer.c **** 
 117:../kernel/tkernel/timer.c **** 	/* To guarantee longer wait time specified by 'tmout',
 118:../kernel/tkernel/timer.c **** 	   add TIMER_PERIOD on wait time */
 119:../kernel/tkernel/timer.c **** 	event->time = lltoul(knl_current_time) + tmout + TIMER_PERIOD;
 526                             		.loc 6 119 16
 527 0290 FB 42 00 00 00 00       		mov.L	#_knl_current_time, r4
 528 0296 EC 45                   		mov.L	[r4], r5
 529 0298 A8 4E                   		mov.L	4[r4], r6
 530                             		.loc 6 119 41
 531 029a 06 89 A5 01             		add	4[r10].L, r5
 532                             		.loc 6 119 49
 533 029e 71 54 0A                		add	#10, r5, r4
 534                             		.loc 6 119 14
 535 02a1 EC A5                   		mov.L	[r10], r5
 536 02a3 A0 D4                   		mov.L	r4, 8[r5]
 120:../kernel/tkernel/timer.c **** 	knl_enqueue_tmeb(event);
 537                             		.loc 6 120 2
 538 02a5 EC A1                   		mov.L	[r10], r1
 539 02a7 39 07 FF                		bsr	_knl_enqueue_tmeb
 121:../kernel/tkernel/timer.c **** }
 540                             		.loc 6 121 1
 541 02aa 03                      		nop
 542 02ab 71 00 10                		add	#16, r0
 543 02ae 7E B6                   		pop	r6
 544 02b0 7E BA                   		pop	r10
 545 02b2 02                      		rts
 546                             	.LFE28:
 548                             		.global	_knl_timer_insert_abs
 550                             	_knl_timer_insert_abs:
 551                             	.LFB29:
 122:../kernel/tkernel/timer.c **** 
 123:../kernel/tkernel/timer.c **** /*
 124:../kernel/tkernel/timer.c ****  * Set time specified event
 125:../kernel/tkernel/timer.c ****  *	Register the timer event 'evt' onto the timer queue to start at the 
 126:../kernel/tkernel/timer.c ****  *	(absolute) time 'time'.
 127:../kernel/tkernel/timer.c ****  *	'time' is not an actual time. It is system operation time.
 128:../kernel/tkernel/timer.c ****  */
 129:../kernel/tkernel/timer.c **** EXPORT void knl_timer_insert_abs( TMEB *evt, ABSTIM time, CBACK cback, void *arg )
 130:../kernel/tkernel/timer.c **** {
 552                             		.loc 6 130 1
 553 02b3 7E AA                   		push.l	r10
 554                             	.LCFI38:
 555 02b5 71 0A F0                		add	#-16, r0, r10
 556                             	.LCFI39:
 557 02b8 EF A0                   		mov.L	r10, r0
 558 02ba E3 A1                   		mov.L	r1, [r10]
 559 02bc E7 A2 01                		mov.L	r2, 4[r10]
 560 02bf E7 A3 02                		mov.L	r3, 8[r10]
 561 02c2 E7 A4 03                		mov.L	r4, 12[r10]
 131:../kernel/tkernel/timer.c **** 	evt->callback = cback;
 562                             		.loc 6 131 16
 563 02c5 EC A5                   		mov.L	[r10], r5
 564 02c7 ED A4 02                		mov.L	8[r10], r4
 565 02ca A0 DC                   		mov.L	r4, 12[r5]
 132:../kernel/tkernel/timer.c **** 	evt->arg = arg;
 566                             		.loc 6 132 11
 567 02cc EC A5                   		mov.L	[r10], r5
 568 02ce ED A4 03                		mov.L	12[r10], r4
 569 02d1 A1 54                   		mov.L	r4, 16[r5]
 133:../kernel/tkernel/timer.c **** 	evt->time = time;
 570                             		.loc 6 133 12
 571 02d3 EC A5                   		mov.L	[r10], r5
 572 02d5 ED A4 01                		mov.L	4[r10], r4
 573 02d8 A0 D4                   		mov.L	r4, 8[r5]
 134:../kernel/tkernel/timer.c **** 	knl_enqueue_tmeb(evt);
 574                             		.loc 6 134 2
 575 02da EC A1                   		mov.L	[r10], r1
 576 02dc 39 D2 FE                		bsr	_knl_enqueue_tmeb
 135:../kernel/tkernel/timer.c **** }
 577                             		.loc 6 135 1
 578 02df 03                      		nop
 579 02e0 3F AA 05                		rtsd	#20, r10-r10
 580                             	.LFE29:
 582                             		.global	_knl_timer_handler
 584                             	_knl_timer_handler:
 585                             	.LFB30:
 136:../kernel/tkernel/timer.c **** 
 137:../kernel/tkernel/timer.c **** /* ------------------------------------------------------------------------ */
 138:../kernel/tkernel/timer.c **** 
 139:../kernel/tkernel/timer.c **** /*
 140:../kernel/tkernel/timer.c ****  * System imer interrupt handler
 141:../kernel/tkernel/timer.c ****  *	This interrupt handler starts every TIMER_PERIOD millisecond 
 142:../kernel/tkernel/timer.c ****  *	interval by hardware timer. Update the software clock and start the 
 143:../kernel/tkernel/timer.c ****  *	timer event upon arriving at start time.
 144:../kernel/tkernel/timer.c ****  */
 145:../kernel/tkernel/timer.c **** 
 146:../kernel/tkernel/timer.c **** EXPORT void knl_timer_handler( void )
 147:../kernel/tkernel/timer.c **** {
 586                             		.loc 6 147 1
 587 02e3 6E 6C                   		pushm	r6-r12
 588                             	.LCFI40:
 589 02e5 71 0A F4                		add	#-12, r0, r10
 590                             	.LCFI41:
 591 02e8 EF A0                   		mov.L	r10, r0
 148:../kernel/tkernel/timer.c **** 	TMEB	*event;
 149:../kernel/tkernel/timer.c **** 	ABSTIM	cur;
 150:../kernel/tkernel/timer.c **** 
 151:../kernel/tkernel/timer.c **** 	knl_clear_hw_timer_interrupt();		/* Clear timer interrupt */
 592                             		.loc 6 151 2
 593 02ea 39 39 FE                		bsr	_knl_clear_hw_timer_interrupt
 594                             	.LBB2:
 152:../kernel/tkernel/timer.c **** 
 153:../kernel/tkernel/timer.c **** 	BEGIN_CRITICAL_SECTION;
 595                             		.loc 6 153 2
 596 02ed 05 00 00 00             		bsr	_disint
 597 02f1 E3 A1                   		mov.L	r1, [r10]
 154:../kernel/tkernel/timer.c **** 	knl_current_time = ll_add(knl_current_time, uitoll(TIMER_PERIOD));
 598                             		.loc 6 154 21
 599 02f3 FB 42 00 00 00 00       		mov.L	#_knl_current_time, r4
 600 02f9 EC 45                   		mov.L	[r4], r5
 601 02fb A8 4E                   		mov.L	4[r4], r6
 602 02fd EF 6C                   		mov.L	r6, r12
 603 02ff 71 5B 0A                		add	#10, r5, r11
 604 0302 FD 74 2C 00             		adc	#0, r12
 605                             		.loc 6 154 19
 606 0306 FB 52 00 00 00 00       		mov.L	#_knl_current_time, r5
 607 030c E3 5B                   		mov.L	r11, [r5]
 608 030e E7 5C 01                		mov.L	r12, 4[r5]
 155:../kernel/tkernel/timer.c **** 	cur = lltoul(knl_current_time);
 609                             		.loc 6 155 8
 610 0311 FB 42 00 00 00 00       		mov.L	#_knl_current_time, r4
 611 0317 EC 45                   		mov.L	[r4], r5
 612 0319 A8 4E                   		mov.L	4[r4], r6
 613                             		.loc 6 155 6
 614 031b E7 A5 01                		mov.L	r5, 4[r10]
 156:../kernel/tkernel/timer.c **** 
 157:../kernel/tkernel/timer.c **** #if USE_DBGSPT && defined(USE_FUNC_TD_INF_TSK)
 158:../kernel/tkernel/timer.c **** 	if ( knl_ctxtsk != NULL ) {
 159:../kernel/tkernel/timer.c **** 		/* Task at execution */
 160:../kernel/tkernel/timer.c **** 		if ( knl_ctxtsk->sysmode > 0 ) {
 161:../kernel/tkernel/timer.c **** 			knl_ctxtsk->stime += TIMER_PERIOD;
 162:../kernel/tkernel/timer.c **** 		} else {
 163:../kernel/tkernel/timer.c **** 			knl_ctxtsk->utime += TIMER_PERIOD;
 164:../kernel/tkernel/timer.c **** 		}
 165:../kernel/tkernel/timer.c **** 	}
 166:../kernel/tkernel/timer.c **** #endif
 167:../kernel/tkernel/timer.c **** 
 168:../kernel/tkernel/timer.c **** 	/* Execute event that passed occurring time. */
 169:../kernel/tkernel/timer.c **** 	while ( !isQueEmpty(&knl_timer_queue) ) {
 615                             		.loc 6 169 8
 616 031e 2E 3F                   		bra	.L35
 617                             	.L38:
 170:../kernel/tkernel/timer.c **** 		event = (TMEB*)knl_timer_queue.next;
 618                             		.loc 6 170 9
 619 0320 FB 52 00 00 00 00       		mov.L	#_knl_timer_queue, r5
 620 0326 EC 55                   		mov.L	[r5], r5
 621 0328 E7 A5 02                		mov.L	r5, 8[r10]
 171:../kernel/tkernel/timer.c **** 
 172:../kernel/tkernel/timer.c **** 		if ( !knl_abstim_reached(cur, event->time) ) {
 622                             		.loc 6 172 9
 623 032b ED A5 02                		mov.L	8[r10], r5
 624 032e A8 D5                   		mov.L	8[r5], r5
 625 0330 EF 52                   		mov.L	r5, r2
 626 0332 ED A1 01                		mov.L	4[r10], r1
 627 0335 39 85 FD                		bsr	_knl_abstim_reached
 628 0338 EF 15                   		mov.L	r1, r5
 629                             		.loc 6 172 6
 630 033a 61 05                   		cmp	#0, r5
 631 033c 20 32                   		beq	.L40
 173:../kernel/tkernel/timer.c **** 			break;
 174:../kernel/tkernel/timer.c **** 		}
 175:../kernel/tkernel/timer.c **** 
 176:../kernel/tkernel/timer.c **** 		QueRemove(&event->queue);
 632                             		.loc 6 176 3
 633 033e ED A5 02                		mov.L	8[r10], r5
 634 0341 EF 51                   		mov.L	r5, r1
 635 0343 39 4C FD                		bsr	_QueRemove
 177:../kernel/tkernel/timer.c **** 		if ( event->callback != NULL ) {
 636                             		.loc 6 177 13
 637 0346 ED A5 02                		mov.L	8[r10], r5
 638 0349 A8 DD                   		mov.L	12[r5], r5
 639                             		.loc 6 177 6
 640 034b 61 05                   		cmp	#0, r5
 641 034d 20 10                   		beq	.L35
 178:../kernel/tkernel/timer.c **** 			(*event->callback)(event->arg);
 642                             		.loc 6 178 5
 643 034f ED A5 02                		mov.L	8[r10], r5
 644 0352 A8 DD                   		mov.L	12[r5], r5
 645 0354 ED A4 02                		mov.L	8[r10], r4
 646 0357 A9 44                   		mov.L	16[r4], r4
 647 0359 EF 41                   		mov.L	r4, r1
 648 035b 7F 15                   		jsr	r5
 649                             	.LVL0:
 650                             	.L35:
 169:../kernel/tkernel/timer.c **** 		event = (TMEB*)knl_timer_queue.next;
 651                             		.loc 6 169 11
 652 035d FB 12 00 00 00 00       		mov.L	#_knl_timer_queue, r1
 653 0363 39 E1 FC                		bsr	_isQueEmpty
 654 0366 EF 15                   		mov.L	r1, r5
 169:../kernel/tkernel/timer.c **** 		event = (TMEB*)knl_timer_queue.next;
 655                             		.loc 6 169 8
 656 0368 61 05                   		cmp	#0, r5
 657 036a 20 B6                   		beq	.L38
 658 036c 2E 03                   		bra	.L37
 659                             	.L40:
 173:../kernel/tkernel/timer.c **** 		}
 660                             		.loc 6 173 4
 661 036e 03                      		nop
 662                             	.L37:
 179:../kernel/tkernel/timer.c **** 		}
 180:../kernel/tkernel/timer.c **** 	}
 181:../kernel/tkernel/timer.c **** 
 182:../kernel/tkernel/timer.c **** 	END_CRITICAL_SECTION;
 663                             		.loc 6 182 2
 664 036f EC A5                   		mov.L	[r10], r5
 665 0371 61 F5                   		cmp	#15, r5
 666 0373 20 2E                   		beq	.L39
 667                             		.loc 6 182 2 is_stmt 0 discriminator 1
 668 0375 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 669 037b EC 54                   		mov.L	[r5], r4
 670 037d FB 52 00 00 00 00       		mov.L	#_knl_schedtsk, r5
 671 0383 EC 55                   		mov.L	[r5], r5
 672 0385 47 54                   		cmp	r5, r4
 673 0387 20 1A                   		beq	.L39
 674                             		.loc 6 182 2 discriminator 3
 675 0389 39 50 FD                		bsr	_knl_isTaskIndependent
 676 038c EF 15                   		mov.L	r1, r5
 677 038e 61 05                   		cmp	#0, r5
 678 0390 21 11                   		bne	.L39
 679                             		.loc 6 182 2 discriminator 5
 680 0392 FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 681 0398 EC 55                   		mov.L	[r5], r5
 682 039a 61 05                   		cmp	#0, r5
 683 039c 1D                      		bne	.L39
 684                             		.loc 6 182 2 discriminator 7
 685 039d 05 00 00 00             		bsr	_knl_dispatch
 686                             		.balign 8,3,1
 687                             	.L39:
 688                             		.loc 6 182 2 discriminator 9
 689 03a1 EC A1                   		mov.L	[r10], r1
 690 03a3 05 00 00 00             		bsr	_setint
 691                             	.LBE2:
 183:../kernel/tkernel/timer.c **** 
 184:../kernel/tkernel/timer.c **** 	knl_end_of_hw_timer_interrupt();		/* Clear timer interrupt */
 692                             		.loc 6 184 2 is_stmt 1 discriminator 9
 693 03a7 39 84 FD                		bsr	_knl_end_of_hw_timer_interrupt
 185:../kernel/tkernel/timer.c **** }
 694                             		.loc 6 185 1 discriminator 9
 695 03aa 03                      		nop
 696 03ab 3F 6C 0A                		rtsd	#40, r6-r12
 697                             	.LFE30:
 1108                             	.Letext0:
 1109                             		.file 7 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_tbrx65n\\include/tk/typedef.h"
 1110                             		.file 8 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_tbrx65n\\include/tk/syscall.h"
 1111                             		.file 9 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_tbrx65n\\kernel\\knlinc/kernel.h"
 1112                             		.file 10 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_tbrx65n\\kernel\\tkernel\\winfo.h"
 1113                             		.file 11 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_tbrx65n\\kernel\\tkernel\\mutex.h"
 1114                             		.file 12 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_tbrx65n\\kernel\\sysdepend\\cpu\\core\\rxv2\\sysde
