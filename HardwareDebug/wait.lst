   1                             		.file	"wait.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   5                             	_isQueEmpty:
   6                             	.LFB7:
   7                             		.file 1 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\include/sys/queue.h"
   1:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
   2:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *----------------------------------------------------------------------
   3:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *    micro T-Kernel 3.00.00
   4:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *
   5:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *    Copyright (C) 2006-2019 by Ken Sakamura.
   6:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *    This software is distributed under the T-License 2.1.
   7:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *----------------------------------------------------------------------
   8:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *
   9:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.
  10:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *
  11:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *----------------------------------------------------------------------
  12:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  13:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  14:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  15:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	queue.h
  16:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *
  17:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	Queuing operation
  18:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  19:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  20:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** #ifndef	__SYS_QUEUE_H__
  21:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** #define __SYS_QUEUE_H__
  22:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  23:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** #include <tk/tkernel.h>
  24:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  25:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** #ifdef __cplusplus
  26:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** extern "C" {
  27:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** #endif
  28:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  29:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  30:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  * Double-link queue (ring)
  31:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  32:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** typedef struct queue {
  33:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	struct queue	*next;
  34:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	struct queue	*prev;
  35:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** } QUEUE;
  36:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  37:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  38:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  * Queue initialization 
  39:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  40:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** Inline void QueInit( QUEUE *que )
  41:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** {
  42:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	que->next = (struct queue *)que;
  43:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	que->prev = (struct queue *)que;
  44:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** }
  45:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  46:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  47:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  * TRUE if the queue is empty 
  48:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  49:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** Inline BOOL isQueEmpty( QUEUE *que )
  50:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** {
   8                             		.loc 1 50 1
   9 0000 7E AA                   		push.l	r10
  10                             	.LCFI0:
  11 0002 71 0A FC                		add	#-4, r0, r10
  12                             	.LCFI1:
  13 0005 EF A0                   		mov.L	r10, r0
  14 0007 E3 A1                   		mov.L	r1, [r10]
  51:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	return ( que->next == que )? TRUE: FALSE;
  15                             		.loc 1 51 14
  16 0009 EC A5                   		mov.L	[r10], r5
  17 000b EC 55                   		mov.L	[r5], r5
  18                             		.loc 1 51 35
  19 000d EC A4                   		mov.L	[r10], r4
  20 000f 47 54                   		cmp	r5, r4
  21 0011 FC DB 50                		sceq.L	r5
  22 0014 5B 55                   		movu.B	r5, r5
  52:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** }
  23                             		.loc 1 52 1
  24 0016 EF 51                   		mov.L	r5, r1
  25 0018 3F AA 02                		rtsd	#8, r10-r10
  26                             	.LFE7:
  29                             	_QueInsert:
  30                             	.LFB8:
  53:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  54:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  55:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  * Insert in queue 
  56:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	Inserts entry directly prior to que 
  57:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  58:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** Inline void QueInsert( QUEUE *entry, QUEUE *que )
  59:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** {
  31                             		.loc 1 59 1
  32 001b 7E AA                   		push.l	r10
  33                             	.LCFI2:
  34 001d 71 0A F8                		add	#-8, r0, r10
  35                             	.LCFI3:
  36 0020 EF A0                   		mov.L	r10, r0
  37 0022 E3 A1                   		mov.L	r1, [r10]
  38 0024 E7 A2 01                		mov.L	r2, 4[r10]
  60:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	entry->prev = (struct queue*) que->prev;
  39                             		.loc 1 60 16
  40 0027 ED A5 01                		mov.L	4[r10], r5
  41 002a A8 5C                   		mov.L	4[r5], r4
  42                             		.loc 1 60 14
  43 002c EC A5                   		mov.L	[r10], r5
  44 002e A0 5C                   		mov.L	r4, 4[r5]
  61:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	entry->next = que;
  45                             		.loc 1 61 14
  46 0030 EC A5                   		mov.L	[r10], r5
  47 0032 ED A4 01                		mov.L	4[r10], r4
  48 0035 E3 54                   		mov.L	r4, [r5]
  62:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	que->prev->next = entry;
  49                             		.loc 1 62 5
  50 0037 ED A5 01                		mov.L	4[r10], r5
  51 003a A8 5D                   		mov.L	4[r5], r5
  52                             		.loc 1 62 18
  53 003c EC A4                   		mov.L	[r10], r4
  54 003e E3 54                   		mov.L	r4, [r5]
  63:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	que->prev = entry;
  55                             		.loc 1 63 12
  56 0040 ED A5 01                		mov.L	4[r10], r5
  57 0043 EC A4                   		mov.L	[r10], r4
  58 0045 A0 5C                   		mov.L	r4, 4[r5]
  64:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** }
  59                             		.loc 1 64 1
  60 0047 03                      		nop
  61 0048 3F AA 03                		rtsd	#12, r10-r10
  62                             	.LFE8:
  65                             	_QueRemove:
  66                             	.LFB9:
  65:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  66:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  67:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  * Delete from queue 
  68:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	Deletes entry from queue 
  69:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	No action is performed if entry is empty. 
  70:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  71:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** Inline void QueRemove( QUEUE *entry )
  72:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** {
  67                             		.loc 1 72 1
  68 004b 7E AA                   		push.l	r10
  69                             	.LCFI4:
  70 004d 71 0A FC                		add	#-4, r0, r10
  71                             	.LCFI5:
  72 0050 EF A0                   		mov.L	r10, r0
  73 0052 E3 A1                   		mov.L	r1, [r10]
  73:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	if ( entry->next != entry ) {
  74                             		.loc 1 73 12
  75 0054 EC A5                   		mov.L	[r10], r5
  76 0056 EC 55                   		mov.L	[r5], r5
  77                             		.loc 1 73 5
  78 0058 EC A4                   		mov.L	[r10], r4
  79 005a 47 54                   		cmp	r5, r4
  80 005c 20 16                   		beq	.L6
  74:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 		entry->prev->next = (struct queue*) entry->next;
  81                             		.loc 1 74 8
  82 005e EC A5                   		mov.L	[r10], r5
  83 0060 A8 5D                   		mov.L	4[r5], r5
  84                             		.loc 1 74 23
  85 0062 EC A4                   		mov.L	[r10], r4
  86 0064 EC 44                   		mov.L	[r4], r4
  87                             		.loc 1 74 21
  88 0066 E3 54                   		mov.L	r4, [r5]
  75:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 		entry->next->prev = (struct queue*) entry->prev;
  89                             		.loc 1 75 8
  90 0068 EC A5                   		mov.L	[r10], r5
  91 006a EC 55                   		mov.L	[r5], r5
  92                             		.loc 1 75 23
  93 006c EC A4                   		mov.L	[r10], r4
  94 006e A8 4C                   		mov.L	4[r4], r4
  95                             		.loc 1 75 21
  96 0070 A0 5C                   		mov.L	r4, 4[r5]
  97                             	.L6:
  76:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	}
  77:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** }
  98                             		.loc 1 77 1
  99 0072 03                      		nop
 100 0073 3F AA 02                		rtsd	#8, r10-r10
 101                             	.LFE9:
 104                             	_knl_timer_delete:
 105                             	.LFB14:
 106                             		.file 2 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\kernel\\tkernel\\timer.h"
   1:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** /*
   2:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  *----------------------------------------------------------------------
   3:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  *    micro T-Kernel 3.00.00
   4:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  *
   5:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  *    Copyright (C) 2006-2019 by Ken Sakamura.
   6:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  *    This software is distributed under the T-License 2.1.
   7:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  *----------------------------------------------------------------------
   8:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  *
   9:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.
  10:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  *
  11:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  *----------------------------------------------------------------------
  12:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  */
  13:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  14:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** /*
  15:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  *	timer.h
  16:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  *	System Timer Module Definition
  17:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  */
  18:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  19:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** #ifndef _TIMER_
  20:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** #define _TIMER_
  21:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  22:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** #include "longlong.h"
  23:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  24:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** /*
  25:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  * SYSTIM internal expression and conversion
  26:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  */
  27:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** typedef	D	LSYSTIM;	/* SYSTIM int. expression */
  28:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  29:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** Inline LSYSTIM knl_toLSYSTIM( CONST SYSTIM *time )
  30:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** {
  31:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 	LSYSTIM		ltime;
  32:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  33:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 	hilo_ll(ltime, time->hi, time->lo);
  34:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  35:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 	return ltime;
  36:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** }
  37:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  38:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** Inline SYSTIM knl_toSYSTIM( LSYSTIM ltime )
  39:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** {
  40:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 	SYSTIM		time;
  41:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  42:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 	ll_hilo(time.hi, time.lo, ltime);
  43:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  44:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 	return time;
  45:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** }
  46:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  47:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** /*
  48:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  * Absolute time (can be considered the lower 32bit of SYSTIM)
  49:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  */
  50:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** typedef	UW	ABSTIM;
  51:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  52:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** #define ABSTIM_DIFF_MIN  (0x7FFFFFFF)
  53:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  54:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** Inline BOOL knl_abstim_reached( ABSTIM curtim, ABSTIM evttim )
  55:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** {
  56:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 	return (ABSTIM)(curtim - evttim) <= (ABSTIM)ABSTIM_DIFF_MIN;
  57:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** }
  58:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  59:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** /*
  60:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  * Definition of timer event block 
  61:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  */
  62:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** typedef void	(*CBACK)(void *);	/* Type of callback function */
  63:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  64:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** typedef struct timer_event_block {
  65:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 	QUEUE	queue;		/* Timer event queue */
  66:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 	ABSTIM	time;		/* Event time */
  67:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 	CBACK	callback;	/* Callback function */
  68:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 	void	*arg;		/* Argument to be sent to callback function */
  69:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** } TMEB;
  70:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  71:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** /*
  72:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  * Current time (Software clock)
  73:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  */
  74:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** IMPORT LSYSTIM	knl_current_time;	/* System operation time */
  75:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** IMPORT LSYSTIM	knl_real_time_ofs;	/* Difference from actual time */
  76:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  77:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** /*
  78:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  * Time-event queue
  79:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  */
  80:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** IMPORT QUEUE	knl_timer_queue;
  81:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  82:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** /*
  83:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  * Register time-event onto timer queue
  84:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  */
  85:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** IMPORT void knl_timer_insert( TMEB *evt, TMO tmout, CBACK cback, void *arg );
  86:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** IMPORT void knl_timer_insert_reltim( TMEB *event, RELTIM tmout, CBACK callback, void *arg );
  87:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** IMPORT void knl_timer_insert_abs( TMEB *evt, ABSTIM time, CBACK cback, void *arg );
  88:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 
  89:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** /*
  90:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  * Delete from time-event queue
  91:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h ****  */
  92:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** Inline void knl_timer_delete( TMEB *event )
  93:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** {
 107                             		.loc 2 93 1
 108 0076 7E AA                   		push.l	r10
 109                             	.LCFI6:
 110 0078 71 0A FC                		add	#-4, r0, r10
 111                             	.LCFI7:
 112 007b EF A0                   		mov.L	r10, r0
 113 007d E3 A1                   		mov.L	r1, [r10]
  94:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** 	QueRemove(&event->queue);
 114                             		.loc 2 94 2
 115 007f EC A5                   		mov.L	[r10], r5
 116 0081 EF 51                   		mov.L	r5, r1
 117 0083 39 C8 FF                		bsr	_QueRemove
  95:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\kernel\tkernel\timer.h **** }
 118                             		.loc 2 95 1
 119 0086 03                      		nop
 120 0087 3F AA 02                		rtsd	#8, r10-r10
 121                             	.LFE14:
 124                             	_knl_queue_insert_tpri:
 125                             	.LFB31:
 126                             		.file 3 "../kernel/tkernel/wait.h"
   1:../kernel/tkernel/wait.h **** /*
   2:../kernel/tkernel/wait.h ****  *----------------------------------------------------------------------
   3:../kernel/tkernel/wait.h ****  *    micro T-Kernel 3.00.00
   4:../kernel/tkernel/wait.h ****  *
   5:../kernel/tkernel/wait.h ****  *    Copyright (C) 2006-2019 by Ken Sakamura.
   6:../kernel/tkernel/wait.h ****  *    This software is distributed under the T-License 2.1.
   7:../kernel/tkernel/wait.h ****  *----------------------------------------------------------------------
   8:../kernel/tkernel/wait.h ****  *
   9:../kernel/tkernel/wait.h ****  *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.
  10:../kernel/tkernel/wait.h ****  *
  11:../kernel/tkernel/wait.h ****  *----------------------------------------------------------------------
  12:../kernel/tkernel/wait.h ****  */
  13:../kernel/tkernel/wait.h **** 
  14:../kernel/tkernel/wait.h **** /*
  15:../kernel/tkernel/wait.h ****  *	wait.h
  16:../kernel/tkernel/wait.h ****  *	Definition of Common Routine for Synchronization
  17:../kernel/tkernel/wait.h ****  */
  18:../kernel/tkernel/wait.h **** 
  19:../kernel/tkernel/wait.h **** #ifndef _WAIT_
  20:../kernel/tkernel/wait.h **** #define _WAIT_
  21:../kernel/tkernel/wait.h **** 
  22:../kernel/tkernel/wait.h **** #include <sys/queue.h>
  23:../kernel/tkernel/wait.h **** #include "timer.h"
  24:../kernel/tkernel/wait.h **** #include "task.h"
  25:../kernel/tkernel/wait.h **** 
  26:../kernel/tkernel/wait.h **** /*
  27:../kernel/tkernel/wait.h ****  * Release wait state of the task.
  28:../kernel/tkernel/wait.h ****  *	Remove the task from the timer queue and the wait queue, then
  29:../kernel/tkernel/wait.h ****  *	update the task state. 'wait_release_ok' sends E_OK to the
  30:../kernel/tkernel/wait.h ****  *	wait released task.
  31:../kernel/tkernel/wait.h ****  *	'wait_release_ok_recd' is normal wait release as well as
  32:../kernel/tkernel/wait.h ****  *	'wait_release_ok', but it sends 'ercd' to the wait released task.
  33:../kernel/tkernel/wait.h ****  *	It needs to be ercd >= 0. 
  34:../kernel/tkernel/wait.h ****  *	'wait_release_ng' sends 'ercd' to the wait released task. Use for
  35:../kernel/tkernel/wait.h ****  *	releasing the forced wait task. It needs to be ercd < 0.
  36:../kernel/tkernel/wait.h ****  *	'wait_release_tmout' don't remove from the timer queue. Use for
  37:../kernel/tkernel/wait.h ****  *	time out processing.
  38:../kernel/tkernel/wait.h ****  */
  39:../kernel/tkernel/wait.h **** IMPORT void knl_wait_release_ok( TCB *tcb );
  40:../kernel/tkernel/wait.h **** IMPORT void knl_wait_release_ok_ercd( TCB *tcb, ER ercd );
  41:../kernel/tkernel/wait.h **** IMPORT void knl_wait_release_ng( TCB *tcb, ER ercd );
  42:../kernel/tkernel/wait.h **** IMPORT void knl_wait_release_tmout( TCB *tcb );
  43:../kernel/tkernel/wait.h **** 
  44:../kernel/tkernel/wait.h **** /*
  45:../kernel/tkernel/wait.h ****  * Cancel task wait state.
  46:../kernel/tkernel/wait.h ****  *	Remove the task from the timer queue and the wait queue.
  47:../kernel/tkernel/wait.h ****  *	Do not update the task state.
  48:../kernel/tkernel/wait.h ****  */
  49:../kernel/tkernel/wait.h **** Inline void knl_wait_cancel( TCB *tcb )
  50:../kernel/tkernel/wait.h **** {
  51:../kernel/tkernel/wait.h **** 	knl_timer_delete(&tcb->wtmeb);
  52:../kernel/tkernel/wait.h **** 	QueRemove(&tcb->tskque);
  53:../kernel/tkernel/wait.h **** }
  54:../kernel/tkernel/wait.h **** 
  55:../kernel/tkernel/wait.h **** /*
  56:../kernel/tkernel/wait.h ****  * Change the active task to wait state and connect to the
  57:../kernel/tkernel/wait.h ****  * timer event queue.
  58:../kernel/tkernel/wait.h ****  */
  59:../kernel/tkernel/wait.h **** IMPORT void knl_make_wait( TMO tmout, ATR atr );
  60:../kernel/tkernel/wait.h **** IMPORT void knl_make_wait_reltim( RELTIM tmout, ATR atr );
  61:../kernel/tkernel/wait.h **** 
  62:../kernel/tkernel/wait.h **** /*
  63:../kernel/tkernel/wait.h ****  * Release wait state of all tasks connected to the wait queue,
  64:../kernel/tkernel/wait.h ****  * and set it as E_DLT error.
  65:../kernel/tkernel/wait.h ****  * Use when synchronization between tasks or communication
  66:../kernel/tkernel/wait.h ****  * object is deleted.
  67:../kernel/tkernel/wait.h ****  */
  68:../kernel/tkernel/wait.h **** IMPORT void knl_wait_delete( QUEUE *wait_queue );
  69:../kernel/tkernel/wait.h **** 
  70:../kernel/tkernel/wait.h **** /*
  71:../kernel/tkernel/wait.h ****  * Get ID of the head task in the wait queue.
  72:../kernel/tkernel/wait.h ****  */
  73:../kernel/tkernel/wait.h **** IMPORT ID knl_wait_tskid( QUEUE *wait_queue );
  74:../kernel/tkernel/wait.h **** 
  75:../kernel/tkernel/wait.h **** /*
  76:../kernel/tkernel/wait.h ****  * Connect the task to the prioritized wait queue.
  77:../kernel/tkernel/wait.h ****  */
  78:../kernel/tkernel/wait.h **** Inline void knl_queue_insert_tpri( TCB *tcb, QUEUE *queue )
  79:../kernel/tkernel/wait.h **** {
 127                             		.loc 3 79 1
 128 008a 7E AA                   		push.l	r10
 129                             	.LCFI8:
 130 008c 71 0A E4                		add	#-28, r0, r10
 131                             	.LCFI9:
 132 008f EF A0                   		mov.L	r10, r0
 133 0091 E7 A1 05                		mov.L	r1, 20[r10]
 134 0094 E7 A2 06                		mov.L	r2, 24[r10]
  80:../kernel/tkernel/wait.h **** 	QUEUE *q;
  81:../kernel/tkernel/wait.h **** 	QUEUE *start, *end;
  82:../kernel/tkernel/wait.h **** 	UB val;
  83:../kernel/tkernel/wait.h **** 	W offset;
  84:../kernel/tkernel/wait.h **** 
  85:../kernel/tkernel/wait.h **** 	start = end = queue;
 135                             		.loc 3 85 14
 136 0097 ED A5 06                		mov.L	24[r10], r5
 137 009a E7 A5 01                		mov.L	r5, 4[r10]
 138                             		.loc 3 85 8
 139 009d ED A5 01                		mov.L	4[r10], r5
 140 00a0 E7 A5 02                		mov.L	r5, 8[r10]
  86:../kernel/tkernel/wait.h **** 	val = tcb->priority;
 141                             		.loc 3 86 6
 142 00a3 ED A5 05                		mov.L	20[r10], r5
 143 00a6 CD 55 26                		mov.B	38[r5], r5
 144 00a9 C7 A5 0C                		mov.B	r5, 12[r10]
  87:../kernel/tkernel/wait.h **** 	offset = offsetof(TCB, priority);
 145                             		.loc 3 87 9
 146 00ac F9 A6 04 26             		mov.L	#38, 16[r10]
  88:../kernel/tkernel/wait.h **** 
  89:../kernel/tkernel/wait.h **** 	for ( q = start->next; q != end; q = q->next ) {
 147                             		.loc 3 89 10
 148 00b0 ED A5 02                		mov.L	8[r10], r5
 149 00b3 EC 55                   		mov.L	[r5], r5
 150 00b5 E3 A5                   		mov.L	r5, [r10]
 151                             		.loc 3 89 2
 152 00b7 2E 1A                   		bra	.L9
 153                             	.L12:
  90:../kernel/tkernel/wait.h **** 		if ( *(UB*)((VB*)q + offset) > val ) {
 154                             		.loc 3 90 9
 155 00b9 ED A5 04                		mov.L	16[r10], r5
 156 00bc EC A4                   		mov.L	[r10], r4
 157 00be 4B 45                   		add	r4, r5
 158                             		.loc 3 90 8
 159 00c0 CC 55                   		mov.B	[r5], r5
 160                             		.loc 3 90 6
 161 00c2 59 A4 0C                		movu.B	12[r10], r4
 162 00c5 5B 55                   		movu.B	r5, r5
 163 00c7 47 54                   		cmp	r5, r4
 164 00c9 23 13                   		bltu	.L13
  89:../kernel/tkernel/wait.h **** 		if ( *(UB*)((VB*)q + offset) > val ) {
 165                             		.loc 3 89 37 discriminator 2
 166 00cb EC A5                   		mov.L	[r10], r5
 167 00cd EC 55                   		mov.L	[r5], r5
 168 00cf E3 A5                   		mov.L	r5, [r10]
 169                             	.L9:
  89:../kernel/tkernel/wait.h **** 		if ( *(UB*)((VB*)q + offset) > val ) {
 170                             		.loc 3 89 2 discriminator 1
 171 00d1 EC A4                   		mov.L	[r10], r4
 172 00d3 ED A5 01                		mov.L	4[r10], r5
 173 00d6 47 54                   		cmp	r5, r4
 174 00d8 21 E1                   		bne	.L12
 175 00da 2E 03                   		bra	.L11
 176                             	.L13:
  91:../kernel/tkernel/wait.h **** 			break;
 177                             		.loc 3 91 4
 178 00dc 03                      		nop
 179                             	.L11:
  92:../kernel/tkernel/wait.h **** 		}
  93:../kernel/tkernel/wait.h **** 	}
  94:../kernel/tkernel/wait.h **** 
  95:../kernel/tkernel/wait.h **** 	QueInsert(&tcb->tskque, q);
 180                             		.loc 3 95 2
 181 00dd ED A5 05                		mov.L	20[r10], r5
 182 00e0 EC A2                   		mov.L	[r10], r2
 183 00e2 EF 51                   		mov.L	r5, r1
 184 00e4 39 37 FF                		bsr	_QueInsert
  96:../kernel/tkernel/wait.h **** }
 185                             		.loc 3 96 1
 186 00e7 03                      		nop
 187 00e8 3F AA 08                		rtsd	#32, r10-r10
 188                             	.LFE31:
 191                             	_knl_make_non_wait:
 192                             	.LFB32:
  97:../kernel/tkernel/wait.h **** 
  98:../kernel/tkernel/wait.h **** /*
  99:../kernel/tkernel/wait.h ****  * Common part of control block
 100:../kernel/tkernel/wait.h ****  *	For synchronization between tasks and communication object,
 101:../kernel/tkernel/wait.h ****  *	the head part of control block is common. The followings are
 102:../kernel/tkernel/wait.h ****  *	common routines.
 103:../kernel/tkernel/wait.h ****  *	Define common part as GCB (generic control block) type.
 104:../kernel/tkernel/wait.h ****  *	Cannot use these routines if an object has multiple wait queues
 105:../kernel/tkernel/wait.h ****  *	and when it operates a wait queue after the first one.
 106:../kernel/tkernel/wait.h ****  *	Cannot use these routines if TA_TPRI, TA_NODISWAI object attribute
 107:../kernel/tkernel/wait.h ****  *	bits are used for other purposes since these bits are checked.
 108:../kernel/tkernel/wait.h ****  */
 109:../kernel/tkernel/wait.h **** typedef struct generic_control_block {
 110:../kernel/tkernel/wait.h **** 	QUEUE	wait_queue;	/* Wait queue */
 111:../kernel/tkernel/wait.h **** 	ID	objid;		/* Object ID */
 112:../kernel/tkernel/wait.h **** 	void	*exinf;		/* Extended information */
 113:../kernel/tkernel/wait.h **** 	ATR	objatr;		/* Object attribute */
 114:../kernel/tkernel/wait.h **** 	/* It is OK to have another field after this point, */
 115:../kernel/tkernel/wait.h **** 	/* but it is not used for generic operation routines. */
 116:../kernel/tkernel/wait.h **** } GCB ;
 117:../kernel/tkernel/wait.h **** 
 118:../kernel/tkernel/wait.h **** /*
 119:../kernel/tkernel/wait.h ****  * Change the active task to wait state and connect to the timer event 
 120:../kernel/tkernel/wait.h ****  * queue and the object wait queue. Also, set 'wid' in 'ctxtsk'. 
 121:../kernel/tkernel/wait.h ****  */
 122:../kernel/tkernel/wait.h **** IMPORT void knl_gcb_make_wait( GCB *gcb, TMO tmout );
 123:../kernel/tkernel/wait.h **** 
 124:../kernel/tkernel/wait.h **** /*
 125:../kernel/tkernel/wait.h ****  * When the task priority changes, adjust the task position in the
 126:../kernel/tkernel/wait.h ****  * wait queue.
 127:../kernel/tkernel/wait.h ****  * Do nothing if TA_TPRI is not specified in the object attribute.
 128:../kernel/tkernel/wait.h ****  */
 129:../kernel/tkernel/wait.h **** IMPORT void knl_gcb_change_priority( GCB *gcb, TCB *tcb );
 130:../kernel/tkernel/wait.h **** 
 131:../kernel/tkernel/wait.h **** /*
 132:../kernel/tkernel/wait.h ****  * Search the first task of wait queue include "tcb" with target.
 133:../kernel/tkernel/wait.h ****  * (Not insert "tcb" into wait queue.)
 134:../kernel/tkernel/wait.h ****  *
 135:../kernel/tkernel/wait.h ****  */
 136:../kernel/tkernel/wait.h **** IMPORT TCB* knl_gcb_top_of_wait_queue( GCB *gcb, TCB *tcb );
 137:../kernel/tkernel/wait.h **** 
 138:../kernel/tkernel/wait.h **** /*
 139:../kernel/tkernel/wait.h ****  * Update the task state to release wait. When it becomes ready state,
 140:../kernel/tkernel/wait.h ****  * connect to the ready queue.
 141:../kernel/tkernel/wait.h ****  * Call when the task is in the wait state (including double wait).
 142:../kernel/tkernel/wait.h ****  */
 143:../kernel/tkernel/wait.h **** Inline void knl_make_non_wait( TCB *tcb )
 144:../kernel/tkernel/wait.h **** {
 193                             		.loc 3 144 1
 194 00eb 7E AA                   		push.l	r10
 195                             	.LCFI10:
 196 00ed 71 0A FC                		add	#-4, r0, r10
 197                             	.LCFI11:
 198 00f0 EF A0                   		mov.L	r10, r0
 199 00f2 E3 A1                   		mov.L	r1, [r10]
 145:../kernel/tkernel/wait.h **** 	if ( tcb->state == TS_WAIT ) {
 200                             		.loc 3 145 10
 201 00f4 EC A5                   		mov.L	[r10], r5
 202 00f6 CD 55 27                		mov.B	39[r5], r5
 203                             		.loc 3 145 5
 204 00f9 5B 55                   		movu.B	r5, r5
 205 00fb 61 25                   		cmp	#2, r5
 206 00fd 18                      		bne	.L15
 146:../kernel/tkernel/wait.h **** 		knl_make_ready(tcb);
 207                             		.loc 3 146 3
 208 00fe EC A1                   		mov.L	[r10], r1
 209 0100 05 00 00 00             		bsr	_knl_make_ready
 147:../kernel/tkernel/wait.h **** 	} else {
 148:../kernel/tkernel/wait.h **** 		tcb->state = TS_SUSPEND;
 149:../kernel/tkernel/wait.h **** 	}
 150:../kernel/tkernel/wait.h **** }
 210                             		.loc 3 150 1
 211 0104 0F                      		bra	.L17
 212                             	.L15:
 148:../kernel/tkernel/wait.h **** 	}
 213                             		.loc 3 148 14
 214 0105 EC A5                   		mov.L	[r10], r5
 215 0107 F9 54 27 04             		mov.B	#4, 39[r5]
 216                             	.L17:
 217                             		.loc 3 150 1
 218 010b 03                      		nop
 219 010c 3F AA 02                		rtsd	#8, r10-r10
 220                             	.LFE32:
 223                             	_knl_wait_release:
 224                             	.LFB33:
 151:../kernel/tkernel/wait.h **** 
 152:../kernel/tkernel/wait.h **** /*
 153:../kernel/tkernel/wait.h ****  * Release wait state of the task.
 154:../kernel/tkernel/wait.h ****  */
 155:../kernel/tkernel/wait.h **** Inline void knl_wait_release( TCB *tcb )
 156:../kernel/tkernel/wait.h **** {
 225                             		.loc 3 156 1
 226 010f 7E AA                   		push.l	r10
 227                             	.LCFI12:
 228 0111 71 0A FC                		add	#-4, r0, r10
 229                             	.LCFI13:
 230 0114 EF A0                   		mov.L	r10, r0
 231 0116 E3 A1                   		mov.L	r1, [r10]
 157:../kernel/tkernel/wait.h **** 	knl_timer_delete(&tcb->wtmeb);
 232                             		.loc 3 157 2
 233 0118 EC A5                   		mov.L	[r10], r5
 234 011a 71 55 4C                		add	#0x4c, r5
 235 011d EF 51                   		mov.L	r5, r1
 236 011f 39 57 FF                		bsr	_knl_timer_delete
 158:../kernel/tkernel/wait.h **** 	QueRemove(&tcb->tskque);
 237                             		.loc 3 158 2
 238 0122 EC A5                   		mov.L	[r10], r5
 239 0124 EF 51                   		mov.L	r5, r1
 240 0126 39 25 FF                		bsr	_QueRemove
 159:../kernel/tkernel/wait.h **** 	knl_make_non_wait(tcb);
 241                             		.loc 3 159 2
 242 0129 EC A1                   		mov.L	[r10], r1
 243 012b 39 C0 FF                		bsr	_knl_make_non_wait
 160:../kernel/tkernel/wait.h **** }
 244                             		.loc 3 160 1
 245 012e 03                      		nop
 246 012f 3F AA 02                		rtsd	#8, r10-r10
 247                             	.LFE33:
 249                             		.global	_knl_wait_release_ok
 251                             	_knl_wait_release_ok:
 252                             	.LFB34:
 253                             		.file 4 "../kernel/tkernel/wait.c"
   1:../kernel/tkernel/wait.c **** /*
   2:../kernel/tkernel/wait.c ****  *----------------------------------------------------------------------
   3:../kernel/tkernel/wait.c ****  *    micro T-Kernel 3.00.00
   4:../kernel/tkernel/wait.c ****  *
   5:../kernel/tkernel/wait.c ****  *    Copyright (C) 2006-2019 by Ken Sakamura.
   6:../kernel/tkernel/wait.c ****  *    This software is distributed under the T-License 2.1.
   7:../kernel/tkernel/wait.c ****  *----------------------------------------------------------------------
   8:../kernel/tkernel/wait.c ****  *
   9:../kernel/tkernel/wait.c ****  *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.
  10:../kernel/tkernel/wait.c ****  *
  11:../kernel/tkernel/wait.c ****  *----------------------------------------------------------------------
  12:../kernel/tkernel/wait.c ****  */
  13:../kernel/tkernel/wait.c **** 
  14:../kernel/tkernel/wait.c **** /*
  15:../kernel/tkernel/wait.c ****  *	wait.c
  16:../kernel/tkernel/wait.c ****  *	Common Routine for Synchronization
  17:../kernel/tkernel/wait.c ****  */
  18:../kernel/tkernel/wait.c **** 
  19:../kernel/tkernel/wait.c **** #include "kernel.h"
  20:../kernel/tkernel/wait.c **** #include "wait.h"
  21:../kernel/tkernel/wait.c **** 
  22:../kernel/tkernel/wait.c **** EXPORT void knl_wait_release_ok( TCB *tcb )
  23:../kernel/tkernel/wait.c **** {
 254                             		.loc 4 23 1
 255 0132 7E AA                   		push.l	r10
 256                             	.LCFI14:
 257 0134 71 0A FC                		add	#-4, r0, r10
 258                             	.LCFI15:
 259 0137 EF A0                   		mov.L	r10, r0
 260 0139 E3 A1                   		mov.L	r1, [r10]
  24:../kernel/tkernel/wait.c **** 	knl_wait_release(tcb);
 261                             		.loc 4 24 2
 262 013b EC A1                   		mov.L	[r10], r1
 263 013d 39 D2 FF                		bsr	_knl_wait_release
  25:../kernel/tkernel/wait.c **** 	*tcb->wercd = E_OK;
 264                             		.loc 4 25 6
 265 0140 EC A5                   		mov.L	[r10], r5
 266 0142 AB DD                   		mov.L	60[r5], r5
 267                             		.loc 4 25 14
 268 0144 F8 56 00                		mov.L	#0, [r5]
  26:../kernel/tkernel/wait.c **** }
 269                             		.loc 4 26 1
 270 0147 03                      		nop
 271 0148 3F AA 02                		rtsd	#8, r10-r10
 272                             	.LFE34:
 274                             		.global	_knl_wait_release_ok_ercd
 276                             	_knl_wait_release_ok_ercd:
 277                             	.LFB35:
  27:../kernel/tkernel/wait.c **** 
  28:../kernel/tkernel/wait.c **** EXPORT void knl_wait_release_ok_ercd( TCB *tcb, ER ercd )
  29:../kernel/tkernel/wait.c **** {
 278                             		.loc 4 29 1
 279 014b 7E AA                   		push.l	r10
 280                             	.LCFI16:
 281 014d 71 0A F8                		add	#-8, r0, r10
 282                             	.LCFI17:
 283 0150 EF A0                   		mov.L	r10, r0
 284 0152 E3 A1                   		mov.L	r1, [r10]
 285 0154 E7 A2 01                		mov.L	r2, 4[r10]
  30:../kernel/tkernel/wait.c **** 	knl_wait_release(tcb);
 286                             		.loc 4 30 2
 287 0157 EC A1                   		mov.L	[r10], r1
 288 0159 39 B6 FF                		bsr	_knl_wait_release
  31:../kernel/tkernel/wait.c **** 	*tcb->wercd = ercd;
 289                             		.loc 4 31 6
 290 015c EC A5                   		mov.L	[r10], r5
 291 015e AB DD                   		mov.L	60[r5], r5
 292                             		.loc 4 31 14
 293 0160 ED A4 01                		mov.L	4[r10], r4
 294 0163 E3 54                   		mov.L	r4, [r5]
  32:../kernel/tkernel/wait.c **** }
 295                             		.loc 4 32 1
 296 0165 03                      		nop
 297 0166 3F AA 03                		rtsd	#12, r10-r10
 298                             	.LFE35:
 300                             		.global	_knl_wait_release_ng
 302                             	_knl_wait_release_ng:
 303                             	.LFB36:
  33:../kernel/tkernel/wait.c **** 
  34:../kernel/tkernel/wait.c **** EXPORT void knl_wait_release_ng( TCB *tcb, ER ercd )
  35:../kernel/tkernel/wait.c **** {
 304                             		.loc 4 35 1
 305 0169 7E AA                   		push.l	r10
 306                             	.LCFI18:
 307 016b 71 0A F8                		add	#-8, r0, r10
 308                             	.LCFI19:
 309 016e EF A0                   		mov.L	r10, r0
 310 0170 E3 A1                   		mov.L	r1, [r10]
 311 0172 E7 A2 01                		mov.L	r2, 4[r10]
  36:../kernel/tkernel/wait.c **** 	knl_wait_release(tcb);
 312                             		.loc 4 36 2
 313 0175 EC A1                   		mov.L	[r10], r1
 314 0177 39 98 FF                		bsr	_knl_wait_release
  37:../kernel/tkernel/wait.c **** 	if ( tcb->wspec->rel_wai_hook != NULL ) {
 315                             		.loc 4 37 10
 316 017a EC A5                   		mov.L	[r10], r5
 317 017c AA DD                   		mov.L	44[r5], r5
 318                             		.loc 4 37 17
 319 017e A8 D5                   		mov.L	8[r5], r5
 320                             		.loc 4 37 5
 321 0180 61 05                   		cmp	#0, r5
 322 0182 20 0C                   		beq	.L22
  38:../kernel/tkernel/wait.c **** 		(*tcb->wspec->rel_wai_hook)(tcb);
 323                             		.loc 4 38 8
 324 0184 EC A5                   		mov.L	[r10], r5
 325 0186 AA DD                   		mov.L	44[r5], r5
 326                             		.loc 4 38 4
 327 0188 A8 D5                   		mov.L	8[r5], r5
 328 018a EC A1                   		mov.L	[r10], r1
 329 018c 7F 15                   		jsr	r5
 330                             	.LVL0:
 331                             	.L22:
  39:../kernel/tkernel/wait.c **** 	}
  40:../kernel/tkernel/wait.c **** 	*tcb->wercd = ercd;
 332                             		.loc 4 40 6
 333 018e EC A5                   		mov.L	[r10], r5
 334 0190 AB DD                   		mov.L	60[r5], r5
 335                             		.loc 4 40 14
 336 0192 ED A4 01                		mov.L	4[r10], r4
 337 0195 E3 54                   		mov.L	r4, [r5]
  41:../kernel/tkernel/wait.c **** }
 338                             		.loc 4 41 1
 339 0197 03                      		nop
 340 0198 3F AA 03                		rtsd	#12, r10-r10
 341                             	.LFE36:
 343                             		.global	_knl_wait_release_tmout
 345                             	_knl_wait_release_tmout:
 346                             	.LFB37:
  42:../kernel/tkernel/wait.c **** 
  43:../kernel/tkernel/wait.c **** EXPORT void knl_wait_release_tmout( TCB *tcb )
  44:../kernel/tkernel/wait.c **** {
 347                             		.loc 4 44 1
 348 019b 7E AA                   		push.l	r10
 349                             	.LCFI20:
 350 019d 71 0A FC                		add	#-4, r0, r10
 351                             	.LCFI21:
 352 01a0 EF A0                   		mov.L	r10, r0
 353 01a2 E3 A1                   		mov.L	r1, [r10]
  45:../kernel/tkernel/wait.c **** 	QueRemove(&tcb->tskque);
 354                             		.loc 4 45 2
 355 01a4 EC A5                   		mov.L	[r10], r5
 356 01a6 EF 51                   		mov.L	r5, r1
 357 01a8 39 A3 FE                		bsr	_QueRemove
  46:../kernel/tkernel/wait.c **** 	knl_make_non_wait(tcb);
 358                             		.loc 4 46 2
 359 01ab EC A1                   		mov.L	[r10], r1
 360 01ad 39 3E FF                		bsr	_knl_make_non_wait
  47:../kernel/tkernel/wait.c **** 	if ( tcb->wspec->rel_wai_hook != NULL ) {
 361                             		.loc 4 47 10
 362 01b0 EC A5                   		mov.L	[r10], r5
 363 01b2 AA DD                   		mov.L	44[r5], r5
 364                             		.loc 4 47 17
 365 01b4 A8 D5                   		mov.L	8[r5], r5
 366                             		.loc 4 47 5
 367 01b6 61 05                   		cmp	#0, r5
 368 01b8 20 0C                   		beq	.L25
  48:../kernel/tkernel/wait.c **** 		(*tcb->wspec->rel_wai_hook)(tcb);
 369                             		.loc 4 48 8
 370 01ba EC A5                   		mov.L	[r10], r5
 371 01bc AA DD                   		mov.L	44[r5], r5
 372                             		.loc 4 48 4
 373 01be A8 D5                   		mov.L	8[r5], r5
 374 01c0 EC A1                   		mov.L	[r10], r1
 375 01c2 7F 15                   		jsr	r5
 376                             	.LVL1:
 377                             	.L25:
  49:../kernel/tkernel/wait.c **** 	}
  50:../kernel/tkernel/wait.c **** }
 378                             		.loc 4 50 1
 379 01c4 03                      		nop
 380 01c5 3F AA 02                		rtsd	#8, r10-r10
 381                             	.LFE37:
 383                             		.global	_knl_make_wait
 385                             	_knl_make_wait:
 386                             	.LFB38:
  51:../kernel/tkernel/wait.c **** 
  52:../kernel/tkernel/wait.c **** /*
  53:../kernel/tkernel/wait.c ****  * Change the active task state to wait state and connect to the
  54:../kernel/tkernel/wait.c ****  * timer event queue.
  55:../kernel/tkernel/wait.c ****  *	Normally, 'knl_ctxtsk' is in the RUN state, but when an interrupt
  56:../kernel/tkernel/wait.c ****  *	occurs during executing system call, 'knl_ctxtsk' may become the
  57:../kernel/tkernel/wait.c ****  *	other state by system call called in the interrupt handler.
  58:../kernel/tkernel/wait.c ****  *	However, it does not be in WAIT state.
  59:../kernel/tkernel/wait.c ****  *
  60:../kernel/tkernel/wait.c ****  *	"include/tk/typedef.h"
  61:../kernel/tkernel/wait.c ****  *	typedef	W		TMO;
  62:../kernel/tkernel/wait.c ****  *	typedef UW		RELTIM;
  63:../kernel/tkernel/wait.c ****  *	#define TMO_FEVR	(-1)
  64:../kernel/tkernel/wait.c ****  */
  65:../kernel/tkernel/wait.c **** EXPORT void knl_make_wait( TMO tmout, ATR atr )
  66:../kernel/tkernel/wait.c **** {
 387                             		.loc 4 66 1
 388 01c8 7E AA                   		push.l	r10
 389                             	.LCFI22:
 390 01ca 71 0A F8                		add	#-8, r0, r10
 391                             	.LCFI23:
 392 01cd EF A0                   		mov.L	r10, r0
 393 01cf E3 A1                   		mov.L	r1, [r10]
 394 01d1 E7 A2 01                		mov.L	r2, 4[r10]
  67:../kernel/tkernel/wait.c **** 	switch ( knl_ctxtsk->state ) {
 395                             		.loc 4 67 21
 396 01d4 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 397 01da EC 55                   		mov.L	[r5], r5
 398 01dc CD 55 27                		mov.B	39[r5], r5
 399 01df 5B 55                   		movu.B	r5, r5
 400                             		.loc 4 67 2
 401 01e1 61 15                   		cmp	#1, r5
 402 01e3 17                      		beq	.L27
 403 01e4 61 45                   		cmp	#4, r5
 404 01e6 20 20                   		beq	.L28
 405 01e8 2E 2B                   		bra	.L29
 406                             	.L27:
  68:../kernel/tkernel/wait.c **** 	  case TS_READY:
  69:../kernel/tkernel/wait.c **** 		knl_make_non_ready(knl_ctxtsk);
 407                             		.loc 4 69 3
 408 01ea FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 409 01f0 EC 55                   		mov.L	[r5], r5
 410 01f2 EF 51                   		mov.L	r5, r1
 411 01f4 05 00 00 00             		bsr	_knl_make_non_ready
  70:../kernel/tkernel/wait.c **** 		knl_ctxtsk->state = TS_WAIT;
 412                             		.loc 4 70 13
 413 01f8 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 414 01fe EC 55                   		mov.L	[r5], r5
 415                             		.loc 4 70 21
 416 0200 F9 54 27 02             		mov.B	#2, 39[r5]
  71:../kernel/tkernel/wait.c **** 		break;
 417                             		.loc 4 71 3
 418 0204 2E 0F                   		bra	.L29
 419                             	.L28:
  72:../kernel/tkernel/wait.c **** 	  case TS_SUSPEND:
  73:../kernel/tkernel/wait.c **** 		knl_ctxtsk->state = TS_WAITSUS;
 420                             		.loc 4 73 13
 421 0206 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 422 020c EC 55                   		mov.L	[r5], r5
 423                             		.loc 4 73 21
 424 020e F9 54 27 06             		mov.B	#6, 39[r5]
  74:../kernel/tkernel/wait.c **** 		break;
 425                             		.loc 4 74 3
 426 0212 03                      		nop
 427                             	.L29:
  75:../kernel/tkernel/wait.c **** 	}
  76:../kernel/tkernel/wait.c **** 	knl_timer_insert(&knl_ctxtsk->wtmeb, tmout, (CBACK)knl_wait_release_tmout, knl_ctxtsk);
 428                             		.loc 4 76 30
 429 0213 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 430 0219 EC 55                   		mov.L	[r5], r5
 431                             		.loc 4 76 2
 432 021b 71 51 4C                		add	#0x4c, r5, r1
 433 021e FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 434 0224 EC 55                   		mov.L	[r5], r5
 435 0226 EF 54                   		mov.L	r5, r4
 436 0228 FB 32 00 00 00 00       		mov.L	#_knl_wait_release_tmout, r3
 437 022e EC A2                   		mov.L	[r10], r2
 438 0230 05 00 00 00             		bsr	_knl_timer_insert
  77:../kernel/tkernel/wait.c **** }
 439                             		.loc 4 77 1
 440 0234 03                      		nop
 441 0235 3F AA 03                		rtsd	#12, r10-r10
 442                             	.LFE38:
 444                             		.global	_knl_make_wait_reltim
 446                             	_knl_make_wait_reltim:
 447                             	.LFB39:
  78:../kernel/tkernel/wait.c **** 
  79:../kernel/tkernel/wait.c **** EXPORT void knl_make_wait_reltim( RELTIM tmout, ATR atr )
  80:../kernel/tkernel/wait.c **** {
 448                             		.loc 4 80 1
 449 0238 7E AA                   		push.l	r10
 450                             	.LCFI24:
 451 023a 71 0A F8                		add	#-8, r0, r10
 452                             	.LCFI25:
 453 023d EF A0                   		mov.L	r10, r0
 454 023f E3 A1                   		mov.L	r1, [r10]
 455 0241 E7 A2 01                		mov.L	r2, 4[r10]
  81:../kernel/tkernel/wait.c **** 	switch ( knl_ctxtsk->state ) {
 456                             		.loc 4 81 21
 457 0244 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 458 024a EC 55                   		mov.L	[r5], r5
 459 024c CD 55 27                		mov.B	39[r5], r5
 460 024f 5B 55                   		movu.B	r5, r5
 461                             		.loc 4 81 2
 462 0251 61 15                   		cmp	#1, r5
 463 0253 17                      		beq	.L31
 464 0254 61 45                   		cmp	#4, r5
 465 0256 20 20                   		beq	.L32
 466 0258 2E 2B                   		bra	.L33
 467                             	.L31:
  82:../kernel/tkernel/wait.c **** 	  case TS_READY:
  83:../kernel/tkernel/wait.c **** 		knl_make_non_ready(knl_ctxtsk);
 468                             		.loc 4 83 3
 469 025a FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 470 0260 EC 55                   		mov.L	[r5], r5
 471 0262 EF 51                   		mov.L	r5, r1
 472 0264 05 00 00 00             		bsr	_knl_make_non_ready
  84:../kernel/tkernel/wait.c **** 		knl_ctxtsk->state = TS_WAIT;
 473                             		.loc 4 84 13
 474 0268 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 475 026e EC 55                   		mov.L	[r5], r5
 476                             		.loc 4 84 21
 477 0270 F9 54 27 02             		mov.B	#2, 39[r5]
  85:../kernel/tkernel/wait.c **** 		break;
 478                             		.loc 4 85 3
 479 0274 2E 0F                   		bra	.L33
 480                             	.L32:
  86:../kernel/tkernel/wait.c **** 	  case TS_SUSPEND:
  87:../kernel/tkernel/wait.c **** 		knl_ctxtsk->state = TS_WAITSUS;
 481                             		.loc 4 87 13
 482 0276 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 483 027c EC 55                   		mov.L	[r5], r5
 484                             		.loc 4 87 21
 485 027e F9 54 27 06             		mov.B	#6, 39[r5]
  88:../kernel/tkernel/wait.c **** 		break;
 486                             		.loc 4 88 3
 487 0282 03                      		nop
 488                             	.L33:
  89:../kernel/tkernel/wait.c **** 	}
  90:../kernel/tkernel/wait.c **** 	knl_timer_insert_reltim(&knl_ctxtsk->wtmeb, tmout, (CBACK)knl_wait_release_tmout, knl_ctxtsk);
 489                             		.loc 4 90 37
 490 0283 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 491 0289 EC 55                   		mov.L	[r5], r5
 492                             		.loc 4 90 2
 493 028b 71 51 4C                		add	#0x4c, r5, r1
 494 028e FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 495 0294 EC 55                   		mov.L	[r5], r5
 496 0296 EF 54                   		mov.L	r5, r4
 497 0298 FB 32 00 00 00 00       		mov.L	#_knl_wait_release_tmout, r3
 498 029e EC A2                   		mov.L	[r10], r2
 499 02a0 05 00 00 00             		bsr	_knl_timer_insert_reltim
  91:../kernel/tkernel/wait.c **** }
 500                             		.loc 4 91 1
 501 02a4 03                      		nop
 502 02a5 3F AA 03                		rtsd	#12, r10-r10
 503                             	.LFE39:
 505                             		.global	_knl_wait_delete
 507                             	_knl_wait_delete:
 508                             	.LFB40:
  92:../kernel/tkernel/wait.c **** 
  93:../kernel/tkernel/wait.c **** /*
  94:../kernel/tkernel/wait.c ****  * Release all tasks connected to the wait queue, and define it
  95:../kernel/tkernel/wait.c ****  * as E_DLT error.
  96:../kernel/tkernel/wait.c ****  */
  97:../kernel/tkernel/wait.c **** EXPORT void knl_wait_delete( QUEUE *wait_queue )
  98:../kernel/tkernel/wait.c **** {
 509                             		.loc 4 98 1
 510 02a8 7E AA                   		push.l	r10
 511                             	.LCFI26:
 512 02aa 71 0A F8                		add	#-8, r0, r10
 513                             	.LCFI27:
 514 02ad EF A0                   		mov.L	r10, r0
 515 02af E7 A1 01                		mov.L	r1, 4[r10]
  99:../kernel/tkernel/wait.c **** 	TCB	*tcb;
 100:../kernel/tkernel/wait.c **** 
 101:../kernel/tkernel/wait.c **** 	while ( !isQueEmpty(wait_queue) ) {
 516                             		.loc 4 101 8
 517 02b2 2E 15                   		bra	.L35
 518                             	.L36:
 102:../kernel/tkernel/wait.c **** 		tcb = (TCB*)wait_queue->next;
 519                             		.loc 4 102 7
 520 02b4 ED A5 01                		mov.L	4[r10], r5
 521 02b7 EC 55                   		mov.L	[r5], r5
 522 02b9 E3 A5                   		mov.L	r5, [r10]
 103:../kernel/tkernel/wait.c **** 		knl_wait_release(tcb);
 523                             		.loc 4 103 3
 524 02bb EC A1                   		mov.L	[r10], r1
 525 02bd 39 52 FE                		bsr	_knl_wait_release
 104:../kernel/tkernel/wait.c **** 		*tcb->wercd = E_DLT;
 526                             		.loc 4 104 7
 527 02c0 EC A5                   		mov.L	[r10], r5
 528 02c2 AB DD                   		mov.L	60[r5], r5
 529                             		.loc 4 104 15
 530 02c4 F8 56 CD                		mov.L	#-51, [r5]
 531                             	.L35:
 101:../kernel/tkernel/wait.c **** 		tcb = (TCB*)wait_queue->next;
 532                             		.loc 4 101 11
 533 02c7 ED A1 01                		mov.L	4[r10], r1
 534 02ca 39 36 FD                		bsr	_isQueEmpty
 535 02cd EF 15                   		mov.L	r1, r5
 101:../kernel/tkernel/wait.c **** 		tcb = (TCB*)wait_queue->next;
 536                             		.loc 4 101 8
 537 02cf 61 05                   		cmp	#0, r5
 538 02d1 20 E3                   		beq	.L36
 105:../kernel/tkernel/wait.c **** 	}
 106:../kernel/tkernel/wait.c **** }
 539                             		.loc 4 106 1
 540 02d3 03                      		nop
 541 02d4 3F AA 03                		rtsd	#12, r10-r10
 542                             	.LFE40:
 544                             		.global	_knl_wait_tskid
 546                             	_knl_wait_tskid:
 547                             	.LFB41:
 107:../kernel/tkernel/wait.c **** 
 108:../kernel/tkernel/wait.c **** /*
 109:../kernel/tkernel/wait.c ****  * Get ID of the head task in the wait queue.
 110:../kernel/tkernel/wait.c ****  */
 111:../kernel/tkernel/wait.c **** EXPORT ID knl_wait_tskid( QUEUE *wait_queue )
 112:../kernel/tkernel/wait.c **** {
 548                             		.loc 4 112 1
 549 02d7 7E AA                   		push.l	r10
 550                             	.LCFI28:
 551 02d9 71 0A FC                		add	#-4, r0, r10
 552                             	.LCFI29:
 553 02dc EF A0                   		mov.L	r10, r0
 554 02de E3 A1                   		mov.L	r1, [r10]
 113:../kernel/tkernel/wait.c **** 	if ( isQueEmpty(wait_queue) ) {
 555                             		.loc 4 113 7
 556 02e0 EC A1                   		mov.L	[r10], r1
 557 02e2 39 1E FD                		bsr	_isQueEmpty
 558 02e5 EF 15                   		mov.L	r1, r5
 559                             		.loc 4 113 5
 560 02e7 61 05                   		cmp	#0, r5
 561 02e9 14                      		beq	.L38
 114:../kernel/tkernel/wait.c **** 		return 0;
 562                             		.loc 4 114 10
 563 02ea 66 05                   		mov.L	#0, r5
 564 02ec 0F                      		bra	.L39
 565                             	.L38:
 115:../kernel/tkernel/wait.c **** 	}
 116:../kernel/tkernel/wait.c **** 
 117:../kernel/tkernel/wait.c **** 	return ((TCB*)wait_queue->next)->tskid;
 566                             		.loc 4 117 26
 567 02ed EC A5                   		mov.L	[r10], r5
 568 02ef EC 55                   		mov.L	[r5], r5
 569                             		.loc 4 117 33
 570 02f1 A8 D5                   		mov.L	8[r5], r5
 571                             	.L39:
 118:../kernel/tkernel/wait.c **** }
 572                             		.loc 4 118 1
 573 02f3 EF 51                   		mov.L	r5, r1
 574 02f5 3F AA 02                		rtsd	#8, r10-r10
 575                             	.LFE41:
 577                             		.global	_knl_gcb_make_wait
 579                             	_knl_gcb_make_wait:
 580                             	.LFB42:
 119:../kernel/tkernel/wait.c **** 
 120:../kernel/tkernel/wait.c **** /*
 121:../kernel/tkernel/wait.c ****  * Change the active task state to wait state and connect to the timer wait 
 122:../kernel/tkernel/wait.c ****  * queue and the object wait queue. Also set 'wid' in 'knl_ctxtsk'.
 123:../kernel/tkernel/wait.c ****  */
 124:../kernel/tkernel/wait.c **** EXPORT void knl_gcb_make_wait( GCB *gcb, TMO tmout )
 125:../kernel/tkernel/wait.c **** {
 581                             		.loc 4 125 1
 582 02f8 7E AA                   		push.l	r10
 583                             	.LCFI30:
 584 02fa 71 0A F8                		add	#-8, r0, r10
 585                             	.LCFI31:
 586 02fd EF A0                   		mov.L	r10, r0
 587 02ff E3 A1                   		mov.L	r1, [r10]
 588 0301 E7 A2 01                		mov.L	r2, 4[r10]
 126:../kernel/tkernel/wait.c **** 	*knl_ctxtsk->wercd = E_TMOUT;
 589                             		.loc 4 126 13
 590 0304 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 591 030a EC 55                   		mov.L	[r5], r5
 592 030c AB DD                   		mov.L	60[r5], r5
 593                             		.loc 4 126 21
 594 030e F8 56 CE                		mov.L	#-50, [r5]
 127:../kernel/tkernel/wait.c **** 	if ( tmout != TMO_POL ) {
 595                             		.loc 4 127 5
 596 0311 ED A5 01                		mov.L	4[r10], r5
 597 0314 61 05                   		cmp	#0, r5
 598 0316 20 4B                   		beq	.L43
 128:../kernel/tkernel/wait.c **** 		knl_ctxtsk->wid = gcb->objid;
 599                             		.loc 4 128 13
 600 0318 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 601 031e EC 55                   		mov.L	[r5], r5
 602                             		.loc 4 128 24
 603 0320 EC A4                   		mov.L	[r10], r4
 604 0322 A8 C4                   		mov.L	8[r4], r4
 605                             		.loc 4 128 19
 606 0324 A3 54                   		mov.L	r4, 48[r5]
 129:../kernel/tkernel/wait.c **** 		knl_make_wait(tmout, gcb->objatr);
 607                             		.loc 4 129 3
 608 0326 EC A5                   		mov.L	[r10], r5
 609 0328 A9 55                   		mov.L	16[r5], r5
 610 032a EF 52                   		mov.L	r5, r2
 611 032c ED A1 01                		mov.L	4[r10], r1
 612 032f 05 00 00 00             		bsr	_knl_make_wait
 130:../kernel/tkernel/wait.c **** 		if ( (gcb->objatr & TA_TPRI) != 0 ) {
 613                             		.loc 4 130 12
 614 0333 EC A5                   		mov.L	[r10], r5
 615 0335 A9 55                   		mov.L	16[r5], r5
 616                             		.loc 4 130 21
 617 0337 64 15                   		and	#1, r5
 618                             		.loc 4 130 6
 619 0339 61 05                   		cmp	#0, r5
 620 033b 20 15                   		beq	.L42
 131:../kernel/tkernel/wait.c **** 			knl_queue_insert_tpri(knl_ctxtsk, &gcb->wait_queue);
 621                             		.loc 4 131 4
 622 033d FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 623 0343 EC 55                   		mov.L	[r5], r5
 624 0345 EC A4                   		mov.L	[r10], r4
 625 0347 EF 42                   		mov.L	r4, r2
 626 0349 EF 51                   		mov.L	r5, r1
 627 034b 39 3F FD                		bsr	_knl_queue_insert_tpri
 132:../kernel/tkernel/wait.c **** 		} else {
 133:../kernel/tkernel/wait.c **** 			QueInsert(&knl_ctxtsk->tskque, &gcb->wait_queue);
 134:../kernel/tkernel/wait.c **** 		}
 135:../kernel/tkernel/wait.c **** 	}
 136:../kernel/tkernel/wait.c **** }
 628                             		.loc 4 136 1
 629 034e 2E 13                   		bra	.L43
 630                             	.L42:
 133:../kernel/tkernel/wait.c **** 		}
 631                             		.loc 4 133 25
 632 0350 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 633 0356 EC 55                   		mov.L	[r5], r5
 133:../kernel/tkernel/wait.c **** 		}
 634                             		.loc 4 133 4
 635 0358 EC A4                   		mov.L	[r10], r4
 636 035a EF 42                   		mov.L	r4, r2
 637 035c EF 51                   		mov.L	r5, r1
 638 035e 39 BD FC                		bsr	_QueInsert
 639                             	.L43:
 640                             		.loc 4 136 1
 641 0361 03                      		nop
 642 0362 3F AA 03                		rtsd	#12, r10-r10
 643                             	.LFE42:
 645                             		.global	_knl_gcb_change_priority
 647                             	_knl_gcb_change_priority:
 648                             	.LFB43:
 137:../kernel/tkernel/wait.c **** 
 138:../kernel/tkernel/wait.c **** /*
 139:../kernel/tkernel/wait.c ****  * When the task priority changes, adjust the task position at the wait queue.
 140:../kernel/tkernel/wait.c ****  * It is called only if the object attribute TA_TPRI is specified.
 141:../kernel/tkernel/wait.c ****  *
 142:../kernel/tkernel/wait.c ****  */
 143:../kernel/tkernel/wait.c **** EXPORT void knl_gcb_change_priority( GCB *gcb, TCB *tcb )
 144:../kernel/tkernel/wait.c **** {
 649                             		.loc 4 144 1
 650 0365 7E AA                   		push.l	r10
 651                             	.LCFI32:
 652 0367 71 0A F8                		add	#-8, r0, r10
 653                             	.LCFI33:
 654 036a EF A0                   		mov.L	r10, r0
 655 036c E3 A1                   		mov.L	r1, [r10]
 656 036e E7 A2 01                		mov.L	r2, 4[r10]
 145:../kernel/tkernel/wait.c **** 	QueRemove(&tcb->tskque);
 657                             		.loc 4 145 2
 658 0371 ED A5 01                		mov.L	4[r10], r5
 659 0374 EF 51                   		mov.L	r5, r1
 660 0376 39 D5 FC                		bsr	_QueRemove
 146:../kernel/tkernel/wait.c **** 	knl_queue_insert_tpri(tcb, &gcb->wait_queue);
 661                             		.loc 4 146 2
 662 0379 EC A5                   		mov.L	[r10], r5
 663 037b EF 52                   		mov.L	r5, r2
 664 037d ED A1 01                		mov.L	4[r10], r1
 665 0380 39 0A FD                		bsr	_knl_queue_insert_tpri
 147:../kernel/tkernel/wait.c **** }
 666                             		.loc 4 147 1
 667 0383 03                      		nop
 668 0384 3F AA 03                		rtsd	#12, r10-r10
 669                             	.LFE43:
 671                             		.global	_knl_gcb_top_of_wait_queue
 673                             	_knl_gcb_top_of_wait_queue:
 674                             	.LFB44:
 148:../kernel/tkernel/wait.c **** 
 149:../kernel/tkernel/wait.c **** /*
 150:../kernel/tkernel/wait.c ****  * Search the first task of wait queue include "tcb" with target.
 151:../kernel/tkernel/wait.c ****  * (Not insert "tcb" into wait queue.)
 152:../kernel/tkernel/wait.c ****  *
 153:../kernel/tkernel/wait.c ****  */
 154:../kernel/tkernel/wait.c **** EXPORT TCB* knl_gcb_top_of_wait_queue( GCB *gcb, TCB *tcb )
 155:../kernel/tkernel/wait.c **** {
 675                             		.loc 4 155 1
 676 0387 7E AA                   		push.l	r10
 677                             	.LCFI34:
 678 0389 71 0A F4                		add	#-12, r0, r10
 679                             	.LCFI35:
 680 038c EF A0                   		mov.L	r10, r0
 681 038e E7 A1 01                		mov.L	r1, 4[r10]
 682 0391 E7 A2 02                		mov.L	r2, 8[r10]
 156:../kernel/tkernel/wait.c **** 	TCB	*q;
 157:../kernel/tkernel/wait.c **** 
 158:../kernel/tkernel/wait.c **** 	if ( isQueEmpty(&gcb->wait_queue) ) {
 683                             		.loc 4 158 7
 684 0394 ED A5 01                		mov.L	4[r10], r5
 685 0397 EF 51                   		mov.L	r5, r1
 686 0399 39 67 FC                		bsr	_isQueEmpty
 687 039c EF 15                   		mov.L	r1, r5
 688                             		.loc 4 158 5
 689 039e 61 05                   		cmp	#0, r5
 690 03a0 16                      		beq	.L46
 159:../kernel/tkernel/wait.c **** 		return tcb;
 691                             		.loc 4 159 10
 692 03a1 ED A5 02                		mov.L	8[r10], r5
 693 03a4 2E 30                   		bra	.L47
 694                             	.L46:
 160:../kernel/tkernel/wait.c **** 	}
 161:../kernel/tkernel/wait.c **** 
 162:../kernel/tkernel/wait.c **** 	q = (TCB*)gcb->wait_queue.next;
 695                             		.loc 4 162 4
 696 03a6 ED A5 01                		mov.L	4[r10], r5
 697 03a9 EC 55                   		mov.L	[r5], r5
 698 03ab E3 A5                   		mov.L	r5, [r10]
 163:../kernel/tkernel/wait.c **** 	if ( (gcb->objatr & TA_TPRI) == 0 ) {
 699                             		.loc 4 163 11
 700 03ad ED A5 01                		mov.L	4[r10], r5
 701 03b0 A9 55                   		mov.L	16[r5], r5
 702                             		.loc 4 163 20
 703 03b2 64 15                   		and	#1, r5
 704                             		.loc 4 163 5
 705 03b4 61 05                   		cmp	#0, r5
 706 03b6 1D                      		bne	.L48
 164:../kernel/tkernel/wait.c **** 		return q;
 707                             		.loc 4 164 10
 708 03b7 EC A5                   		mov.L	[r10], r5
 709 03b9 2E 1B                   		bra	.L47
 710                             	.L48:
 165:../kernel/tkernel/wait.c **** 	}
 166:../kernel/tkernel/wait.c **** 
 167:../kernel/tkernel/wait.c **** 	return ( tcb->priority < q->priority )? tcb: q;
 711                             		.loc 4 167 14
 712 03bb ED A5 02                		mov.L	8[r10], r5
 713 03be CD 54 26                		mov.B	38[r5], r4
 714                             		.loc 4 167 28
 715 03c1 EC A5                   		mov.L	[r10], r5
 716 03c3 CD 55 26                		mov.B	38[r5], r5
 717                             		.loc 4 167 45
 718 03c6 5B 44                   		movu.B	r4, r4
 719 03c8 5B 55                   		movu.B	r5, r5
 720 03ca 47 54                   		cmp	r5, r4
 721 03cc 22 06                   		bgeu	.L49
 722                             		.loc 4 167 45 is_stmt 0 discriminator 1
 723 03ce ED A5 02                		mov.L	8[r10], r5
 724 03d1 0B                      		bra	.L47
 725                             	.L49:
 726                             		.loc 4 167 45 discriminator 2
 727 03d2 EC A5                   		mov.L	[r10], r5
 728                             		.balign 8,3,1
 729                             	.L47:
 168:../kernel/tkernel/wait.c **** }
 730                             		.loc 4 168 1 is_stmt 1
 731 03d4 EF 51                   		mov.L	r5, r1
 732 03d6 3F AA 04                		rtsd	#16, r10-r10
 733                             	.LFE44:
 1095                             	.Letext0:
 1096                             		.file 5 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\include/tk/typedef.h"
 1097                             		.file 6 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\include/tk/syscall.h"
 1098                             		.file 7 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\kernel\\knlinc/kernel.h"
 1099                             		.file 8 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\kernel\\tkernel\\winfo.h"
 1100                             		.file 9 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\kernel\\tkernel\\mutex.h"
 1101                             		.file 10 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\kernel\\sysdepend\\cpu\\core\\rxv2\\sysd
 1102                             		.file 11 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\kernel\\sysdepend\\cpu\\core\\rxv2\\cpu_
 1103                             		.file 12 "../kernel/tkernel/task.h"
 1104                             		.file 13 "../kernel/tkernel/ready_queue.h"
