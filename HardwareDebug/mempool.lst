   1                             		.file	"mempool.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   5                             	_QueInit:
   6                             	.LFB6:
   7                             		.file 1 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_tbrx65n\\include/sys/queue.h"
   1:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** /*
   2:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *----------------------------------------------------------------------
   3:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *    micro T-Kernel 3.00.00
   4:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *
   5:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *    Copyright (C) 2006-2019 by Ken Sakamura.
   6:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *    This software is distributed under the T-License 2.1.
   7:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *----------------------------------------------------------------------
   8:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *
   9:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.
  10:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *
  11:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *----------------------------------------------------------------------
  12:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  */
  13:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 
  14:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** /*
  15:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *	queue.h
  16:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *
  17:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *	Queuing operation
  18:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  */
  19:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 
  20:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** #ifndef	__SYS_QUEUE_H__
  21:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** #define __SYS_QUEUE_H__
  22:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 
  23:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** #include <tk/tkernel.h>
  24:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 
  25:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** #ifdef __cplusplus
  26:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** extern "C" {
  27:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** #endif
  28:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 
  29:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** /*
  30:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  * Double-link queue (ring)
  31:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  */
  32:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** typedef struct queue {
  33:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	struct queue	*next;
  34:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	struct queue	*prev;
  35:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** } QUEUE;
  36:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 
  37:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** /*
  38:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  * Queue initialization 
  39:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  */
  40:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** Inline void QueInit( QUEUE *que )
  41:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** {
   8                             		.loc 1 41 1
   9 0000 7E AA                   		push.l	r10
  10                             	.LCFI0:
  11 0002 71 0A FC                		add	#-4, r0, r10
  12                             	.LCFI1:
  13 0005 EF A0                   		mov.L	r10, r0
  14 0007 E3 A1                   		mov.L	r1, [r10]
  42:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	que->next = (struct queue *)que;
  15                             		.loc 1 42 12
  16 0009 EC A5                   		mov.L	[r10], r5
  17 000b EC A4                   		mov.L	[r10], r4
  18 000d E3 54                   		mov.L	r4, [r5]
  43:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	que->prev = (struct queue *)que;
  19                             		.loc 1 43 12
  20 000f EC A5                   		mov.L	[r10], r5
  21 0011 EC A4                   		mov.L	[r10], r4
  22 0013 A0 5C                   		mov.L	r4, 4[r5]
  44:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** }
  23                             		.loc 1 44 1
  24 0015 03                      		nop
  25 0016 3F AA 02                		rtsd	#8, r10-r10
  26                             	.LFE6:
  29                             	_isQueEmpty:
  30                             	.LFB7:
  45:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 
  46:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** /*
  47:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  * TRUE if the queue is empty 
  48:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  */
  49:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** Inline BOOL isQueEmpty( QUEUE *que )
  50:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** {
  31                             		.loc 1 50 1
  32 0019 7E AA                   		push.l	r10
  33                             	.LCFI2:
  34 001b 71 0A FC                		add	#-4, r0, r10
  35                             	.LCFI3:
  36 001e EF A0                   		mov.L	r10, r0
  37 0020 E3 A1                   		mov.L	r1, [r10]
  51:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	return ( que->next == que )? TRUE: FALSE;
  38                             		.loc 1 51 14
  39 0022 EC A5                   		mov.L	[r10], r5
  40 0024 EC 55                   		mov.L	[r5], r5
  41                             		.loc 1 51 35
  42 0026 EC A4                   		mov.L	[r10], r4
  43 0028 47 54                   		cmp	r5, r4
  44 002a FC DB 50                		sceq.L	r5
  45 002d 5B 55                   		movu.B	r5, r5
  52:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** }
  46                             		.loc 1 52 1
  47 002f EF 51                   		mov.L	r5, r1
  48 0031 3F AA 02                		rtsd	#8, r10-r10
  49                             	.LFE7:
  52                             	_QueInsert:
  53                             	.LFB8:
  53:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 
  54:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** /*
  55:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  * Insert in queue 
  56:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *	Inserts entry directly prior to que 
  57:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  */
  58:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** Inline void QueInsert( QUEUE *entry, QUEUE *que )
  59:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** {
  54                             		.loc 1 59 1
  55 0034 7E AA                   		push.l	r10
  56                             	.LCFI4:
  57 0036 71 0A F8                		add	#-8, r0, r10
  58                             	.LCFI5:
  59 0039 EF A0                   		mov.L	r10, r0
  60 003b E3 A1                   		mov.L	r1, [r10]
  61 003d E7 A2 01                		mov.L	r2, 4[r10]
  60:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	entry->prev = (struct queue*) que->prev;
  62                             		.loc 1 60 16
  63 0040 ED A5 01                		mov.L	4[r10], r5
  64 0043 A8 5C                   		mov.L	4[r5], r4
  65                             		.loc 1 60 14
  66 0045 EC A5                   		mov.L	[r10], r5
  67 0047 A0 5C                   		mov.L	r4, 4[r5]
  61:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	entry->next = que;
  68                             		.loc 1 61 14
  69 0049 EC A5                   		mov.L	[r10], r5
  70 004b ED A4 01                		mov.L	4[r10], r4
  71 004e E3 54                   		mov.L	r4, [r5]
  62:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	que->prev->next = entry;
  72                             		.loc 1 62 5
  73 0050 ED A5 01                		mov.L	4[r10], r5
  74 0053 A8 5D                   		mov.L	4[r5], r5
  75                             		.loc 1 62 18
  76 0055 EC A4                   		mov.L	[r10], r4
  77 0057 E3 54                   		mov.L	r4, [r5]
  63:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	que->prev = entry;
  78                             		.loc 1 63 12
  79 0059 ED A5 01                		mov.L	4[r10], r5
  80 005c EC A4                   		mov.L	[r10], r4
  81 005e A0 5C                   		mov.L	r4, 4[r5]
  64:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** }
  82                             		.loc 1 64 1
  83 0060 03                      		nop
  84 0061 3F AA 03                		rtsd	#12, r10-r10
  85                             	.LFE8:
  88                             	_QueRemoveNext:
  89                             	.LFB10:
  65:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 
  66:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** /*
  67:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  * Delete from queue 
  68:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *	Deletes entry from queue 
  69:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *	No action is performed if entry is empty. 
  70:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  */
  71:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** Inline void QueRemove( QUEUE *entry )
  72:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** {
  73:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	if ( entry->next != entry ) {
  74:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 		entry->prev->next = (struct queue*) entry->next;
  75:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 		entry->next->prev = (struct queue*) entry->prev;
  76:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	}
  77:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** }
  78:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 
  79:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** /*
  80:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  * Remove top entry 
  81:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *	Deletes the entry directly after que from the queue,
  82:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *	and returns the deleted entry.
  83:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *	Returns NULL if que is empty.
  84:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  */
  85:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** Inline QUEUE* QueRemoveNext( QUEUE *que )
  86:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** {
  90                             		.loc 1 86 1
  91 0064 7E AA                   		push.l	r10
  92                             	.LCFI6:
  93 0066 71 0A F8                		add	#-8, r0, r10
  94                             	.LCFI7:
  95 0069 EF A0                   		mov.L	r10, r0
  96 006b E7 A1 01                		mov.L	r1, 4[r10]
  87:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	QUEUE	*entry;
  88:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 
  89:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	if ( que->next == que ) {
  97                             		.loc 1 89 10
  98 006e ED A5 01                		mov.L	4[r10], r5
  99 0071 EC 55                   		mov.L	[r5], r5
 100                             		.loc 1 89 5
 101 0073 ED A4 01                		mov.L	4[r10], r4
 102 0076 47 54                   		cmp	r5, r4
 103 0078 1D                      		bne	.L6
  90:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 		return NULL;
 104                             		.loc 1 90 10
 105 0079 66 05                   		mov.L	#0, r5
 106 007b 2E 1D                   		bra	.L7
 107                             	.L6:
  91:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	}
  92:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 
  93:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	entry = que->next;
 108                             		.loc 1 93 8
 109 007d ED A5 01                		mov.L	4[r10], r5
 110 0080 EC 55                   		mov.L	[r5], r5
 111 0082 E3 A5                   		mov.L	r5, [r10]
  94:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	que->next = (struct queue*)entry->next;
 112                             		.loc 1 94 14
 113 0084 EC A5                   		mov.L	[r10], r5
 114 0086 EC 54                   		mov.L	[r5], r4
 115                             		.loc 1 94 12
 116 0088 ED A5 01                		mov.L	4[r10], r5
 117 008b E3 54                   		mov.L	r4, [r5]
  95:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	entry->next->prev = que;
 118                             		.loc 1 95 7
 119 008d EC A5                   		mov.L	[r10], r5
 120 008f EC 55                   		mov.L	[r5], r5
 121                             		.loc 1 95 20
 122 0091 ED A4 01                		mov.L	4[r10], r4
 123 0094 A0 5C                   		mov.L	r4, 4[r5]
  96:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 
  97:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	return entry;
 124                             		.loc 1 97 9
 125 0096 EC A5                   		mov.L	[r10], r5
 126                             	.L7:
  98:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** }
 127                             		.loc 1 98 1
 128 0098 EF 51                   		mov.L	r5, r1
 129 009a 3F AA 03                		rtsd	#12, r10-r10
 130                             	.LFE10:
 133                             	_knl_isTaskIndependent:
 134                             	.LFB16:
 135                             		.file 2 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_tbrx65n\\kernel\\sysdepend\\cpu\\core\\rxv2\\cpu_st
   1:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
   2:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *----------------------------------------------------------------------
   3:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *    micro T-Kernel 3.00.03
   4:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *
   5:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *    Copyright (C) 2006-2021 by Ken Sakamura.
   6:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *    This software is distributed under the T-License 2.2.
   7:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *----------------------------------------------------------------------
   8:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *
   9:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.
  10:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *
  11:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *----------------------------------------------------------------------
  12:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  13:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  14:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  15:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *	cpu_status.h (RXv2)
  16:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *	CPU-Dependent Status Definition
  17:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  18:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  19:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #ifndef _SYSDEPEND_CPU_CORE_STATUS_
  20:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define _SYSDEPEND_CPU_CORE_STATUS_
  21:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  22:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #include <tk/syslib.h>
  23:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #include <sys/sysdef.h>
  24:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  25:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #include "sysdepend.h"
  26:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  27:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  * Start/End critical section
  28:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  29:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define BEGIN_CRITICAL_SECTION	{ UINT _sr_ = disint();
  30:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define END_CRITICAL_SECTION	if ( !isDI(_sr_)			\
  31:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 				  && knl_ctxtsk != knl_schedtsk		\
  32:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 				  && !knl_isTaskIndependent()		\
  33:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 				  && !knl_dispatch_disabled ) {		\
  34:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 					knl_dispatch();			\
  35:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 				}					\
  36:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 				setint(_sr_); }
  37:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  38:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  * Start/End interrupt disable section
  39:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  40:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define BEGIN_DISABLE_INTERRUPT	{ UINT _sr_ = disint();
  41:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define END_DISABLE_INTERRUPT	setint(_sr_); }
  42:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  43:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  44:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  * Interrupt enable/disable
  45:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  46:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define ENABLE_INTERRUPT	{ setint(0); }
  47:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define DISABLE_INTERRUPT	{ disint(); }
  48:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  49:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  50:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  * Enable interrupt nesting
  51:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *	Enable the interrupt that has a higher priority than 'level.'
  52:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  53:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define ENABLE_INTERRUPT_UPTO(level)	{ setint(level); }
  54:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  55:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  56:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *  Task-independent control
  57:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  58:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** IMPORT	W	knl_taskindp;		/* Task independent status */
  59:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  60:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  61:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  * If it is the task-independent part, TRUE
  62:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  63:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** Inline BOOL knl_isTaskIndependent( void )
  64:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** {
 136                             		.loc 2 64 1
 137 009d 7E AA                   		push.l	r10
 138                             	.LCFI8:
 139 009f EF 0A                   		mov.L	r0, r10
 140                             	.LCFI9:
  65:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 	return ( knl_taskindp > 0 )? TRUE: FALSE;
 141                             		.loc 2 65 35
 142 00a1 FB 52 00 00 00 00       		mov.L	#_knl_taskindp, r5
 143 00a7 EC 55                   		mov.L	[r5], r5
 144 00a9 61 05                   		cmp	#0, r5
 145 00ab FC DB 5A                		scgt.L	r5
 146 00ae 5B 55                   		movu.B	r5, r5
  66:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** }
 147                             		.loc 2 66 1
 148 00b0 EF 51                   		mov.L	r5, r1
 149 00b2 3F AA 01                		rtsd	#4, r10-r10
 150                             	.LFE16:
 153                             	_roundSize:
 154                             	.LFB34:
 155                             		.file 3 "../kernel/tkernel/memory.h"
   1:../kernel/tkernel/memory.h **** /*
   2:../kernel/tkernel/memory.h ****  *----------------------------------------------------------------------
   3:../kernel/tkernel/memory.h ****  *    micro T-Kernel 3.00.00
   4:../kernel/tkernel/memory.h ****  *
   5:../kernel/tkernel/memory.h ****  *    Copyright (C) 2006-2019 by Ken Sakamura.
   6:../kernel/tkernel/memory.h ****  *    This software is distributed under the T-License 2.1.
   7:../kernel/tkernel/memory.h ****  *----------------------------------------------------------------------
   8:../kernel/tkernel/memory.h ****  *
   9:../kernel/tkernel/memory.h ****  *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.
  10:../kernel/tkernel/memory.h ****  *
  11:../kernel/tkernel/memory.h ****  *----------------------------------------------------------------------
  12:../kernel/tkernel/memory.h ****  */
  13:../kernel/tkernel/memory.h **** 
  14:../kernel/tkernel/memory.h **** /*
  15:../kernel/tkernel/memory.h ****  *	memory.h
  16:../kernel/tkernel/memory.h ****  *	In-kernel dynamic memory management
  17:../kernel/tkernel/memory.h ****  */
  18:../kernel/tkernel/memory.h **** 
  19:../kernel/tkernel/memory.h **** #ifndef _MEMORY_H_
  20:../kernel/tkernel/memory.h **** #define _MEMORY_H_
  21:../kernel/tkernel/memory.h **** 
  22:../kernel/tkernel/memory.h **** #include "limits.h"
  23:../kernel/tkernel/memory.h **** 
  24:../kernel/tkernel/memory.h **** /*
  25:../kernel/tkernel/memory.h ****  * Memory allocation management information
  26:../kernel/tkernel/memory.h ****  *
  27:../kernel/tkernel/memory.h ****  *  Order of members must not be changed because members are used
  28:../kernel/tkernel/memory.h ****  *  with casting from MPLCB.
  29:../kernel/tkernel/memory.h ****  */
  30:../kernel/tkernel/memory.h **** typedef struct {
  31:../kernel/tkernel/memory.h **** 	W		memsz;
  32:../kernel/tkernel/memory.h **** 
  33:../kernel/tkernel/memory.h **** 	/* AreaQue for connecting each area where reserved pages are
  34:../kernel/tkernel/memory.h **** 	   divided Sort in ascending order of addresses in a page.
  35:../kernel/tkernel/memory.h **** 	   Do not sort between pages. */
  36:../kernel/tkernel/memory.h **** 	QUEUE		areaque;
  37:../kernel/tkernel/memory.h **** 	/* FreeQue for connecting unused area in reserved pages
  38:../kernel/tkernel/memory.h **** 	   Sort from small to large free spaces. */
  39:../kernel/tkernel/memory.h **** 	QUEUE		freeque;
  40:../kernel/tkernel/memory.h **** } IMACB;
  41:../kernel/tkernel/memory.h **** 
  42:../kernel/tkernel/memory.h **** /*
  43:../kernel/tkernel/memory.h ****  * Compensation for aligning "&areaque" position to 2 bytes border
  44:../kernel/tkernel/memory.h ****  */
  45:../kernel/tkernel/memory.h **** #define AlignIMACB(imacb)	( (IMACB*)((UW)(imacb) & ~0x00000001UL) )
  46:../kernel/tkernel/memory.h **** 
  47:../kernel/tkernel/memory.h **** /*
  48:../kernel/tkernel/memory.h ****  * Minimum unit of subdivision
  49:../kernel/tkernel/memory.h ****  *	The lower 1 bit of address is always 0
  50:../kernel/tkernel/memory.h ****  *	because memory is allocated by ROUNDSZ.
  51:../kernel/tkernel/memory.h ****  *	AreaQue uses the lower 1 bit for flag.
  52:../kernel/tkernel/memory.h ****  */
  53:../kernel/tkernel/memory.h **** #define ROUNDSZ		( sizeof(QUEUE) )	/* 8 bytes */
  54:../kernel/tkernel/memory.h **** #define ROUND(sz)	( ((UW)(sz) + (UW)(ROUNDSZ-1)) & ~(UW)(ROUNDSZ-1) )
  55:../kernel/tkernel/memory.h **** 
  56:../kernel/tkernel/memory.h **** /* Minimum fragment size */
  57:../kernel/tkernel/memory.h **** #define MIN_FRAGMENT	( sizeof(QUEUE) * 2 )
  58:../kernel/tkernel/memory.h **** 
  59:../kernel/tkernel/memory.h **** /*
  60:../kernel/tkernel/memory.h ****  * Maximum allocatable size (to check for parameter)
  61:../kernel/tkernel/memory.h ****  */
  62:../kernel/tkernel/memory.h **** #define	MAX_ALLOCATE	( INT_MAX & ~(ROUNDSZ-1) )
  63:../kernel/tkernel/memory.h **** 
  64:../kernel/tkernel/memory.h **** /*
  65:../kernel/tkernel/memory.h ****  * Adjusting the size which can be allocated 
  66:../kernel/tkernel/memory.h ****  */
  67:../kernel/tkernel/memory.h **** Inline W roundSize( W sz )
  68:../kernel/tkernel/memory.h **** {
 156                             		.loc 3 68 1
 157 00b5 7E AA                   		push.l	r10
 158                             	.LCFI10:
 159 00b7 71 0A FC                		add	#-4, r0, r10
 160                             	.LCFI11:
 161 00ba EF A0                   		mov.L	r10, r0
 162 00bc E3 A1                   		mov.L	r1, [r10]
  69:../kernel/tkernel/memory.h **** 	if ( sz < (W)MIN_FRAGMENT ) {
 163                             		.loc 3 69 5
 164 00be EC A5                   		mov.L	[r10], r5
 165 00c0 61 F5                   		cmp	#15, r5
 166 00c2 2A 05                   		bgt	.L11
  70:../kernel/tkernel/memory.h **** 		sz = (W)MIN_FRAGMENT;
 167                             		.loc 3 70 6
 168 00c4 F8 A6 10                		mov.L	#16, [r10]
 169                             	.L11:
  71:../kernel/tkernel/memory.h **** 	}
  72:../kernel/tkernel/memory.h **** 	return (W)(((UW)sz + (UW)(ROUNDSZ-1)) & ~(UW)(ROUNDSZ-1));
 170                             		.loc 3 72 14
 171 00c7 EC A5                   		mov.L	[r10], r5
 172                             		.loc 3 72 21
 173 00c9 62 75                   		add	#7, r5
 174                             		.loc 3 72 9
 175 00cb 75 25 F8                		and	#-8, r5
  73:../kernel/tkernel/memory.h **** }
 176                             		.loc 3 73 1
 177 00ce EF 51                   		mov.L	r5, r1
 178 00d0 3F AA 02                		rtsd	#8, r10-r10
 179                             	.LFE34:
 182                             	_knl_MaxFreeSize:
 183                             	.LFB35:
 184                             		.file 4 "../kernel/tkernel/mempool.h"
   1:../kernel/tkernel/mempool.h **** /*
   2:../kernel/tkernel/mempool.h ****  *----------------------------------------------------------------------
   3:../kernel/tkernel/mempool.h ****  *    micro T-Kernel 3.00.00
   4:../kernel/tkernel/mempool.h ****  *
   5:../kernel/tkernel/mempool.h ****  *    Copyright (C) 2006-2019 by Ken Sakamura.
   6:../kernel/tkernel/mempool.h ****  *    This software is distributed under the T-License 2.1.
   7:../kernel/tkernel/mempool.h ****  *----------------------------------------------------------------------
   8:../kernel/tkernel/mempool.h ****  *
   9:../kernel/tkernel/mempool.h ****  *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.
  10:../kernel/tkernel/mempool.h ****  *
  11:../kernel/tkernel/mempool.h ****  *----------------------------------------------------------------------
  12:../kernel/tkernel/mempool.h ****  */
  13:../kernel/tkernel/mempool.h **** 
  14:../kernel/tkernel/mempool.h **** /*
  15:../kernel/tkernel/mempool.h ****  *	mempool.h
  16:../kernel/tkernel/mempool.h ****  *	Variable Size Memory Pool
  17:../kernel/tkernel/mempool.h ****  */
  18:../kernel/tkernel/mempool.h **** 
  19:../kernel/tkernel/mempool.h **** #ifndef _MEMPOOL_H_
  20:../kernel/tkernel/mempool.h **** #define _MEMPOOL_H_
  21:../kernel/tkernel/mempool.h **** 
  22:../kernel/tkernel/mempool.h **** /*
  23:../kernel/tkernel/mempool.h ****  * Variable size memory pool control block
  24:../kernel/tkernel/mempool.h ****  *	'areaque' connects memory blocks in address ascending order
  25:../kernel/tkernel/mempool.h ****  *	'freeque' connects memory blocks in size increasing order
  26:../kernel/tkernel/mempool.h ****  *
  27:../kernel/tkernel/mempool.h ****  *  Order of members must not be changed because a part of members
  28:../kernel/tkernel/mempool.h ****  *  are used with casting to IMACB.
  29:../kernel/tkernel/mempool.h ****  */
  30:../kernel/tkernel/mempool.h **** typedef struct memorypool_control_block {
  31:../kernel/tkernel/mempool.h **** 	QUEUE	wait_queue;	/* Memory pool wait queue */
  32:../kernel/tkernel/mempool.h **** 	ID	mplid;		/* Variable size memory pool ID */
  33:../kernel/tkernel/mempool.h **** 	void	*exinf;		/* Extended information */
  34:../kernel/tkernel/mempool.h **** 	ATR	mplatr;		/* Memory pool attribute */
  35:../kernel/tkernel/mempool.h **** 	W	mplsz;		/* Whole memory pool size */
  36:../kernel/tkernel/mempool.h **** 	QUEUE	areaque;	/* Queue connecting all blocks */
  37:../kernel/tkernel/mempool.h **** 	QUEUE	freeque;	/* Queue connecting free blocks */
  38:../kernel/tkernel/mempool.h **** 	QUEUE	areaque_end;	/* the last element of areaque */
  39:../kernel/tkernel/mempool.h **** 	void	*mempool;	/* Top address of memory pool */
  40:../kernel/tkernel/mempool.h **** #if USE_OBJECT_NAME
  41:../kernel/tkernel/mempool.h **** 	UB	name[OBJECT_NAME_LENGTH];	/* name */
  42:../kernel/tkernel/mempool.h **** #endif
  43:../kernel/tkernel/mempool.h **** } MPLCB;
  44:../kernel/tkernel/mempool.h **** 
  45:../kernel/tkernel/mempool.h **** IMPORT MPLCB knl_mplcb_table[];	/* Variable size memory pool control block */
  46:../kernel/tkernel/mempool.h **** IMPORT QUEUE knl_free_mplcb;	/* FreeQue */
  47:../kernel/tkernel/mempool.h **** 
  48:../kernel/tkernel/mempool.h **** #define get_mplcb(id)	( &knl_mplcb_table[INDEX_MPL(id)] )
  49:../kernel/tkernel/mempool.h **** 
  50:../kernel/tkernel/mempool.h **** 
  51:../kernel/tkernel/mempool.h **** /*
  52:../kernel/tkernel/mempool.h ****  * Maximum free area size
  53:../kernel/tkernel/mempool.h ****  */
  54:../kernel/tkernel/mempool.h **** Inline W knl_MaxFreeSize( MPLCB *mplcb )
  55:../kernel/tkernel/mempool.h **** {
 185                             		.loc 4 55 1
 186 00d3 7E AA                   		push.l	r10
 187                             	.LCFI12:
 188 00d5 71 0A FC                		add	#-4, r0, r10
 189                             	.LCFI13:
 190 00d8 EF A0                   		mov.L	r10, r0
 191 00da E3 A1                   		mov.L	r1, [r10]
  56:../kernel/tkernel/mempool.h **** 	if ( isQueEmpty(&mplcb->freeque) ) {
 192                             		.loc 4 56 7
 193 00dc EC A5                   		mov.L	[r10], r5
 194 00de 71 55 20                		add	#32, r5
 195 00e1 EF 51                   		mov.L	r5, r1
 196 00e3 39 36 FF                		bsr	_isQueEmpty
 197 00e6 EF 15                   		mov.L	r1, r5
 198                             		.loc 4 56 5
 199 00e8 61 05                   		cmp	#0, r5
 200 00ea 14                      		beq	.L14
  57:../kernel/tkernel/mempool.h **** 		return 0;
 201                             		.loc 4 57 10
 202 00eb 66 05                   		mov.L	#0, r5
 203 00ed 09                      		bra	.L15
 204                             	.L14:
  58:../kernel/tkernel/mempool.h **** 	}
  59:../kernel/tkernel/mempool.h **** 	return FreeSize(mplcb->freeque.prev);
 205                             		.loc 4 59 9
 206 00ee EC A5                   		mov.L	[r10], r5
 207 00f0 AA 5D                   		mov.L	36[r5], r5
 208 00f2 62 85                   		add	#8, r5
 209 00f4 A8 5D                   		mov.L	4[r5], r5
 210                             	.L15:
  60:../kernel/tkernel/mempool.h **** }
 211                             		.loc 4 60 1
 212 00f6 EF 51                   		mov.L	r5, r1
 213 00f8 3F AA 02                		rtsd	#8, r10-r10
 214                             	.LFE35:
 216                             		.global	_knl_mplcb_table
 217                             		.section	.noinit,"aw"
 218                             		.balign 4
 221                             	_knl_mplcb_table:
 222 0000 00 00 00 00 00 00 00 00 		.zero	208
 222      00 00 00 00 00 00 00 00 
 222      00 00 00 00 00 00 00 00 
 222      00 00 00 00 00 00 00 00 
 222      00 00 00 00 00 00 00 00 
 223                             		.global	_knl_free_mplcb
 224                             		.balign 4
 227                             	_knl_free_mplcb:
 228 00d0 00 00 00 00 00 00 00 00 		.zero	8
 229                             		.section P,"ax"
 230                             		.global	_knl_memorypool_initialize
 232                             	_knl_memorypool_initialize:
 233                             	.LFB36:
 234                             		.file 5 "../kernel/tkernel/mempool.c"
   1:../kernel/tkernel/mempool.c **** /*
   2:../kernel/tkernel/mempool.c ****  *----------------------------------------------------------------------
   3:../kernel/tkernel/mempool.c ****  *    micro T-Kernel 3.00.00
   4:../kernel/tkernel/mempool.c ****  *
   5:../kernel/tkernel/mempool.c ****  *    Copyright (C) 2006-2019 by Ken Sakamura.
   6:../kernel/tkernel/mempool.c ****  *    This software is distributed under the T-License 2.1.
   7:../kernel/tkernel/mempool.c ****  *----------------------------------------------------------------------
   8:../kernel/tkernel/mempool.c ****  *
   9:../kernel/tkernel/mempool.c ****  *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.
  10:../kernel/tkernel/mempool.c ****  *
  11:../kernel/tkernel/mempool.c ****  *----------------------------------------------------------------------
  12:../kernel/tkernel/mempool.c ****  */
  13:../kernel/tkernel/mempool.c **** 
  14:../kernel/tkernel/mempool.c **** /*
  15:../kernel/tkernel/mempool.c ****  *	mempool.c
  16:../kernel/tkernel/mempool.c ****  *	Variable Size Memory Pool
  17:../kernel/tkernel/mempool.c ****  */
  18:../kernel/tkernel/mempool.c **** 
  19:../kernel/tkernel/mempool.c **** #include "kernel.h"
  20:../kernel/tkernel/mempool.c **** #include "wait.h"
  21:../kernel/tkernel/mempool.c **** #include "check.h"
  22:../kernel/tkernel/mempool.c **** #include "memory.h"
  23:../kernel/tkernel/mempool.c **** #include "mempool.h"
  24:../kernel/tkernel/mempool.c **** 
  25:../kernel/tkernel/mempool.c **** #if USE_MEMORYPOOL
  26:../kernel/tkernel/mempool.c **** 
  27:../kernel/tkernel/mempool.c **** 
  28:../kernel/tkernel/mempool.c **** Noinit(EXPORT MPLCB knl_mplcb_table[NUM_MPLID]);	/* Variable size memory pool control block */
  29:../kernel/tkernel/mempool.c **** Noinit(EXPORT QUEUE knl_free_mplcb);	/* FreeQue */
  30:../kernel/tkernel/mempool.c **** 
  31:../kernel/tkernel/mempool.c **** 
  32:../kernel/tkernel/mempool.c **** /*
  33:../kernel/tkernel/mempool.c ****  * Initialization of variable size memory pool control block
  34:../kernel/tkernel/mempool.c ****  */
  35:../kernel/tkernel/mempool.c **** EXPORT ER knl_memorypool_initialize( void )
  36:../kernel/tkernel/mempool.c **** {
 235                             		.loc 5 36 1
 236 00fb 7E AA                   		push.l	r10
 237                             	.LCFI14:
 238 00fd 71 0A F8                		add	#-8, r0, r10
 239                             	.LCFI15:
 240 0100 EF A0                   		mov.L	r10, r0
  37:../kernel/tkernel/mempool.c **** 	MPLCB	*mplcb, *end;
  38:../kernel/tkernel/mempool.c **** 
  39:../kernel/tkernel/mempool.c **** 	if ( NUM_MPLID < 1 ) {
  40:../kernel/tkernel/mempool.c **** 		return E_SYS;
  41:../kernel/tkernel/mempool.c **** 	}
  42:../kernel/tkernel/mempool.c **** 
  43:../kernel/tkernel/mempool.c **** 	/* Register all control blocks onto FreeQue */
  44:../kernel/tkernel/mempool.c **** 	QueInit(&knl_free_mplcb);
 241                             		.loc 5 44 2
 242 0102 FB 12 00 00 00 00       		mov.L	#_knl_free_mplcb, r1
 243 0108 39 F8 FE                		bsr	_QueInit
  45:../kernel/tkernel/mempool.c **** 	end = knl_mplcb_table + NUM_MPLID;
 244                             		.loc 5 45 6
 245 010b F9 A2 01 00 00 00 00    		mov.L	#_knl_mplcb_table+208, 4[r10]
  46:../kernel/tkernel/mempool.c **** 	for ( mplcb = knl_mplcb_table; mplcb < end; mplcb++ ) {
 246                             		.loc 5 46 14
 247 0112 F8 A2 00 00 00 00       		mov.L	#_knl_mplcb_table, [r10]
 248                             		.loc 5 46 2
 249 0118 2E 1B                   		bra	.L17
 250                             	.L18:
  47:../kernel/tkernel/mempool.c **** 		mplcb->mplid = 0;
 251                             		.loc 5 47 16 discriminator 3
 252 011a EC A5                   		mov.L	[r10], r5
 253 011c 3E 52 00                		mov.L	#0, 8[r5]
  48:../kernel/tkernel/mempool.c **** 		QueInsert(&mplcb->wait_queue, &knl_free_mplcb);
 254                             		.loc 5 48 3 discriminator 3
 255 011f EC A5                   		mov.L	[r10], r5
 256 0121 FB 22 00 00 00 00       		mov.L	#_knl_free_mplcb, r2
 257 0127 EF 51                   		mov.L	r5, r1
 258 0129 39 0B FF                		bsr	_QueInsert
  46:../kernel/tkernel/mempool.c **** 	for ( mplcb = knl_mplcb_table; mplcb < end; mplcb++ ) {
 259                             		.loc 5 46 51 discriminator 3
 260 012c EC A5                   		mov.L	[r10], r5
 261 012e 71 55 34                		add	#52, r5
 262 0131 E3 A5                   		mov.L	r5, [r10]
 263                             	.L17:
  46:../kernel/tkernel/mempool.c **** 	for ( mplcb = knl_mplcb_table; mplcb < end; mplcb++ ) {
 264                             		.loc 5 46 2 discriminator 1
 265 0133 EC A4                   		mov.L	[r10], r4
 266 0135 ED A5 01                		mov.L	4[r10], r5
 267 0138 47 54                   		cmp	r5, r4
 268 013a 23 E0                   		bltu	.L18
  49:../kernel/tkernel/mempool.c **** 	}
  50:../kernel/tkernel/mempool.c **** 
  51:../kernel/tkernel/mempool.c **** 	return E_OK;
 269                             		.loc 5 51 9
 270 013c 66 05                   		mov.L	#0, r5
  52:../kernel/tkernel/mempool.c **** }
 271                             		.loc 5 52 1
 272 013e EF 51                   		mov.L	r5, r1
 273 0140 3F AA 03                		rtsd	#12, r10-r10
 274                             	.LFE36:
 277                             	_knl_appendFreeAreaBound:
 278                             	.LFB37:
  53:../kernel/tkernel/mempool.c **** 
  54:../kernel/tkernel/mempool.c **** /* ------------------------------------------------------------------------ */
  55:../kernel/tkernel/mempool.c **** 
  56:../kernel/tkernel/mempool.c **** /*
  57:../kernel/tkernel/mempool.c ****  * Registration of free area on FreeQue
  58:../kernel/tkernel/mempool.c ****  *   Specialized version for merging with top/end area
  59:../kernel/tkernel/mempool.c ****  */
  60:../kernel/tkernel/mempool.c **** LOCAL void knl_appendFreeAreaBound( MPLCB *mplcb, QUEUE *aq )
  61:../kernel/tkernel/mempool.c **** {
 279                             		.loc 5 61 1
 280 0143 7E AA                   		push.l	r10
 281                             	.LCFI16:
 282 0145 71 0A E4                		add	#-28, r0, r10
 283                             	.LCFI17:
 284 0148 EF A0                   		mov.L	r10, r0
 285 014a E7 A1 05                		mov.L	r1, 20[r10]
 286 014d E7 A2 06                		mov.L	r2, 24[r10]
  62:../kernel/tkernel/mempool.c **** 	IMACB	*imacb = (IMACB*)&(mplcb->mplsz);
 287                             		.loc 5 62 9
 288 0150 ED A5 05                		mov.L	20[r10], r5
 289 0153 71 55 14                		add	#20, r5
 290 0156 E7 A5 02                		mov.L	r5, 8[r10]
  63:../kernel/tkernel/mempool.c **** 	QUEUE	*fq, *top, *end;
  64:../kernel/tkernel/mempool.c **** 	W	size;
  65:../kernel/tkernel/mempool.c **** 
  66:../kernel/tkernel/mempool.c **** 	if ( aq == &(mplcb->areaque) ) {
 291                             		.loc 5 66 13
 292 0159 ED A5 05                		mov.L	20[r10], r5
 293 015c 71 55 18                		add	#24, r5
 294                             		.loc 5 66 5
 295 015f ED A4 06                		mov.L	24[r10], r4
 296 0162 47 54                   		cmp	r5, r4
 297 0164 19                      		bne	.L21
  67:../kernel/tkernel/mempool.c **** 		top = (QUEUE*)mplcb->mempool;
 298                             		.loc 5 67 7
 299 0165 ED A5 05                		mov.L	20[r10], r5
 300 0168 AB 55                   		mov.L	48[r5], r5
 301 016a E3 A5                   		mov.L	r5, [r10]
 302 016c 08                      		bra	.L22
 303                             	.L21:
  68:../kernel/tkernel/mempool.c **** 	} else {
  69:../kernel/tkernel/mempool.c **** 		top = aq + 1;
 304                             		.loc 5 69 7
 305 016d ED A5 06                		mov.L	24[r10], r5
 306 0170 62 85                   		add	#8, r5
 307 0172 E3 A5                   		mov.L	r5, [r10]
 308                             	.L22:
  70:../kernel/tkernel/mempool.c **** 	}
  71:../kernel/tkernel/mempool.c **** 
  72:../kernel/tkernel/mempool.c **** 	if ( aq->next == &(mplcb->areaque_end) ) {
 309                             		.loc 5 72 9
 310 0174 ED A5 06                		mov.L	24[r10], r5
 311 0177 EC 54                   		mov.L	[r5], r4
 312                             		.loc 5 72 19
 313 0179 ED A5 05                		mov.L	20[r10], r5
 314 017c 71 55 28                		add	#40, r5
 315                             		.loc 5 72 5
 316 017f 47 54                   		cmp	r5, r4
 317 0181 21 12                   		bne	.L23
  73:../kernel/tkernel/mempool.c **** 		end = (QUEUE*)((VB*)mplcb->mempool + mplcb->mplsz);
 318                             		.loc 5 73 28
 319 0183 ED A5 05                		mov.L	20[r10], r5
 320 0186 AB 54                   		mov.L	48[r5], r4
 321                             		.loc 5 73 45
 322 0188 ED A5 05                		mov.L	20[r10], r5
 323 018b A9 5D                   		mov.L	20[r5], r5
 324                             		.loc 5 73 7
 325 018d 4B 45                   		add	r4, r5
 326 018f E7 A5 01                		mov.L	r5, 4[r10]
 327 0192 09                      		bra	.L24
 328                             	.L23:
  74:../kernel/tkernel/mempool.c **** 	} else {
  75:../kernel/tkernel/mempool.c **** 		end = aq->next;
 329                             		.loc 5 75 7
 330 0193 ED A5 06                		mov.L	24[r10], r5
 331 0196 EC 55                   		mov.L	[r5], r5
 332 0198 E7 A5 01                		mov.L	r5, 4[r10]
 333                             	.L24:
  76:../kernel/tkernel/mempool.c **** 	}
  77:../kernel/tkernel/mempool.c **** 
  78:../kernel/tkernel/mempool.c **** 	size = (W)((VB*)end - (VB*)top);
 334                             		.loc 5 78 7
 335 019b ED A4 01                		mov.L	4[r10], r4
 336 019e EC A5                   		mov.L	[r10], r5
 337 01a0 FF 05 54                		sub	r5, r4, r5
 338 01a3 E7 A5 03                		mov.L	r5, 12[r10]
  79:../kernel/tkernel/mempool.c **** 
  80:../kernel/tkernel/mempool.c **** 	/* Registration position search */
  81:../kernel/tkernel/mempool.c **** 	/*  Search the free area whose size is equal to 'blksz',
  82:../kernel/tkernel/mempool.c **** 	 *  or larger than 'blksz' but closest.
  83:../kernel/tkernel/mempool.c **** 	 *  If it does not exist, return '&imacb->freeque'.
  84:../kernel/tkernel/mempool.c **** 	 */
  85:../kernel/tkernel/mempool.c **** 	fq = knl_searchFreeArea(imacb, size);
 339                             		.loc 5 85 7
 340 01a6 ED A2 03                		mov.L	12[r10], r2
 341 01a9 ED A1 02                		mov.L	8[r10], r1
 342 01ac 05 00 00 00             		bsr	_knl_searchFreeArea
 343 01b0 E7 A1 04                		mov.L	r1, 16[r10]
  86:../kernel/tkernel/mempool.c **** 
  87:../kernel/tkernel/mempool.c **** 	/* Register */
  88:../kernel/tkernel/mempool.c **** 	clrAreaFlag(aq, AREA_USE);
 344                             		.loc 5 88 2
 345 01b3 ED A5 06                		mov.L	24[r10], r5
 346 01b6 A8 5D                   		mov.L	4[r5], r5
 347 01b8 75 25 FE                		and	#-2, r5
 348 01bb EF 54                   		mov.L	r5, r4
 349 01bd ED A5 06                		mov.L	24[r10], r5
 350 01c0 A0 5C                   		mov.L	r4, 4[r5]
  89:../kernel/tkernel/mempool.c **** 	if ( fq != &imacb->freeque && FreeSize(fq) == size ) {
 351                             		.loc 5 89 13
 352 01c2 ED A5 02                		mov.L	8[r10], r5
 353 01c5 62 C5                   		add	#12, r5
 354                             		.loc 5 89 5
 355 01c7 ED A4 04                		mov.L	16[r10], r4
 356 01ca 47 54                   		cmp	r5, r4
 357 01cc 20 51                   		beq	.L25
 358                             		.loc 5 89 32 discriminator 1
 359 01ce ED A5 04                		mov.L	16[r10], r5
 360 01d1 62 85                   		add	#8, r5
 361 01d3 A8 5D                   		mov.L	4[r5], r5
 362                             		.loc 5 89 29 discriminator 1
 363 01d5 ED A4 03                		mov.L	12[r10], r4
 364 01d8 47 54                   		cmp	r5, r4
 365 01da 21 43                   		bne	.L25
  90:../kernel/tkernel/mempool.c **** 		/* FreeQue Same size */
  91:../kernel/tkernel/mempool.c **** 		(top + 1)->next = (fq + 1)->next;
 366                             		.loc 5 91 25
 367 01dc ED A5 04                		mov.L	16[r10], r5
 368 01df 71 54 08                		add	#8, r5, r4
 369                             		.loc 5 91 8
 370 01e2 EC A5                   		mov.L	[r10], r5
 371 01e4 62 85                   		add	#8, r5
 372                             		.loc 5 91 29
 373 01e6 EC 44                   		mov.L	[r4], r4
 374                             		.loc 5 91 19
 375 01e8 E3 54                   		mov.L	r4, [r5]
  92:../kernel/tkernel/mempool.c **** 		(fq  + 1)->next = top + 1;
 376                             		.loc 5 92 8
 377 01ea ED A5 04                		mov.L	16[r10], r5
 378 01ed 62 85                   		add	#8, r5
 379                             		.loc 5 92 25
 380 01ef EC A4                   		mov.L	[r10], r4
 381 01f1 62 84                   		add	#8, r4
 382                             		.loc 5 92 19
 383 01f3 E3 54                   		mov.L	r4, [r5]
  93:../kernel/tkernel/mempool.c **** 		(top + 1)->prev = fq + 1;
 384                             		.loc 5 93 8
 385 01f5 EC A5                   		mov.L	[r10], r5
 386 01f7 62 85                   		add	#8, r5
 387                             		.loc 5 93 24
 388 01f9 ED A4 04                		mov.L	16[r10], r4
 389 01fc 62 84                   		add	#8, r4
 390                             		.loc 5 93 19
 391 01fe A0 5C                   		mov.L	r4, 4[r5]
  94:../kernel/tkernel/mempool.c **** 		if( (top + 1)->next != NULL ) {
 392                             		.loc 5 94 12
 393 0200 EC A5                   		mov.L	[r10], r5
 394 0202 62 85                   		add	#8, r5
 395                             		.loc 5 94 16
 396 0204 EC 55                   		mov.L	[r5], r5
 397                             		.loc 5 94 5
 398 0206 61 05                   		cmp	#0, r5
 399 0208 20 0E                   		beq	.L26
  95:../kernel/tkernel/mempool.c **** 			(top + 1)->next->prev = top + 1;
 400                             		.loc 5 95 9
 401 020a EC A5                   		mov.L	[r10], r5
 402 020c 62 85                   		add	#8, r5
 403                             		.loc 5 95 13
 404 020e EC 55                   		mov.L	[r5], r5
 405                             		.loc 5 95 32
 406 0210 EC A4                   		mov.L	[r10], r4
 407 0212 62 84                   		add	#8, r4
 408                             		.loc 5 95 26
 409 0214 A0 5C                   		mov.L	r4, 4[r5]
 410                             	.L26:
  96:../kernel/tkernel/mempool.c **** 		}
  97:../kernel/tkernel/mempool.c **** 		top->next = NULL;
 411                             		.loc 5 97 13
 412 0216 EC A5                   		mov.L	[r10], r5
 413 0218 F8 56 00                		mov.L	#0, [r5]
 414 021b 2E 1A                   		bra	.L27
 415                             	.L25:
  98:../kernel/tkernel/mempool.c **** 	} else {
  99:../kernel/tkernel/mempool.c **** 		/* FreeQue Size order */
 100:../kernel/tkernel/mempool.c **** 		QueInsert(top, fq);
 416                             		.loc 5 100 3
 417 021d ED A2 04                		mov.L	16[r10], r2
 418 0220 EC A1                   		mov.L	[r10], r1
 419 0222 39 12 FE                		bsr	_QueInsert
 101:../kernel/tkernel/mempool.c **** 		(top + 1)->next = NULL;
 420                             		.loc 5 101 8
 421 0225 EC A5                   		mov.L	[r10], r5
 422 0227 62 85                   		add	#8, r5
 423                             		.loc 5 101 19
 424 0229 F8 56 00                		mov.L	#0, [r5]
 102:../kernel/tkernel/mempool.c **** 		(top + 1)->prev = (QUEUE*)size;
 425                             		.loc 5 102 8
 426 022c EC A5                   		mov.L	[r10], r5
 427 022e 62 85                   		add	#8, r5
 428                             		.loc 5 102 21
 429 0230 ED A4 03                		mov.L	12[r10], r4
 430                             		.loc 5 102 19
 431 0233 A0 5C                   		mov.L	r4, 4[r5]
 432                             	.L27:
 103:../kernel/tkernel/mempool.c **** 	}
 104:../kernel/tkernel/mempool.c **** }
 433                             		.loc 5 104 1
 434 0235 03                      		nop
 435 0236 3F AA 08                		rtsd	#32, r10-r10
 436                             	.LFE37:
 439                             	_knl_get_blk:
 440                             	.LFB38:
 105:../kernel/tkernel/mempool.c **** 
 106:../kernel/tkernel/mempool.c **** /*
 107:../kernel/tkernel/mempool.c ****  * Get memory block 
 108:../kernel/tkernel/mempool.c ****  *	'blksz' must be larger than minimum fragment size
 109:../kernel/tkernel/mempool.c ****  *	and adjusted by ROUNDSZ unit.
 110:../kernel/tkernel/mempool.c ****  */
 111:../kernel/tkernel/mempool.c **** LOCAL void *knl_get_blk( MPLCB *mplcb, W blksz )
 112:../kernel/tkernel/mempool.c **** {
 441                             		.loc 5 112 1
 442 0239 7E AA                   		push.l	r10
 443                             	.LCFI18:
 444 023b 71 0A E8                		add	#-24, r0, r10
 445                             	.LCFI19:
 446 023e EF A0                   		mov.L	r10, r0
 447 0240 E7 A1 04                		mov.L	r1, 16[r10]
 448 0243 E7 A2 05                		mov.L	r2, 20[r10]
 113:../kernel/tkernel/mempool.c **** 	QUEUE	*q, *aq, *aq2;
 114:../kernel/tkernel/mempool.c **** 	IMACB*	imacb = (IMACB*)&(mplcb->mplsz);
 449                             		.loc 5 114 9
 450 0246 ED A5 04                		mov.L	16[r10], r5
 451 0249 71 55 14                		add	#20, r5
 452 024c E3 A5                   		mov.L	r5, [r10]
 115:../kernel/tkernel/mempool.c **** 
 116:../kernel/tkernel/mempool.c **** 	/* Search FreeQue */
 117:../kernel/tkernel/mempool.c **** 	q = knl_searchFreeArea(imacb, blksz);
 453                             		.loc 5 117 6
 454 024e ED A2 05                		mov.L	20[r10], r2
 455 0251 EC A1                   		mov.L	[r10], r1
 456 0253 05 00 00 00             		bsr	_knl_searchFreeArea
 457 0257 E7 A1 01                		mov.L	r1, 4[r10]
 118:../kernel/tkernel/mempool.c **** 	if ( q == &(imacb->freeque) ) {
 458                             		.loc 5 118 12
 459 025a EC A5                   		mov.L	[r10], r5
 460 025c 62 C5                   		add	#12, r5
 461                             		.loc 5 118 5
 462 025e ED A4 01                		mov.L	4[r10], r4
 463 0261 47 54                   		cmp	r5, r4
 464 0263 1D                      		bne	.L29
 119:../kernel/tkernel/mempool.c **** 		return NULL;
 465                             		.loc 5 119 10
 466 0264 66 05                   		mov.L	#0, r5
 467 0266 2E 7F                   		bra	.L30
 468                             	.L29:
 120:../kernel/tkernel/mempool.c **** 	}
 121:../kernel/tkernel/mempool.c **** 
 122:../kernel/tkernel/mempool.c **** 	/* remove free area from FreeQue */
 123:../kernel/tkernel/mempool.c **** 	knl_removeFreeQue(q);
 469                             		.loc 5 123 2
 470 0268 ED A1 01                		mov.L	4[r10], r1
 471 026b 05 00 00 00             		bsr	_knl_removeFreeQue
 124:../kernel/tkernel/mempool.c **** 	aq = ((void *)q == mplcb->mempool) ? &(mplcb->areaque) :  q - 1;
 472                             		.loc 5 124 26
 473 026f ED A5 04                		mov.L	16[r10], r5
 474 0272 AB 55                   		mov.L	48[r5], r5
 475                             		.loc 5 124 57
 476 0274 ED A4 01                		mov.L	4[r10], r4
 477 0277 47 54                   		cmp	r5, r4
 478 0279 18                      		bne	.L31
 479                             		.loc 5 124 57 is_stmt 0 discriminator 1
 480 027a ED A5 04                		mov.L	16[r10], r5
 481 027d 71 55 18                		add	#24, r5
 482 0280 0E                      		bra	.L32
 483                             	.L31:
 484                             		.loc 5 124 57 discriminator 2
 485 0281 ED A5 01                		mov.L	4[r10], r5
 486 0284 60 85                   		sub	#8, r5
 487                             	.L32:
 488                             		.loc 5 124 5 is_stmt 1 discriminator 4
 489 0286 E7 A5 02                		mov.L	r5, 8[r10]
 125:../kernel/tkernel/mempool.c **** 
 126:../kernel/tkernel/mempool.c **** 	/* If there is a fragment smaller than the minimum fragment size,
 127:../kernel/tkernel/mempool.c **** 	   allocate them together */
 128:../kernel/tkernel/mempool.c **** 	if ( FreeSize(q) - (UW)blksz >= MIN_FRAGMENT + sizeof(QUEUE) ) {
 490                             		.loc 5 128 7 discriminator 4
 491 0289 ED A5 01                		mov.L	4[r10], r5
 492 028c 62 85                   		add	#8, r5
 493 028e A8 5D                   		mov.L	4[r5], r5
 494 0290 EF 54                   		mov.L	r5, r4
 495                             		.loc 5 128 21 discriminator 4
 496 0292 ED A5 05                		mov.L	20[r10], r5
 497                             		.loc 5 128 19 discriminator 4
 498 0295 FF 05 54                		sub	r5, r4, r5
 499                             		.loc 5 128 5 discriminator 4
 500 0298 75 55 17                		cmp	#23, r5
 501 029b 25 39                   		bleu	.L33
 129:../kernel/tkernel/mempool.c **** 
 130:../kernel/tkernel/mempool.c **** 		/* Divide the area into 2. */
 131:../kernel/tkernel/mempool.c **** 		aq2 = (QUEUE*)((VB*)q + blksz);
 502                             		.loc 5 131 9
 503 029d ED A5 05                		mov.L	20[r10], r5
 504                             		.loc 5 131 7
 505 02a0 ED A4 01                		mov.L	4[r10], r4
 506 02a3 4B 45                   		add	r4, r5
 507 02a5 E7 A5 03                		mov.L	r5, 12[r10]
 132:../kernel/tkernel/mempool.c **** 		knl_insertAreaQue(aq, aq2);
 508                             		.loc 5 132 3
 509 02a8 ED A2 03                		mov.L	12[r10], r2
 510 02ab ED A1 02                		mov.L	8[r10], r1
 511 02ae 05 00 00 00             		bsr	_knl_insertAreaQue
 133:../kernel/tkernel/mempool.c **** 
 134:../kernel/tkernel/mempool.c **** 		/* Register the remaining area onto FreeQue */
 135:../kernel/tkernel/mempool.c **** 		if ( aq2->next == &(mplcb->areaque_end) ) {
 512                             		.loc 5 135 11
 513 02b2 ED A5 03                		mov.L	12[r10], r5
 514 02b5 EC 54                   		mov.L	[r5], r4
 515                             		.loc 5 135 21
 516 02b7 ED A5 04                		mov.L	16[r10], r5
 517 02ba 71 55 28                		add	#40, r5
 518                             		.loc 5 135 6
 519 02bd 47 54                   		cmp	r5, r4
 520 02bf 21 0C                   		bne	.L34
 136:../kernel/tkernel/mempool.c **** 			knl_appendFreeAreaBound(mplcb, aq2);
 521                             		.loc 5 136 4
 522 02c1 ED A2 03                		mov.L	12[r10], r2
 523 02c4 ED A1 04                		mov.L	16[r10], r1
 524 02c7 39 7C FE                		bsr	_knl_appendFreeAreaBound
 525 02ca 0A                      		bra	.L33
 526                             	.L34:
 137:../kernel/tkernel/mempool.c **** 		} else {
 138:../kernel/tkernel/mempool.c **** 			knl_appendFreeArea(imacb, aq2);
 527                             		.loc 5 138 4
 528 02cb ED A2 03                		mov.L	12[r10], r2
 529 02ce EC A1                   		mov.L	[r10], r1
 530 02d0 05 00 00 00             		bsr	_knl_appendFreeArea
 531                             	.L33:
 139:../kernel/tkernel/mempool.c **** 		}
 140:../kernel/tkernel/mempool.c **** 	}
 141:../kernel/tkernel/mempool.c **** 	setAreaFlag(aq, AREA_USE);
 532                             		.loc 5 141 2
 533 02d4 ED A5 02                		mov.L	8[r10], r5
 534 02d7 A8 5D                   		mov.L	4[r5], r5
 535 02d9 65 15                   		or	#1, r5
 536 02db EF 54                   		mov.L	r5, r4
 537 02dd ED A5 02                		mov.L	8[r10], r5
 538 02e0 A0 5C                   		mov.L	r4, 4[r5]
 142:../kernel/tkernel/mempool.c **** 
 143:../kernel/tkernel/mempool.c **** 	return (void *)q;
 539                             		.loc 5 143 9
 540 02e2 ED A5 01                		mov.L	4[r10], r5
 541                             	.L30:
 144:../kernel/tkernel/mempool.c **** }
 542                             		.loc 5 144 1
 543 02e5 EF 51                   		mov.L	r5, r1
 544 02e7 3F AA 07                		rtsd	#28, r10-r10
 545                             	.LFE38:
 548                             	_knl_rel_blk:
 549                             	.LFB39:
 145:../kernel/tkernel/mempool.c **** 
 146:../kernel/tkernel/mempool.c **** /*
 147:../kernel/tkernel/mempool.c ****  * Free memory block 
 148:../kernel/tkernel/mempool.c ****  */
 149:../kernel/tkernel/mempool.c **** LOCAL ER knl_rel_blk( MPLCB *mplcb, void *blk )
 150:../kernel/tkernel/mempool.c **** {
 550                             		.loc 5 150 1
 551 02ea 7E AA                   		push.l	r10
 552                             	.LCFI20:
 553 02ec 71 0A EC                		add	#-20, r0, r10
 554                             	.LCFI21:
 555 02ef EF A0                   		mov.L	r10, r0
 556 02f1 E7 A1 03                		mov.L	r1, 12[r10]
 557 02f4 E7 A2 04                		mov.L	r2, 16[r10]
 151:../kernel/tkernel/mempool.c **** 	QUEUE	*aq;
 152:../kernel/tkernel/mempool.c **** 	IMACB*	imacb = (IMACB*)&(mplcb->mplsz);
 558                             		.loc 5 152 9
 559 02f7 ED A5 03                		mov.L	12[r10], r5
 560 02fa 71 55 14                		add	#20, r5
 561 02fd E7 A5 01                		mov.L	r5, 4[r10]
 153:../kernel/tkernel/mempool.c **** 
 154:../kernel/tkernel/mempool.c **** 	aq = (blk == mplcb->mempool) ? &(mplcb->areaque) : (QUEUE*)blk - 1;
 562                             		.loc 5 154 20
 563 0300 ED A5 03                		mov.L	12[r10], r5
 564 0303 AB 55                   		mov.L	48[r5], r5
 565                             		.loc 5 154 51
 566 0305 ED A4 04                		mov.L	16[r10], r4
 567 0308 47 54                   		cmp	r5, r4
 568 030a 18                      		bne	.L36
 569                             		.loc 5 154 51 is_stmt 0 discriminator 1
 570 030b ED A5 03                		mov.L	12[r10], r5
 571 030e 71 55 18                		add	#24, r5
 572 0311 0E                      		bra	.L37
 573                             	.L36:
 574                             		.loc 5 154 51 discriminator 2
 575 0312 ED A5 04                		mov.L	16[r10], r5
 576 0315 60 85                   		sub	#8, r5
 577                             	.L37:
 578                             		.loc 5 154 5 is_stmt 1 discriminator 4
 579 0317 E3 A5                   		mov.L	r5, [r10]
 155:../kernel/tkernel/mempool.c **** 
 156:../kernel/tkernel/mempool.c **** #if CHK_PAR
 157:../kernel/tkernel/mempool.c **** 	if ( !chkAreaFlag(aq, AREA_USE) ) {
 580                             		.loc 5 157 8 discriminator 4
 581 0319 EC A5                   		mov.L	[r10], r5
 582 031b A8 5D                   		mov.L	4[r5], r5
 583 031d 64 15                   		and	#1, r5
 584                             		.loc 5 157 5 discriminator 4
 585 031f 61 05                   		cmp	#0, r5
 586 0321 1F                      		bne	.L38
 158:../kernel/tkernel/mempool.c **** 		return E_PAR;
 587                             		.loc 5 158 10
 588 0322 FB 56 EF                		mov.L	#-17, r5
 589 0325 38 9A 00                		bra	.L39
 590                             	.L38:
 159:../kernel/tkernel/mempool.c **** 	}
 160:../kernel/tkernel/mempool.c **** #endif
 161:../kernel/tkernel/mempool.c **** 	clrAreaFlag(aq, AREA_USE);
 591                             		.loc 5 161 2
 592 0328 EC A5                   		mov.L	[r10], r5
 593 032a A8 5D                   		mov.L	4[r5], r5
 594 032c 75 25 FE                		and	#-2, r5
 595 032f EF 54                   		mov.L	r5, r4
 596 0331 EC A5                   		mov.L	[r10], r5
 597 0333 A0 5C                   		mov.L	r4, 4[r5]
 162:../kernel/tkernel/mempool.c **** 
 163:../kernel/tkernel/mempool.c **** 	if ( !chkAreaFlag(aq->next, AREA_USE) ) {
 598                             		.loc 5 163 8
 599 0335 EC A5                   		mov.L	[r10], r5
 600 0337 EC 55                   		mov.L	[r5], r5
 601 0339 A8 5D                   		mov.L	4[r5], r5
 602 033b 64 15                   		and	#1, r5
 603                             		.loc 5 163 5
 604 033d 61 05                   		cmp	#0, r5
 605 033f 21 18                   		bne	.L40
 164:../kernel/tkernel/mempool.c **** 		/* Merge to the next area */
 165:../kernel/tkernel/mempool.c **** 		knl_removeFreeQue(aq->next + 1);
 606                             		.loc 5 165 23
 607 0341 EC A5                   		mov.L	[r10], r5
 608 0343 EC 55                   		mov.L	[r5], r5
 609                             		.loc 5 165 30
 610 0345 62 85                   		add	#8, r5
 611                             		.loc 5 165 3
 612 0347 EF 51                   		mov.L	r5, r1
 613 0349 05 00 00 00             		bsr	_knl_removeFreeQue
 166:../kernel/tkernel/mempool.c **** 		knl_removeAreaQue(aq->next);
 614                             		.loc 5 166 23
 615 034d EC A5                   		mov.L	[r10], r5
 616 034f EC 55                   		mov.L	[r5], r5
 617                             		.loc 5 166 3
 618 0351 EF 51                   		mov.L	r5, r1
 619 0353 05 00 00 00             		bsr	_knl_removeAreaQue
 620                             	.L40:
 167:../kernel/tkernel/mempool.c **** 	}
 168:../kernel/tkernel/mempool.c **** 	if ( !chkAreaFlag(aq->prev, AREA_USE) ) {
 621                             		.loc 5 168 8
 622 0357 EC A5                   		mov.L	[r10], r5
 623 0359 A8 5D                   		mov.L	4[r5], r5
 624 035b A8 5D                   		mov.L	4[r5], r5
 625 035d 64 15                   		and	#1, r5
 626                             		.loc 5 168 5
 627 035f 61 05                   		cmp	#0, r5
 628 0361 21 31                   		bne	.L41
 629                             	.LBB2:
 169:../kernel/tkernel/mempool.c **** 		/* Merge to the previous area */
 170:../kernel/tkernel/mempool.c **** 		QUEUE *fq;
 171:../kernel/tkernel/mempool.c **** 		aq = aq->prev;
 630                             		.loc 5 171 6
 631 0363 EC A5                   		mov.L	[r10], r5
 632 0365 A8 5D                   		mov.L	4[r5], r5
 633 0367 E3 A5                   		mov.L	r5, [r10]
 172:../kernel/tkernel/mempool.c **** 		fq = (aq == &(mplcb->areaque)) ? (QUEUE*)(mplcb->mempool) : aq + 1;
 634                             		.loc 5 172 15
 635 0369 ED A5 03                		mov.L	12[r10], r5
 636 036c 71 55 18                		add	#24, r5
 637                             		.loc 5 172 61
 638 036f EC A4                   		mov.L	[r10], r4
 639 0371 47 54                   		cmp	r5, r4
 640 0373 1F                      		bne	.L42
 641                             		.loc 5 172 61 is_stmt 0 discriminator 1
 642 0374 ED A5 03                		mov.L	12[r10], r5
 643 0377 AB 55                   		mov.L	48[r5], r5
 644 0379 0D                      		bra	.L43
 645                             	.L42:
 646                             		.loc 5 172 61 discriminator 2
 647 037a EC A5                   		mov.L	[r10], r5
 648 037c 62 85                   		add	#8, r5
 649                             	.L43:
 650                             		.loc 5 172 6 is_stmt 1 discriminator 4
 651 037e E7 A5 02                		mov.L	r5, 8[r10]
 173:../kernel/tkernel/mempool.c **** 
 174:../kernel/tkernel/mempool.c **** 		knl_removeFreeQue(fq);
 652                             		.loc 5 174 3 discriminator 4
 653 0381 ED A1 02                		mov.L	8[r10], r1
 654 0384 05 00 00 00             		bsr	_knl_removeFreeQue
 175:../kernel/tkernel/mempool.c **** 		knl_removeAreaQue(aq->next);
 655                             		.loc 5 175 23 discriminator 4
 656 0388 EC A5                   		mov.L	[r10], r5
 657 038a EC 55                   		mov.L	[r5], r5
 658                             		.loc 5 175 3 discriminator 4
 659 038c EF 51                   		mov.L	r5, r1
 660 038e 05 00 00 00             		bsr	_knl_removeAreaQue
 661                             	.L41:
 662                             	.LBE2:
 176:../kernel/tkernel/mempool.c **** 	}
 177:../kernel/tkernel/mempool.c **** 
 178:../kernel/tkernel/mempool.c **** 	/* Register free area onto FreeQue */
 179:../kernel/tkernel/mempool.c **** 	if ( aq == &(mplcb->areaque) || aq->next == &(mplcb->areaque_end) ) {
 663                             		.loc 5 179 13
 664 0392 ED A5 03                		mov.L	12[r10], r5
 665 0395 71 55 18                		add	#24, r5
 666                             		.loc 5 179 5
 667 0398 EC A4                   		mov.L	[r10], r4
 668 039a 47 54                   		cmp	r5, r4
 669 039c 20 0F                   		beq	.L44
 670                             		.loc 5 179 36 discriminator 1
 671 039e EC A5                   		mov.L	[r10], r5
 672 03a0 EC 54                   		mov.L	[r5], r4
 673                             		.loc 5 179 46 discriminator 1
 674 03a2 ED A5 03                		mov.L	12[r10], r5
 675 03a5 71 55 28                		add	#40, r5
 676                             		.loc 5 179 31 discriminator 1
 677 03a8 47 54                   		cmp	r5, r4
 678 03aa 1A                      		bne	.L45
 679                             	.L44:
 180:../kernel/tkernel/mempool.c **** 		knl_appendFreeAreaBound(mplcb, aq);
 680                             		.loc 5 180 3
 681 03ab EC A2                   		mov.L	[r10], r2
 682 03ad ED A1 03                		mov.L	12[r10], r1
 683 03b0 39 93 FD                		bsr	_knl_appendFreeAreaBound
 684 03b3 0A                      		bra	.L46
 685                             	.L45:
 181:../kernel/tkernel/mempool.c **** 	} else {
 182:../kernel/tkernel/mempool.c **** 		knl_appendFreeArea(imacb, aq);
 686                             		.loc 5 182 3
 687 03b4 EC A2                   		mov.L	[r10], r2
 688 03b6 ED A1 01                		mov.L	4[r10], r1
 689 03b9 05 00 00 00             		bsr	_knl_appendFreeArea
 690                             	.L46:
 183:../kernel/tkernel/mempool.c **** 	}
 184:../kernel/tkernel/mempool.c **** 
 185:../kernel/tkernel/mempool.c **** 	return E_OK;
 691                             		.loc 5 185 9
 692 03bd 66 05                   		mov.L	#0, r5
 693                             	.L39:
 186:../kernel/tkernel/mempool.c **** }
 694                             		.loc 5 186 1
 695 03bf EF 51                   		mov.L	r5, r1
 696 03c1 3F AA 06                		rtsd	#24, r10-r10
 697                             	.LFE39:
 699                             		.global	_knl_mpl_wakeup
 701                             	_knl_mpl_wakeup:
 702                             	.LFB40:
 187:../kernel/tkernel/mempool.c **** 
 188:../kernel/tkernel/mempool.c **** /* ------------------------------------------------------------------------ */
 189:../kernel/tkernel/mempool.c **** 
 190:../kernel/tkernel/mempool.c **** /*
 191:../kernel/tkernel/mempool.c ****  * Allocate memory and release wait task,
 192:../kernel/tkernel/mempool.c ****  * as long as there are enough free memory.
 193:../kernel/tkernel/mempool.c ****  */
 194:../kernel/tkernel/mempool.c **** EXPORT void knl_mpl_wakeup( MPLCB *mplcb )
 195:../kernel/tkernel/mempool.c **** {
 703                             		.loc 5 195 1
 704 03c4 7E AA                   		push.l	r10
 705                             	.LCFI22:
 706 03c6 71 0A F0                		add	#-16, r0, r10
 707                             	.LCFI23:
 708 03c9 EF A0                   		mov.L	r10, r0
 709 03cb E7 A1 03                		mov.L	r1, 12[r10]
 196:../kernel/tkernel/mempool.c **** 	TCB	*top;
 197:../kernel/tkernel/mempool.c **** 	void	*blk;
 198:../kernel/tkernel/mempool.c **** 	W	blksz;
 199:../kernel/tkernel/mempool.c **** 
 200:../kernel/tkernel/mempool.c **** 	while ( !isQueEmpty(&mplcb->wait_queue) ) {
 710                             		.loc 5 200 8
 711 03ce 2E 3A                   		bra	.L48
 712                             	.L51:
 201:../kernel/tkernel/mempool.c **** 		top = (TCB*)mplcb->wait_queue.next;
 713                             		.loc 5 201 7
 714 03d0 ED A5 03                		mov.L	12[r10], r5
 715 03d3 EC 55                   		mov.L	[r5], r5
 716 03d5 E3 A5                   		mov.L	r5, [r10]
 202:../kernel/tkernel/mempool.c **** 		blksz = top->winfo.mpl.blksz;
 717                             		.loc 5 202 9
 718 03d7 EC A5                   		mov.L	[r10], r5
 719 03d9 AC 55                   		mov.L	64[r5], r5
 720 03db E7 A5 01                		mov.L	r5, 4[r10]
 203:../kernel/tkernel/mempool.c **** 
 204:../kernel/tkernel/mempool.c **** 		/* Check free space */
 205:../kernel/tkernel/mempool.c **** 		if ( blksz > knl_MaxFreeSize(mplcb) ) {
 721                             		.loc 5 205 16
 722 03de ED A1 03                		mov.L	12[r10], r1
 723 03e1 39 F2 FC                		bsr	_knl_MaxFreeSize
 724 03e4 EF 15                   		mov.L	r1, r5
 725                             		.loc 5 205 6
 726 03e6 ED A4 01                		mov.L	4[r10], r4
 727 03e9 47 54                   		cmp	r5, r4
 728 03eb 2A 2D                   		bgt	.L52
 206:../kernel/tkernel/mempool.c **** 			break;
 207:../kernel/tkernel/mempool.c **** 		}
 208:../kernel/tkernel/mempool.c **** 
 209:../kernel/tkernel/mempool.c **** 		/* Get memory block */
 210:../kernel/tkernel/mempool.c **** 		blk = knl_get_blk(mplcb, blksz);
 729                             		.loc 5 210 9
 730 03ed ED A2 01                		mov.L	4[r10], r2
 731 03f0 ED A1 03                		mov.L	12[r10], r1
 732 03f3 39 46 FE                		bsr	_knl_get_blk
 733 03f6 E7 A1 02                		mov.L	r1, 8[r10]
 211:../kernel/tkernel/mempool.c **** 		*top->winfo.mpl.p_blk = blk;
 734                             		.loc 5 211 18
 735 03f9 EC A5                   		mov.L	[r10], r5
 736 03fb AC 5D                   		mov.L	68[r5], r5
 737                             		.loc 5 211 25
 738 03fd ED A4 02                		mov.L	8[r10], r4
 739 0400 E3 54                   		mov.L	r4, [r5]
 212:../kernel/tkernel/mempool.c **** 
 213:../kernel/tkernel/mempool.c **** 		/* Release wait task */
 214:../kernel/tkernel/mempool.c **** 		knl_wait_release_ok(top);
 740                             		.loc 5 214 3
 741 0402 EC A1                   		mov.L	[r10], r1
 742 0404 05 00 00 00             		bsr	_knl_wait_release_ok
 743                             	.L48:
 200:../kernel/tkernel/mempool.c **** 		top = (TCB*)mplcb->wait_queue.next;
 744                             		.loc 5 200 11
 745 0408 ED A5 03                		mov.L	12[r10], r5
 746 040b EF 51                   		mov.L	r5, r1
 747 040d 39 0C FC                		bsr	_isQueEmpty
 748 0410 EF 15                   		mov.L	r1, r5
 200:../kernel/tkernel/mempool.c **** 		top = (TCB*)mplcb->wait_queue.next;
 749                             		.loc 5 200 8
 750 0412 61 05                   		cmp	#0, r5
 751 0414 20 BC                   		beq	.L51
 215:../kernel/tkernel/mempool.c **** 	}
 216:../kernel/tkernel/mempool.c **** }
 752                             		.loc 5 216 1
 753 0416 2E 03                   		bra	.L50
 754                             	.L52:
 206:../kernel/tkernel/mempool.c **** 		}
 755                             		.loc 5 206 4
 756 0418 03                      		nop
 757                             	.L50:
 758                             		.loc 5 216 1
 759 0419 03                      		nop
 760 041a 3F AA 05                		rtsd	#20, r10-r10
 761                             	.LFE40:
 764                             	_init_mempool:
 765                             	.LFB41:
 217:../kernel/tkernel/mempool.c **** 
 218:../kernel/tkernel/mempool.c **** 
 219:../kernel/tkernel/mempool.c **** /*
 220:../kernel/tkernel/mempool.c ****  * Memory pool initial setting
 221:../kernel/tkernel/mempool.c ****  */
 222:../kernel/tkernel/mempool.c **** LOCAL void init_mempool( MPLCB *mplcb )
 223:../kernel/tkernel/mempool.c **** {
 766                             		.loc 5 223 1
 767 041d 7E AA                   		push.l	r10
 768                             	.LCFI24:
 769 041f 71 0A FC                		add	#-4, r0, r10
 770                             	.LCFI25:
 771 0422 EF A0                   		mov.L	r10, r0
 772 0424 E3 A1                   		mov.L	r1, [r10]
 224:../kernel/tkernel/mempool.c **** 	QueInit(&mplcb->areaque);
 773                             		.loc 5 224 2
 774 0426 EC A5                   		mov.L	[r10], r5
 775 0428 71 55 18                		add	#24, r5
 776 042b EF 51                   		mov.L	r5, r1
 777 042d 39 D3 FB                		bsr	_QueInit
 225:../kernel/tkernel/mempool.c **** 	QueInit(&mplcb->freeque);
 778                             		.loc 5 225 2
 779 0430 EC A5                   		mov.L	[r10], r5
 780 0432 71 55 20                		add	#32, r5
 781 0435 EF 51                   		mov.L	r5, r1
 782 0437 39 C9 FB                		bsr	_QueInit
 226:../kernel/tkernel/mempool.c **** 
 227:../kernel/tkernel/mempool.c **** 	/* Register onto AreaQue */
 228:../kernel/tkernel/mempool.c **** 	knl_insertAreaQue(&mplcb->areaque, &mplcb->areaque_end);
 783                             		.loc 5 228 2
 784 043a EC A5                   		mov.L	[r10], r5
 785 043c 71 54 18                		add	#24, r5, r4
 786 043f EC A5                   		mov.L	[r10], r5
 787 0441 71 55 28                		add	#40, r5
 788 0444 EF 52                   		mov.L	r5, r2
 789 0446 EF 41                   		mov.L	r4, r1
 790 0448 05 00 00 00             		bsr	_knl_insertAreaQue
 229:../kernel/tkernel/mempool.c **** 
 230:../kernel/tkernel/mempool.c **** 	/* Set AREA_USE for locations that must not be free area */
 231:../kernel/tkernel/mempool.c **** 	setAreaFlag(&mplcb->areaque_end, AREA_USE);
 791                             		.loc 5 231 2
 792 044c EC A5                   		mov.L	[r10], r5
 793 044e AA DD                   		mov.L	44[r5], r5
 794 0450 65 15                   		or	#1, r5
 795 0452 EF 54                   		mov.L	r5, r4
 796 0454 EC A5                   		mov.L	[r10], r5
 797 0456 A2 DC                   		mov.L	r4, 44[r5]
 232:../kernel/tkernel/mempool.c **** 
 233:../kernel/tkernel/mempool.c **** 	/* Register onto FreeQue */
 234:../kernel/tkernel/mempool.c **** 	knl_appendFreeAreaBound(mplcb, &mplcb->areaque);
 798                             		.loc 5 234 2
 799 0458 EC A5                   		mov.L	[r10], r5
 800 045a 71 55 18                		add	#24, r5
 801 045d EF 52                   		mov.L	r5, r2
 802 045f EC A1                   		mov.L	[r10], r1
 803 0461 39 E2 FC                		bsr	_knl_appendFreeAreaBound
 235:../kernel/tkernel/mempool.c **** }
 804                             		.loc 5 235 1
 805 0464 03                      		nop
 806 0465 3F AA 02                		rtsd	#8, r10-r10
 807                             	.LFE41:
 809                             		.global	_tk_cre_mpl
 811                             	_tk_cre_mpl:
 812                             	.LFB42:
 236:../kernel/tkernel/mempool.c **** 
 237:../kernel/tkernel/mempool.c **** /*
 238:../kernel/tkernel/mempool.c ****  * Create variable size memory pool 
 239:../kernel/tkernel/mempool.c ****  */
 240:../kernel/tkernel/mempool.c **** SYSCALL ID tk_cre_mpl( CONST T_CMPL *pk_cmpl )
 241:../kernel/tkernel/mempool.c **** {
 813                             		.loc 5 241 1
 814 0468 6E 7A                   		pushm	r7-r10
 815                             	.LCFI26:
 816 046a 71 0A E0                		add	#-32, r0, r10
 817                             	.LCFI27:
 818 046d EF A0                   		mov.L	r10, r0
 819 046f E7 A1 07                		mov.L	r1, 28[r10]
 242:../kernel/tkernel/mempool.c **** #if CHK_RSATR
 243:../kernel/tkernel/mempool.c **** 	const ATR VALID_MPLATR = {
 820                             		.loc 5 243 12
 821 0472 F9 AA 02 21 03          		mov.L	#0x321, 8[r10]
 244:../kernel/tkernel/mempool.c **** 		 TA_TPRI
 245:../kernel/tkernel/mempool.c **** 		|TA_RNG3
 246:../kernel/tkernel/mempool.c **** 		|TA_USERBUF
 247:../kernel/tkernel/mempool.c **** #if USE_OBJECT_NAME
 248:../kernel/tkernel/mempool.c **** 		|TA_DSNAME
 249:../kernel/tkernel/mempool.c **** #endif
 250:../kernel/tkernel/mempool.c **** 	};
 251:../kernel/tkernel/mempool.c **** #endif
 252:../kernel/tkernel/mempool.c **** 	MPLCB	*mplcb;
 253:../kernel/tkernel/mempool.c **** 	ID	mplid;
 254:../kernel/tkernel/mempool.c **** 	W	mplsz;
 255:../kernel/tkernel/mempool.c **** 	void	*mempool;
 256:../kernel/tkernel/mempool.c **** 	ER	ercd;
 257:../kernel/tkernel/mempool.c **** 
 258:../kernel/tkernel/mempool.c **** 	CHECK_RSATR(pk_cmpl->mplatr, VALID_MPLATR);
 822                             		.loc 5 258 2
 823 0477 ED A5 07                		mov.L	28[r10], r5
 824 047a A8 5C                   		mov.L	4[r5], r4
 825 047c ED A5 02                		mov.L	8[r10], r5
 826 047f 7E 05                   		not	r5
 827 0481 53 45                   		and	r4, r5
 828 0483 61 05                   		cmp	#0, r5
 829 0485 17                      		beq	.L55
 830                             		.loc 5 258 2 is_stmt 0 discriminator 1
 831 0486 FB 56 F5                		mov.L	#-11, r5
 832 0489 38 62 01                		bra	.L56
 833                             	.L55:
 259:../kernel/tkernel/mempool.c **** 	CHECK_PAR(pk_cmpl->mplsz > 0 && pk_cmpl->mplsz <= MAX_ALLOCATE);
 834                             		.loc 5 259 2 is_stmt 1
 835 048c ED A5 07                		mov.L	28[r10], r5
 836 048f A8 D5                   		mov.L	8[r5], r5
 837 0491 61 05                   		cmp	#0, r5
 838 0493 2B 0F                   		ble	.L57
 839                             		.loc 5 259 2 is_stmt 0 discriminator 2
 840 0495 ED A5 07                		mov.L	28[r10], r5
 841 0498 A8 D5                   		mov.L	8[r5], r5
 842 049a 74 05 F8 FF FF 7F       		cmp	#0x7ffffff8, r5
 843 04a0 25 08                   		bleu	.L58
 844                             	.L57:
 845                             		.loc 5 259 2 discriminator 3
 846 04a2 FB 56 EF                		mov.L	#-17, r5
 847 04a5 38 46 01                		bra	.L56
 848                             	.L58:
 260:../kernel/tkernel/mempool.c **** #if !USE_IMALLOC
 261:../kernel/tkernel/mempool.c **** 	/* TA_USERBUF must be specified if configured in no Imalloc */
 262:../kernel/tkernel/mempool.c **** 	CHECK_PAR((pk_cmpl->mplatr & TA_USERBUF) != 0);
 263:../kernel/tkernel/mempool.c **** #endif
 264:../kernel/tkernel/mempool.c **** 	CHECK_DISPATCH();
 849                             		.loc 5 264 2 is_stmt 1
 850 04a8 FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 851 04ae EC 55                   		mov.L	[r5], r5
 852 04b0 61 05                   		cmp	#0, r5
 853 04b2 21 21                   		bne	.L59
 854                             		.loc 5 264 2 is_stmt 0 discriminator 2
 855 04b4 39 E9 FB                		bsr	_knl_isTaskIndependent
 856 04b7 EF 15                   		mov.L	r1, r5
 857 04b9 61 05                   		cmp	#0, r5
 858 04bb 21 18                   		bne	.L59
 859                             		.loc 5 264 2 discriminator 4
 860 04bd FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 861 04c3 EC 55                   		mov.L	[r5], r5
 862 04c5 61 05                   		cmp	#0, r5
 863 04c7 20 0C                   		beq	.L59
 864                             		.loc 5 264 2 discriminator 6
 865 04c9 05 00 00 00             		bsr	_GetCpuIntLevel
 866 04cd EF 15                   		mov.L	r1, r5
 867 04cf 75 55 10                		cmp	#16, r5
 868 04d2 1F                      		bne	.L60
 869                             		.balign 8,3,2
 870                             	.L59:
 871                             		.loc 5 264 2 discriminator 7
 872 04d3 FB 56 E7                		mov.L	#-25, r5
 873 04d6 38 15 01                		bra	.L56
 874                             	.L60:
 265:../kernel/tkernel/mempool.c **** 
 266:../kernel/tkernel/mempool.c **** 	mplsz = roundSize(pk_cmpl->mplsz);
 875                             		.loc 5 266 10 is_stmt 1
 876 04d9 ED A5 07                		mov.L	28[r10], r5
 877 04dc A8 D5                   		mov.L	8[r5], r5
 878 04de EF 51                   		mov.L	r5, r1
 879 04e0 39 D5 FB                		bsr	_roundSize
 880 04e3 E7 A1 03                		mov.L	r1, 12[r10]
 267:../kernel/tkernel/mempool.c **** 
 268:../kernel/tkernel/mempool.c **** #if USE_IMALLOC
 269:../kernel/tkernel/mempool.c **** 	if ( (pk_cmpl->mplatr & TA_USERBUF) != 0 ) {
 881                             		.loc 5 269 15
 882 04e6 ED A5 07                		mov.L	28[r10], r5
 883 04e9 A8 5D                   		mov.L	4[r5], r5
 884                             		.loc 5 269 24
 885 04eb 75 25 20                		and	#32, r5
 886                             		.loc 5 269 5
 887 04ee 61 05                   		cmp	#0, r5
 888 04f0 20 1C                   		beq	.L61
 270:../kernel/tkernel/mempool.c **** 		/* Size of user buffer must be multiples of sizeof(QUEUE)
 271:../kernel/tkernel/mempool.c **** 			and larger than sizeof(QUEUE)*2 */
 272:../kernel/tkernel/mempool.c **** 		if ( mplsz != pk_cmpl->mplsz ) {
 889                             		.loc 5 272 24
 890 04f2 ED A5 07                		mov.L	28[r10], r5
 891 04f5 A8 D5                   		mov.L	8[r5], r5
 892                             		.loc 5 272 6
 893 04f7 ED A4 03                		mov.L	12[r10], r4
 894 04fa 47 54                   		cmp	r5, r4
 895 04fc 17                      		beq	.L62
 273:../kernel/tkernel/mempool.c **** 			return E_PAR;
 896                             		.loc 5 273 11
 897 04fd FB 56 EF                		mov.L	#-17, r5
 898 0500 38 EB 00                		bra	.L56
 899                             	.L62:
 274:../kernel/tkernel/mempool.c **** 		}
 275:../kernel/tkernel/mempool.c **** 		/* Use user buffer */
 276:../kernel/tkernel/mempool.c **** 		mempool = pk_cmpl->bufptr;
 900                             		.loc 5 276 11
 901 0503 ED A5 07                		mov.L	28[r10], r5
 902 0506 A8 DD                   		mov.L	12[r5], r5
 903 0508 E3 A5                   		mov.L	r5, [r10]
 904 050a 2E 16                   		bra	.L63
 905                             	.L61:
 277:../kernel/tkernel/mempool.c **** 	} else {
 278:../kernel/tkernel/mempool.c **** 		/* Allocate memory for memory pool */
 279:../kernel/tkernel/mempool.c **** 		mempool = knl_Imalloc((UW)mplsz);
 906                             		.loc 5 279 13
 907 050c ED A1 03                		mov.L	12[r10], r1
 908 050f 05 00 00 00             		bsr	_knl_Imalloc
 909 0513 E3 A1                   		mov.L	r1, [r10]
 280:../kernel/tkernel/mempool.c **** 		if ( mempool == NULL ) {
 910                             		.loc 5 280 6
 911 0515 EC A5                   		mov.L	[r10], r5
 912 0517 61 05                   		cmp	#0, r5
 913 0519 1F                      		bne	.L63
 281:../kernel/tkernel/mempool.c **** 			return E_NOMEM;
 914                             		.loc 5 281 11
 915 051a FB 56 DF                		mov.L	#-33, r5
 916 051d 38 CE 00                		bra	.L56
 917                             	.L63:
 918                             	.LBB3:
 282:../kernel/tkernel/mempool.c **** 		}
 283:../kernel/tkernel/mempool.c **** 	}
 284:../kernel/tkernel/mempool.c **** #else
 285:../kernel/tkernel/mempool.c **** 	/* Size of user buffer must be multiples of sizeof(QUEUE)
 286:../kernel/tkernel/mempool.c **** 		and larger than sizeof(QUEUE)*2 */
 287:../kernel/tkernel/mempool.c **** 	if ( mplsz != pk_cmpl->mplsz ) {
 288:../kernel/tkernel/mempool.c **** 		return E_PAR;
 289:../kernel/tkernel/mempool.c **** 	}
 290:../kernel/tkernel/mempool.c **** 	/* Use user buffer */
 291:../kernel/tkernel/mempool.c **** 	mempool = pk_cmpl->bufptr;
 292:../kernel/tkernel/mempool.c **** #endif
 293:../kernel/tkernel/mempool.c **** 
 294:../kernel/tkernel/mempool.c **** 	BEGIN_CRITICAL_SECTION;
 919                             		.loc 5 294 2
 920 0520 05 00 00 00             		bsr	_disint
 921 0524 E7 A1 04                		mov.L	r1, 16[r10]
 295:../kernel/tkernel/mempool.c **** 	/* Get control block from FreeQue */
 296:../kernel/tkernel/mempool.c **** 	mplcb = (MPLCB*)QueRemoveNext(&knl_free_mplcb);
 922                             		.loc 5 296 18
 923 0527 FB 12 00 00 00 00       		mov.L	#_knl_free_mplcb, r1
 924 052d 39 37 FB                		bsr	_QueRemoveNext
 925 0530 E7 A1 05                		mov.L	r1, 20[r10]
 297:../kernel/tkernel/mempool.c **** 	if ( mplcb == NULL ) {
 926                             		.loc 5 297 5
 927 0533 ED A5 05                		mov.L	20[r10], r5
 928 0536 61 05                   		cmp	#0, r5
 929 0538 1F                      		bne	.L64
 298:../kernel/tkernel/mempool.c **** 		ercd = E_LIMIT;
 930                             		.loc 5 298 8
 931 0539 F9 A6 01 DE             		mov.L	#-34, 4[r10]
 932 053d 2E 59                   		bra	.L65
 933                             	.L64:
 299:../kernel/tkernel/mempool.c **** 	} else {
 300:../kernel/tkernel/mempool.c **** 		mplid = ID_MPL(mplcb - knl_mplcb_table);
 934                             		.loc 5 300 11
 935 053f ED A5 05                		mov.L	20[r10], r5
 936 0542 FB 72 00 00 00 00       		mov.L	#_knl_mplcb_table, r7
 937 0548 43 75                   		sub	r7, r5
 938 054a 6A 25                   		shar	#2, r5
 939 054c 74 15 C5 4E EC C4       		mul	#-991146299, r5
 940                             		.loc 5 300 9
 941 0552 62 15                   		add	#1, r5
 942 0554 E7 A5 06                		mov.L	r5, 24[r10]
 301:../kernel/tkernel/mempool.c **** 
 302:../kernel/tkernel/mempool.c **** 		/* Initialize control block */
 303:../kernel/tkernel/mempool.c **** 		QueInit(&mplcb->wait_queue);
 943                             		.loc 5 303 3
 944 0557 ED A5 05                		mov.L	20[r10], r5
 945 055a EF 51                   		mov.L	r5, r1
 946 055c 39 A4 FA                		bsr	_QueInit
 304:../kernel/tkernel/mempool.c **** 		mplcb->mplid  = mplid;
 947                             		.loc 5 304 17
 948 055f ED A5 05                		mov.L	20[r10], r5
 949 0562 ED A4 06                		mov.L	24[r10], r4
 950 0565 A0 D4                   		mov.L	r4, 8[r5]
 305:../kernel/tkernel/mempool.c **** 		mplcb->exinf  = pk_cmpl->exinf;
 951                             		.loc 5 305 26
 952 0567 ED A5 07                		mov.L	28[r10], r5
 953 056a EC 54                   		mov.L	[r5], r4
 954                             		.loc 5 305 17
 955 056c ED A5 05                		mov.L	20[r10], r5
 956 056f A0 DC                   		mov.L	r4, 12[r5]
 306:../kernel/tkernel/mempool.c **** 		mplcb->mplatr = pk_cmpl->mplatr;
 957                             		.loc 5 306 26
 958 0571 ED A5 07                		mov.L	28[r10], r5
 959 0574 A8 5C                   		mov.L	4[r5], r4
 960                             		.loc 5 306 17
 961 0576 ED A5 05                		mov.L	20[r10], r5
 962 0579 A1 54                   		mov.L	r4, 16[r5]
 307:../kernel/tkernel/mempool.c **** 		mplcb->mplsz  = mplsz;
 963                             		.loc 5 307 17
 964 057b ED A5 05                		mov.L	20[r10], r5
 965 057e ED A4 03                		mov.L	12[r10], r4
 966 0581 A1 5C                   		mov.L	r4, 20[r5]
 308:../kernel/tkernel/mempool.c **** #if USE_OBJECT_NAME
 309:../kernel/tkernel/mempool.c **** 		if ( (pk_cmpl->mplatr & TA_DSNAME) != 0 ) {
 310:../kernel/tkernel/mempool.c **** 			knl_strncpy((char*)mplcb->name, (char*)pk_cmpl->dsname, OBJECT_NAME_LENGTH);
 311:../kernel/tkernel/mempool.c **** 		}
 312:../kernel/tkernel/mempool.c **** #endif
 313:../kernel/tkernel/mempool.c **** 
 314:../kernel/tkernel/mempool.c **** 		mplcb->mempool = mempool;
 967                             		.loc 5 314 18
 968 0583 ED A5 05                		mov.L	20[r10], r5
 969 0586 EC A4                   		mov.L	[r10], r4
 970 0588 A3 54                   		mov.L	r4, 48[r5]
 315:../kernel/tkernel/mempool.c **** 
 316:../kernel/tkernel/mempool.c **** 		/* Initialize memory pool */
 317:../kernel/tkernel/mempool.c **** 		init_mempool(mplcb);
 971                             		.loc 5 317 3
 972 058a ED A1 05                		mov.L	20[r10], r1
 973 058d 39 90 FE                		bsr	_init_mempool
 318:../kernel/tkernel/mempool.c **** 
 319:../kernel/tkernel/mempool.c **** 		ercd = mplid;
 974                             		.loc 5 319 8
 975 0590 ED A5 06                		mov.L	24[r10], r5
 976 0593 E7 A5 01                		mov.L	r5, 4[r10]
 977                             	.L65:
 320:../kernel/tkernel/mempool.c **** 	}
 321:../kernel/tkernel/mempool.c **** 	END_CRITICAL_SECTION;
 978                             		.loc 5 321 2
 979 0596 ED A5 04                		mov.L	16[r10], r5
 980 0599 61 F5                   		cmp	#15, r5
 981 059b 20 2E                   		beq	.L66
 982                             		.loc 5 321 2 is_stmt 0 discriminator 1
 983 059d FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 984 05a3 EC 54                   		mov.L	[r5], r4
 985 05a5 FB 52 00 00 00 00       		mov.L	#_knl_schedtsk, r5
 986 05ab EC 55                   		mov.L	[r5], r5
 987 05ad 47 54                   		cmp	r5, r4
 988 05af 20 1A                   		beq	.L66
 989                             		.loc 5 321 2 discriminator 3
 990 05b1 39 EC FA                		bsr	_knl_isTaskIndependent
 991 05b4 EF 15                   		mov.L	r1, r5
 992 05b6 61 05                   		cmp	#0, r5
 993 05b8 21 11                   		bne	.L66
 994                             		.loc 5 321 2 discriminator 5
 995 05ba FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 996 05c0 EC 55                   		mov.L	[r5], r5
 997 05c2 61 05                   		cmp	#0, r5
 998 05c4 1D                      		bne	.L66
 999                             		.loc 5 321 2 discriminator 7
 1000 05c5 05 00 00 00             		bsr	_knl_dispatch
 1001                             		.balign 8,3,1
 1002                             	.L66:
 1003                             		.loc 5 321 2 discriminator 9
 1004 05c9 ED A1 04                		mov.L	16[r10], r1
 1005 05cc 05 00 00 00             		bsr	_setint
 1006                             	.LBE3:
 322:../kernel/tkernel/mempool.c **** 
 323:../kernel/tkernel/mempool.c **** #if USE_IMALLOC
 324:../kernel/tkernel/mempool.c **** 	if ( (ercd < E_OK) && ((pk_cmpl->mplatr & TA_USERBUF) == 0) ) {
 1007                             		.loc 5 324 5 is_stmt 1 discriminator 9
 1008 05d0 ED A5 01                		mov.L	4[r10], r5
 1009 05d3 61 05                   		cmp	#0, r5
 1010 05d5 28 13                   		bge	.L67
 1011                             		.loc 5 324 33 discriminator 1
 1012 05d7 ED A5 07                		mov.L	28[r10], r5
 1013 05da A8 5D                   		mov.L	4[r5], r5
 1014                             		.loc 5 324 42 discriminator 1
 1015 05dc 75 25 20                		and	#32, r5
 1016                             		.loc 5 324 21 discriminator 1
 1017 05df 61 05                   		cmp	#0, r5
 1018 05e1 1F                      		bne	.L67
 325:../kernel/tkernel/mempool.c **** 		knl_Ifree(mempool);
 1019                             		.loc 5 325 3
 1020 05e2 EC A1                   		mov.L	[r10], r1
 1021 05e4 05 00 00 00             		bsr	_knl_Ifree
 1022                             	.L67:
 326:../kernel/tkernel/mempool.c **** 	}
 327:../kernel/tkernel/mempool.c **** #endif
 328:../kernel/tkernel/mempool.c **** 
 329:../kernel/tkernel/mempool.c **** 	return ercd;
 1023                             		.loc 5 329 9
 1024 05e8 ED A5 01                		mov.L	4[r10], r5
 1025                             		.balign 8,3,1
 1026                             	.L56:
 330:../kernel/tkernel/mempool.c **** }
 1027                             		.loc 5 330 1
 1028 05eb EF 51                   		mov.L	r5, r1
 1029 05ed 3F 7A 0C                		rtsd	#48, r7-r10
 1030                             	.LFE42:
 1032                             		.global	_tk_del_mpl
 1034                             	_tk_del_mpl:
 1035                             	.LFB43:
 331:../kernel/tkernel/mempool.c **** 
 332:../kernel/tkernel/mempool.c **** #ifdef USE_FUNC_TK_DEL_MPL
 333:../kernel/tkernel/mempool.c **** /*
 334:../kernel/tkernel/mempool.c ****  * Delete variable size memory pool 
 335:../kernel/tkernel/mempool.c ****  */
 336:../kernel/tkernel/mempool.c **** SYSCALL ER tk_del_mpl( ID mplid )
 337:../kernel/tkernel/mempool.c **** {
 1036                             		.loc 5 337 1
 1037 05f0 7E AA                   		push.l	r10
 1038                             	.LCFI28:
 1039 05f2 71 0A E8                		add	#-24, r0, r10
 1040                             	.LCFI29:
 1041 05f5 EF A0                   		mov.L	r10, r0
 1042 05f7 E7 A1 05                		mov.L	r1, 20[r10]
 338:../kernel/tkernel/mempool.c **** 	MPLCB	*mplcb;
 339:../kernel/tkernel/mempool.c **** 	void	*mempool = NULL;
 1043                             		.loc 5 339 8
 1044 05fa F8 A6 00                		mov.L	#0, [r10]
 340:../kernel/tkernel/mempool.c **** 	ATR	memattr = 0;
 1045                             		.loc 5 340 6
 1046 05fd F9 A6 01 00             		mov.L	#0, 4[r10]
 341:../kernel/tkernel/mempool.c **** 	ER	ercd = E_OK;
 1047                             		.loc 5 341 5
 1048 0601 F9 A6 02 00             		mov.L	#0, 8[r10]
 342:../kernel/tkernel/mempool.c **** 
 343:../kernel/tkernel/mempool.c **** 	CHECK_MPLID(mplid);
 1049                             		.loc 5 343 2
 1050 0605 ED A5 05                		mov.L	20[r10], r5
 1051 0608 61 05                   		cmp	#0, r5
 1052 060a 2B 09                   		ble	.L69
 1053                             		.loc 5 343 2 is_stmt 0 discriminator 2
 1054 060c ED A5 05                		mov.L	20[r10], r5
 1055 060f 61 45                   		cmp	#4, r5
 1056 0611 2B 08                   		ble	.L70
 1057                             	.L69:
 1058                             		.loc 5 343 2 discriminator 3
 1059 0613 FB 56 EE                		mov.L	#-18, r5
 1060 0616 38 DA 00                		bra	.L71
 1061                             	.L70:
 344:../kernel/tkernel/mempool.c **** 	CHECK_DISPATCH();
 1062                             		.loc 5 344 2 is_stmt 1
 1063 0619 FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 1064 061f EC 55                   		mov.L	[r5], r5
 1065 0621 61 05                   		cmp	#0, r5
 1066 0623 21 21                   		bne	.L72
 1067                             		.loc 5 344 2 is_stmt 0 discriminator 2
 1068 0625 39 78 FA                		bsr	_knl_isTaskIndependent
 1069 0628 EF 15                   		mov.L	r1, r5
 1070 062a 61 05                   		cmp	#0, r5
 1071 062c 21 18                   		bne	.L72
 1072                             		.loc 5 344 2 discriminator 4
 1073 062e FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1074 0634 EC 55                   		mov.L	[r5], r5
 1075 0636 61 05                   		cmp	#0, r5
 1076 0638 20 0C                   		beq	.L72
 1077                             		.loc 5 344 2 discriminator 6
 1078 063a 05 00 00 00             		bsr	_GetCpuIntLevel
 1079 063e EF 15                   		mov.L	r1, r5
 1080 0640 75 55 10                		cmp	#16, r5
 1081 0643 1F                      		bne	.L73
 1082                             		.balign 8,3,2
 1083                             	.L72:
 1084                             		.loc 5 344 2 discriminator 7
 1085 0644 FB 56 E7                		mov.L	#-25, r5
 1086 0647 38 A9 00                		bra	.L71
 1087                             	.L73:
 345:../kernel/tkernel/mempool.c **** 
 346:../kernel/tkernel/mempool.c **** 	mplcb = get_mplcb(mplid);
 1088                             		.loc 5 346 10 is_stmt 1
 1089 064a ED A5 05                		mov.L	20[r10], r5
 1090 064d 60 15                   		sub	#1, r5
 1091                             		.loc 5 346 8
 1092 064f 75 15 34                		mul	#52, r5
 1093 0652 70 55 00 00 00 00       		add	#_knl_mplcb_table, r5
 1094 0658 E7 A5 03                		mov.L	r5, 12[r10]
 1095                             	.LBB4:
 347:../kernel/tkernel/mempool.c **** 
 348:../kernel/tkernel/mempool.c **** 	BEGIN_CRITICAL_SECTION;
 1096                             		.loc 5 348 2
 1097 065b 05 00 00 00             		bsr	_disint
 1098 065f E7 A1 04                		mov.L	r1, 16[r10]
 349:../kernel/tkernel/mempool.c **** 	if ( mplcb->mplid == 0 ) {
 1099                             		.loc 5 349 12
 1100 0662 ED A5 03                		mov.L	12[r10], r5
 1101 0665 A8 D5                   		mov.L	8[r5], r5
 1102                             		.loc 5 349 5
 1103 0667 61 05                   		cmp	#0, r5
 1104 0669 1F                      		bne	.L74
 350:../kernel/tkernel/mempool.c **** 		ercd = E_NOEXS;
 1105                             		.loc 5 350 8
 1106 066a F9 A6 02 D6             		mov.L	#-42, 8[r10]
 1107 066e 2E 2E                   		bra	.L75
 1108                             	.L74:
 351:../kernel/tkernel/mempool.c **** 	} else {
 352:../kernel/tkernel/mempool.c **** 		mempool = mplcb->mempool;
 1109                             		.loc 5 352 11
 1110 0670 ED A5 03                		mov.L	12[r10], r5
 1111 0673 AB 55                   		mov.L	48[r5], r5
 1112 0675 E3 A5                   		mov.L	r5, [r10]
 353:../kernel/tkernel/mempool.c **** 		memattr = mplcb->mplatr;
 1113                             		.loc 5 353 11
 1114 0677 ED A5 03                		mov.L	12[r10], r5
 1115 067a A9 55                   		mov.L	16[r5], r5
 1116 067c E7 A5 01                		mov.L	r5, 4[r10]
 354:../kernel/tkernel/mempool.c **** 
 355:../kernel/tkernel/mempool.c **** 		/* Free wait state of task (E_DLT) */
 356:../kernel/tkernel/mempool.c **** 		knl_wait_delete(&mplcb->wait_queue);
 1117                             		.loc 5 356 3
 1118 067f ED A5 03                		mov.L	12[r10], r5
 1119 0682 EF 51                   		mov.L	r5, r1
 1120 0684 05 00 00 00             		bsr	_knl_wait_delete
 357:../kernel/tkernel/mempool.c **** 
 358:../kernel/tkernel/mempool.c **** 		/* Return to FreeQue */
 359:../kernel/tkernel/mempool.c **** 		QueInsert(&mplcb->wait_queue, &knl_free_mplcb);
 1121                             		.loc 5 359 3
 1122 0688 ED A5 03                		mov.L	12[r10], r5
 1123 068b FB 22 00 00 00 00       		mov.L	#_knl_free_mplcb, r2
 1124 0691 EF 51                   		mov.L	r5, r1
 1125 0693 39 A1 F9                		bsr	_QueInsert
 360:../kernel/tkernel/mempool.c **** 		mplcb->mplid = 0;
 1126                             		.loc 5 360 16
 1127 0696 ED A5 03                		mov.L	12[r10], r5
 1128 0699 3E 52 00                		mov.L	#0, 8[r5]
 1129                             	.L75:
 361:../kernel/tkernel/mempool.c **** 	}
 362:../kernel/tkernel/mempool.c **** 	END_CRITICAL_SECTION;
 1130                             		.loc 5 362 2
 1131 069c ED A5 04                		mov.L	16[r10], r5
 1132 069f 61 F5                   		cmp	#15, r5
 1133 06a1 20 2F                   		beq	.L76
 1134                             		.loc 5 362 2 is_stmt 0 discriminator 1
 1135 06a3 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1136 06a9 EC 54                   		mov.L	[r5], r4
 1137 06ab FB 52 00 00 00 00       		mov.L	#_knl_schedtsk, r5
 1138 06b1 EC 55                   		mov.L	[r5], r5
 1139 06b3 47 54                   		cmp	r5, r4
 1140 06b5 20 1B                   		beq	.L76
 1141                             		.loc 5 362 2 discriminator 3
 1142 06b7 39 E6 F9                		bsr	_knl_isTaskIndependent
 1143 06ba EF 15                   		mov.L	r1, r5
 1144 06bc 61 05                   		cmp	#0, r5
 1145 06be 21 12                   		bne	.L76
 1146                             		.loc 5 362 2 discriminator 5
 1147 06c0 FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 1148 06c6 EC 55                   		mov.L	[r5], r5
 1149 06c8 61 05                   		cmp	#0, r5
 1150 06ca 1E                      		bne	.L76
 1151                             		.loc 5 362 2 discriminator 7
 1152 06cb 05 00 00 00             		bsr	_knl_dispatch
 1153 06cf 03                      		.balign 8,3,1
 1154                             	.L76:
 1155                             		.loc 5 362 2 discriminator 9
 1156 06d0 ED A1 04                		mov.L	16[r10], r1
 1157 06d3 05 00 00 00             		bsr	_setint
 1158                             	.LBE4:
 363:../kernel/tkernel/mempool.c **** 
 364:../kernel/tkernel/mempool.c **** #if USE_IMALLOC
 365:../kernel/tkernel/mempool.c **** 	if ( (ercd == E_OK) && ((memattr & TA_USERBUF) == 0) ) {
 1159                             		.loc 5 365 5 is_stmt 1 discriminator 9
 1160 06d7 ED A5 02                		mov.L	8[r10], r5
 1161 06da 61 05                   		cmp	#0, r5
 1162 06dc 21 11                   		bne	.L77
 1163                             		.loc 5 365 35 discriminator 1
 1164 06de ED A5 01                		mov.L	4[r10], r5
 1165 06e1 75 25 20                		and	#32, r5
 1166                             		.loc 5 365 22 discriminator 1
 1167 06e4 61 05                   		cmp	#0, r5
 1168 06e6 1F                      		bne	.L77
 366:../kernel/tkernel/mempool.c **** 		knl_Ifree(mempool);
 1169                             		.loc 5 366 3
 1170 06e7 EC A1                   		mov.L	[r10], r1
 1171 06e9 05 00 00 00             		bsr	_knl_Ifree
 1172                             	.L77:
 367:../kernel/tkernel/mempool.c **** 	}
 368:../kernel/tkernel/mempool.c **** #endif
 369:../kernel/tkernel/mempool.c **** 
 370:../kernel/tkernel/mempool.c **** 	return ercd;
 1173                             		.loc 5 370 9
 1174 06ed ED A5 02                		mov.L	8[r10], r5
 1175                             	.L71:
 371:../kernel/tkernel/mempool.c **** }
 1176                             		.loc 5 371 1
 1177 06f0 EF 51                   		mov.L	r5, r1
 1178 06f2 3F AA 07                		rtsd	#28, r10-r10
 1179                             	.LFE43:
 1182                             	_mpl_chg_pri:
 1183                             	.LFB44:
 372:../kernel/tkernel/mempool.c **** #endif /* USE_FUNC_TK_DEL_MPL */
 373:../kernel/tkernel/mempool.c **** 
 374:../kernel/tkernel/mempool.c **** /*
 375:../kernel/tkernel/mempool.c ****  * Processing if the priority of wait task changes.
 376:../kernel/tkernel/mempool.c ****  *	You need to execute with interrupt disable.
 377:../kernel/tkernel/mempool.c ****  */
 378:../kernel/tkernel/mempool.c **** LOCAL void mpl_chg_pri( TCB *tcb, INT oldpri )
 379:../kernel/tkernel/mempool.c **** {
 1184                             		.loc 5 379 1
 1185 06f5 7E AA                   		push.l	r10
 1186                             	.LCFI30:
 1187 06f7 71 0A F4                		add	#-12, r0, r10
 1188                             	.LCFI31:
 1189 06fa EF A0                   		mov.L	r10, r0
 1190 06fc E7 A1 01                		mov.L	r1, 4[r10]
 1191 06ff E7 A2 02                		mov.L	r2, 8[r10]
 380:../kernel/tkernel/mempool.c **** 	MPLCB	*mplcb;
 381:../kernel/tkernel/mempool.c **** 
 382:../kernel/tkernel/mempool.c **** 	mplcb = get_mplcb(tcb->wid);
 1192                             		.loc 5 382 10
 1193 0702 ED A5 01                		mov.L	4[r10], r5
 1194 0705 AB 55                   		mov.L	48[r5], r5
 1195 0707 60 15                   		sub	#1, r5
 1196                             		.loc 5 382 8
 1197 0709 75 15 34                		mul	#52, r5
 1198 070c 70 55 00 00 00 00       		add	#_knl_mplcb_table, r5
 1199 0712 E3 A5                   		mov.L	r5, [r10]
 383:../kernel/tkernel/mempool.c **** 	if ( oldpri >= 0 ) {
 1200                             		.loc 5 383 5
 1201 0714 ED A5 02                		mov.L	8[r10], r5
 1202 0717 61 05                   		cmp	#0, r5
 1203 0719 29 0B                   		blt	.L79
 384:../kernel/tkernel/mempool.c **** 		/* Reorder wait line */
 385:../kernel/tkernel/mempool.c **** 		knl_gcb_change_priority((GCB*)mplcb, tcb);
 1204                             		.loc 5 385 3
 1205 071b ED A2 01                		mov.L	4[r10], r2
 1206 071e EC A1                   		mov.L	[r10], r1
 1207 0720 05 00 00 00             		bsr	_knl_gcb_change_priority
 1208                             	.L79:
 386:../kernel/tkernel/mempool.c **** 	}
 387:../kernel/tkernel/mempool.c **** 
 388:../kernel/tkernel/mempool.c **** 	/* From the new top task of a wait queue, free the assign
 389:../kernel/tkernel/mempool.c **** 	   wait of memory blocks as much as possible. */
 390:../kernel/tkernel/mempool.c **** 	knl_mpl_wakeup(mplcb);
 1209                             		.loc 5 390 2
 1210 0724 EC A1                   		mov.L	[r10], r1
 1211 0726 05 00 00 00             		bsr	_knl_mpl_wakeup
 391:../kernel/tkernel/mempool.c **** }
 1212                             		.loc 5 391 1
 1213 072a 03                      		nop
 1214 072b 3F AA 04                		rtsd	#16, r10-r10
 1215                             	.LFE44:
 1218                             	_mpl_rel_wai:
 1219                             	.LFB45:
 392:../kernel/tkernel/mempool.c **** 
 393:../kernel/tkernel/mempool.c **** /*
 394:../kernel/tkernel/mempool.c ****  * Processing if the wait task is freed
 395:../kernel/tkernel/mempool.c ****  */
 396:../kernel/tkernel/mempool.c **** LOCAL void mpl_rel_wai( TCB *tcb )
 397:../kernel/tkernel/mempool.c **** {
 1220                             		.loc 5 397 1
 1221 072e 7E AA                   		push.l	r10
 1222                             	.LCFI32:
 1223 0730 71 0A FC                		add	#-4, r0, r10
 1224                             	.LCFI33:
 1225 0733 EF A0                   		mov.L	r10, r0
 1226 0735 E3 A1                   		mov.L	r1, [r10]
 398:../kernel/tkernel/mempool.c **** 	mpl_chg_pri(tcb, -1);
 1227                             		.loc 5 398 2
 1228 0737 FB 26 FF                		mov.L	#-1, r2
 1229 073a EC A1                   		mov.L	[r10], r1
 1230 073c 39 B9 FF                		bsr	_mpl_chg_pri
 399:../kernel/tkernel/mempool.c **** }
 1231                             		.loc 5 399 1
 1232 073f 03                      		nop
 1233 0740 3F AA 02                		rtsd	#8, r10-r10
 1234                             	.LFE45:
 1236                             		.section C,"a",@progbits
 1237                             		.p2align 2
 1238                             		.balign 4
 1241                             	_knl_wspec_mpl_tfifo:
 1242 0000 00 40 00 00             		.long	0x4000
 1243 0004 00 00 00 00             		.long	0
 1244 0008 2E 07 00 00             		.long	_mpl_rel_wai
 1245                             		.balign 4
 1248                             	_knl_wspec_mpl_tpri:
 1249 000c 00 40 00 00             		.long	0x4000
 1250 0010 F5 06 00 00             		.long	_mpl_chg_pri
 1251 0014 2E 07 00 00             		.long	_mpl_rel_wai
 1252                             		.section P,"ax"
 1253                             		.global	_tk_get_mpl
 1255                             	_tk_get_mpl:
 1256                             	.LFB46:
 400:../kernel/tkernel/mempool.c **** 
 401:../kernel/tkernel/mempool.c **** /*
 402:../kernel/tkernel/mempool.c ****  * Definition of variable size memory pool wait specification
 403:../kernel/tkernel/mempool.c ****  */
 404:../kernel/tkernel/mempool.c **** LOCAL CONST WSPEC knl_wspec_mpl_tfifo = { TTW_MPL, NULL,        mpl_rel_wai };
 405:../kernel/tkernel/mempool.c **** LOCAL CONST WSPEC knl_wspec_mpl_tpri  = { TTW_MPL, mpl_chg_pri, mpl_rel_wai };
 406:../kernel/tkernel/mempool.c **** 
 407:../kernel/tkernel/mempool.c **** /*
 408:../kernel/tkernel/mempool.c ****  * Get variable size memory block 
 409:../kernel/tkernel/mempool.c ****  */
 410:../kernel/tkernel/mempool.c **** SYSCALL ER tk_get_mpl( ID mplid, SZ blksz, void **p_blk, TMO tmout )
 411:../kernel/tkernel/mempool.c **** {
 1257                             		.loc 5 411 1
 1258 0743 7E AA                   		push.l	r10
 1259                             	.LCFI34:
 1260 0745 71 0A E0                		add	#-32, r0, r10
 1261                             	.LCFI35:
 1262 0748 EF A0                   		mov.L	r10, r0
 1263 074a E7 A1 04                		mov.L	r1, 16[r10]
 1264 074d E7 A2 05                		mov.L	r2, 20[r10]
 1265 0750 E7 A3 06                		mov.L	r3, 24[r10]
 1266 0753 E7 A4 07                		mov.L	r4, 28[r10]
 412:../kernel/tkernel/mempool.c **** 	MPLCB	*mplcb;
 413:../kernel/tkernel/mempool.c **** 	void	*blk = NULL;
 1267                             		.loc 5 413 8
 1268 0756 F8 A6 00                		mov.L	#0, [r10]
 414:../kernel/tkernel/mempool.c **** 	ER	ercd = E_OK;
 1269                             		.loc 5 414 5
 1270 0759 F9 A6 03 00             		mov.L	#0, 12[r10]
 415:../kernel/tkernel/mempool.c **** 
 416:../kernel/tkernel/mempool.c **** 	CHECK_MPLID(mplid);
 1271                             		.loc 5 416 2
 1272 075d ED A5 04                		mov.L	16[r10], r5
 1273 0760 61 05                   		cmp	#0, r5
 1274 0762 2B 09                   		ble	.L82
 1275                             		.loc 5 416 2 is_stmt 0 discriminator 2
 1276 0764 ED A5 04                		mov.L	16[r10], r5
 1277 0767 61 45                   		cmp	#4, r5
 1278 0769 2B 08                   		ble	.L83
 1279                             	.L82:
 1280                             		.loc 5 416 2 discriminator 3
 1281 076b FB 56 EE                		mov.L	#-18, r5
 1282 076e 38 64 01                		bra	.L97
 1283                             	.L83:
 417:../kernel/tkernel/mempool.c **** 	CHECK_PAR(blksz > 0 && blksz <= MAX_ALLOCATE);
 1284                             		.loc 5 417 2 is_stmt 1
 1285 0771 ED A5 05                		mov.L	20[r10], r5
 1286 0774 61 05                   		cmp	#0, r5
 1287 0776 2B 0D                   		ble	.L85
 1288                             		.loc 5 417 2 is_stmt 0 discriminator 2
 1289 0778 ED A5 05                		mov.L	20[r10], r5
 1290 077b 74 05 F8 FF FF 7F       		cmp	#0x7ffffff8, r5
 1291 0781 25 08                   		bleu	.L86
 1292                             	.L85:
 1293                             		.loc 5 417 2 discriminator 3
 1294 0783 FB 56 EF                		mov.L	#-17, r5
 1295 0786 38 4C 01                		bra	.L97
 1296                             	.L86:
 418:../kernel/tkernel/mempool.c **** 	CHECK_TMOUT(tmout);
 1297                             		.loc 5 418 2 is_stmt 1
 1298 0789 ED A5 07                		mov.L	28[r10], r5
 1299 078c 75 05 FF                		cmp	#-1, r5
 1300 078f 28 08                   		bge	.L87
 1301                             		.loc 5 418 2 is_stmt 0 discriminator 1
 1302 0791 FB 56 EF                		mov.L	#-17, r5
 1303 0794 38 3E 01                		bra	.L97
 1304                             	.L87:
 419:../kernel/tkernel/mempool.c **** 	CHECK_DISPATCH();
 1305                             		.loc 5 419 2 is_stmt 1
 1306 0797 FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 1307 079d EC 55                   		mov.L	[r5], r5
 1308 079f 61 05                   		cmp	#0, r5
 1309 07a1 21 21                   		bne	.L88
 1310                             		.loc 5 419 2 is_stmt 0 discriminator 2
 1311 07a3 39 FA F8                		bsr	_knl_isTaskIndependent
 1312 07a6 EF 15                   		mov.L	r1, r5
 1313 07a8 61 05                   		cmp	#0, r5
 1314 07aa 21 18                   		bne	.L88
 1315                             		.loc 5 419 2 discriminator 4
 1316 07ac FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1317 07b2 EC 55                   		mov.L	[r5], r5
 1318 07b4 61 05                   		cmp	#0, r5
 1319 07b6 20 0C                   		beq	.L88
 1320                             		.loc 5 419 2 discriminator 6
 1321 07b8 05 00 00 00             		bsr	_GetCpuIntLevel
 1322 07bc EF 15                   		mov.L	r1, r5
 1323 07be 75 55 10                		cmp	#16, r5
 1324 07c1 1F                      		bne	.L89
 1325                             		.balign 8,3,2
 1326                             	.L88:
 1327                             		.loc 5 419 2 discriminator 7
 1328 07c2 FB 56 E7                		mov.L	#-25, r5
 1329 07c5 38 0D 01                		bra	.L97
 1330                             	.L89:
 420:../kernel/tkernel/mempool.c **** 
 421:../kernel/tkernel/mempool.c **** 	mplcb = get_mplcb(mplid);
 1331                             		.loc 5 421 10 is_stmt 1
 1332 07c8 ED A5 04                		mov.L	16[r10], r5
 1333 07cb 60 15                   		sub	#1, r5
 1334                             		.loc 5 421 8
 1335 07cd 75 15 34                		mul	#52, r5
 1336 07d0 70 55 00 00 00 00       		add	#_knl_mplcb_table, r5
 1337 07d6 E7 A5 01                		mov.L	r5, 4[r10]
 422:../kernel/tkernel/mempool.c **** 	blksz = roundSize(blksz);
 1338                             		.loc 5 422 10
 1339 07d9 ED A1 05                		mov.L	20[r10], r1
 1340 07dc 39 D9 F8                		bsr	_roundSize
 1341 07df E7 A1 05                		mov.L	r1, 20[r10]
 1342                             	.LBB5:
 423:../kernel/tkernel/mempool.c **** 
 424:../kernel/tkernel/mempool.c **** 	BEGIN_CRITICAL_SECTION;
 1343                             		.loc 5 424 2
 1344 07e2 05 00 00 00             		bsr	_disint
 1345 07e6 E7 A1 02                		mov.L	r1, 8[r10]
 425:../kernel/tkernel/mempool.c **** 	if ( mplcb->mplid == 0 ) {
 1346                             		.loc 5 425 12
 1347 07e9 ED A5 01                		mov.L	4[r10], r5
 1348 07ec A8 D5                   		mov.L	8[r5], r5
 1349                             		.loc 5 425 5
 1350 07ee 61 05                   		cmp	#0, r5
 1351 07f0 18                      		bne	.L90
 426:../kernel/tkernel/mempool.c **** 		ercd = E_NOEXS;
 1352                             		.loc 5 426 8
 1353 07f1 F9 A6 03 D6             		mov.L	#-42, 12[r10]
 427:../kernel/tkernel/mempool.c **** 		goto error_exit;
 1354                             		.loc 5 427 3
 1355 07f5 38 A0 00                		bra	.L91
 1356                             	.L90:
 428:../kernel/tkernel/mempool.c **** 	}
 429:../kernel/tkernel/mempool.c **** 
 430:../kernel/tkernel/mempool.c **** #if CHK_PAR
 431:../kernel/tkernel/mempool.c **** 	if ( blksz > mplcb->mplsz ) {
 1357                             		.loc 5 431 20
 1358 07f8 ED A5 01                		mov.L	4[r10], r5
 1359 07fb A9 5D                   		mov.L	20[r5], r5
 1360                             		.loc 5 431 5
 1361 07fd ED A4 05                		mov.L	20[r10], r4
 1362 0800 47 54                   		cmp	r5, r4
 1363 0802 2B 09                   		ble	.L92
 432:../kernel/tkernel/mempool.c **** 		ercd = E_PAR;
 1364                             		.loc 5 432 8
 1365 0804 F9 A6 03 EF             		mov.L	#-17, 12[r10]
 433:../kernel/tkernel/mempool.c **** 		goto error_exit;
 1366                             		.loc 5 433 3
 1367 0808 38 8D 00                		bra	.L91
 1368                             	.L92:
 434:../kernel/tkernel/mempool.c **** 	}
 435:../kernel/tkernel/mempool.c **** #endif
 436:../kernel/tkernel/mempool.c **** 
 437:../kernel/tkernel/mempool.c **** 	if ( knl_gcb_top_of_wait_queue((GCB*)mplcb, knl_ctxtsk) == knl_ctxtsk
 1369                             		.loc 5 437 7
 1370 080b FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1371 0811 EC 55                   		mov.L	[r5], r5
 1372 0813 EF 52                   		mov.L	r5, r2
 1373 0815 ED A1 01                		mov.L	4[r10], r1
 1374 0818 05 00 00 00             		bsr	_knl_gcb_top_of_wait_queue
 1375 081c EF 14                   		mov.L	r1, r4
 1376                             		.loc 5 437 58
 1377 081e FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1378 0824 EC 55                   		mov.L	[r5], r5
 1379                             		.loc 5 437 5
 1380 0826 47 54                   		cmp	r5, r4
 1381 0828 21 1B                   		bne	.L93
 438:../kernel/tkernel/mempool.c **** 	  && (blk = knl_get_blk(mplcb, blksz)) != NULL ) {
 1382                             		.loc 5 438 14
 1383 082a ED A2 05                		mov.L	20[r10], r2
 1384 082d ED A1 01                		mov.L	4[r10], r1
 1385 0830 39 09 FA                		bsr	_knl_get_blk
 1386 0833 E3 A1                   		mov.L	r1, [r10]
 1387                             		.loc 5 438 4
 1388 0835 EC A5                   		mov.L	[r10], r5
 1389 0837 61 05                   		cmp	#0, r5
 1390 0839 12                      		beq	.L93
 439:../kernel/tkernel/mempool.c **** 		/* Get memory block */
 440:../kernel/tkernel/mempool.c **** 		*p_blk = blk;
 1391                             		.loc 5 440 10
 1392 083a ED A5 06                		mov.L	24[r10], r5
 1393 083d EC A4                   		mov.L	[r10], r4
 1394 083f E3 54                   		mov.L	r4, [r5]
 1395 0841 2E 54                   		bra	.L91
 1396                             	.L93:
 441:../kernel/tkernel/mempool.c **** 	} else {
 442:../kernel/tkernel/mempool.c **** 		/* Ready for wait */
 443:../kernel/tkernel/mempool.c **** 		knl_ctxtsk->wspec = ( (mplcb->mplatr & TA_TPRI) != 0 )?
 1397                             		.loc 5 443 31
 1398 0843 ED A5 01                		mov.L	4[r10], r5
 1399 0846 A9 55                   		mov.L	16[r5], r5
 1400                             		.loc 5 443 40
 1401 0848 64 15                   		and	#1, r5
 444:../kernel/tkernel/mempool.c **** 					&knl_wspec_mpl_tpri: &knl_wspec_mpl_tfifo;
 1402                             		.loc 5 444 25
 1403 084a 61 05                   		cmp	#0, r5
 1404 084c 10                      		beq	.L94
 1405                             		.loc 5 444 25 is_stmt 0 discriminator 1
 1406 084d FB 42 0C 00 00 00       		mov.L	#_knl_wspec_mpl_tpri, r4
 1407 0853 0F                      		bra	.L95
 1408                             	.L94:
 1409                             		.loc 5 444 25 discriminator 2
 1410 0854 FB 42 00 00 00 00       		mov.L	#_knl_wspec_mpl_tfifo, r4
 1411                             	.L95:
 443:../kernel/tkernel/mempool.c **** 					&knl_wspec_mpl_tpri: &knl_wspec_mpl_tfifo;
 1412                             		.loc 5 443 13 is_stmt 1
 1413 085a FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1414 0860 EC 55                   		mov.L	[r5], r5
 443:../kernel/tkernel/mempool.c **** 					&knl_wspec_mpl_tpri: &knl_wspec_mpl_tfifo;
 1415                             		.loc 5 443 21
 1416 0862 A2 DC                   		mov.L	r4, 44[r5]
 445:../kernel/tkernel/mempool.c **** 		knl_ctxtsk->wercd = &ercd;
 1417                             		.loc 5 445 13
 1418 0864 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1419 086a EC 55                   		mov.L	[r5], r5
 1420                             		.loc 5 445 21
 1421 086c 71 A4 0C                		add	#12, r10, r4
 1422 086f A3 DC                   		mov.L	r4, 60[r5]
 446:../kernel/tkernel/mempool.c **** 		knl_ctxtsk->winfo.mpl.blksz = blksz;
 1423                             		.loc 5 446 13
 1424 0871 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1425 0877 EC 55                   		mov.L	[r5], r5
 1426                             		.loc 5 446 31
 1427 0879 ED A4 05                		mov.L	20[r10], r4
 1428 087c A4 54                   		mov.L	r4, 64[r5]
 447:../kernel/tkernel/mempool.c **** 		knl_ctxtsk->winfo.mpl.p_blk = p_blk;
 1429                             		.loc 5 447 13
 1430 087e FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1431 0884 EC 55                   		mov.L	[r5], r5
 1432                             		.loc 5 447 31
 1433 0886 ED A4 06                		mov.L	24[r10], r4
 1434 0889 A4 5C                   		mov.L	r4, 68[r5]
 448:../kernel/tkernel/mempool.c **** 		knl_gcb_make_wait((GCB*)mplcb, tmout);
 1435                             		.loc 5 448 3
 1436 088b ED A2 07                		mov.L	28[r10], r2
 1437 088e ED A1 01                		mov.L	4[r10], r1
 1438 0891 05 00 00 00             		bsr	_knl_gcb_make_wait
 1439                             		.balign 8,3,1
 1440                             	.L91:
 449:../kernel/tkernel/mempool.c **** 	}
 450:../kernel/tkernel/mempool.c **** 
 451:../kernel/tkernel/mempool.c ****     error_exit:
 452:../kernel/tkernel/mempool.c **** 	END_CRITICAL_SECTION;
 1441                             		.loc 5 452 2
 1442 0895 ED A5 02                		mov.L	8[r10], r5
 1443 0898 61 F5                   		cmp	#15, r5
 1444 089a 20 2E                   		beq	.L96
 1445                             		.loc 5 452 2 is_stmt 0 discriminator 1
 1446 089c FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1447 08a2 EC 54                   		mov.L	[r5], r4
 1448 08a4 FB 52 00 00 00 00       		mov.L	#_knl_schedtsk, r5
 1449 08aa EC 55                   		mov.L	[r5], r5
 1450 08ac 47 54                   		cmp	r5, r4
 1451 08ae 20 1A                   		beq	.L96
 1452                             		.loc 5 452 2 discriminator 3
 1453 08b0 39 ED F7                		bsr	_knl_isTaskIndependent
 1454 08b3 EF 15                   		mov.L	r1, r5
 1455 08b5 61 05                   		cmp	#0, r5
 1456 08b7 21 11                   		bne	.L96
 1457                             		.loc 5 452 2 discriminator 5
 1458 08b9 FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 1459 08bf EC 55                   		mov.L	[r5], r5
 1460 08c1 61 05                   		cmp	#0, r5
 1461 08c3 1D                      		bne	.L96
 1462                             		.loc 5 452 2 discriminator 7
 1463 08c4 05 00 00 00             		bsr	_knl_dispatch
 1464                             		.balign 8,3,1
 1465                             	.L96:
 1466                             		.loc 5 452 2 discriminator 9
 1467 08c8 ED A1 02                		mov.L	8[r10], r1
 1468 08cb 05 00 00 00             		bsr	_setint
 1469                             	.LBE5:
 453:../kernel/tkernel/mempool.c **** 
 454:../kernel/tkernel/mempool.c **** 	return ercd;
 1470                             		.loc 5 454 9 is_stmt 1 discriminator 9
 1471 08cf ED A5 03                		mov.L	12[r10], r5
 1472                             		.balign 8,3,1
 1473                             	.L97:
 455:../kernel/tkernel/mempool.c **** }
 1474                             		.loc 5 455 1 discriminator 1
 1475 08d2 EF 51                   		mov.L	r5, r1
 1476 08d4 3F AA 09                		rtsd	#36, r10-r10
 1477                             	.LFE46:
 1479                             		.global	_tk_rel_mpl
 1481                             	_tk_rel_mpl:
 1482                             	.LFB47:
 456:../kernel/tkernel/mempool.c **** 
 457:../kernel/tkernel/mempool.c **** /*
 458:../kernel/tkernel/mempool.c ****  * Return variable size memory block 
 459:../kernel/tkernel/mempool.c ****  */
 460:../kernel/tkernel/mempool.c **** SYSCALL ER tk_rel_mpl( ID mplid, void *blk )
 461:../kernel/tkernel/mempool.c **** {
 1483                             		.loc 5 461 1
 1484 08d7 7E AA                   		push.l	r10
 1485                             	.LCFI36:
 1486 08d9 71 0A EC                		add	#-20, r0, r10
 1487                             	.LCFI37:
 1488 08dc EF A0                   		mov.L	r10, r0
 1489 08de E7 A1 03                		mov.L	r1, 12[r10]
 1490 08e1 E7 A2 04                		mov.L	r2, 16[r10]
 462:../kernel/tkernel/mempool.c **** 	MPLCB	*mplcb;
 463:../kernel/tkernel/mempool.c **** 	ER	ercd = E_OK;
 1491                             		.loc 5 463 5
 1492 08e4 F8 A6 00                		mov.L	#0, [r10]
 464:../kernel/tkernel/mempool.c **** 
 465:../kernel/tkernel/mempool.c **** 	CHECK_MPLID(mplid);
 1493                             		.loc 5 465 2
 1494 08e7 ED A5 03                		mov.L	12[r10], r5
 1495 08ea 61 05                   		cmp	#0, r5
 1496 08ec 2B 09                   		ble	.L99
 1497                             		.loc 5 465 2 is_stmt 0 discriminator 2
 1498 08ee ED A5 03                		mov.L	12[r10], r5
 1499 08f1 61 45                   		cmp	#4, r5
 1500 08f3 2B 08                   		ble	.L100
 1501                             	.L99:
 1502                             		.loc 5 465 2 discriminator 3
 1503 08f5 FB 56 EE                		mov.L	#-18, r5
 1504 08f8 38 D6 00                		bra	.L101
 1505                             	.L100:
 466:../kernel/tkernel/mempool.c **** 	CHECK_DISPATCH();
 1506                             		.loc 5 466 2 is_stmt 1
 1507 08fb FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 1508 0901 EC 55                   		mov.L	[r5], r5
 1509 0903 61 05                   		cmp	#0, r5
 1510 0905 21 23                   		bne	.L102
 1511                             		.loc 5 466 2 is_stmt 0 discriminator 2
 1512 0907 39 96 F7                		bsr	_knl_isTaskIndependent
 1513 090a EF 15                   		mov.L	r1, r5
 1514 090c 61 05                   		cmp	#0, r5
 1515 090e 21 1A                   		bne	.L102
 1516                             		.loc 5 466 2 discriminator 4
 1517 0910 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1518 0916 EC 55                   		mov.L	[r5], r5
 1519 0918 61 05                   		cmp	#0, r5
 1520 091a 20 0E                   		beq	.L102
 1521                             		.loc 5 466 2 discriminator 6
 1522 091c 05 00 00 00             		bsr	_GetCpuIntLevel
 1523 0920 EF 15                   		mov.L	r1, r5
 1524 0922 75 55 10                		cmp	#16, r5
 1525 0925 19                      		bne	.L103
 1526 0926 EF 00                   		.balign 8,3,2
 1527                             	.L102:
 1528                             		.loc 5 466 2 discriminator 7
 1529 0928 FB 56 E7                		mov.L	#-25, r5
 1530 092b 38 A3 00                		bra	.L101
 1531                             	.L103:
 467:../kernel/tkernel/mempool.c **** 
 468:../kernel/tkernel/mempool.c **** 	mplcb = get_mplcb(mplid);
 1532                             		.loc 5 468 10 is_stmt 1
 1533 092e ED A5 03                		mov.L	12[r10], r5
 1534 0931 60 15                   		sub	#1, r5
 1535                             		.loc 5 468 8
 1536 0933 75 15 34                		mul	#52, r5
 1537 0936 70 55 00 00 00 00       		add	#_knl_mplcb_table, r5
 1538 093c E7 A5 01                		mov.L	r5, 4[r10]
 1539                             	.LBB6:
 469:../kernel/tkernel/mempool.c **** 
 470:../kernel/tkernel/mempool.c **** 	BEGIN_CRITICAL_SECTION;
 1540                             		.loc 5 470 2
 1541 093f 05 00 00 00             		bsr	_disint
 1542 0943 E7 A1 02                		mov.L	r1, 8[r10]
 471:../kernel/tkernel/mempool.c **** 	if ( mplcb->mplid == 0 ) {
 1543                             		.loc 5 471 12
 1544 0946 ED A5 01                		mov.L	4[r10], r5
 1545 0949 A8 D5                   		mov.L	8[r5], r5
 1546                             		.loc 5 471 5
 1547 094b 61 05                   		cmp	#0, r5
 1548 094d 1E                      		bne	.L104
 472:../kernel/tkernel/mempool.c **** 		ercd = E_NOEXS;
 1549                             		.loc 5 472 8
 1550 094e F8 A6 D6                		mov.L	#-42, [r10]
 473:../kernel/tkernel/mempool.c **** 		goto error_exit;
 1551                             		.loc 5 473 3
 1552 0951 2E 41                   		bra	.L105
 1553                             	.L104:
 474:../kernel/tkernel/mempool.c **** 	}
 475:../kernel/tkernel/mempool.c **** #if CHK_PAR
 476:../kernel/tkernel/mempool.c **** 	if ( (B*)blk < (B*)mplcb->mempool || (B*)blk > (B*)mplcb->mempool + mplcb->mplsz ) {
 1554                             		.loc 5 476 26
 1555 0953 ED A5 01                		mov.L	4[r10], r5
 1556 0956 AB 55                   		mov.L	48[r5], r5
 1557                             		.loc 5 476 5
 1558 0958 ED A4 04                		mov.L	16[r10], r4
 1559 095b 47 54                   		cmp	r5, r4
 1560 095d 23 15                   		bltu	.L106
 1561                             		.loc 5 476 58 discriminator 1
 1562 095f ED A5 01                		mov.L	4[r10], r5
 1563 0962 AB 54                   		mov.L	48[r5], r4
 1564                             		.loc 5 476 75 discriminator 1
 1565 0964 ED A5 01                		mov.L	4[r10], r5
 1566 0967 A9 5D                   		mov.L	20[r5], r5
 1567                             		.loc 5 476 68 discriminator 1
 1568 0969 4B 45                   		add	r4, r5
 1569                             		.loc 5 476 36 discriminator 1
 1570 096b ED A4 04                		mov.L	16[r10], r4
 1571 096e 47 54                   		cmp	r5, r4
 1572 0970 25 07                   		bleu	.L107
 1573                             	.L106:
 477:../kernel/tkernel/mempool.c **** 		ercd = E_PAR;
 1574                             		.loc 5 477 8
 1575 0972 F8 A6 EF                		mov.L	#-17, [r10]
 478:../kernel/tkernel/mempool.c **** 		goto error_exit;
 1576                             		.loc 5 478 3
 1577 0975 2E 1D                   		bra	.L105
 1578                             	.L107:
 479:../kernel/tkernel/mempool.c **** 	}
 480:../kernel/tkernel/mempool.c **** #endif
 481:../kernel/tkernel/mempool.c **** 
 482:../kernel/tkernel/mempool.c **** 	/* Free memory block */
 483:../kernel/tkernel/mempool.c **** 	ercd = knl_rel_blk(mplcb, blk);
 1579                             		.loc 5 483 9
 1580 0977 ED A2 04                		mov.L	16[r10], r2
 1581 097a ED A1 01                		mov.L	4[r10], r1
 1582 097d 39 6D F9                		bsr	_knl_rel_blk
 1583 0980 E3 A1                   		mov.L	r1, [r10]
 484:../kernel/tkernel/mempool.c **** 	if ( ercd < E_OK ) {
 1584                             		.loc 5 484 5
 1585 0982 EC A5                   		mov.L	[r10], r5
 1586 0984 61 05                   		cmp	#0, r5
 1587 0986 29 0B                   		blt	.L110
 485:../kernel/tkernel/mempool.c **** 		goto error_exit;
 486:../kernel/tkernel/mempool.c **** 	}
 487:../kernel/tkernel/mempool.c **** 
 488:../kernel/tkernel/mempool.c **** 	/* Assign memory block to waiting task */
 489:../kernel/tkernel/mempool.c **** 	knl_mpl_wakeup(mplcb);
 1588                             		.loc 5 489 2
 1589 0988 ED A1 01                		mov.L	4[r10], r1
 1590 098b 05 00 00 00             		bsr	_knl_mpl_wakeup
 1591 098f 2E 03                   		bra	.L105
 1592                             	.L110:
 485:../kernel/tkernel/mempool.c **** 		goto error_exit;
 1593                             		.loc 5 485 3
 1594 0991 03                      		nop
 1595                             		.balign 8,3,1
 1596                             	.L105:
 490:../kernel/tkernel/mempool.c **** 
 491:../kernel/tkernel/mempool.c ****     error_exit:
 492:../kernel/tkernel/mempool.c **** 	END_CRITICAL_SECTION;
 1597                             		.loc 5 492 2
 1598 0992 ED A5 02                		mov.L	8[r10], r5
 1599 0995 61 F5                   		cmp	#15, r5
 1600 0997 20 2E                   		beq	.L109
 1601                             		.loc 5 492 2 is_stmt 0 discriminator 1
 1602 0999 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1603 099f EC 54                   		mov.L	[r5], r4
 1604 09a1 FB 52 00 00 00 00       		mov.L	#_knl_schedtsk, r5
 1605 09a7 EC 55                   		mov.L	[r5], r5
 1606 09a9 47 54                   		cmp	r5, r4
 1607 09ab 20 1A                   		beq	.L109
 1608                             		.loc 5 492 2 discriminator 3
 1609 09ad 39 F0 F6                		bsr	_knl_isTaskIndependent
 1610 09b0 EF 15                   		mov.L	r1, r5
 1611 09b2 61 05                   		cmp	#0, r5
 1612 09b4 21 11                   		bne	.L109
 1613                             		.loc 5 492 2 discriminator 5
 1614 09b6 FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 1615 09bc EC 55                   		mov.L	[r5], r5
 1616 09be 61 05                   		cmp	#0, r5
 1617 09c0 1D                      		bne	.L109
 1618                             		.loc 5 492 2 discriminator 7
 1619 09c1 05 00 00 00             		bsr	_knl_dispatch
 1620                             		.balign 8,3,1
 1621                             	.L109:
 1622                             		.loc 5 492 2 discriminator 9
 1623 09c5 ED A1 02                		mov.L	8[r10], r1
 1624 09c8 05 00 00 00             		bsr	_setint
 1625                             	.LBE6:
 493:../kernel/tkernel/mempool.c **** 
 494:../kernel/tkernel/mempool.c **** 	return ercd;
 1626                             		.loc 5 494 9 is_stmt 1 discriminator 9
 1627 09cc EC A5                   		mov.L	[r10], r5
 1628                             	.L101:
 495:../kernel/tkernel/mempool.c **** }
 1629                             		.loc 5 495 1
 1630 09ce EF 51                   		mov.L	r5, r1
 1631 09d0 3F AA 06                		rtsd	#24, r10-r10
 1632                             	.LFE47:
 1634                             		.global	_tk_ref_mpl
 1636                             	_tk_ref_mpl:
 1637                             	.LFB48:
 496:../kernel/tkernel/mempool.c **** 
 497:../kernel/tkernel/mempool.c **** #ifdef USE_FUNC_TK_REF_MPL
 498:../kernel/tkernel/mempool.c **** /*
 499:../kernel/tkernel/mempool.c ****  * Refer variable size memory pool state
 500:../kernel/tkernel/mempool.c ****  */
 501:../kernel/tkernel/mempool.c **** SYSCALL ER tk_ref_mpl( ID mplid, T_RMPL *pk_rmpl )
 502:../kernel/tkernel/mempool.c **** {
 1638                             		.loc 5 502 1
 1639 09d3 7E AA                   		push.l	r10
 1640                             	.LCFI38:
 1641 09d5 71 0A DC                		add	#-36, r0, r10
 1642                             	.LCFI39:
 1643 09d8 EF A0                   		mov.L	r10, r0
 1644 09da E7 A1 07                		mov.L	r1, 28[r10]
 1645 09dd E7 A2 08                		mov.L	r2, 32[r10]
 503:../kernel/tkernel/mempool.c **** 	MPLCB	*mplcb;
 504:../kernel/tkernel/mempool.c **** 	QUEUE	*fq, *q;
 505:../kernel/tkernel/mempool.c **** 	W	frsz, blksz;
 506:../kernel/tkernel/mempool.c **** 	ER	ercd = E_OK;
 1646                             		.loc 5 506 5
 1647 09e0 F9 A6 03 00             		mov.L	#0, 12[r10]
 507:../kernel/tkernel/mempool.c **** 
 508:../kernel/tkernel/mempool.c **** 	CHECK_MPLID(mplid);
 1648                             		.loc 5 508 2
 1649 09e4 ED A5 07                		mov.L	28[r10], r5
 1650 09e7 61 05                   		cmp	#0, r5
 1651 09e9 2B 09                   		ble	.L112
 1652                             		.loc 5 508 2 is_stmt 0 discriminator 2
 1653 09eb ED A5 07                		mov.L	28[r10], r5
 1654 09ee 61 45                   		cmp	#4, r5
 1655 09f0 2B 08                   		ble	.L113
 1656                             	.L112:
 1657                             		.loc 5 508 2 discriminator 3
 1658 09f2 FB 56 EE                		mov.L	#-18, r5
 1659 09f5 38 1D 01                		bra	.L114
 1660                             	.L113:
 509:../kernel/tkernel/mempool.c **** 	CHECK_DISPATCH();
 1661                             		.loc 5 509 2 is_stmt 1
 1662 09f8 FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 1663 09fe EC 55                   		mov.L	[r5], r5
 1664 0a00 61 05                   		cmp	#0, r5
 1665 0a02 21 21                   		bne	.L115
 1666                             		.loc 5 509 2 is_stmt 0 discriminator 2
 1667 0a04 39 99 F6                		bsr	_knl_isTaskIndependent
 1668 0a07 EF 15                   		mov.L	r1, r5
 1669 0a09 61 05                   		cmp	#0, r5
 1670 0a0b 21 18                   		bne	.L115
 1671                             		.loc 5 509 2 discriminator 4
 1672 0a0d FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1673 0a13 EC 55                   		mov.L	[r5], r5
 1674 0a15 61 05                   		cmp	#0, r5
 1675 0a17 20 0C                   		beq	.L115
 1676                             		.loc 5 509 2 discriminator 6
 1677 0a19 05 00 00 00             		bsr	_GetCpuIntLevel
 1678 0a1d EF 15                   		mov.L	r1, r5
 1679 0a1f 75 55 10                		cmp	#16, r5
 1680 0a22 1F                      		bne	.L116
 1681                             		.balign 8,3,2
 1682                             	.L115:
 1683                             		.loc 5 509 2 discriminator 7
 1684 0a23 FB 56 E7                		mov.L	#-25, r5
 1685 0a26 38 EC 00                		bra	.L114
 1686                             	.L116:
 510:../kernel/tkernel/mempool.c **** 
 511:../kernel/tkernel/mempool.c **** 	mplcb = get_mplcb(mplid);
 1687                             		.loc 5 511 10 is_stmt 1
 1688 0a29 ED A5 07                		mov.L	28[r10], r5
 1689 0a2c 60 15                   		sub	#1, r5
 1690                             		.loc 5 511 8
 1691 0a2e 75 15 34                		mul	#52, r5
 1692 0a31 70 55 00 00 00 00       		add	#_knl_mplcb_table, r5
 1693 0a37 E7 A5 04                		mov.L	r5, 16[r10]
 1694                             	.LBB7:
 512:../kernel/tkernel/mempool.c **** 
 513:../kernel/tkernel/mempool.c **** 	BEGIN_CRITICAL_SECTION;
 1695                             		.loc 5 513 2
 1696 0a3a 05 00 00 00             		bsr	_disint
 1697 0a3e E7 A1 05                		mov.L	r1, 20[r10]
 514:../kernel/tkernel/mempool.c **** 	if ( mplcb->mplid == 0 ) {
 1698                             		.loc 5 514 12
 1699 0a41 ED A5 04                		mov.L	16[r10], r5
 1700 0a44 A8 D5                   		mov.L	8[r5], r5
 1701                             		.loc 5 514 5
 1702 0a46 61 05                   		cmp	#0, r5
 1703 0a48 18                      		bne	.L117
 515:../kernel/tkernel/mempool.c **** 		ercd = E_NOEXS;
 1704                             		.loc 5 515 8
 1705 0a49 F9 A6 03 D6             		mov.L	#-42, 12[r10]
 1706 0a4d 38 88 00                		bra	.L118
 1707                             	.L117:
 516:../kernel/tkernel/mempool.c **** 	} else {
 517:../kernel/tkernel/mempool.c **** 		pk_rmpl->exinf = mplcb->exinf;
 1708                             		.loc 5 517 25
 1709 0a50 ED A5 04                		mov.L	16[r10], r5
 1710 0a53 A8 DC                   		mov.L	12[r5], r4
 1711                             		.loc 5 517 18
 1712 0a55 ED A5 08                		mov.L	32[r10], r5
 1713 0a58 E3 54                   		mov.L	r4, [r5]
 518:../kernel/tkernel/mempool.c **** 		pk_rmpl->wtsk  = knl_wait_tskid(&mplcb->wait_queue);
 1714                             		.loc 5 518 20
 1715 0a5a ED A5 04                		mov.L	16[r10], r5
 1716 0a5d EF 51                   		mov.L	r5, r1
 1717 0a5f 05 00 00 00             		bsr	_knl_wait_tskid
 1718 0a63 EF 14                   		mov.L	r1, r4
 1719                             		.loc 5 518 18
 1720 0a65 ED A5 08                		mov.L	32[r10], r5
 1721 0a68 A0 5C                   		mov.L	r4, 4[r5]
 519:../kernel/tkernel/mempool.c **** 		frsz = 0;
 1722                             		.loc 5 519 8
 1723 0a6a F9 A6 02 00             		mov.L	#0, 8[r10]
 520:../kernel/tkernel/mempool.c **** 		for ( fq = mplcb->freeque.next; fq != &mplcb->freeque; fq = fq->next ) {
 1724                             		.loc 5 520 12
 1725 0a6e ED A5 04                		mov.L	16[r10], r5
 1726 0a71 AA 55                   		mov.L	32[r5], r5
 1727 0a73 E3 A5                   		mov.L	r5, [r10]
 1728                             		.loc 5 520 3
 1729 0a75 2E 3F                   		bra	.L119
 1730                             	.L122:
 521:../kernel/tkernel/mempool.c **** 			blksz = FreeSize(fq);
 1731                             		.loc 5 521 12
 1732 0a77 EC A5                   		mov.L	[r10], r5
 1733 0a79 62 85                   		add	#8, r5
 1734 0a7b A8 5D                   		mov.L	4[r5], r5
 1735                             		.loc 5 521 10
 1736 0a7d E7 A5 06                		mov.L	r5, 24[r10]
 522:../kernel/tkernel/mempool.c **** 			frsz += blksz;
 1737                             		.loc 5 522 9
 1738 0a80 ED A5 02                		mov.L	8[r10], r5
 1739 0a83 06 89 A5 06             		add	24[r10].L, r5
 1740 0a87 E7 A5 02                		mov.L	r5, 8[r10]
 523:../kernel/tkernel/mempool.c **** 			for ( q = (fq+1)->next; q != NULL; q = q->next ) {
 1741                             		.loc 5 523 17
 1742 0a8a EC A5                   		mov.L	[r10], r5
 1743 0a8c 62 85                   		add	#8, r5
 1744                             		.loc 5 523 12
 1745 0a8e EC 55                   		mov.L	[r5], r5
 1746 0a90 E7 A5 01                		mov.L	r5, 4[r10]
 1747                             		.loc 5 523 4
 1748 0a93 2E 14                   		bra	.L120
 1749                             	.L121:
 524:../kernel/tkernel/mempool.c **** 				frsz += blksz;
 1750                             		.loc 5 524 10 discriminator 3
 1751 0a95 ED A5 02                		mov.L	8[r10], r5
 1752 0a98 06 89 A5 06             		add	24[r10].L, r5
 1753 0a9c E7 A5 02                		mov.L	r5, 8[r10]
 523:../kernel/tkernel/mempool.c **** 			for ( q = (fq+1)->next; q != NULL; q = q->next ) {
 1754                             		.loc 5 523 41 discriminator 3
 1755 0a9f ED A5 01                		mov.L	4[r10], r5
 1756 0aa2 EC 55                   		mov.L	[r5], r5
 1757 0aa4 E7 A5 01                		mov.L	r5, 4[r10]
 1758                             	.L120:
 523:../kernel/tkernel/mempool.c **** 			for ( q = (fq+1)->next; q != NULL; q = q->next ) {
 1759                             		.loc 5 523 4 discriminator 1
 1760 0aa7 ED A5 01                		mov.L	4[r10], r5
 1761 0aaa 61 05                   		cmp	#0, r5
 1762 0aac 21 E9                   		bne	.L121
 520:../kernel/tkernel/mempool.c **** 			blksz = FreeSize(fq);
 1763                             		.loc 5 520 61 discriminator 2
 1764 0aae EC A5                   		mov.L	[r10], r5
 1765 0ab0 EC 55                   		mov.L	[r5], r5
 1766 0ab2 E3 A5                   		mov.L	r5, [r10]
 1767                             	.L119:
 520:../kernel/tkernel/mempool.c **** 			blksz = FreeSize(fq);
 1768                             		.loc 5 520 41 discriminator 1
 1769 0ab4 ED A5 04                		mov.L	16[r10], r5
 1770 0ab7 71 55 20                		add	#32, r5
 520:../kernel/tkernel/mempool.c **** 			blksz = FreeSize(fq);
 1771                             		.loc 5 520 3 discriminator 1
 1772 0aba EC A4                   		mov.L	[r10], r4
 1773 0abc 47 54                   		cmp	r5, r4
 1774 0abe 21 B9                   		bne	.L122
 525:../kernel/tkernel/mempool.c **** 			}
 526:../kernel/tkernel/mempool.c **** 		}
 527:../kernel/tkernel/mempool.c **** 		pk_rmpl->frsz  = frsz;
 1775                             		.loc 5 527 18
 1776 0ac0 ED A5 08                		mov.L	32[r10], r5
 1777 0ac3 ED A4 02                		mov.L	8[r10], r4
 1778 0ac6 A0 D4                   		mov.L	r4, 8[r5]
 528:../kernel/tkernel/mempool.c **** 		pk_rmpl->maxsz = knl_MaxFreeSize(mplcb);
 1779                             		.loc 5 528 20
 1780 0ac8 ED A1 04                		mov.L	16[r10], r1
 1781 0acb 39 08 F6                		bsr	_knl_MaxFreeSize
 1782 0ace EF 14                   		mov.L	r1, r4
 1783                             		.loc 5 528 18
 1784 0ad0 ED A5 08                		mov.L	32[r10], r5
 1785 0ad3 A0 DC                   		mov.L	r4, 12[r5]
 1786                             	.L118:
 529:../kernel/tkernel/mempool.c **** 	}
 530:../kernel/tkernel/mempool.c **** 	END_CRITICAL_SECTION;
 1787                             		.loc 5 530 2
 1788 0ad5 ED A5 05                		mov.L	20[r10], r5
 1789 0ad8 61 F5                   		cmp	#15, r5
 1790 0ada 20 2E                   		beq	.L123
 1791                             		.loc 5 530 2 is_stmt 0 discriminator 1
 1792 0adc FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1793 0ae2 EC 54                   		mov.L	[r5], r4
 1794 0ae4 FB 52 00 00 00 00       		mov.L	#_knl_schedtsk, r5
 1795 0aea EC 55                   		mov.L	[r5], r5
 1796 0aec 47 54                   		cmp	r5, r4
 1797 0aee 20 1A                   		beq	.L123
 1798                             		.loc 5 530 2 discriminator 3
 1799 0af0 39 AD F5                		bsr	_knl_isTaskIndependent
 1800 0af3 EF 15                   		mov.L	r1, r5
 1801 0af5 61 05                   		cmp	#0, r5
 1802 0af7 21 11                   		bne	.L123
 1803                             		.loc 5 530 2 discriminator 5
 1804 0af9 FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 1805 0aff EC 55                   		mov.L	[r5], r5
 1806 0b01 61 05                   		cmp	#0, r5
 1807 0b03 1D                      		bne	.L123
 1808                             		.loc 5 530 2 discriminator 7
 1809 0b04 05 00 00 00             		bsr	_knl_dispatch
 1810                             		.balign 8,3,1
 1811                             	.L123:
 1812                             		.loc 5 530 2 discriminator 9
 1813 0b08 ED A1 05                		mov.L	20[r10], r1
 1814 0b0b 05 00 00 00             		bsr	_setint
 1815                             	.LBE7:
 531:../kernel/tkernel/mempool.c **** 
 532:../kernel/tkernel/mempool.c **** 	return ercd;
 1816                             		.loc 5 532 9 is_stmt 1 discriminator 9
 1817 0b0f ED A5 03                		mov.L	12[r10], r5
 1818                             	.L114:
 533:../kernel/tkernel/mempool.c **** }
 1819                             		.loc 5 533 1
 1820 0b12 EF 51                   		mov.L	r5, r1
 1821 0b14 3F AA 0A                		rtsd	#40, r10-r10
 1822                             	.LFE48:
 2227                             	.Letext0:
 2228                             		.file 6 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_tbrx65n\\include/tk/typedef.h"
 2229                             		.file 7 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_tbrx65n\\include/tk/syscall.h"
 2230                             		.file 8 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_tbrx65n\\kernel\\knlinc/kernel.h"
 2231                             		.file 9 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_tbrx65n\\kernel\\tkernel\\timer.h"
 2232                             		.file 10 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_tbrx65n\\kernel\\tkernel\\winfo.h"
 2233                             		.file 11 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_tbrx65n\\kernel\\tkernel\\mutex.h"
 2234                             		.file 12 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_tbrx65n\\kernel\\sysdepend\\cpu\\core\\rxv2\\sysde
 2235                             		.file 13 "../kernel/tkernel/task.h"
 2236                             		.file 14 "../kernel/tkernel/ready_queue.h"
 2237                             		.file 15 "../kernel/tkernel/wait.h"
