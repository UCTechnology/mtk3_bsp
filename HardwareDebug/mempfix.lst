   1                             		.file	"mempfix.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   5                             	_QueInit:
   6                             	.LFB6:
   7                             		.file 1 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_tbrx65n\\include/sys/queue.h"
   1:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** /*
   2:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *----------------------------------------------------------------------
   3:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *    micro T-Kernel 3.00.00
   4:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *
   5:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *    Copyright (C) 2006-2019 by Ken Sakamura.
   6:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *    This software is distributed under the T-License 2.1.
   7:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *----------------------------------------------------------------------
   8:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *
   9:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.
  10:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *
  11:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *----------------------------------------------------------------------
  12:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  */
  13:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 
  14:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** /*
  15:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *	queue.h
  16:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *
  17:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *	Queuing operation
  18:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  */
  19:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 
  20:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** #ifndef	__SYS_QUEUE_H__
  21:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** #define __SYS_QUEUE_H__
  22:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 
  23:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** #include <tk/tkernel.h>
  24:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 
  25:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** #ifdef __cplusplus
  26:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** extern "C" {
  27:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** #endif
  28:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 
  29:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** /*
  30:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  * Double-link queue (ring)
  31:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  */
  32:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** typedef struct queue {
  33:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	struct queue	*next;
  34:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	struct queue	*prev;
  35:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** } QUEUE;
  36:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 
  37:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** /*
  38:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  * Queue initialization 
  39:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  */
  40:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** Inline void QueInit( QUEUE *que )
  41:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** {
   8                             		.loc 1 41 1
   9 0000 7E AA                   		push.l	r10
  10                             	.LCFI0:
  11 0002 71 0A FC                		add	#-4, r0, r10
  12                             	.LCFI1:
  13 0005 EF A0                   		mov.L	r10, r0
  14 0007 E3 A1                   		mov.L	r1, [r10]
  42:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	que->next = (struct queue *)que;
  15                             		.loc 1 42 12
  16 0009 EC A5                   		mov.L	[r10], r5
  17 000b EC A4                   		mov.L	[r10], r4
  18 000d E3 54                   		mov.L	r4, [r5]
  43:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	que->prev = (struct queue *)que;
  19                             		.loc 1 43 12
  20 000f EC A5                   		mov.L	[r10], r5
  21 0011 EC A4                   		mov.L	[r10], r4
  22 0013 A0 5C                   		mov.L	r4, 4[r5]
  44:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** }
  23                             		.loc 1 44 1
  24 0015 03                      		nop
  25 0016 3F AA 02                		rtsd	#8, r10-r10
  26                             	.LFE6:
  29                             	_isQueEmpty:
  30                             	.LFB7:
  45:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 
  46:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** /*
  47:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  * TRUE if the queue is empty 
  48:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  */
  49:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** Inline BOOL isQueEmpty( QUEUE *que )
  50:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** {
  31                             		.loc 1 50 1
  32 0019 7E AA                   		push.l	r10
  33                             	.LCFI2:
  34 001b 71 0A FC                		add	#-4, r0, r10
  35                             	.LCFI3:
  36 001e EF A0                   		mov.L	r10, r0
  37 0020 E3 A1                   		mov.L	r1, [r10]
  51:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	return ( que->next == que )? TRUE: FALSE;
  38                             		.loc 1 51 14
  39 0022 EC A5                   		mov.L	[r10], r5
  40 0024 EC 55                   		mov.L	[r5], r5
  41                             		.loc 1 51 35
  42 0026 EC A4                   		mov.L	[r10], r4
  43 0028 47 54                   		cmp	r5, r4
  44 002a FC DB 50                		sceq.L	r5
  45 002d 5B 55                   		movu.B	r5, r5
  52:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** }
  46                             		.loc 1 52 1
  47 002f EF 51                   		mov.L	r5, r1
  48 0031 3F AA 02                		rtsd	#8, r10-r10
  49                             	.LFE7:
  52                             	_QueInsert:
  53                             	.LFB8:
  53:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 
  54:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** /*
  55:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  * Insert in queue 
  56:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *	Inserts entry directly prior to que 
  57:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  */
  58:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** Inline void QueInsert( QUEUE *entry, QUEUE *que )
  59:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** {
  54                             		.loc 1 59 1
  55 0034 7E AA                   		push.l	r10
  56                             	.LCFI4:
  57 0036 71 0A F8                		add	#-8, r0, r10
  58                             	.LCFI5:
  59 0039 EF A0                   		mov.L	r10, r0
  60 003b E3 A1                   		mov.L	r1, [r10]
  61 003d E7 A2 01                		mov.L	r2, 4[r10]
  60:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	entry->prev = (struct queue*) que->prev;
  62                             		.loc 1 60 16
  63 0040 ED A5 01                		mov.L	4[r10], r5
  64 0043 A8 5C                   		mov.L	4[r5], r4
  65                             		.loc 1 60 14
  66 0045 EC A5                   		mov.L	[r10], r5
  67 0047 A0 5C                   		mov.L	r4, 4[r5]
  61:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	entry->next = que;
  68                             		.loc 1 61 14
  69 0049 EC A5                   		mov.L	[r10], r5
  70 004b ED A4 01                		mov.L	4[r10], r4
  71 004e E3 54                   		mov.L	r4, [r5]
  62:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	que->prev->next = entry;
  72                             		.loc 1 62 5
  73 0050 ED A5 01                		mov.L	4[r10], r5
  74 0053 A8 5D                   		mov.L	4[r5], r5
  75                             		.loc 1 62 18
  76 0055 EC A4                   		mov.L	[r10], r4
  77 0057 E3 54                   		mov.L	r4, [r5]
  63:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	que->prev = entry;
  78                             		.loc 1 63 12
  79 0059 ED A5 01                		mov.L	4[r10], r5
  80 005c EC A4                   		mov.L	[r10], r4
  81 005e A0 5C                   		mov.L	r4, 4[r5]
  64:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** }
  82                             		.loc 1 64 1
  83 0060 03                      		nop
  84 0061 3F AA 03                		rtsd	#12, r10-r10
  85                             	.LFE8:
  88                             	_QueRemoveNext:
  89                             	.LFB10:
  65:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 
  66:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** /*
  67:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  * Delete from queue 
  68:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *	Deletes entry from queue 
  69:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *	No action is performed if entry is empty. 
  70:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  */
  71:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** Inline void QueRemove( QUEUE *entry )
  72:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** {
  73:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	if ( entry->next != entry ) {
  74:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 		entry->prev->next = (struct queue*) entry->next;
  75:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 		entry->next->prev = (struct queue*) entry->prev;
  76:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	}
  77:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** }
  78:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 
  79:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** /*
  80:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  * Remove top entry 
  81:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *	Deletes the entry directly after que from the queue,
  82:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *	and returns the deleted entry.
  83:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  *	Returns NULL if que is empty.
  84:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h ****  */
  85:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** Inline QUEUE* QueRemoveNext( QUEUE *que )
  86:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** {
  90                             		.loc 1 86 1
  91 0064 7E AA                   		push.l	r10
  92                             	.LCFI6:
  93 0066 71 0A F8                		add	#-8, r0, r10
  94                             	.LCFI7:
  95 0069 EF A0                   		mov.L	r10, r0
  96 006b E7 A1 01                		mov.L	r1, 4[r10]
  87:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	QUEUE	*entry;
  88:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 
  89:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	if ( que->next == que ) {
  97                             		.loc 1 89 10
  98 006e ED A5 01                		mov.L	4[r10], r5
  99 0071 EC 55                   		mov.L	[r5], r5
 100                             		.loc 1 89 5
 101 0073 ED A4 01                		mov.L	4[r10], r4
 102 0076 47 54                   		cmp	r5, r4
 103 0078 1D                      		bne	.L6
  90:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 		return NULL;
 104                             		.loc 1 90 10
 105 0079 66 05                   		mov.L	#0, r5
 106 007b 2E 1D                   		bra	.L7
 107                             	.L6:
  91:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	}
  92:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 
  93:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	entry = que->next;
 108                             		.loc 1 93 8
 109 007d ED A5 01                		mov.L	4[r10], r5
 110 0080 EC 55                   		mov.L	[r5], r5
 111 0082 E3 A5                   		mov.L	r5, [r10]
  94:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	que->next = (struct queue*)entry->next;
 112                             		.loc 1 94 14
 113 0084 EC A5                   		mov.L	[r10], r5
 114 0086 EC 54                   		mov.L	[r5], r4
 115                             		.loc 1 94 12
 116 0088 ED A5 01                		mov.L	4[r10], r5
 117 008b E3 54                   		mov.L	r4, [r5]
  95:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	entry->next->prev = que;
 118                             		.loc 1 95 7
 119 008d EC A5                   		mov.L	[r10], r5
 120 008f EC 55                   		mov.L	[r5], r5
 121                             		.loc 1 95 20
 122 0091 ED A4 01                		mov.L	4[r10], r4
 123 0094 A0 5C                   		mov.L	r4, 4[r5]
  96:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 
  97:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** 	return entry;
 124                             		.loc 1 97 9
 125 0096 EC A5                   		mov.L	[r10], r5
 126                             	.L7:
  98:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\include/sys\queue.h **** }
 127                             		.loc 1 98 1
 128 0098 EF 51                   		mov.L	r5, r1
 129 009a 3F AA 03                		rtsd	#12, r10-r10
 130                             	.LFE10:
 133                             	_knl_isTaskIndependent:
 134                             	.LFB16:
 135                             		.file 2 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_tbrx65n\\kernel\\sysdepend\\cpu\\core\\rxv2\\cpu_st
   1:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
   2:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *----------------------------------------------------------------------
   3:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *    micro T-Kernel 3.00.03
   4:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *
   5:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *    Copyright (C) 2006-2021 by Ken Sakamura.
   6:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *    This software is distributed under the T-License 2.2.
   7:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *----------------------------------------------------------------------
   8:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *
   9:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.
  10:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *
  11:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *----------------------------------------------------------------------
  12:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  13:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  14:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  15:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *	cpu_status.h (RXv2)
  16:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *	CPU-Dependent Status Definition
  17:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  18:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  19:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #ifndef _SYSDEPEND_CPU_CORE_STATUS_
  20:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define _SYSDEPEND_CPU_CORE_STATUS_
  21:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  22:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #include <tk/syslib.h>
  23:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #include <sys/sysdef.h>
  24:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  25:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #include "sysdepend.h"
  26:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  27:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  * Start/End critical section
  28:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  29:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define BEGIN_CRITICAL_SECTION	{ UINT _sr_ = disint();
  30:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define END_CRITICAL_SECTION	if ( !isDI(_sr_)			\
  31:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 				  && knl_ctxtsk != knl_schedtsk		\
  32:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 				  && !knl_isTaskIndependent()		\
  33:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 				  && !knl_dispatch_disabled ) {		\
  34:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 					knl_dispatch();			\
  35:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 				}					\
  36:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 				setint(_sr_); }
  37:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  38:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  * Start/End interrupt disable section
  39:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  40:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define BEGIN_DISABLE_INTERRUPT	{ UINT _sr_ = disint();
  41:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define END_DISABLE_INTERRUPT	setint(_sr_); }
  42:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  43:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  44:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  * Interrupt enable/disable
  45:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  46:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define ENABLE_INTERRUPT	{ setint(0); }
  47:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define DISABLE_INTERRUPT	{ disint(); }
  48:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  49:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  50:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  * Enable interrupt nesting
  51:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *	Enable the interrupt that has a higher priority than 'level.'
  52:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  53:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define ENABLE_INTERRUPT_UPTO(level)	{ setint(level); }
  54:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  55:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  56:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *  Task-independent control
  57:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  58:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** IMPORT	W	knl_taskindp;		/* Task independent status */
  59:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  60:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  61:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  * If it is the task-independent part, TRUE
  62:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  63:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** Inline BOOL knl_isTaskIndependent( void )
  64:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** {
 136                             		.loc 2 64 1
 137 009d 7E AA                   		push.l	r10
 138                             	.LCFI8:
 139 009f EF 0A                   		mov.L	r0, r10
 140                             	.LCFI9:
  65:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 	return ( knl_taskindp > 0 )? TRUE: FALSE;
 141                             		.loc 2 65 35
 142 00a1 FB 52 00 00 00 00       		mov.L	#_knl_taskindp, r5
 143 00a7 EC 55                   		mov.L	[r5], r5
 144 00a9 61 05                   		cmp	#0, r5
 145 00ab FC DB 5A                		scgt.L	r5
 146 00ae 5B 55                   		movu.B	r5, r5
  66:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** }
 147                             		.loc 2 66 1
 148 00b0 EF 51                   		mov.L	r5, r1
 149 00b2 3F AA 01                		rtsd	#4, r10-r10
 150                             	.LFE16:
 153                             	_knl_InitOBJLOCK:
 154                             	.LFB19:
 155                             		.file 3 "../kernel/tkernel/klock.h"
   1:../kernel/tkernel/klock.h **** /*
   2:../kernel/tkernel/klock.h ****  *----------------------------------------------------------------------
   3:../kernel/tkernel/klock.h ****  *    micro T-Kernel 3.00.00
   4:../kernel/tkernel/klock.h ****  *
   5:../kernel/tkernel/klock.h ****  *    Copyright (C) 2006-2019 by Ken Sakamura.
   6:../kernel/tkernel/klock.h ****  *    This software is distributed under the T-License 2.1.
   7:../kernel/tkernel/klock.h ****  *----------------------------------------------------------------------
   8:../kernel/tkernel/klock.h ****  *
   9:../kernel/tkernel/klock.h ****  *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.
  10:../kernel/tkernel/klock.h ****  *
  11:../kernel/tkernel/klock.h ****  *----------------------------------------------------------------------
  12:../kernel/tkernel/klock.h ****  */
  13:../kernel/tkernel/klock.h **** /*
  14:../kernel/tkernel/klock.h ****  *	klock.h		Kernel Lock
  15:../kernel/tkernel/klock.h ****  *	Locked task is the highest run priority.
  16:../kernel/tkernel/klock.h ****  *	Unable to nest lock.
  17:../kernel/tkernel/klock.h ****  */
  18:../kernel/tkernel/klock.h **** 
  19:../kernel/tkernel/klock.h **** #ifndef _KLOCK_
  20:../kernel/tkernel/klock.h **** #define _KLOCK_
  21:../kernel/tkernel/klock.h **** 
  22:../kernel/tkernel/klock.h **** typedef struct objlock {
  23:../kernel/tkernel/klock.h **** 	QUEUE		wtskq;		/* Wait task queue */
  24:../kernel/tkernel/klock.h **** } OBJLOCK;
  25:../kernel/tkernel/klock.h **** 
  26:../kernel/tkernel/klock.h **** Inline void knl_InitOBJLOCK( OBJLOCK *loc )
  27:../kernel/tkernel/klock.h **** {
 156                             		.loc 3 27 1
 157 00b5 7E AA                   		push.l	r10
 158                             	.LCFI10:
 159 00b7 71 0A FC                		add	#-4, r0, r10
 160                             	.LCFI11:
 161 00ba EF A0                   		mov.L	r10, r0
 162 00bc E3 A1                   		mov.L	r1, [r10]
  28:../kernel/tkernel/klock.h **** 	loc->wtskq.next = NULL;
 163                             		.loc 3 28 18
 164 00be EC A5                   		mov.L	[r10], r5
 165 00c0 F8 56 00                		mov.L	#0, [r5]
  29:../kernel/tkernel/klock.h **** }
 166                             		.loc 3 29 1
 167 00c3 03                      		nop
 168 00c4 3F AA 02                		rtsd	#8, r10-r10
 169                             	.LFE19:
 172                             	_knl_mempool_end:
 173                             	.LFB36:
 174                             		.file 4 "../kernel/tkernel/mempfix.h"
   1:../kernel/tkernel/mempfix.h **** /*
   2:../kernel/tkernel/mempfix.h ****  *----------------------------------------------------------------------
   3:../kernel/tkernel/mempfix.h ****  *    micro T-Kernel 3.00.00
   4:../kernel/tkernel/mempfix.h ****  *
   5:../kernel/tkernel/mempfix.h ****  *    Copyright (C) 2006-2019 by Ken Sakamura.
   6:../kernel/tkernel/mempfix.h ****  *    This software is distributed under the T-License 2.1.
   7:../kernel/tkernel/mempfix.h ****  *----------------------------------------------------------------------
   8:../kernel/tkernel/mempfix.h ****  *
   9:../kernel/tkernel/mempfix.h ****  *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.
  10:../kernel/tkernel/mempfix.h ****  *
  11:../kernel/tkernel/mempfix.h ****  *----------------------------------------------------------------------
  12:../kernel/tkernel/mempfix.h ****  */
  13:../kernel/tkernel/mempfix.h **** 
  14:../kernel/tkernel/mempfix.h **** /*
  15:../kernel/tkernel/mempfix.h ****  *	mempfix.h
  16:../kernel/tkernel/mempfix.h ****  *	Fixed Size Memory Pool
  17:../kernel/tkernel/mempfix.h ****  */
  18:../kernel/tkernel/mempfix.h **** 
  19:../kernel/tkernel/mempfix.h **** #ifndef _MEMPFIX_H_
  20:../kernel/tkernel/mempfix.h **** #define _MEMPFIX_H_
  21:../kernel/tkernel/mempfix.h **** 
  22:../kernel/tkernel/mempfix.h **** /*
  23:../kernel/tkernel/mempfix.h ****  * Fixed size memory pool control block
  24:../kernel/tkernel/mempfix.h ****  */
  25:../kernel/tkernel/mempfix.h **** typedef struct free_list {
  26:../kernel/tkernel/mempfix.h **** 	struct free_list *next;
  27:../kernel/tkernel/mempfix.h **** } FREEL;
  28:../kernel/tkernel/mempfix.h **** 
  29:../kernel/tkernel/mempfix.h **** typedef struct fix_memorypool_control_block {
  30:../kernel/tkernel/mempfix.h **** 	QUEUE	wait_queue;	/* Memory pool wait queue */
  31:../kernel/tkernel/mempfix.h **** 	ID	mpfid;		/* Fixed size memory pool ID */
  32:../kernel/tkernel/mempfix.h **** 	void	*exinf;		/* Extended information */
  33:../kernel/tkernel/mempfix.h **** 	ATR	mpfatr;		/* Memory pool attribute */
  34:../kernel/tkernel/mempfix.h **** 	W	mpfcnt;		/* Number of blocks in whole memory pool */
  35:../kernel/tkernel/mempfix.h **** 	W	blfsz;		/* Fixed size memory block size */
  36:../kernel/tkernel/mempfix.h **** 	W	mpfsz;		/* Whole memory pool size */
  37:../kernel/tkernel/mempfix.h **** 	W	frbcnt;		/* Number of blocks in free area */
  38:../kernel/tkernel/mempfix.h **** 	void	*mempool;	/* Top address of memory pool */
  39:../kernel/tkernel/mempfix.h **** 	void	*unused;		/* Top address of unused area */
  40:../kernel/tkernel/mempfix.h **** 	FREEL	*freelist;	/* Free block list */
  41:../kernel/tkernel/mempfix.h **** 	OBJLOCK	lock;		/* Lock for object exclusive access */
  42:../kernel/tkernel/mempfix.h **** #if USE_OBJECT_NAME
  43:../kernel/tkernel/mempfix.h **** 	UB	name[OBJECT_NAME_LENGTH];	/* name */
  44:../kernel/tkernel/mempfix.h **** #endif
  45:../kernel/tkernel/mempfix.h **** } MPFCB;
  46:../kernel/tkernel/mempfix.h **** 
  47:../kernel/tkernel/mempfix.h **** IMPORT MPFCB knl_mpfcb_table[];	/* Fixed size memory pool control block */
  48:../kernel/tkernel/mempfix.h **** IMPORT QUEUE knl_free_mpfcb;	/* FreeQue */
  49:../kernel/tkernel/mempfix.h **** 
  50:../kernel/tkernel/mempfix.h **** #define get_mpfcb(id)	( &knl_mpfcb_table[INDEX_MPF(id)] )
  51:../kernel/tkernel/mempfix.h **** 
  52:../kernel/tkernel/mempfix.h **** 
  53:../kernel/tkernel/mempfix.h **** #define MINSIZE		( sizeof(FREEL) )
  54:../kernel/tkernel/mempfix.h **** #define MINSZ(sz)	( ((UW)(sz) + (UW)(MINSIZE-1)) & ~(UW)(MINSIZE-1) )
  55:../kernel/tkernel/mempfix.h **** 
  56:../kernel/tkernel/mempfix.h **** /*
  57:../kernel/tkernel/mempfix.h ****  * Return end address in memory pool area
  58:../kernel/tkernel/mempfix.h ****  */
  59:../kernel/tkernel/mempfix.h **** Inline void *knl_mempool_end( MPFCB *mpfcb )
  60:../kernel/tkernel/mempfix.h **** {
 175                             		.loc 4 60 1
 176 00c7 7E AA                   		push.l	r10
 177                             	.LCFI12:
 178 00c9 71 0A FC                		add	#-4, r0, r10
 179                             	.LCFI13:
 180 00cc EF A0                   		mov.L	r10, r0
 181 00ce E3 A1                   		mov.L	r1, [r10]
  61:../kernel/tkernel/mempfix.h **** 	return (VB*)mpfcb->mempool + mpfcb->mpfsz;
 182                             		.loc 4 61 19
 183 00d0 EC A5                   		mov.L	[r10], r5
 184 00d2 AA 5C                   		mov.L	36[r5], r4
 185                             		.loc 4 61 36
 186 00d4 EC A5                   		mov.L	[r10], r5
 187 00d6 A9 DD                   		mov.L	28[r5], r5
 188                             		.loc 4 61 29
 189 00d8 4B 45                   		add	r4, r5
  62:../kernel/tkernel/mempfix.h **** }
 190                             		.loc 4 62 1
 191 00da EF 51                   		mov.L	r5, r1
 192 00dc 3F AA 02                		rtsd	#8, r10-r10
 193                             	.LFE36:
 195                             		.global	_knl_mpfcb_table
 196                             		.section	.noinit,"aw"
 197                             		.balign 4
 200                             	_knl_mpfcb_table:
 201 0000 00 00 00 00 00 00 00 00 		.zero	448
 201      00 00 00 00 00 00 00 00 
 201      00 00 00 00 00 00 00 00 
 201      00 00 00 00 00 00 00 00 
 201      00 00 00 00 00 00 00 00 
 202                             		.global	_knl_free_mpfcb
 203                             		.balign 4
 206                             	_knl_free_mpfcb:
 207 01c0 00 00 00 00 00 00 00 00 		.zero	8
 208                             		.section P,"ax"
 209                             		.global	_knl_fix_memorypool_initialize
 211                             	_knl_fix_memorypool_initialize:
 212                             	.LFB37:
 213                             		.file 5 "../kernel/tkernel/mempfix.c"
   1:../kernel/tkernel/mempfix.c **** /*
   2:../kernel/tkernel/mempfix.c ****  *----------------------------------------------------------------------
   3:../kernel/tkernel/mempfix.c ****  *    micro T-Kernel 3.00.00
   4:../kernel/tkernel/mempfix.c ****  *
   5:../kernel/tkernel/mempfix.c ****  *    Copyright (C) 2006-2019 by Ken Sakamura.
   6:../kernel/tkernel/mempfix.c ****  *    This software is distributed under the T-License 2.1.
   7:../kernel/tkernel/mempfix.c ****  *----------------------------------------------------------------------
   8:../kernel/tkernel/mempfix.c ****  *
   9:../kernel/tkernel/mempfix.c ****  *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.
  10:../kernel/tkernel/mempfix.c ****  *
  11:../kernel/tkernel/mempfix.c ****  *----------------------------------------------------------------------
  12:../kernel/tkernel/mempfix.c ****  */
  13:../kernel/tkernel/mempfix.c **** 
  14:../kernel/tkernel/mempfix.c **** /*
  15:../kernel/tkernel/mempfix.c ****  *	mempfix.c
  16:../kernel/tkernel/mempfix.c ****  *	Fixed Size Memory Pool
  17:../kernel/tkernel/mempfix.c ****  */
  18:../kernel/tkernel/mempfix.c **** 
  19:../kernel/tkernel/mempfix.c **** #include "kernel.h"
  20:../kernel/tkernel/mempfix.c **** #include "klock.h"
  21:../kernel/tkernel/mempfix.c **** #include "wait.h"
  22:../kernel/tkernel/mempfix.c **** #include "check.h"
  23:../kernel/tkernel/mempfix.c **** #include "mempfix.h"
  24:../kernel/tkernel/mempfix.c **** 
  25:../kernel/tkernel/mempfix.c **** #if USE_FIX_MEMORYPOOL
  26:../kernel/tkernel/mempfix.c **** 
  27:../kernel/tkernel/mempfix.c **** Noinit(EXPORT MPFCB	knl_mpfcb_table[NUM_MPFID]);	/* Fixed size memory pool control block */
  28:../kernel/tkernel/mempfix.c **** Noinit(EXPORT QUEUE	knl_free_mpfcb);	/* FreeQue */
  29:../kernel/tkernel/mempfix.c **** 
  30:../kernel/tkernel/mempfix.c **** 
  31:../kernel/tkernel/mempfix.c **** /*
  32:../kernel/tkernel/mempfix.c ****  * Initialization of fixed size memory pool control block
  33:../kernel/tkernel/mempfix.c ****  */
  34:../kernel/tkernel/mempfix.c **** EXPORT ER knl_fix_memorypool_initialize( void )
  35:../kernel/tkernel/mempfix.c **** {
 214                             		.loc 5 35 1
 215 00df 7E AA                   		push.l	r10
 216                             	.LCFI14:
 217 00e1 71 0A F8                		add	#-8, r0, r10
 218                             	.LCFI15:
 219 00e4 EF A0                   		mov.L	r10, r0
  36:../kernel/tkernel/mempfix.c **** 	MPFCB	*mpfcb, *end;
  37:../kernel/tkernel/mempfix.c **** 
  38:../kernel/tkernel/mempfix.c **** 	/* Get system information */
  39:../kernel/tkernel/mempfix.c **** 	if ( NUM_MPFID < 1 ) {
  40:../kernel/tkernel/mempfix.c **** 		return E_SYS;
  41:../kernel/tkernel/mempfix.c **** 	}
  42:../kernel/tkernel/mempfix.c **** 
  43:../kernel/tkernel/mempfix.c **** 	/* Register all control blocks onto FreeQue */
  44:../kernel/tkernel/mempfix.c **** 	QueInit(&knl_free_mpfcb);
 220                             		.loc 5 44 2
 221 00e6 FB 12 00 00 00 00       		mov.L	#_knl_free_mpfcb, r1
 222 00ec 39 14 FF                		bsr	_QueInit
  45:../kernel/tkernel/mempfix.c **** 	end = knl_mpfcb_table + NUM_MPFID;
 223                             		.loc 5 45 6
 224 00ef F9 A2 01 00 00 00 00    		mov.L	#_knl_mpfcb_table+448, 4[r10]
  46:../kernel/tkernel/mempfix.c **** 	for ( mpfcb = knl_mpfcb_table; mpfcb < end; mpfcb++ ) {
 225                             		.loc 5 46 14
 226 00f6 F8 A2 00 00 00 00       		mov.L	#_knl_mpfcb_table, [r10]
 227                             		.loc 5 46 2
 228 00fc 2E 25                   		bra	.L14
 229                             	.L15:
  47:../kernel/tkernel/mempfix.c **** 		mpfcb->mpfid = 0;
 230                             		.loc 5 47 16 discriminator 3
 231 00fe EC A5                   		mov.L	[r10], r5
 232 0100 3E 52 00                		mov.L	#0, 8[r5]
  48:../kernel/tkernel/mempfix.c **** 		knl_InitOBJLOCK(&mpfcb->lock);
 233                             		.loc 5 48 3 discriminator 3
 234 0103 EC A5                   		mov.L	[r10], r5
 235 0105 71 55 30                		add	#48, r5
 236 0108 EF 51                   		mov.L	r5, r1
 237 010a 39 AB FF                		bsr	_knl_InitOBJLOCK
  49:../kernel/tkernel/mempfix.c **** 		QueInsert(&mpfcb->wait_queue, &knl_free_mpfcb);
 238                             		.loc 5 49 3 discriminator 3
 239 010d EC A5                   		mov.L	[r10], r5
 240 010f FB 22 00 00 00 00       		mov.L	#_knl_free_mpfcb, r2
 241 0115 EF 51                   		mov.L	r5, r1
 242 0117 39 1D FF                		bsr	_QueInsert
  46:../kernel/tkernel/mempfix.c **** 		mpfcb->mpfid = 0;
 243                             		.loc 5 46 51 discriminator 3
 244 011a EC A5                   		mov.L	[r10], r5
 245 011c 71 55 38                		add	#56, r5
 246 011f E3 A5                   		mov.L	r5, [r10]
 247                             	.L14:
  46:../kernel/tkernel/mempfix.c **** 		mpfcb->mpfid = 0;
 248                             		.loc 5 46 2 discriminator 1
 249 0121 EC A4                   		mov.L	[r10], r4
 250 0123 ED A5 01                		mov.L	4[r10], r5
 251 0126 47 54                   		cmp	r5, r4
 252 0128 23 D6                   		bltu	.L15
  50:../kernel/tkernel/mempfix.c **** 	}
  51:../kernel/tkernel/mempfix.c **** 
  52:../kernel/tkernel/mempfix.c **** 	return E_OK;
 253                             		.loc 5 52 9
 254 012a 66 05                   		mov.L	#0, r5
  53:../kernel/tkernel/mempfix.c **** }
 255                             		.loc 5 53 1
 256 012c EF 51                   		mov.L	r5, r1
 257 012e 3F AA 03                		rtsd	#12, r10-r10
 258                             	.LFE37:
 260                             		.global	_tk_cre_mpf
 262                             	_tk_cre_mpf:
 263                             	.LFB38:
  54:../kernel/tkernel/mempfix.c **** 
  55:../kernel/tkernel/mempfix.c **** 
  56:../kernel/tkernel/mempfix.c **** /*
  57:../kernel/tkernel/mempfix.c ****  * Create fixed size memory pool
  58:../kernel/tkernel/mempfix.c ****  */
  59:../kernel/tkernel/mempfix.c **** SYSCALL ID tk_cre_mpf( CONST T_CMPF *pk_cmpf )
  60:../kernel/tkernel/mempfix.c **** {
 264                             		.loc 5 60 1
 265 0131 6E 7A                   		pushm	r7-r10
 266                             	.LCFI16:
 267 0133 71 0A E4                		add	#-28, r0, r10
 268                             	.LCFI17:
 269 0136 EF A0                   		mov.L	r10, r0
 270 0138 E7 A1 06                		mov.L	r1, 24[r10]
  61:../kernel/tkernel/mempfix.c **** #if CHK_RSATR
  62:../kernel/tkernel/mempfix.c **** 	const ATR VALID_MPFATR = {
 271                             		.loc 5 62 12
 272 013b F9 AA 01 21 03          		mov.L	#0x321, 4[r10]
  63:../kernel/tkernel/mempfix.c **** 		 TA_TPRI
  64:../kernel/tkernel/mempfix.c **** 		|TA_RNG3
  65:../kernel/tkernel/mempfix.c **** 		|TA_USERBUF
  66:../kernel/tkernel/mempfix.c **** #if USE_OBJECT_NAME
  67:../kernel/tkernel/mempfix.c **** 		|TA_DSNAME
  68:../kernel/tkernel/mempfix.c **** #endif
  69:../kernel/tkernel/mempfix.c **** 	};
  70:../kernel/tkernel/mempfix.c **** #endif
  71:../kernel/tkernel/mempfix.c **** 	MPFCB	*mpfcb;
  72:../kernel/tkernel/mempfix.c **** 	ID	mpfid;
  73:../kernel/tkernel/mempfix.c **** 	W	blfsz, mpfsz;
  74:../kernel/tkernel/mempfix.c **** 	void	*mempool;
  75:../kernel/tkernel/mempfix.c **** 
  76:../kernel/tkernel/mempfix.c **** 	CHECK_RSATR(pk_cmpf->mpfatr, VALID_MPFATR);
 273                             		.loc 5 76 2
 274 0140 ED A5 06                		mov.L	24[r10], r5
 275 0143 A8 5C                   		mov.L	4[r5], r4
 276 0145 ED A5 01                		mov.L	4[r10], r5
 277 0148 7E 05                   		not	r5
 278 014a 53 45                   		and	r4, r5
 279 014c 61 05                   		cmp	#0, r5
 280 014e 17                      		beq	.L18
 281                             		.loc 5 76 2 is_stmt 0 discriminator 1
 282 014f FB 56 F5                		mov.L	#-11, r5
 283 0152 38 6E 01                		bra	.L19
 284                             	.L18:
  77:../kernel/tkernel/mempfix.c **** 	CHECK_PAR(pk_cmpf->mpfcnt > 0);
 285                             		.loc 5 77 2 is_stmt 1
 286 0155 ED A5 06                		mov.L	24[r10], r5
 287 0158 A8 D5                   		mov.L	8[r5], r5
 288 015a 61 05                   		cmp	#0, r5
 289 015c 2A 08                   		bgt	.L20
 290                             		.loc 5 77 2 is_stmt 0 discriminator 1
 291 015e FB 56 EF                		mov.L	#-17, r5
 292 0161 38 5F 01                		bra	.L19
 293                             	.L20:
  78:../kernel/tkernel/mempfix.c **** 	CHECK_PAR(pk_cmpf->blfsz > 0);
 294                             		.loc 5 78 2 is_stmt 1
 295 0164 ED A5 06                		mov.L	24[r10], r5
 296 0167 A8 DD                   		mov.L	12[r5], r5
 297 0169 61 05                   		cmp	#0, r5
 298 016b 2A 08                   		bgt	.L21
 299                             		.loc 5 78 2 is_stmt 0 discriminator 1
 300 016d FB 56 EF                		mov.L	#-17, r5
 301 0170 38 50 01                		bra	.L19
 302                             	.L21:
  79:../kernel/tkernel/mempfix.c **** #if !USE_IMALLOC
  80:../kernel/tkernel/mempfix.c **** 	/* TA_USERBUF must be specified if configured in no Imalloc */
  81:../kernel/tkernel/mempfix.c **** 	CHECK_PAR((pk_cmpf->mpfatr & TA_USERBUF) != 0);
  82:../kernel/tkernel/mempfix.c **** #endif
  83:../kernel/tkernel/mempfix.c **** 	CHECK_DISPATCH();
 303                             		.loc 5 83 2 is_stmt 1
 304 0173 FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 305 0179 EC 55                   		mov.L	[r5], r5
 306 017b 61 05                   		cmp	#0, r5
 307 017d 21 23                   		bne	.L22
 308                             		.loc 5 83 2 is_stmt 0 discriminator 2
 309 017f 39 1E FF                		bsr	_knl_isTaskIndependent
 310 0182 EF 15                   		mov.L	r1, r5
 311 0184 61 05                   		cmp	#0, r5
 312 0186 21 1A                   		bne	.L22
 313                             		.loc 5 83 2 discriminator 4
 314 0188 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 315 018e EC 55                   		mov.L	[r5], r5
 316 0190 61 05                   		cmp	#0, r5
 317 0192 20 0E                   		beq	.L22
 318                             		.loc 5 83 2 discriminator 6
 319 0194 05 00 00 00             		bsr	_GetCpuIntLevel
 320 0198 EF 15                   		mov.L	r1, r5
 321 019a 75 55 10                		cmp	#16, r5
 322 019d 19                      		bne	.L23
 323 019e EF 00                   		.balign 8,3,2
 324                             	.L22:
 325                             		.loc 5 83 2 discriminator 7
 326 01a0 FB 56 E7                		mov.L	#-25, r5
 327 01a3 38 1D 01                		bra	.L19
 328                             	.L23:
  84:../kernel/tkernel/mempfix.c **** 
  85:../kernel/tkernel/mempfix.c **** 	blfsz = (W)MINSZ(pk_cmpf->blfsz);
 329                             		.loc 5 85 13 is_stmt 1
 330 01a6 ED A5 06                		mov.L	24[r10], r5
 331 01a9 A8 DD                   		mov.L	12[r5], r5
 332 01ab 62 35                   		add	#3, r5
 333                             		.loc 5 85 8
 334 01ad 75 25 FC                		and	#-4, r5
 335 01b0 E7 A5 02                		mov.L	r5, 8[r10]
  86:../kernel/tkernel/mempfix.c **** 	mpfsz = blfsz * pk_cmpf->mpfcnt;
 336                             		.loc 5 86 25
 337 01b3 ED A5 06                		mov.L	24[r10], r5
 338 01b6 A8 D5                   		mov.L	8[r5], r5
 339                             		.loc 5 86 8
 340 01b8 ED A4 02                		mov.L	8[r10], r4
 341 01bb 4F 45                   		mul	r4, r5
 342 01bd E7 A5 03                		mov.L	r5, 12[r10]
  87:../kernel/tkernel/mempfix.c **** 
  88:../kernel/tkernel/mempfix.c **** #if USE_IMALLOC
  89:../kernel/tkernel/mempfix.c **** 	if ( (pk_cmpf->mpfatr & TA_USERBUF) != 0 ) {
 343                             		.loc 5 89 15
 344 01c0 ED A5 06                		mov.L	24[r10], r5
 345 01c3 A8 5D                   		mov.L	4[r5], r5
 346                             		.loc 5 89 24
 347 01c5 75 25 20                		and	#32, r5
 348                             		.loc 5 89 5
 349 01c8 61 05                   		cmp	#0, r5
 350 01ca 20 1C                   		beq	.L24
  90:../kernel/tkernel/mempfix.c **** 		/* Size of user buffer must be multiples of sizeof(FREEL) */
  91:../kernel/tkernel/mempfix.c **** 		if ( blfsz != pk_cmpf->blfsz ) {
 351                             		.loc 5 91 24
 352 01cc ED A5 06                		mov.L	24[r10], r5
 353 01cf A8 DD                   		mov.L	12[r5], r5
 354                             		.loc 5 91 6
 355 01d1 ED A4 02                		mov.L	8[r10], r4
 356 01d4 47 54                   		cmp	r5, r4
 357 01d6 17                      		beq	.L25
  92:../kernel/tkernel/mempfix.c **** 			return E_PAR;
 358                             		.loc 5 92 11
 359 01d7 FB 56 EF                		mov.L	#-17, r5
 360 01da 38 E6 00                		bra	.L19
 361                             	.L25:
  93:../kernel/tkernel/mempfix.c **** 		}
  94:../kernel/tkernel/mempfix.c **** 		/* Use user buffer */
  95:../kernel/tkernel/mempfix.c **** 		mempool = pk_cmpf->bufptr;
 362                             		.loc 5 95 11
 363 01dd ED A5 06                		mov.L	24[r10], r5
 364 01e0 A9 55                   		mov.L	16[r5], r5
 365 01e2 E3 A5                   		mov.L	r5, [r10]
 366 01e4 2E 16                   		bra	.L26
 367                             	.L24:
  96:../kernel/tkernel/mempfix.c **** 	} else {
  97:../kernel/tkernel/mempfix.c **** 		/* Allocate memory for memory pool */
  98:../kernel/tkernel/mempfix.c **** 		mempool = knl_Imalloc((UW)mpfsz);
 368                             		.loc 5 98 13
 369 01e6 ED A1 03                		mov.L	12[r10], r1
 370 01e9 05 00 00 00             		bsr	_knl_Imalloc
 371 01ed E3 A1                   		mov.L	r1, [r10]
  99:../kernel/tkernel/mempfix.c **** 		if ( mempool == NULL ) {
 372                             		.loc 5 99 6
 373 01ef EC A5                   		mov.L	[r10], r5
 374 01f1 61 05                   		cmp	#0, r5
 375 01f3 1F                      		bne	.L26
 100:../kernel/tkernel/mempfix.c **** 			return E_NOMEM;
 376                             		.loc 5 100 11
 377 01f4 FB 56 DF                		mov.L	#-33, r5
 378 01f7 38 C9 00                		bra	.L19
 379                             	.L26:
 101:../kernel/tkernel/mempfix.c **** 		}
 102:../kernel/tkernel/mempfix.c **** 	}
 103:../kernel/tkernel/mempfix.c **** #else
 104:../kernel/tkernel/mempfix.c **** 	/* Size of user buffer must be larger than sizeof(FREEL) */
 105:../kernel/tkernel/mempfix.c **** 	if ( blfsz != pk_cmpf->blfsz ) {
 106:../kernel/tkernel/mempfix.c **** 		return E_PAR;
 107:../kernel/tkernel/mempfix.c **** 	}
 108:../kernel/tkernel/mempfix.c **** 	/* Use user buffer */
 109:../kernel/tkernel/mempfix.c **** 	mempool = pk_cmpf->bufptr;
 110:../kernel/tkernel/mempfix.c **** #endif
 111:../kernel/tkernel/mempfix.c **** 
 112:../kernel/tkernel/mempfix.c **** 	/* Get control block from FreeQue */
 113:../kernel/tkernel/mempfix.c **** 	DISABLE_INTERRUPT;
 380                             		.loc 5 113 2
 381 01fa 05 00 00 00             		bsr	_disint
 114:../kernel/tkernel/mempfix.c **** 	mpfcb = (MPFCB*)QueRemoveNext(&knl_free_mpfcb);
 382                             		.loc 5 114 18
 383 01fe FB 12 00 00 00 00       		mov.L	#_knl_free_mpfcb, r1
 384 0204 39 60 FE                		bsr	_QueRemoveNext
 385 0207 E7 A1 04                		mov.L	r1, 16[r10]
 115:../kernel/tkernel/mempfix.c **** 	ENABLE_INTERRUPT;
 386                             		.loc 5 115 2
 387 020a 66 01                   		mov.L	#0, r1
 388 020c 05 00 00 00             		bsr	_setint
 116:../kernel/tkernel/mempfix.c **** 
 117:../kernel/tkernel/mempfix.c **** 	if ( mpfcb == NULL ) {
 389                             		.loc 5 117 5
 390 0210 ED A5 04                		mov.L	16[r10], r5
 391 0213 61 05                   		cmp	#0, r5
 392 0215 21 19                   		bne	.L27
 118:../kernel/tkernel/mempfix.c **** #if USE_IMALLOC
 119:../kernel/tkernel/mempfix.c **** 		if ( (pk_cmpf->mpfatr & TA_USERBUF) == 0 ) {
 393                             		.loc 5 119 16
 394 0217 ED A5 06                		mov.L	24[r10], r5
 395 021a A8 5D                   		mov.L	4[r5], r5
 396                             		.loc 5 119 25
 397 021c 75 25 20                		and	#32, r5
 398                             		.loc 5 119 6
 399 021f 61 05                   		cmp	#0, r5
 400 0221 1F                      		bne	.L28
 120:../kernel/tkernel/mempfix.c **** 			knl_Ifree(mempool);
 401                             		.loc 5 120 4
 402 0222 EC A1                   		mov.L	[r10], r1
 403 0224 05 00 00 00             		bsr	_knl_Ifree
 404                             	.L28:
 121:../kernel/tkernel/mempfix.c **** 		}
 122:../kernel/tkernel/mempfix.c **** #endif
 123:../kernel/tkernel/mempfix.c **** 		return E_LIMIT;
 405                             		.loc 5 123 10
 406 0228 FB 56 DE                		mov.L	#-34, r5
 407 022b 38 95 00                		bra	.L19
 408                             	.L27:
 124:../kernel/tkernel/mempfix.c **** 	}
 125:../kernel/tkernel/mempfix.c **** 
 126:../kernel/tkernel/mempfix.c **** 	knl_LockOBJ(&mpfcb->lock);
 409                             		.loc 5 126 2
 410 022e ED A5 04                		mov.L	16[r10], r5
 411 0231 71 55 30                		add	#48, r5
 412 0234 EF 51                   		mov.L	r5, r1
 413 0236 05 00 00 00             		bsr	_knl_LockOBJ
 127:../kernel/tkernel/mempfix.c **** 	mpfid = ID_MPF(mpfcb - knl_mpfcb_table);
 414                             		.loc 5 127 10
 415 023a ED A5 04                		mov.L	16[r10], r5
 416 023d FB 72 00 00 00 00       		mov.L	#_knl_mpfcb_table, r7
 417 0243 43 75                   		sub	r7, r5
 418 0245 6A 35                   		shar	#3, r5
 419 0247 74 15 B7 6D DB B6       		mul	#-1227133513, r5
 420                             		.loc 5 127 8
 421 024d 62 15                   		add	#1, r5
 422 024f E7 A5 05                		mov.L	r5, 20[r10]
 128:../kernel/tkernel/mempfix.c **** 
 129:../kernel/tkernel/mempfix.c **** 	/* Initialize control block */
 130:../kernel/tkernel/mempfix.c **** 	QueInit(&mpfcb->wait_queue);
 423                             		.loc 5 130 2
 424 0252 ED A5 04                		mov.L	16[r10], r5
 425 0255 EF 51                   		mov.L	r5, r1
 426 0257 39 A9 FD                		bsr	_QueInit
 131:../kernel/tkernel/mempfix.c **** 	mpfcb->exinf    = pk_cmpf->exinf;
 427                             		.loc 5 131 27
 428 025a ED A5 06                		mov.L	24[r10], r5
 429 025d EC 54                   		mov.L	[r5], r4
 430                             		.loc 5 131 18
 431 025f ED A5 04                		mov.L	16[r10], r5
 432 0262 A0 DC                   		mov.L	r4, 12[r5]
 132:../kernel/tkernel/mempfix.c **** 	mpfcb->mpfatr   = pk_cmpf->mpfatr;
 433                             		.loc 5 132 27
 434 0264 ED A5 06                		mov.L	24[r10], r5
 435 0267 A8 5C                   		mov.L	4[r5], r4
 436                             		.loc 5 132 18
 437 0269 ED A5 04                		mov.L	16[r10], r5
 438 026c A1 54                   		mov.L	r4, 16[r5]
 133:../kernel/tkernel/mempfix.c **** 	mpfcb->mpfcnt   = mpfcb->frbcnt = pk_cmpf->mpfcnt;
 439                             		.loc 5 133 43
 440 026e ED A5 06                		mov.L	24[r10], r5
 441 0271 A8 D4                   		mov.L	8[r5], r4
 442                             		.loc 5 133 34
 443 0273 ED A5 04                		mov.L	16[r10], r5
 444 0276 A2 54                   		mov.L	r4, 32[r5]
 445                             		.loc 5 133 25
 446 0278 ED A5 04                		mov.L	16[r10], r5
 447 027b AA 54                   		mov.L	32[r5], r4
 448                             		.loc 5 133 18
 449 027d ED A5 04                		mov.L	16[r10], r5
 450 0280 A1 5C                   		mov.L	r4, 20[r5]
 134:../kernel/tkernel/mempfix.c **** 	mpfcb->blfsz    = blfsz;
 451                             		.loc 5 134 18
 452 0282 ED A5 04                		mov.L	16[r10], r5
 453 0285 ED A4 02                		mov.L	8[r10], r4
 454 0288 A1 D4                   		mov.L	r4, 24[r5]
 135:../kernel/tkernel/mempfix.c **** 	mpfcb->mpfsz    = mpfsz;
 455                             		.loc 5 135 18
 456 028a ED A5 04                		mov.L	16[r10], r5
 457 028d ED A4 03                		mov.L	12[r10], r4
 458 0290 A1 DC                   		mov.L	r4, 28[r5]
 136:../kernel/tkernel/mempfix.c **** 	mpfcb->unused   = mpfcb->mempool = mempool;
 459                             		.loc 5 136 35
 460 0292 ED A5 04                		mov.L	16[r10], r5
 461 0295 EC A4                   		mov.L	[r10], r4
 462 0297 A2 5C                   		mov.L	r4, 36[r5]
 463                             		.loc 5 136 25
 464 0299 ED A5 04                		mov.L	16[r10], r5
 465 029c AA 5C                   		mov.L	36[r5], r4
 466                             		.loc 5 136 18
 467 029e ED A5 04                		mov.L	16[r10], r5
 468 02a1 A2 D4                   		mov.L	r4, 40[r5]
 137:../kernel/tkernel/mempfix.c **** 	mpfcb->freelist = NULL;
 469                             		.loc 5 137 18
 470 02a3 ED A5 04                		mov.L	16[r10], r5
 471 02a6 3E 5B 00                		mov.L	#0, 44[r5]
 138:../kernel/tkernel/mempfix.c **** #if USE_OBJECT_NAME
 139:../kernel/tkernel/mempfix.c **** 	if ( (pk_cmpf->mpfatr & TA_DSNAME) != 0 ) {
 140:../kernel/tkernel/mempfix.c **** 		knl_strncpy((char*)mpfcb->name, (char*)pk_cmpf->dsname, OBJECT_NAME_LENGTH);
 141:../kernel/tkernel/mempfix.c **** 	}
 142:../kernel/tkernel/mempfix.c **** #endif
 143:../kernel/tkernel/mempfix.c **** 
 144:../kernel/tkernel/mempfix.c **** 	mpfcb->mpfid    = mpfid;  /* Set ID after completion */
 472                             		.loc 5 144 18
 473 02a9 ED A5 04                		mov.L	16[r10], r5
 474 02ac ED A4 05                		mov.L	20[r10], r4
 475 02af A0 D4                   		mov.L	r4, 8[r5]
 145:../kernel/tkernel/mempfix.c **** 	knl_UnlockOBJ(&mpfcb->lock);
 476                             		.loc 5 145 2
 477 02b1 ED A5 04                		mov.L	16[r10], r5
 478 02b4 71 55 30                		add	#48, r5
 479 02b7 EF 51                   		mov.L	r5, r1
 480 02b9 05 00 00 00             		bsr	_knl_UnlockOBJ
 146:../kernel/tkernel/mempfix.c **** 
 147:../kernel/tkernel/mempfix.c **** 	return mpfid;
 481                             		.loc 5 147 9
 482 02bd ED A5 05                		mov.L	20[r10], r5
 483                             		.balign 8,3,1
 484                             	.L19:
 148:../kernel/tkernel/mempfix.c **** }
 485                             		.loc 5 148 1
 486 02c0 EF 51                   		mov.L	r5, r1
 487 02c2 3F 7A 0B                		rtsd	#44, r7-r10
 488                             	.LFE38:
 490                             		.global	_tk_del_mpf
 492                             	_tk_del_mpf:
 493                             	.LFB39:
 149:../kernel/tkernel/mempfix.c **** 
 150:../kernel/tkernel/mempfix.c **** #ifdef USE_FUNC_TK_DEL_MPF
 151:../kernel/tkernel/mempfix.c **** /*
 152:../kernel/tkernel/mempfix.c ****  * Delete fixed size memory pool 
 153:../kernel/tkernel/mempfix.c ****  */
 154:../kernel/tkernel/mempfix.c **** SYSCALL ER tk_del_mpf( ID mpfid )
 155:../kernel/tkernel/mempfix.c **** {
 494                             		.loc 5 155 1
 495 02c5 7E AA                   		push.l	r10
 496                             	.LCFI18:
 497 02c7 71 0A EC                		add	#-20, r0, r10
 498                             	.LCFI19:
 499 02ca EF A0                   		mov.L	r10, r0
 500 02cc E7 A1 04                		mov.L	r1, 16[r10]
 156:../kernel/tkernel/mempfix.c **** 	MPFCB	*mpfcb;
 157:../kernel/tkernel/mempfix.c **** 	void	*mempool = NULL;
 501                             		.loc 5 157 8
 502 02cf F8 A6 00                		mov.L	#0, [r10]
 158:../kernel/tkernel/mempfix.c **** 	ATR	memattr = 0;
 503                             		.loc 5 158 6
 504 02d2 F9 A6 01 00             		mov.L	#0, 4[r10]
 159:../kernel/tkernel/mempfix.c **** 	ER	ercd = E_OK;
 505                             		.loc 5 159 5
 506 02d6 F9 A6 02 00             		mov.L	#0, 8[r10]
 160:../kernel/tkernel/mempfix.c **** 
 161:../kernel/tkernel/mempfix.c **** 	CHECK_MPFID(mpfid);
 507                             		.loc 5 161 2
 508 02da ED A5 04                		mov.L	16[r10], r5
 509 02dd 61 05                   		cmp	#0, r5
 510 02df 2B 09                   		ble	.L30
 511                             		.loc 5 161 2 is_stmt 0 discriminator 2
 512 02e1 ED A5 04                		mov.L	16[r10], r5
 513 02e4 61 85                   		cmp	#8, r5
 514 02e6 2B 08                   		ble	.L31
 515                             	.L30:
 516                             		.loc 5 161 2 discriminator 3
 517 02e8 FB 56 EE                		mov.L	#-18, r5
 518 02eb 38 B9 00                		bra	.L32
 519                             	.L31:
 162:../kernel/tkernel/mempfix.c **** 	CHECK_DISPATCH();
 520                             		.loc 5 162 2 is_stmt 1
 521 02ee FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 522 02f4 EC 55                   		mov.L	[r5], r5
 523 02f6 61 05                   		cmp	#0, r5
 524 02f8 21 21                   		bne	.L33
 525                             		.loc 5 162 2 is_stmt 0 discriminator 2
 526 02fa 39 A3 FD                		bsr	_knl_isTaskIndependent
 527 02fd EF 15                   		mov.L	r1, r5
 528 02ff 61 05                   		cmp	#0, r5
 529 0301 21 18                   		bne	.L33
 530                             		.loc 5 162 2 discriminator 4
 531 0303 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 532 0309 EC 55                   		mov.L	[r5], r5
 533 030b 61 05                   		cmp	#0, r5
 534 030d 20 0C                   		beq	.L33
 535                             		.loc 5 162 2 discriminator 6
 536 030f 05 00 00 00             		bsr	_GetCpuIntLevel
 537 0313 EF 15                   		mov.L	r1, r5
 538 0315 75 55 10                		cmp	#16, r5
 539 0318 1F                      		bne	.L34
 540                             		.balign 8,3,2
 541                             	.L33:
 542                             		.loc 5 162 2 discriminator 7
 543 0319 FB 56 E7                		mov.L	#-25, r5
 544 031c 38 88 00                		bra	.L32
 545                             	.L34:
 163:../kernel/tkernel/mempfix.c **** 
 164:../kernel/tkernel/mempfix.c **** 	mpfcb = get_mpfcb(mpfid);
 546                             		.loc 5 164 10 is_stmt 1
 547 031f ED A5 04                		mov.L	16[r10], r5
 548 0322 60 15                   		sub	#1, r5
 549                             		.loc 5 164 8
 550 0324 75 15 38                		mul	#56, r5
 551 0327 70 55 00 00 00 00       		add	#_knl_mpfcb_table, r5
 552 032d E7 A5 03                		mov.L	r5, 12[r10]
 165:../kernel/tkernel/mempfix.c **** 
 166:../kernel/tkernel/mempfix.c **** 	knl_LockOBJ(&mpfcb->lock);
 553                             		.loc 5 166 2
 554 0330 ED A5 03                		mov.L	12[r10], r5
 555 0333 71 55 30                		add	#48, r5
 556 0336 EF 51                   		mov.L	r5, r1
 557 0338 05 00 00 00             		bsr	_knl_LockOBJ
 167:../kernel/tkernel/mempfix.c **** 	if ( mpfcb->mpfid == 0 ) {
 558                             		.loc 5 167 12
 559 033c ED A5 03                		mov.L	12[r10], r5
 560 033f A8 D5                   		mov.L	8[r5], r5
 561                             		.loc 5 167 5
 562 0341 61 05                   		cmp	#0, r5
 563 0343 1F                      		bne	.L35
 168:../kernel/tkernel/mempfix.c **** 		ercd = E_NOEXS;
 564                             		.loc 5 168 8
 565 0344 F9 A6 02 D6             		mov.L	#-42, 8[r10]
 566 0348 2E 38                   		bra	.L36
 567                             	.L35:
 169:../kernel/tkernel/mempfix.c **** 	} else {
 170:../kernel/tkernel/mempfix.c **** 		DISABLE_INTERRUPT;
 568                             		.loc 5 170 3
 569 034a 05 00 00 00             		bsr	_disint
 171:../kernel/tkernel/mempfix.c **** 		mempool = mpfcb->mempool;
 570                             		.loc 5 171 11
 571 034e ED A5 03                		mov.L	12[r10], r5
 572 0351 AA 5D                   		mov.L	36[r5], r5
 573 0353 E3 A5                   		mov.L	r5, [r10]
 172:../kernel/tkernel/mempfix.c **** 		memattr = mpfcb->mpfatr;
 574                             		.loc 5 172 11
 575 0355 ED A5 03                		mov.L	12[r10], r5
 576 0358 A9 55                   		mov.L	16[r5], r5
 577 035a E7 A5 01                		mov.L	r5, 4[r10]
 173:../kernel/tkernel/mempfix.c **** 
 174:../kernel/tkernel/mempfix.c **** 		/* Release wait state of task (E_DLT) */
 175:../kernel/tkernel/mempfix.c **** 		knl_wait_delete(&mpfcb->wait_queue);
 578                             		.loc 5 175 3
 579 035d ED A5 03                		mov.L	12[r10], r5
 580 0360 EF 51                   		mov.L	r5, r1
 581 0362 05 00 00 00             		bsr	_knl_wait_delete
 176:../kernel/tkernel/mempfix.c **** 
 177:../kernel/tkernel/mempfix.c **** 		/* Return to FreeQue */
 178:../kernel/tkernel/mempfix.c **** 		QueInsert(&mpfcb->wait_queue, &knl_free_mpfcb);
 582                             		.loc 5 178 3
 583 0366 ED A5 03                		mov.L	12[r10], r5
 584 0369 FB 22 00 00 00 00       		mov.L	#_knl_free_mpfcb, r2
 585 036f EF 51                   		mov.L	r5, r1
 586 0371 39 C3 FC                		bsr	_QueInsert
 179:../kernel/tkernel/mempfix.c **** 		mpfcb->mpfid = 0;
 587                             		.loc 5 179 16
 588 0374 ED A5 03                		mov.L	12[r10], r5
 589 0377 3E 52 00                		mov.L	#0, 8[r5]
 180:../kernel/tkernel/mempfix.c **** 		ENABLE_INTERRUPT;
 590                             		.loc 5 180 3
 591 037a 66 01                   		mov.L	#0, r1
 592 037c 05 00 00 00             		bsr	_setint
 593                             	.L36:
 181:../kernel/tkernel/mempfix.c **** 	}
 182:../kernel/tkernel/mempfix.c **** 	knl_UnlockOBJ(&mpfcb->lock);
 594                             		.loc 5 182 2
 595 0380 ED A5 03                		mov.L	12[r10], r5
 596 0383 71 55 30                		add	#48, r5
 597 0386 EF 51                   		mov.L	r5, r1
 598 0388 05 00 00 00             		bsr	_knl_UnlockOBJ
 183:../kernel/tkernel/mempfix.c **** 
 184:../kernel/tkernel/mempfix.c **** #if USE_IMALLOC
 185:../kernel/tkernel/mempfix.c **** 	if ( (mempool != NULL) && ((memattr & TA_USERBUF) == 0) ) {
 599                             		.loc 5 185 5
 600 038c EC A5                   		mov.L	[r10], r5
 601 038e 61 05                   		cmp	#0, r5
 602 0390 20 11                   		beq	.L37
 603                             		.loc 5 185 38 discriminator 1
 604 0392 ED A5 01                		mov.L	4[r10], r5
 605 0395 75 25 20                		and	#32, r5
 606                             		.loc 5 185 25 discriminator 1
 607 0398 61 05                   		cmp	#0, r5
 608 039a 1F                      		bne	.L37
 186:../kernel/tkernel/mempfix.c **** 		knl_Ifree(mempool);
 609                             		.loc 5 186 3
 610 039b EC A1                   		mov.L	[r10], r1
 611 039d 05 00 00 00             		bsr	_knl_Ifree
 612                             	.L37:
 187:../kernel/tkernel/mempfix.c **** 	}
 188:../kernel/tkernel/mempfix.c **** #endif
 189:../kernel/tkernel/mempfix.c **** 
 190:../kernel/tkernel/mempfix.c **** 	return ercd;
 613                             		.loc 5 190 9
 614 03a1 ED A5 02                		mov.L	8[r10], r5
 615                             	.L32:
 191:../kernel/tkernel/mempfix.c **** }
 616                             		.loc 5 191 1
 617 03a4 EF 51                   		mov.L	r5, r1
 618 03a6 3F AA 06                		rtsd	#24, r10-r10
 619                             	.LFE39:
 622                             	_knl_mpf_chg_pri:
 623                             	.LFB40:
 192:../kernel/tkernel/mempfix.c **** #endif /* USE_FUNC_TK_DEL_MPF */
 193:../kernel/tkernel/mempfix.c **** 
 194:../kernel/tkernel/mempfix.c **** /*
 195:../kernel/tkernel/mempfix.c ****  * Processing if the priority of wait task changes
 196:../kernel/tkernel/mempfix.c ****  */
 197:../kernel/tkernel/mempfix.c **** LOCAL void knl_mpf_chg_pri( TCB *tcb, INT oldpri )
 198:../kernel/tkernel/mempfix.c **** {
 624                             		.loc 5 198 1
 625 03a9 7E AA                   		push.l	r10
 626                             	.LCFI20:
 627 03ab 71 0A F4                		add	#-12, r0, r10
 628                             	.LCFI21:
 629 03ae EF A0                   		mov.L	r10, r0
 630 03b0 E7 A1 01                		mov.L	r1, 4[r10]
 631 03b3 E7 A2 02                		mov.L	r2, 8[r10]
 199:../kernel/tkernel/mempfix.c **** 	MPFCB	*mpfcb;
 200:../kernel/tkernel/mempfix.c **** 
 201:../kernel/tkernel/mempfix.c **** 	mpfcb = get_mpfcb(tcb->wid);
 632                             		.loc 5 201 10
 633 03b6 ED A5 01                		mov.L	4[r10], r5
 634 03b9 AB 55                   		mov.L	48[r5], r5
 635 03bb 60 15                   		sub	#1, r5
 636                             		.loc 5 201 8
 637 03bd 75 15 38                		mul	#56, r5
 638 03c0 70 55 00 00 00 00       		add	#_knl_mpfcb_table, r5
 639 03c6 E3 A5                   		mov.L	r5, [r10]
 202:../kernel/tkernel/mempfix.c **** 	knl_gcb_change_priority((GCB*)mpfcb, tcb);
 640                             		.loc 5 202 2
 641 03c8 ED A2 01                		mov.L	4[r10], r2
 642 03cb EC A1                   		mov.L	[r10], r1
 643 03cd 05 00 00 00             		bsr	_knl_gcb_change_priority
 203:../kernel/tkernel/mempfix.c **** }
 644                             		.loc 5 203 1
 645 03d1 03                      		nop
 646 03d2 3F AA 04                		rtsd	#16, r10-r10
 647                             	.LFE40:
 649                             		.section C,"a",@progbits
 650                             		.p2align 2
 651                             		.balign 4
 654                             	_knl_wspec_mpf_tfifo:
 655 0000 00 20 00 00             		.long	0x2000
 656 0004 00 00 00 00             		.long	0
 657 0008 00 00 00 00             		.long	0
 658                             		.balign 4
 661                             	_knl_wspec_mpf_tpri:
 662 000c 00 20 00 00             		.long	0x2000
 663 0010 A9 03 00 00             		.long	_knl_mpf_chg_pri
 664 0014 00 00 00 00             		.long	0
 665                             		.section P,"ax"
 666                             		.global	_tk_get_mpf
 668                             	_tk_get_mpf:
 669                             	.LFB41:
 204:../kernel/tkernel/mempfix.c **** 
 205:../kernel/tkernel/mempfix.c **** /*
 206:../kernel/tkernel/mempfix.c ****  * Definition of fixed size memory pool wait specification
 207:../kernel/tkernel/mempfix.c ****  */
 208:../kernel/tkernel/mempfix.c **** LOCAL CONST WSPEC knl_wspec_mpf_tfifo = { TTW_MPF, NULL, NULL };
 209:../kernel/tkernel/mempfix.c **** LOCAL CONST WSPEC knl_wspec_mpf_tpri  = { TTW_MPF, knl_mpf_chg_pri, NULL };
 210:../kernel/tkernel/mempfix.c **** 
 211:../kernel/tkernel/mempfix.c **** /*
 212:../kernel/tkernel/mempfix.c ****  * Get fixed size memory block 
 213:../kernel/tkernel/mempfix.c ****  */
 214:../kernel/tkernel/mempfix.c **** SYSCALL ER tk_get_mpf( ID mpfid, void **p_blf, TMO tmout )
 215:../kernel/tkernel/mempfix.c **** {
 670                             		.loc 5 215 1
 671 03d5 7E AA                   		push.l	r10
 672                             	.LCFI22:
 673 03d7 71 0A E4                		add	#-28, r0, r10
 674                             	.LCFI23:
 675 03da EF A0                   		mov.L	r10, r0
 676 03dc E7 A1 04                		mov.L	r1, 16[r10]
 677 03df E7 A2 05                		mov.L	r2, 20[r10]
 678 03e2 E7 A3 06                		mov.L	r3, 24[r10]
 216:../kernel/tkernel/mempfix.c **** 	MPFCB	*mpfcb;
 217:../kernel/tkernel/mempfix.c **** 	FREEL	*free;
 218:../kernel/tkernel/mempfix.c **** 	ER	ercd = E_OK;
 679                             		.loc 5 218 5
 680 03e5 F9 A6 03 00             		mov.L	#0, 12[r10]
 219:../kernel/tkernel/mempfix.c **** 
 220:../kernel/tkernel/mempfix.c **** 	CHECK_MPFID(mpfid);
 681                             		.loc 5 220 2
 682 03e9 ED A5 04                		mov.L	16[r10], r5
 683 03ec 61 05                   		cmp	#0, r5
 684 03ee 2B 09                   		ble	.L40
 685                             		.loc 5 220 2 is_stmt 0 discriminator 2
 686 03f0 ED A5 04                		mov.L	16[r10], r5
 687 03f3 61 85                   		cmp	#8, r5
 688 03f5 2B 08                   		ble	.L41
 689                             	.L40:
 690                             		.loc 5 220 2 discriminator 3
 691 03f7 FB 56 EE                		mov.L	#-18, r5
 692 03fa 38 5C 01                		bra	.L55
 693                             	.L41:
 221:../kernel/tkernel/mempfix.c **** 	CHECK_TMOUT(tmout);
 694                             		.loc 5 221 2 is_stmt 1
 695 03fd ED A5 06                		mov.L	24[r10], r5
 696 0400 75 05 FF                		cmp	#-1, r5
 697 0403 28 08                   		bge	.L43
 698                             		.loc 5 221 2 is_stmt 0 discriminator 1
 699 0405 FB 56 EF                		mov.L	#-17, r5
 700 0408 38 4E 01                		bra	.L55
 701                             	.L43:
 222:../kernel/tkernel/mempfix.c **** 	CHECK_DISPATCH();
 702                             		.loc 5 222 2 is_stmt 1
 703 040b FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 704 0411 EC 55                   		mov.L	[r5], r5
 705 0413 61 05                   		cmp	#0, r5
 706 0415 21 23                   		bne	.L44
 707                             		.loc 5 222 2 is_stmt 0 discriminator 2
 708 0417 39 86 FC                		bsr	_knl_isTaskIndependent
 709 041a EF 15                   		mov.L	r1, r5
 710 041c 61 05                   		cmp	#0, r5
 711 041e 21 1A                   		bne	.L44
 712                             		.loc 5 222 2 discriminator 4
 713 0420 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 714 0426 EC 55                   		mov.L	[r5], r5
 715 0428 61 05                   		cmp	#0, r5
 716 042a 20 0E                   		beq	.L44
 717                             		.loc 5 222 2 discriminator 6
 718 042c 05 00 00 00             		bsr	_GetCpuIntLevel
 719 0430 EF 15                   		mov.L	r1, r5
 720 0432 75 55 10                		cmp	#16, r5
 721 0435 19                      		bne	.L45
 722 0436 EF 00                   		.balign 8,3,2
 723                             	.L44:
 724                             		.loc 5 222 2 discriminator 7
 725 0438 FB 56 E7                		mov.L	#-25, r5
 726 043b 38 1B 01                		bra	.L55
 727                             	.L45:
 223:../kernel/tkernel/mempfix.c **** 
 224:../kernel/tkernel/mempfix.c **** 	mpfcb = get_mpfcb(mpfid);
 728                             		.loc 5 224 10 is_stmt 1
 729 043e ED A5 04                		mov.L	16[r10], r5
 730 0441 60 15                   		sub	#1, r5
 731                             		.loc 5 224 8
 732 0443 75 15 38                		mul	#56, r5
 733 0446 70 55 00 00 00 00       		add	#_knl_mpfcb_table, r5
 734 044c E3 A5                   		mov.L	r5, [r10]
 225:../kernel/tkernel/mempfix.c **** 
 226:../kernel/tkernel/mempfix.c **** 	knl_LockOBJ(&mpfcb->lock);
 735                             		.loc 5 226 2
 736 044e EC A5                   		mov.L	[r10], r5
 737 0450 71 55 30                		add	#48, r5
 738 0453 EF 51                   		mov.L	r5, r1
 739 0455 05 00 00 00             		bsr	_knl_LockOBJ
 227:../kernel/tkernel/mempfix.c **** 	if ( mpfcb->mpfid == 0 ) {
 740                             		.loc 5 227 12
 741 0459 EC A5                   		mov.L	[r10], r5
 742 045b A8 D5                   		mov.L	8[r5], r5
 743                             		.loc 5 227 5
 744 045d 61 05                   		cmp	#0, r5
 745 045f 1F                      		bne	.L46
 228:../kernel/tkernel/mempfix.c **** 		ercd = E_NOEXS;
 746                             		.loc 5 228 8
 747 0460 F9 A6 03 D6             		mov.L	#-42, 12[r10]
 229:../kernel/tkernel/mempfix.c **** 		goto error_exit;
 748                             		.loc 5 229 3
 749 0464 2E 4E                   		bra	.L47
 750                             	.L46:
 230:../kernel/tkernel/mempfix.c **** 	}
 231:../kernel/tkernel/mempfix.c **** 
 232:../kernel/tkernel/mempfix.c **** 	/* If there is no space, ready for wait */
 233:../kernel/tkernel/mempfix.c **** 	if ( mpfcb->frbcnt <= 0 ) {
 751                             		.loc 5 233 12
 752 0466 EC A5                   		mov.L	[r10], r5
 753 0468 AA 55                   		mov.L	32[r5], r5
 754                             		.loc 5 233 5
 755 046a 61 05                   		cmp	#0, r5
 756 046c 2B 57                   		ble	.L57
 234:../kernel/tkernel/mempfix.c **** 		goto wait_mpf;
 235:../kernel/tkernel/mempfix.c **** 	} else {
 236:../kernel/tkernel/mempfix.c **** 		/* Get memory block */
 237:../kernel/tkernel/mempfix.c **** 		if ( mpfcb->freelist != NULL ) {
 757                             		.loc 5 237 13
 758 046e EC A5                   		mov.L	[r10], r5
 759 0470 AA DD                   		mov.L	44[r5], r5
 760                             		.loc 5 237 6
 761 0472 61 05                   		cmp	#0, r5
 762 0474 20 1C                   		beq	.L50
 238:../kernel/tkernel/mempfix.c **** 			free = mpfcb->freelist;
 763                             		.loc 5 238 9
 764 0476 EC A5                   		mov.L	[r10], r5
 765 0478 AA DD                   		mov.L	44[r5], r5
 766 047a E7 A5 02                		mov.L	r5, 8[r10]
 239:../kernel/tkernel/mempfix.c **** 			mpfcb->freelist = free->next;
 767                             		.loc 5 239 26
 768 047d ED A5 02                		mov.L	8[r10], r5
 769 0480 EC 54                   		mov.L	[r5], r4
 770                             		.loc 5 239 20
 771 0482 EC A5                   		mov.L	[r10], r5
 772 0484 A2 DC                   		mov.L	r4, 44[r5]
 240:../kernel/tkernel/mempfix.c **** 			*p_blf = free;
 773                             		.loc 5 240 11
 774 0486 ED A5 05                		mov.L	20[r10], r5
 775 0489 ED A4 02                		mov.L	8[r10], r4
 776 048c E3 54                   		mov.L	r4, [r5]
 777 048e 2E 19                   		bra	.L51
 778                             	.L50:
 241:../kernel/tkernel/mempfix.c **** 		} else {
 242:../kernel/tkernel/mempfix.c **** 			*p_blf = mpfcb->unused;
 779                             		.loc 5 242 18
 780 0490 EC A5                   		mov.L	[r10], r5
 781 0492 AA D4                   		mov.L	40[r5], r4
 782                             		.loc 5 242 11
 783 0494 ED A5 05                		mov.L	20[r10], r5
 784 0497 E3 54                   		mov.L	r4, [r5]
 243:../kernel/tkernel/mempfix.c **** 			mpfcb->unused = (VB*)mpfcb->unused + mpfcb->blfsz;
 785                             		.loc 5 243 30
 786 0499 EC A5                   		mov.L	[r10], r5
 787 049b AA D4                   		mov.L	40[r5], r4
 788                             		.loc 5 243 46
 789 049d EC A5                   		mov.L	[r10], r5
 790 049f A9 D5                   		mov.L	24[r5], r5
 791                             		.loc 5 243 39
 792 04a1 4B 54                   		add	r5, r4
 793                             		.loc 5 243 18
 794 04a3 EC A5                   		mov.L	[r10], r5
 795 04a5 A2 D4                   		mov.L	r4, 40[r5]
 796                             	.L51:
 244:../kernel/tkernel/mempfix.c **** 		}
 245:../kernel/tkernel/mempfix.c **** 		mpfcb->frbcnt--;
 797                             		.loc 5 245 8
 798 04a7 EC A5                   		mov.L	[r10], r5
 799 04a9 AA 55                   		mov.L	32[r5], r5
 800                             		.loc 5 245 16
 801 04ab 71 54 FF                		add	#-1, r5, r4
 802 04ae EC A5                   		mov.L	[r10], r5
 803 04b0 A2 54                   		mov.L	r4, 32[r5]
 804                             	.L47:
 246:../kernel/tkernel/mempfix.c **** 	}
 247:../kernel/tkernel/mempfix.c **** 
 248:../kernel/tkernel/mempfix.c ****     error_exit:
 249:../kernel/tkernel/mempfix.c **** 	knl_UnlockOBJ(&mpfcb->lock);
 805                             		.loc 5 249 2
 806 04b2 EC A5                   		mov.L	[r10], r5
 807 04b4 71 55 30                		add	#48, r5
 808 04b7 EF 51                   		mov.L	r5, r1
 809 04b9 05 00 00 00             		bsr	_knl_UnlockOBJ
 250:../kernel/tkernel/mempfix.c **** 
 251:../kernel/tkernel/mempfix.c **** 	return ercd;
 810                             		.loc 5 251 9
 811 04bd ED A5 03                		mov.L	12[r10], r5
 812 04c0 38 96 00                		bra	.L55
 813                             	.L57:
 234:../kernel/tkernel/mempfix.c **** 	} else {
 814                             		.loc 5 234 3
 815 04c3 03                      		nop
 816                             	.L49:
 817                             	.LBB2:
 252:../kernel/tkernel/mempfix.c **** 
 253:../kernel/tkernel/mempfix.c **** wait_mpf:
 254:../kernel/tkernel/mempfix.c **** 	/* Ready for wait */
 255:../kernel/tkernel/mempfix.c **** 	BEGIN_CRITICAL_SECTION;
 818                             		.loc 5 255 2
 819 04c4 05 00 00 00             		bsr	_disint
 820 04c8 E7 A1 01                		mov.L	r1, 4[r10]
 256:../kernel/tkernel/mempfix.c **** 	knl_ctxtsk->wspec = ( (mpfcb->mpfatr & TA_TPRI) != 0 )?
 821                             		.loc 5 256 30
 822 04cb EC A5                   		mov.L	[r10], r5
 823 04cd A9 55                   		mov.L	16[r5], r5
 824                             		.loc 5 256 39
 825 04cf 64 15                   		and	#1, r5
 257:../kernel/tkernel/mempfix.c **** 				&knl_wspec_mpf_tpri: &knl_wspec_mpf_tfifo;
 826                             		.loc 5 257 24
 827 04d1 61 05                   		cmp	#0, r5
 828 04d3 10                      		beq	.L52
 829                             		.loc 5 257 24 is_stmt 0 discriminator 1
 830 04d4 FB 42 0C 00 00 00       		mov.L	#_knl_wspec_mpf_tpri, r4
 831 04da 0F                      		bra	.L53
 832                             	.L52:
 833                             		.loc 5 257 24 discriminator 2
 834 04db FB 42 00 00 00 00       		mov.L	#_knl_wspec_mpf_tfifo, r4
 835                             	.L53:
 256:../kernel/tkernel/mempfix.c **** 	knl_ctxtsk->wspec = ( (mpfcb->mpfatr & TA_TPRI) != 0 )?
 836                             		.loc 5 256 12 is_stmt 1
 837 04e1 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 838 04e7 EC 55                   		mov.L	[r5], r5
 256:../kernel/tkernel/mempfix.c **** 	knl_ctxtsk->wspec = ( (mpfcb->mpfatr & TA_TPRI) != 0 )?
 839                             		.loc 5 256 20
 840 04e9 A2 DC                   		mov.L	r4, 44[r5]
 258:../kernel/tkernel/mempfix.c **** 	knl_ctxtsk->wercd = &ercd;
 841                             		.loc 5 258 12
 842 04eb FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 843 04f1 EC 55                   		mov.L	[r5], r5
 844                             		.loc 5 258 20
 845 04f3 71 A4 0C                		add	#12, r10, r4
 846 04f6 A3 DC                   		mov.L	r4, 60[r5]
 259:../kernel/tkernel/mempfix.c **** 	knl_ctxtsk->winfo.mpf.p_blf = p_blf;
 847                             		.loc 5 259 12
 848 04f8 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 849 04fe EC 55                   		mov.L	[r5], r5
 850                             		.loc 5 259 30
 851 0500 ED A4 05                		mov.L	20[r10], r4
 852 0503 A4 54                   		mov.L	r4, 64[r5]
 260:../kernel/tkernel/mempfix.c **** 	knl_gcb_make_wait((GCB*)mpfcb, tmout);
 853                             		.loc 5 260 2
 854 0505 ED A2 06                		mov.L	24[r10], r2
 855 0508 EC A1                   		mov.L	[r10], r1
 856 050a 05 00 00 00             		bsr	_knl_gcb_make_wait
 261:../kernel/tkernel/mempfix.c **** 
 262:../kernel/tkernel/mempfix.c **** 	knl_UnlockOBJ(&mpfcb->lock);
 857                             		.loc 5 262 2
 858 050e EC A5                   		mov.L	[r10], r5
 859 0510 71 55 30                		add	#48, r5
 860 0513 EF 51                   		mov.L	r5, r1
 861 0515 05 00 00 00             		bsr	_knl_UnlockOBJ
 263:../kernel/tkernel/mempfix.c **** 	END_CRITICAL_SECTION;
 862                             		.loc 5 263 2
 863 0519 ED A5 01                		mov.L	4[r10], r5
 864 051c 61 F5                   		cmp	#15, r5
 865 051e 20 2E                   		beq	.L54
 866                             		.loc 5 263 2 is_stmt 0 discriminator 1
 867 0520 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 868 0526 EC 54                   		mov.L	[r5], r4
 869 0528 FB 52 00 00 00 00       		mov.L	#_knl_schedtsk, r5
 870 052e EC 55                   		mov.L	[r5], r5
 871 0530 47 54                   		cmp	r5, r4
 872 0532 20 1A                   		beq	.L54
 873                             		.loc 5 263 2 discriminator 3
 874 0534 39 69 FB                		bsr	_knl_isTaskIndependent
 875 0537 EF 15                   		mov.L	r1, r5
 876 0539 61 05                   		cmp	#0, r5
 877 053b 21 11                   		bne	.L54
 878                             		.loc 5 263 2 discriminator 5
 879 053d FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 880 0543 EC 55                   		mov.L	[r5], r5
 881 0545 61 05                   		cmp	#0, r5
 882 0547 1D                      		bne	.L54
 883                             		.loc 5 263 2 discriminator 7
 884 0548 05 00 00 00             		bsr	_knl_dispatch
 885                             		.balign 8,3,1
 886                             	.L54:
 887                             		.loc 5 263 2 discriminator 9
 888 054c ED A1 01                		mov.L	4[r10], r1
 889 054f 05 00 00 00             		bsr	_setint
 890                             	.LBE2:
 264:../kernel/tkernel/mempfix.c **** 
 265:../kernel/tkernel/mempfix.c **** 	return ercd;
 891                             		.loc 5 265 9 is_stmt 1 discriminator 9
 892 0553 ED A5 03                		mov.L	12[r10], r5
 893                             		.balign 8,3,1
 894                             	.L55:
 266:../kernel/tkernel/mempfix.c **** }
 895                             		.loc 5 266 1 discriminator 1
 896 0556 EF 51                   		mov.L	r5, r1
 897 0558 3F AA 08                		rtsd	#32, r10-r10
 898                             	.LFE41:
 900                             		.global	_tk_rel_mpf
 902                             	_tk_rel_mpf:
 903                             	.LFB42:
 267:../kernel/tkernel/mempfix.c **** 
 268:../kernel/tkernel/mempfix.c **** /*
 269:../kernel/tkernel/mempfix.c ****  * Return fixed size memory block 
 270:../kernel/tkernel/mempfix.c ****  */
 271:../kernel/tkernel/mempfix.c **** SYSCALL ER tk_rel_mpf( ID mpfid, void *blf )
 272:../kernel/tkernel/mempfix.c **** {
 904                             		.loc 5 272 1
 905 055b 7E AA                   		push.l	r10
 906                             	.LCFI24:
 907 055d 71 0A E8                		add	#-24, r0, r10
 908                             	.LCFI25:
 909 0560 EF A0                   		mov.L	r10, r0
 910 0562 E7 A1 04                		mov.L	r1, 16[r10]
 911 0565 E7 A2 05                		mov.L	r2, 20[r10]
 273:../kernel/tkernel/mempfix.c **** 	MPFCB	*mpfcb;
 274:../kernel/tkernel/mempfix.c **** 	TCB	*tcb;
 275:../kernel/tkernel/mempfix.c **** 	FREEL	*free;
 276:../kernel/tkernel/mempfix.c **** 	ER	ercd = E_OK;
 912                             		.loc 5 276 5
 913 0568 F8 A6 00                		mov.L	#0, [r10]
 277:../kernel/tkernel/mempfix.c **** 
 278:../kernel/tkernel/mempfix.c **** 	CHECK_MPFID(mpfid);
 914                             		.loc 5 278 2
 915 056b ED A5 04                		mov.L	16[r10], r5
 916 056e 61 05                   		cmp	#0, r5
 917 0570 2B 09                   		ble	.L59
 918                             		.loc 5 278 2 is_stmt 0 discriminator 2
 919 0572 ED A5 04                		mov.L	16[r10], r5
 920 0575 61 85                   		cmp	#8, r5
 921 0577 2B 08                   		ble	.L60
 922                             	.L59:
 923                             		.loc 5 278 2 discriminator 3
 924 0579 FB 56 EE                		mov.L	#-18, r5
 925 057c 38 07 01                		bra	.L61
 926                             	.L60:
 279:../kernel/tkernel/mempfix.c **** 	CHECK_DISPATCH();
 927                             		.loc 5 279 2 is_stmt 1
 928 057f FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 929 0585 EC 55                   		mov.L	[r5], r5
 930 0587 61 05                   		cmp	#0, r5
 931 0589 21 21                   		bne	.L62
 932                             		.loc 5 279 2 is_stmt 0 discriminator 2
 933 058b 39 12 FB                		bsr	_knl_isTaskIndependent
 934 058e EF 15                   		mov.L	r1, r5
 935 0590 61 05                   		cmp	#0, r5
 936 0592 21 18                   		bne	.L62
 937                             		.loc 5 279 2 discriminator 4
 938 0594 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 939 059a EC 55                   		mov.L	[r5], r5
 940 059c 61 05                   		cmp	#0, r5
 941 059e 20 0C                   		beq	.L62
 942                             		.loc 5 279 2 discriminator 6
 943 05a0 05 00 00 00             		bsr	_GetCpuIntLevel
 944 05a4 EF 15                   		mov.L	r1, r5
 945 05a6 75 55 10                		cmp	#16, r5
 946 05a9 1F                      		bne	.L63
 947                             		.balign 8,3,2
 948                             	.L62:
 949                             		.loc 5 279 2 discriminator 7
 950 05aa FB 56 E7                		mov.L	#-25, r5
 951 05ad 38 D6 00                		bra	.L61
 952                             	.L63:
 280:../kernel/tkernel/mempfix.c **** 
 281:../kernel/tkernel/mempfix.c **** 	mpfcb = get_mpfcb(mpfid);
 953                             		.loc 5 281 10 is_stmt 1
 954 05b0 ED A5 04                		mov.L	16[r10], r5
 955 05b3 60 15                   		sub	#1, r5
 956                             		.loc 5 281 8
 957 05b5 75 15 38                		mul	#56, r5
 958 05b8 70 55 00 00 00 00       		add	#_knl_mpfcb_table, r5
 959 05be E7 A5 01                		mov.L	r5, 4[r10]
 282:../kernel/tkernel/mempfix.c **** 
 283:../kernel/tkernel/mempfix.c **** 	knl_LockOBJ(&mpfcb->lock);
 960                             		.loc 5 283 2
 961 05c1 ED A5 01                		mov.L	4[r10], r5
 962 05c4 71 55 30                		add	#48, r5
 963 05c7 EF 51                   		mov.L	r5, r1
 964 05c9 05 00 00 00             		bsr	_knl_LockOBJ
 284:../kernel/tkernel/mempfix.c **** 	if ( mpfcb->mpfid == 0 ) {
 965                             		.loc 5 284 12
 966 05cd ED A5 01                		mov.L	4[r10], r5
 967 05d0 A8 D5                   		mov.L	8[r5], r5
 968                             		.loc 5 284 5
 969 05d2 61 05                   		cmp	#0, r5
 970 05d4 1F                      		bne	.L64
 285:../kernel/tkernel/mempfix.c **** 		ercd = E_NOEXS;
 971                             		.loc 5 285 8
 972 05d5 F8 A6 D6                		mov.L	#-42, [r10]
 286:../kernel/tkernel/mempfix.c **** 		goto error_exit;
 973                             		.loc 5 286 3
 974 05d8 38 9D 00                		bra	.L65
 975                             	.L64:
 287:../kernel/tkernel/mempfix.c **** 	}
 288:../kernel/tkernel/mempfix.c **** #if CHK_PAR
 289:../kernel/tkernel/mempfix.c **** 	if ( blf < mpfcb->mempool || blf >= knl_mempool_end(mpfcb) || (((VB*)blf - (VB*)mpfcb->mempool) % 
 976                             		.loc 5 289 18
 977 05db ED A5 01                		mov.L	4[r10], r5
 978 05de AA 5D                   		mov.L	36[r5], r5
 979                             		.loc 5 289 5
 980 05e0 ED A4 05                		mov.L	20[r10], r4
 981 05e3 47 54                   		cmp	r5, r4
 982 05e5 23 2D                   		bltu	.L66
 983                             		.loc 5 289 38 discriminator 1
 984 05e7 ED A1 01                		mov.L	4[r10], r1
 985 05ea 39 DD FA                		bsr	_knl_mempool_end
 986 05ed EF 15                   		mov.L	r1, r5
 987                             		.loc 5 289 28 discriminator 1
 988 05ef ED A4 05                		mov.L	20[r10], r4
 989 05f2 47 54                   		cmp	r5, r4
 990 05f4 22 1E                   		bgeu	.L66
 991                             		.loc 5 289 87 discriminator 2
 992 05f6 ED A5 01                		mov.L	4[r10], r5
 993 05f9 AA 5D                   		mov.L	36[r5], r5
 994                             		.loc 5 289 75 discriminator 2
 995 05fb ED A4 05                		mov.L	20[r10], r4
 996 05fe FF 05 54                		sub	r5, r4, r5
 997                             		.loc 5 289 105 discriminator 2
 998 0601 ED A4 01                		mov.L	4[r10], r4
 999 0604 A9 C4                   		mov.L	24[r4], r4
 1000                             		.loc 5 289 98 discriminator 2
 1001 0606 EF 53                   		mov.L	r5, r3
 1002 0608 FC 23 43                		div	r4, r3
 1003 060b 4F 34                   		mul	r3, r4
 1004 060d 43 45                   		sub	r4, r5
 1005                             		.loc 5 289 61 discriminator 2
 1006 060f 61 05                   		cmp	#0, r5
 1007 0611 16                      		beq	.L67
 1008                             	.L66:
 290:../kernel/tkernel/mempfix.c **** 		ercd = E_PAR;
 1009                             		.loc 5 290 8
 1010 0612 F8 A6 EF                		mov.L	#-17, [r10]
 291:../kernel/tkernel/mempfix.c **** 		goto error_exit;
 1011                             		.loc 5 291 3
 1012 0615 2E 60                   		bra	.L65
 1013                             	.L67:
 292:../kernel/tkernel/mempfix.c **** 	}
 293:../kernel/tkernel/mempfix.c **** #endif
 294:../kernel/tkernel/mempfix.c **** 
 295:../kernel/tkernel/mempfix.c **** 	DISABLE_INTERRUPT;
 1014                             		.loc 5 295 2
 1015 0617 05 00 00 00             		bsr	_disint
 296:../kernel/tkernel/mempfix.c **** 	if ( !isQueEmpty(&mpfcb->wait_queue) ) {
 1016                             		.loc 5 296 8
 1017 061b ED A5 01                		mov.L	4[r10], r5
 1018 061e EF 51                   		mov.L	r5, r1
 1019 0620 39 F9 F9                		bsr	_isQueEmpty
 1020 0623 EF 15                   		mov.L	r1, r5
 1021                             		.loc 5 296 5
 1022 0625 61 05                   		cmp	#0, r5
 1023 0627 21 23                   		bne	.L68
 297:../kernel/tkernel/mempfix.c **** 		/* Send memory block to waiting task,
 298:../kernel/tkernel/mempfix.c **** 		   and then release the task */
 299:../kernel/tkernel/mempfix.c **** 		tcb = (TCB*)mpfcb->wait_queue.next;
 1024                             		.loc 5 299 7
 1025 0629 ED A5 01                		mov.L	4[r10], r5
 1026 062c EC 55                   		mov.L	[r5], r5
 1027 062e E7 A5 02                		mov.L	r5, 8[r10]
 300:../kernel/tkernel/mempfix.c **** 		*tcb->winfo.mpf.p_blf = blf;
 1028                             		.loc 5 300 18
 1029 0631 ED A5 02                		mov.L	8[r10], r5
 1030 0634 AC 55                   		mov.L	64[r5], r5
 1031                             		.loc 5 300 25
 1032 0636 ED A4 05                		mov.L	20[r10], r4
 1033 0639 E3 54                   		mov.L	r4, [r5]
 301:../kernel/tkernel/mempfix.c **** 		knl_wait_release_ok(tcb);
 1034                             		.loc 5 301 3
 1035 063b ED A1 02                		mov.L	8[r10], r1
 1036 063e 05 00 00 00             		bsr	_knl_wait_release_ok
 302:../kernel/tkernel/mempfix.c **** 		ENABLE_INTERRUPT;
 1037                             		.loc 5 302 3
 1038 0642 66 01                   		mov.L	#0, r1
 1039 0644 05 00 00 00             		bsr	_setint
 1040 0648 2E 2D                   		bra	.L65
 1041                             	.L68:
 303:../kernel/tkernel/mempfix.c **** 	} else {
 304:../kernel/tkernel/mempfix.c **** 		ENABLE_INTERRUPT;
 1042                             		.loc 5 304 3
 1043 064a 66 01                   		mov.L	#0, r1
 1044 064c 05 00 00 00             		bsr	_setint
 305:../kernel/tkernel/mempfix.c **** 		/* Free memory block */
 306:../kernel/tkernel/mempfix.c **** 		free = (FREEL*)blf;
 1045                             		.loc 5 306 8
 1046 0650 ED A5 05                		mov.L	20[r10], r5
 1047 0653 E7 A5 03                		mov.L	r5, 12[r10]
 307:../kernel/tkernel/mempfix.c **** 		free->next = mpfcb->freelist;
 1048                             		.loc 5 307 21
 1049 0656 ED A5 01                		mov.L	4[r10], r5
 1050 0659 AA DC                   		mov.L	44[r5], r4
 1051                             		.loc 5 307 14
 1052 065b ED A5 03                		mov.L	12[r10], r5
 1053 065e E3 54                   		mov.L	r4, [r5]
 308:../kernel/tkernel/mempfix.c **** 		mpfcb->freelist = free;
 1054                             		.loc 5 308 19
 1055 0660 ED A5 01                		mov.L	4[r10], r5
 1056 0663 ED A4 03                		mov.L	12[r10], r4
 1057 0666 A2 DC                   		mov.L	r4, 44[r5]
 309:../kernel/tkernel/mempfix.c **** 		mpfcb->frbcnt++;
 1058                             		.loc 5 309 8
 1059 0668 ED A5 01                		mov.L	4[r10], r5
 1060 066b AA 55                   		mov.L	32[r5], r5
 1061                             		.loc 5 309 16
 1062 066d 71 54 01                		add	#1, r5, r4
 1063 0670 ED A5 01                		mov.L	4[r10], r5
 1064 0673 A2 54                   		mov.L	r4, 32[r5]
 1065                             		.balign 8,3,1
 1066                             	.L65:
 310:../kernel/tkernel/mempfix.c **** 	}
 311:../kernel/tkernel/mempfix.c **** 
 312:../kernel/tkernel/mempfix.c **** error_exit:
 313:../kernel/tkernel/mempfix.c **** 	knl_UnlockOBJ(&mpfcb->lock);
 1067                             		.loc 5 313 2
 1068 0675 ED A5 01                		mov.L	4[r10], r5
 1069 0678 71 55 30                		add	#48, r5
 1070 067b EF 51                   		mov.L	r5, r1
 1071 067d 05 00 00 00             		bsr	_knl_UnlockOBJ
 314:../kernel/tkernel/mempfix.c **** 
 315:../kernel/tkernel/mempfix.c **** 	return ercd;
 1072                             		.loc 5 315 9
 1073 0681 EC A5                   		mov.L	[r10], r5
 1074                             	.L61:
 316:../kernel/tkernel/mempfix.c **** }
 1075                             		.loc 5 316 1
 1076 0683 EF 51                   		mov.L	r5, r1
 1077 0685 3F AA 07                		rtsd	#28, r10-r10
 1078                             	.LFE42:
 1080                             		.global	_tk_ref_mpf
 1082                             	_tk_ref_mpf:
 1083                             	.LFB43:
 317:../kernel/tkernel/mempfix.c **** 
 318:../kernel/tkernel/mempfix.c **** #ifdef USE_FUNC_TK_REF_MPF
 319:../kernel/tkernel/mempfix.c **** /*
 320:../kernel/tkernel/mempfix.c ****  * Check fixed size pool state
 321:../kernel/tkernel/mempfix.c ****  */
 322:../kernel/tkernel/mempfix.c **** SYSCALL ER tk_ref_mpf( ID mpfid, T_RMPF *pk_rmpf )
 323:../kernel/tkernel/mempfix.c **** {
 1084                             		.loc 5 323 1
 1085 0688 7E AA                   		push.l	r10
 1086                             	.LCFI26:
 1087 068a 71 0A F0                		add	#-16, r0, r10
 1088                             	.LCFI27:
 1089 068d EF A0                   		mov.L	r10, r0
 1090 068f E7 A1 02                		mov.L	r1, 8[r10]
 1091 0692 E7 A2 03                		mov.L	r2, 12[r10]
 324:../kernel/tkernel/mempfix.c **** 	MPFCB	*mpfcb;
 325:../kernel/tkernel/mempfix.c **** 	ER	ercd = E_OK;
 1092                             		.loc 5 325 5
 1093 0695 F8 A6 00                		mov.L	#0, [r10]
 326:../kernel/tkernel/mempfix.c **** 
 327:../kernel/tkernel/mempfix.c **** 	CHECK_MPFID(mpfid);
 1094                             		.loc 5 327 2
 1095 0698 ED A5 02                		mov.L	8[r10], r5
 1096 069b 61 05                   		cmp	#0, r5
 1097 069d 2B 09                   		ble	.L70
 1098                             		.loc 5 327 2 is_stmt 0 discriminator 2
 1099 069f ED A5 02                		mov.L	8[r10], r5
 1100 06a2 61 85                   		cmp	#8, r5
 1101 06a4 2B 08                   		ble	.L71
 1102                             	.L70:
 1103                             		.loc 5 327 2 discriminator 3
 1104 06a6 FB 56 EE                		mov.L	#-18, r5
 1105 06a9 38 9A 00                		bra	.L72
 1106                             	.L71:
 328:../kernel/tkernel/mempfix.c **** 	CHECK_DISPATCH();
 1107                             		.loc 5 328 2 is_stmt 1
 1108 06ac FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 1109 06b2 EC 55                   		mov.L	[r5], r5
 1110 06b4 61 05                   		cmp	#0, r5
 1111 06b6 21 22                   		bne	.L73
 1112                             		.loc 5 328 2 is_stmt 0 discriminator 2
 1113 06b8 39 E5 F9                		bsr	_knl_isTaskIndependent
 1114 06bb EF 15                   		mov.L	r1, r5
 1115 06bd 61 05                   		cmp	#0, r5
 1116 06bf 21 19                   		bne	.L73
 1117                             		.loc 5 328 2 discriminator 4
 1118 06c1 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1119 06c7 EC 55                   		mov.L	[r5], r5
 1120 06c9 61 05                   		cmp	#0, r5
 1121 06cb 20 0D                   		beq	.L73
 1122                             		.loc 5 328 2 discriminator 6
 1123 06cd 05 00 00 00             		bsr	_GetCpuIntLevel
 1124 06d1 EF 15                   		mov.L	r1, r5
 1125 06d3 75 55 10                		cmp	#16, r5
 1126 06d6 1F                      		bne	.L74
 1127 06d7 03                      		.balign 8,3,2
 1128                             	.L73:
 1129                             		.loc 5 328 2 discriminator 7
 1130 06d8 FB 56 E7                		mov.L	#-25, r5
 1131 06db 2E 68                   		bra	.L72
 1132                             	.L74:
 329:../kernel/tkernel/mempfix.c **** 
 330:../kernel/tkernel/mempfix.c **** 	mpfcb = get_mpfcb(mpfid);
 1133                             		.loc 5 330 10 is_stmt 1
 1134 06dd ED A5 02                		mov.L	8[r10], r5
 1135 06e0 60 15                   		sub	#1, r5
 1136                             		.loc 5 330 8
 1137 06e2 75 15 38                		mul	#56, r5
 1138 06e5 70 55 00 00 00 00       		add	#_knl_mpfcb_table, r5
 1139 06eb E7 A5 01                		mov.L	r5, 4[r10]
 331:../kernel/tkernel/mempfix.c **** 
 332:../kernel/tkernel/mempfix.c **** 	knl_LockOBJ(&mpfcb->lock);
 1140                             		.loc 5 332 2
 1141 06ee ED A5 01                		mov.L	4[r10], r5
 1142 06f1 71 55 30                		add	#48, r5
 1143 06f4 EF 51                   		mov.L	r5, r1
 1144 06f6 05 00 00 00             		bsr	_knl_LockOBJ
 333:../kernel/tkernel/mempfix.c **** 	if ( mpfcb->mpfid == 0 ) {
 1145                             		.loc 5 333 12
 1146 06fa ED A5 01                		mov.L	4[r10], r5
 1147 06fd A8 D5                   		mov.L	8[r5], r5
 1148                             		.loc 5 333 5
 1149 06ff 61 05                   		cmp	#0, r5
 1150 0701 1E                      		bne	.L75
 334:../kernel/tkernel/mempfix.c **** 		ercd = E_NOEXS;
 1151                             		.loc 5 334 8
 1152 0702 F8 A6 D6                		mov.L	#-42, [r10]
 1153 0705 2E 30                   		bra	.L76
 1154                             	.L75:
 335:../kernel/tkernel/mempfix.c **** 	} else {
 336:../kernel/tkernel/mempfix.c **** 		DISABLE_INTERRUPT;
 1155                             		.loc 5 336 3
 1156 0707 05 00 00 00             		bsr	_disint
 337:../kernel/tkernel/mempfix.c **** 		pk_rmpf->wtsk = knl_wait_tskid(&mpfcb->wait_queue);
 1157                             		.loc 5 337 19
 1158 070b ED A5 01                		mov.L	4[r10], r5
 1159 070e EF 51                   		mov.L	r5, r1
 1160 0710 05 00 00 00             		bsr	_knl_wait_tskid
 1161 0714 EF 14                   		mov.L	r1, r4
 1162                             		.loc 5 337 17
 1163 0716 ED A5 03                		mov.L	12[r10], r5
 1164 0719 A0 5C                   		mov.L	r4, 4[r5]
 338:../kernel/tkernel/mempfix.c **** 		ENABLE_INTERRUPT;
 1165                             		.loc 5 338 3
 1166 071b 66 01                   		mov.L	#0, r1
 1167 071d 05 00 00 00             		bsr	_setint
 339:../kernel/tkernel/mempfix.c **** 		pk_rmpf->exinf = mpfcb->exinf;
 1168                             		.loc 5 339 25
 1169 0721 ED A5 01                		mov.L	4[r10], r5
 1170 0724 A8 DC                   		mov.L	12[r5], r4
 1171                             		.loc 5 339 18
 1172 0726 ED A5 03                		mov.L	12[r10], r5
 1173 0729 E3 54                   		mov.L	r4, [r5]
 340:../kernel/tkernel/mempfix.c **** 		pk_rmpf->frbcnt = mpfcb->frbcnt;
 1174                             		.loc 5 340 26
 1175 072b ED A5 01                		mov.L	4[r10], r5
 1176 072e AA 54                   		mov.L	32[r5], r4
 1177                             		.loc 5 340 19
 1178 0730 ED A5 03                		mov.L	12[r10], r5
 1179 0733 A0 D4                   		mov.L	r4, 8[r5]
 1180                             	.L76:
 341:../kernel/tkernel/mempfix.c **** 	}
 342:../kernel/tkernel/mempfix.c **** 	knl_UnlockOBJ(&mpfcb->lock);
 1181                             		.loc 5 342 2
 1182 0735 ED A5 01                		mov.L	4[r10], r5
 1183 0738 71 55 30                		add	#48, r5
 1184 073b EF 51                   		mov.L	r5, r1
 1185 073d 05 00 00 00             		bsr	_knl_UnlockOBJ
 343:../kernel/tkernel/mempfix.c **** 
 344:../kernel/tkernel/mempfix.c **** 	return ercd;
 1186                             		.loc 5 344 9
 1187 0741 EC A5                   		mov.L	[r10], r5
 1188                             	.L72:
 345:../kernel/tkernel/mempfix.c **** }
 1189                             		.loc 5 345 1
 1190 0743 EF 51                   		mov.L	r5, r1
 1191 0745 3F AA 05                		rtsd	#20, r10-r10
 1192                             	.LFE43:
 1483                             	.Letext0:
 1484                             		.file 6 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_tbrx65n\\include/tk/typedef.h"
 1485                             		.file 7 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_tbrx65n\\include/tk/syscall.h"
 1486                             		.file 8 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_tbrx65n\\kernel\\knlinc/kernel.h"
 1487                             		.file 9 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_tbrx65n\\kernel\\tkernel\\timer.h"
 1488                             		.file 10 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_tbrx65n\\kernel\\tkernel\\winfo.h"
 1489                             		.file 11 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_tbrx65n\\kernel\\tkernel\\mutex.h"
 1490                             		.file 12 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_tbrx65n\\kernel\\sysdepend\\cpu\\core\\rxv2\\sysde
 1491                             		.file 13 "../kernel/tkernel/task.h"
 1492                             		.file 14 "../kernel/tkernel/ready_queue.h"
 1493                             		.file 15 "../kernel/tkernel/wait.h"
