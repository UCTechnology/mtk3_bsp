   1                             		.file	"int.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   5                             	_knl_isTaskIndependent:
   6                             	.LFB16:
   7                             		.file 1 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_tbrx65n\\kernel\\sysdepend\\cpu\\core\\rxv2\\cpu_st
   1:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
   2:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *----------------------------------------------------------------------
   3:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *    micro T-Kernel 3.00.03
   4:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *
   5:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *    Copyright (C) 2006-2021 by Ken Sakamura.
   6:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *    This software is distributed under the T-License 2.2.
   7:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *----------------------------------------------------------------------
   8:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *
   9:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.
  10:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *
  11:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *----------------------------------------------------------------------
  12:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  13:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  14:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  15:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *	cpu_status.h (RXv2)
  16:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *	CPU-Dependent Status Definition
  17:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  18:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  19:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #ifndef _SYSDEPEND_CPU_CORE_STATUS_
  20:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define _SYSDEPEND_CPU_CORE_STATUS_
  21:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  22:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #include <tk/syslib.h>
  23:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #include <sys/sysdef.h>
  24:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  25:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #include "sysdepend.h"
  26:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  27:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  * Start/End critical section
  28:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  29:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define BEGIN_CRITICAL_SECTION	{ UINT _sr_ = disint();
  30:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define END_CRITICAL_SECTION	if ( !isDI(_sr_)			\
  31:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 				  && knl_ctxtsk != knl_schedtsk		\
  32:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 				  && !knl_isTaskIndependent()		\
  33:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 				  && !knl_dispatch_disabled ) {		\
  34:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 					knl_dispatch();			\
  35:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 				}					\
  36:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 				setint(_sr_); }
  37:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  38:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  * Start/End interrupt disable section
  39:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  40:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define BEGIN_DISABLE_INTERRUPT	{ UINT _sr_ = disint();
  41:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define END_DISABLE_INTERRUPT	setint(_sr_); }
  42:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  43:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  44:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  * Interrupt enable/disable
  45:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  46:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define ENABLE_INTERRUPT	{ setint(0); }
  47:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define DISABLE_INTERRUPT	{ disint(); }
  48:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  49:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  50:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  * Enable interrupt nesting
  51:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *	Enable the interrupt that has a higher priority than 'level.'
  52:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  53:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** #define ENABLE_INTERRUPT_UPTO(level)	{ setint(level); }
  54:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  55:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  56:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  *  Task-independent control
  57:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  58:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** IMPORT	W	knl_taskindp;		/* Task independent status */
  59:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 
  60:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** /*
  61:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  * If it is the task-independent part, TRUE
  62:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h ****  */
  63:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** Inline BOOL knl_isTaskIndependent( void )
  64:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** {
   8                             		.loc 1 64 1
   9 0000 7E AA                   		push.l	r10
  10                             	.LCFI0:
  11 0002 EF 0A                   		mov.L	r0, r10
  12                             	.LCFI1:
  65:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** 	return ( knl_taskindp > 0 )? TRUE: FALSE;
  13                             		.loc 1 65 35
  14 0004 FB 52 00 00 00 00       		mov.L	#_knl_taskindp, r5
  15 000a EC 55                   		mov.L	[r5], r5
  16 000c 61 05                   		cmp	#0, r5
  17 000e FC DB 5A                		scgt.L	r5
  18 0011 5B 55                   		movu.B	r5, r5
  66:d:\tkernel_dev\mtk3_bsp\dev_bsp_b2_tbrx65n\kernel\sysdepend\cpu\core\rxv2\cpu_status.h **** }
  19                             		.loc 1 66 1
  20 0013 EF 51                   		mov.L	r5, r1
  21 0015 3F AA 01                		rtsd	#4, r10-r10
  22                             	.LFE16:
  24                             		.global	_tk_def_int
  26                             	_tk_def_int:
  27                             	.LFB19:
  28                             		.file 2 "../kernel/tkernel/int.c"
   1:../kernel/tkernel/int.c **** /*
   2:../kernel/tkernel/int.c ****  *----------------------------------------------------------------------
   3:../kernel/tkernel/int.c ****  *    micro T-Kernel 3.00.00
   4:../kernel/tkernel/int.c ****  *
   5:../kernel/tkernel/int.c ****  *    Copyright (C) 2006-2019 by Ken Sakamura.
   6:../kernel/tkernel/int.c ****  *    This software is distributed under the T-License 2.1.
   7:../kernel/tkernel/int.c ****  *----------------------------------------------------------------------
   8:../kernel/tkernel/int.c ****  *
   9:../kernel/tkernel/int.c ****  *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.
  10:../kernel/tkernel/int.c ****  *
  11:../kernel/tkernel/int.c ****  *----------------------------------------------------------------------
  12:../kernel/tkernel/int.c ****  */
  13:../kernel/tkernel/int.c **** 
  14:../kernel/tkernel/int.c **** /*
  15:../kernel/tkernel/int.c ****  *	int.c
  16:../kernel/tkernel/int.c ****  *	Interrupt Control
  17:../kernel/tkernel/int.c ****  */
  18:../kernel/tkernel/int.c **** 
  19:../kernel/tkernel/int.c **** #include "kernel.h"
  20:../kernel/tkernel/int.c **** #include "check.h"
  21:../kernel/tkernel/int.c **** 
  22:../kernel/tkernel/int.c **** /* ------------------------------------------------------------------------ */
  23:../kernel/tkernel/int.c **** /*
  24:../kernel/tkernel/int.c ****  * Interrupt handler definition
  25:../kernel/tkernel/int.c ****  */
  26:../kernel/tkernel/int.c **** SYSCALL ER tk_def_int( UINT intno, CONST T_DINT *pk_dint )
  27:../kernel/tkernel/int.c **** {
  29                             		.loc 2 27 1
  30 0018 7E AA                   		push.l	r10
  31                             	.LCFI2:
  32 001a 71 0A E8                		add	#-24, r0, r10
  33                             	.LCFI3:
  34 001d EF A0                   		mov.L	r10, r0
  35 001f E7 A1 04                		mov.L	r1, 16[r10]
  36 0022 E7 A2 05                		mov.L	r2, 20[r10]
  28:../kernel/tkernel/int.c **** #if USE_STATIC_IVT
  29:../kernel/tkernel/int.c **** 	return E_NOSPT;
  30:../kernel/tkernel/int.c **** #else
  31:../kernel/tkernel/int.c **** 	ATR	intatr;
  32:../kernel/tkernel/int.c **** 	FP	inthdr;
  33:../kernel/tkernel/int.c **** 	ER	ercd;
  34:../kernel/tkernel/int.c **** 
  35:../kernel/tkernel/int.c **** 	CHECK_PAR(intno < N_INTVEC);
  37                             		.loc 2 35 2
  38 0025 ED A5 04                		mov.L	16[r10], r5
  39 0028 75 55 FF                		cmp	#0xff, r5
  40 002b 25 08                   		bleu	.L4
  41                             		.loc 2 35 2 is_stmt 0 discriminator 1
  42 002d FB 56 EF                		mov.L	#-17, r5
  43 0030 38 86 00                		bra	.L5
  44                             	.L4:
  36:../kernel/tkernel/int.c **** 	if(pk_dint != NULL) {
  45                             		.loc 2 36 4 is_stmt 1
  46 0033 ED A5 05                		mov.L	20[r10], r5
  47 0036 61 05                   		cmp	#0, r5
  48 0038 20 22                   		beq	.L6
  37:../kernel/tkernel/int.c **** 		CHECK_RSATR(pk_dint->intatr, TA_HLNG|TA_ASM);
  49                             		.loc 2 37 3
  50 003a ED A5 05                		mov.L	20[r10], r5
  51 003d EC 55                   		mov.L	[r5], r5
  52 003f 75 25 FE                		and	#-2, r5
  53 0042 61 05                   		cmp	#0, r5
  54 0044 16                      		beq	.L7
  55                             		.loc 2 37 3 is_stmt 0 discriminator 1
  56 0045 FB 56 F5                		mov.L	#-11, r5
  57 0048 2E 6E                   		bra	.L5
  58                             	.L7:
  38:../kernel/tkernel/int.c **** 		intatr	= pk_dint->intatr;
  59                             		.loc 2 38 10 is_stmt 1
  60 004a ED A5 05                		mov.L	20[r10], r5
  61 004d EC 55                   		mov.L	[r5], r5
  62 004f E3 A5                   		mov.L	r5, [r10]
  39:../kernel/tkernel/int.c **** 		inthdr	= pk_dint->inthdr;
  63                             		.loc 2 39 10
  64 0051 ED A5 05                		mov.L	20[r10], r5
  65 0054 A8 5D                   		mov.L	4[r5], r5
  66 0056 E7 A5 01                		mov.L	r5, 4[r10]
  67 0059 08                      		bra	.L8
  68                             	.L6:
  40:../kernel/tkernel/int.c **** 	} else {
  41:../kernel/tkernel/int.c **** 		intatr	= 0;
  69                             		.loc 2 41 10
  70 005a F8 A6 00                		mov.L	#0, [r10]
  42:../kernel/tkernel/int.c **** 		inthdr	= NULL;
  71                             		.loc 2 42 10
  72 005d F9 A6 01 00             		mov.L	#0, 4[r10]
  73                             	.L8:
  74                             	.LBB2:
  43:../kernel/tkernel/int.c **** 	}
  44:../kernel/tkernel/int.c **** 
  45:../kernel/tkernel/int.c **** 	BEGIN_CRITICAL_SECTION;
  75                             		.loc 2 45 2
  76 0061 05 00 00 00             		bsr	_disint
  77 0065 E7 A1 02                		mov.L	r1, 8[r10]
  46:../kernel/tkernel/int.c **** 	ercd = knl_define_inthdr(intno, intatr, inthdr);
  78                             		.loc 2 46 9
  79 0068 ED A5 04                		mov.L	16[r10], r5
  80 006b ED A3 01                		mov.L	4[r10], r3
  81 006e EC A2                   		mov.L	[r10], r2
  82 0070 EF 51                   		mov.L	r5, r1
  83 0072 05 00 00 00             		bsr	_knl_define_inthdr
  84 0076 E7 A1 03                		mov.L	r1, 12[r10]
  47:../kernel/tkernel/int.c **** 	END_CRITICAL_SECTION;
  85                             		.loc 2 47 2
  86 0079 ED A5 02                		mov.L	8[r10], r5
  87 007c 61 F5                   		cmp	#15, r5
  88 007e 20 2E                   		beq	.L9
  89                             		.loc 2 47 2 is_stmt 0 discriminator 1
  90 0080 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
  91 0086 EC 54                   		mov.L	[r5], r4
  92 0088 FB 52 00 00 00 00       		mov.L	#_knl_schedtsk, r5
  93 008e EC 55                   		mov.L	[r5], r5
  94 0090 47 54                   		cmp	r5, r4
  95 0092 20 1A                   		beq	.L9
  96                             		.loc 2 47 2 discriminator 3
  97 0094 39 6C FF                		bsr	_knl_isTaskIndependent
  98 0097 EF 15                   		mov.L	r1, r5
  99 0099 61 05                   		cmp	#0, r5
 100 009b 21 11                   		bne	.L9
 101                             		.loc 2 47 2 discriminator 5
 102 009d FB 52 00 00 00 00       		mov.L	#_knl_dispatch_disabled, r5
 103 00a3 EC 55                   		mov.L	[r5], r5
 104 00a5 61 05                   		cmp	#0, r5
 105 00a7 1D                      		bne	.L9
 106                             		.loc 2 47 2 discriminator 7
 107 00a8 05 00 00 00             		bsr	_knl_dispatch
 108                             		.balign 8,3,1
 109                             	.L9:
 110                             		.loc 2 47 2 discriminator 9
 111 00ac ED A1 02                		mov.L	8[r10], r1
 112 00af 05 00 00 00             		bsr	_setint
 113                             	.LBE2:
  48:../kernel/tkernel/int.c **** 
  49:../kernel/tkernel/int.c **** 	return ercd;
 114                             		.loc 2 49 9 is_stmt 1 discriminator 9
 115 00b3 ED A5 03                		mov.L	12[r10], r5
 116                             	.L5:
  50:../kernel/tkernel/int.c **** #endif
  51:../kernel/tkernel/int.c **** }
 117                             		.loc 2 51 1
 118 00b6 EF 51                   		mov.L	r5, r1
 119 00b8 3F AA 07                		rtsd	#28, r10-r10
 120                             	.LFE19:
 122                             		.global	_tk_ret_int
 124                             	_tk_ret_int:
 125                             	.LFB20:
  52:../kernel/tkernel/int.c **** 
  53:../kernel/tkernel/int.c **** /* ------------------------------------------------------------------------ */
  54:../kernel/tkernel/int.c **** /*
  55:../kernel/tkernel/int.c ****  * return Interrupt handler
  56:../kernel/tkernel/int.c ****  */
  57:../kernel/tkernel/int.c **** SYSCALL void tk_ret_int( void )
  58:../kernel/tkernel/int.c **** {
 126                             		.loc 2 58 1
 127 00bb 7E AA                   		push.l	r10
 128                             	.LCFI4:
 129 00bd EF 0A                   		mov.L	r0, r10
 130                             	.LCFI5:
  59:../kernel/tkernel/int.c **** 	knl_return_inthdr();
 131                             		.loc 2 59 2
 132 00bf 05 00 00 00             		bsr	_knl_return_inthdr
  60:../kernel/tkernel/int.c **** 	return;
 133                             		.loc 2 60 2
 134 00c3 03                      		nop
  61:../kernel/tkernel/int.c **** }
 135                             		.loc 2 61 1
 136 00c4 3F AA 01                		rtsd	#4, r10-r10
 137                             	.LFE20:
 212                             	.Letext0:
 213                             		.file 3 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_tbrx65n\\include/tk/typedef.h"
 214                             		.file 4 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_tbrx65n\\include/tk/syscall.h"
 215                             		.file 5 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_tbrx65n\\include/sys/queue.h"
 216                             		.file 6 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_tbrx65n\\kernel\\knlinc/kernel.h"
 217                             		.file 7 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_tbrx65n\\kernel\\tkernel\\timer.h"
 218                             		.file 8 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_tbrx65n\\kernel\\tkernel\\winfo.h"
 219                             		.file 9 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_tbrx65n\\kernel\\tkernel\\mutex.h"
 220                             		.file 10 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_tbrx65n\\kernel\\sysdepend\\cpu\\core\\rxv2\\sysde
