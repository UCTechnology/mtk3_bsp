   1                             		.file	"device.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   5                             	_QueInit:
   6                             	.LFB6:
   7                             		.file 1 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\include/sys/queue.h"
   1:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
   2:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *----------------------------------------------------------------------
   3:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *    micro T-Kernel 3.00.00
   4:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *
   5:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *    Copyright (C) 2006-2019 by Ken Sakamura.
   6:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *    This software is distributed under the T-License 2.1.
   7:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *----------------------------------------------------------------------
   8:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *
   9:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.
  10:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *
  11:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *----------------------------------------------------------------------
  12:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  13:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  14:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  15:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	queue.h
  16:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *
  17:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	Queuing operation
  18:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  19:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  20:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** #ifndef	__SYS_QUEUE_H__
  21:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** #define __SYS_QUEUE_H__
  22:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  23:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** #include <tk/tkernel.h>
  24:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  25:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** #ifdef __cplusplus
  26:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** extern "C" {
  27:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** #endif
  28:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  29:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  30:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  * Double-link queue (ring)
  31:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  32:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** typedef struct queue {
  33:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	struct queue	*next;
  34:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	struct queue	*prev;
  35:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** } QUEUE;
  36:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  37:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  38:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  * Queue initialization 
  39:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  40:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** Inline void QueInit( QUEUE *que )
  41:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** {
   8                             		.loc 1 41 1
   9 0000 7E AA                   		push.l	r10
  10                             	.LCFI0:
  11 0002 71 0A FC                		add	#-4, r0, r10
  12                             	.LCFI1:
  13 0005 EF A0                   		mov.L	r10, r0
  14 0007 E3 A1                   		mov.L	r1, [r10]
  42:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	que->next = (struct queue *)que;
  15                             		.loc 1 42 12
  16 0009 EC A5                   		mov.L	[r10], r5
  17 000b EC A4                   		mov.L	[r10], r4
  18 000d E3 54                   		mov.L	r4, [r5]
  43:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	que->prev = (struct queue *)que;
  19                             		.loc 1 43 12
  20 000f EC A5                   		mov.L	[r10], r5
  21 0011 EC A4                   		mov.L	[r10], r4
  22 0013 A0 5C                   		mov.L	r4, 4[r5]
  44:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** }
  23                             		.loc 1 44 1
  24 0015 03                      		nop
  25 0016 3F AA 02                		rtsd	#8, r10-r10
  26                             	.LFE6:
  29                             	_isQueEmpty:
  30                             	.LFB7:
  45:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  46:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  47:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  * TRUE if the queue is empty 
  48:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  49:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** Inline BOOL isQueEmpty( QUEUE *que )
  50:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** {
  31                             		.loc 1 50 1
  32 0019 7E AA                   		push.l	r10
  33                             	.LCFI2:
  34 001b 71 0A FC                		add	#-4, r0, r10
  35                             	.LCFI3:
  36 001e EF A0                   		mov.L	r10, r0
  37 0020 E3 A1                   		mov.L	r1, [r10]
  51:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	return ( que->next == que )? TRUE: FALSE;
  38                             		.loc 1 51 14
  39 0022 EC A5                   		mov.L	[r10], r5
  40 0024 EC 55                   		mov.L	[r5], r5
  41                             		.loc 1 51 35
  42 0026 EC A4                   		mov.L	[r10], r4
  43 0028 47 54                   		cmp	r5, r4
  44 002a FC DB 50                		sceq.L	r5
  45 002d 5B 55                   		movu.B	r5, r5
  52:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** }
  46                             		.loc 1 52 1
  47 002f EF 51                   		mov.L	r5, r1
  48 0031 3F AA 02                		rtsd	#8, r10-r10
  49                             	.LFE7:
  52                             	_QueInsert:
  53                             	.LFB8:
  53:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  54:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  55:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  * Insert in queue 
  56:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	Inserts entry directly prior to que 
  57:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  58:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** Inline void QueInsert( QUEUE *entry, QUEUE *que )
  59:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** {
  54                             		.loc 1 59 1
  55 0034 7E AA                   		push.l	r10
  56                             	.LCFI4:
  57 0036 71 0A F8                		add	#-8, r0, r10
  58                             	.LCFI5:
  59 0039 EF A0                   		mov.L	r10, r0
  60 003b E3 A1                   		mov.L	r1, [r10]
  61 003d E7 A2 01                		mov.L	r2, 4[r10]
  60:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	entry->prev = (struct queue*) que->prev;
  62                             		.loc 1 60 16
  63 0040 ED A5 01                		mov.L	4[r10], r5
  64 0043 A8 5C                   		mov.L	4[r5], r4
  65                             		.loc 1 60 14
  66 0045 EC A5                   		mov.L	[r10], r5
  67 0047 A0 5C                   		mov.L	r4, 4[r5]
  61:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	entry->next = que;
  68                             		.loc 1 61 14
  69 0049 EC A5                   		mov.L	[r10], r5
  70 004b ED A4 01                		mov.L	4[r10], r4
  71 004e E3 54                   		mov.L	r4, [r5]
  62:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	que->prev->next = entry;
  72                             		.loc 1 62 5
  73 0050 ED A5 01                		mov.L	4[r10], r5
  74 0053 A8 5D                   		mov.L	4[r5], r5
  75                             		.loc 1 62 18
  76 0055 EC A4                   		mov.L	[r10], r4
  77 0057 E3 54                   		mov.L	r4, [r5]
  63:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	que->prev = entry;
  78                             		.loc 1 63 12
  79 0059 ED A5 01                		mov.L	4[r10], r5
  80 005c EC A4                   		mov.L	[r10], r4
  81 005e A0 5C                   		mov.L	r4, 4[r5]
  64:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** }
  82                             		.loc 1 64 1
  83 0060 03                      		nop
  84 0061 3F AA 03                		rtsd	#12, r10-r10
  85                             	.LFE8:
  88                             	_QueRemove:
  89                             	.LFB9:
  65:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  66:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  67:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  * Delete from queue 
  68:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	Deletes entry from queue 
  69:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	No action is performed if entry is empty. 
  70:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  71:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** Inline void QueRemove( QUEUE *entry )
  72:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** {
  90                             		.loc 1 72 1
  91 0064 7E AA                   		push.l	r10
  92                             	.LCFI6:
  93 0066 71 0A FC                		add	#-4, r0, r10
  94                             	.LCFI7:
  95 0069 EF A0                   		mov.L	r10, r0
  96 006b E3 A1                   		mov.L	r1, [r10]
  73:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	if ( entry->next != entry ) {
  97                             		.loc 1 73 12
  98 006d EC A5                   		mov.L	[r10], r5
  99 006f EC 55                   		mov.L	[r5], r5
 100                             		.loc 1 73 5
 101 0071 EC A4                   		mov.L	[r10], r4
 102 0073 47 54                   		cmp	r5, r4
 103 0075 20 16                   		beq	.L7
  74:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 		entry->prev->next = (struct queue*) entry->next;
 104                             		.loc 1 74 8
 105 0077 EC A5                   		mov.L	[r10], r5
 106 0079 A8 5D                   		mov.L	4[r5], r5
 107                             		.loc 1 74 23
 108 007b EC A4                   		mov.L	[r10], r4
 109 007d EC 44                   		mov.L	[r4], r4
 110                             		.loc 1 74 21
 111 007f E3 54                   		mov.L	r4, [r5]
  75:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 		entry->next->prev = (struct queue*) entry->prev;
 112                             		.loc 1 75 8
 113 0081 EC A5                   		mov.L	[r10], r5
 114 0083 EC 55                   		mov.L	[r5], r5
 115                             		.loc 1 75 23
 116 0085 EC A4                   		mov.L	[r10], r4
 117 0087 A8 4C                   		mov.L	4[r4], r4
 118                             		.loc 1 75 21
 119 0089 A0 5C                   		mov.L	r4, 4[r5]
 120                             	.L7:
  76:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	}
  77:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** }
 121                             		.loc 1 77 1
 122 008b 03                      		nop
 123 008c 3F AA 02                		rtsd	#8, r10-r10
 124                             	.LFE9:
 127                             	_QueRemoveNext:
 128                             	.LFB10:
  78:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  79:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** /*
  80:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  * Remove top entry 
  81:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	Deletes the entry directly after que from the queue,
  82:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	and returns the deleted entry.
  83:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  *	Returns NULL if que is empty.
  84:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h ****  */
  85:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** Inline QUEUE* QueRemoveNext( QUEUE *que )
  86:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** {
 129                             		.loc 1 86 1
 130 008f 7E AA                   		push.l	r10
 131                             	.LCFI8:
 132 0091 71 0A F8                		add	#-8, r0, r10
 133                             	.LCFI9:
 134 0094 EF A0                   		mov.L	r10, r0
 135 0096 E7 A1 01                		mov.L	r1, 4[r10]
  87:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	QUEUE	*entry;
  88:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  89:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	if ( que->next == que ) {
 136                             		.loc 1 89 10
 137 0099 ED A5 01                		mov.L	4[r10], r5
 138 009c EC 55                   		mov.L	[r5], r5
 139                             		.loc 1 89 5
 140 009e ED A4 01                		mov.L	4[r10], r4
 141 00a1 47 54                   		cmp	r5, r4
 142 00a3 1D                      		bne	.L9
  90:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 		return NULL;
 143                             		.loc 1 90 10
 144 00a4 66 05                   		mov.L	#0, r5
 145 00a6 2E 1D                   		bra	.L10
 146                             	.L9:
  91:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	}
  92:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  93:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	entry = que->next;
 147                             		.loc 1 93 8
 148 00a8 ED A5 01                		mov.L	4[r10], r5
 149 00ab EC 55                   		mov.L	[r5], r5
 150 00ad E3 A5                   		mov.L	r5, [r10]
  94:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	que->next = (struct queue*)entry->next;
 151                             		.loc 1 94 14
 152 00af EC A5                   		mov.L	[r10], r5
 153 00b1 EC 54                   		mov.L	[r5], r4
 154                             		.loc 1 94 12
 155 00b3 ED A5 01                		mov.L	4[r10], r5
 156 00b6 E3 54                   		mov.L	r4, [r5]
  95:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	entry->next->prev = que;
 157                             		.loc 1 95 7
 158 00b8 EC A5                   		mov.L	[r10], r5
 159 00ba EC 55                   		mov.L	[r5], r5
 160                             		.loc 1 95 20
 161 00bc ED A4 01                		mov.L	4[r10], r4
 162 00bf A0 5C                   		mov.L	r4, 4[r5]
  96:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 
  97:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** 	return entry;
 163                             		.loc 1 97 9
 164 00c1 EC A5                   		mov.L	[r10], r5
 165                             	.L10:
  98:D:\tkernel_dev\mtk3_bsp\dev_bsp_b2_rskrx65n\include/sys\queue.h **** }
 166                             		.loc 1 98 1
 167 00c3 EF 51                   		mov.L	r5, r1
 168 00c5 3F AA 03                		rtsd	#12, r10-r10
 169                             	.LFE10:
 172                             	_knl_check_devid:
 173                             	.LFB19:
 174                             		.file 2 "../kernel/tkernel/device.h"
   1:../kernel/tkernel/device.h **** /*
   2:../kernel/tkernel/device.h ****  *----------------------------------------------------------------------
   3:../kernel/tkernel/device.h ****  *    micro T-Kernel 3.00.00
   4:../kernel/tkernel/device.h ****  *
   5:../kernel/tkernel/device.h ****  *    Copyright (C) 2006-2019 by Ken Sakamura.
   6:../kernel/tkernel/device.h ****  *    This software is distributed under the T-License 2.1.
   7:../kernel/tkernel/device.h ****  *----------------------------------------------------------------------
   8:../kernel/tkernel/device.h ****  *
   9:../kernel/tkernel/device.h ****  *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.
  10:../kernel/tkernel/device.h ****  *
  11:../kernel/tkernel/device.h ****  *----------------------------------------------------------------------
  12:../kernel/tkernel/device.h ****  */
  13:../kernel/tkernel/device.h **** 
  14:../kernel/tkernel/device.h **** /*
  15:../kernel/tkernel/device.h ****  *	device.h
  16:../kernel/tkernel/device.h ****  *	Device Management Function
  17:../kernel/tkernel/device.h ****  */
  18:../kernel/tkernel/device.h **** 
  19:../kernel/tkernel/device.h **** #ifndef _DEVICE_H_
  20:../kernel/tkernel/device.h **** #define _DEVICE_H_
  21:../kernel/tkernel/device.h **** 
  22:../kernel/tkernel/device.h **** /* Set Object Name in .exinf for DEBUG */
  23:../kernel/tkernel/device.h **** #define OBJNAME_DMMBF	"DEvt"		/* Event notification mbf */
  24:../kernel/tkernel/device.h **** #define OBJNAME_DMSEM	"DMSy"		/* semaphore of synchronous control */
  25:../kernel/tkernel/device.h **** #define OBJNAME_DMLOCK	"DMLk"		/* Multi-lock for Dev.Mgr. */
  26:../kernel/tkernel/device.h **** 
  27:../kernel/tkernel/device.h **** IMPORT	T_IDEV		knl_DefaultIDev;
  28:../kernel/tkernel/device.h **** 
  29:../kernel/tkernel/device.h **** /*
  30:../kernel/tkernel/device.h ****  *	Device registration management
  31:../kernel/tkernel/device.h ****  */
  32:../kernel/tkernel/device.h **** 
  33:../kernel/tkernel/device.h **** IMPORT DevCB knl_DevCBtbl[];	/* Device registration information table */
  34:../kernel/tkernel/device.h **** IMPORT QUEUE knl_UsedDevCB;	/* In-use queue */
  35:../kernel/tkernel/device.h **** IMPORT QUEUE knl_FreeDevCB;	/* Unused queue */
  36:../kernel/tkernel/device.h **** 
  37:../kernel/tkernel/device.h **** #define MAX_UNIT	255		/* Maximum number of subunits */
  38:../kernel/tkernel/device.h **** 
  39:../kernel/tkernel/device.h **** /*
  40:../kernel/tkernel/device.h ****  * Verify validity of device ID
  41:../kernel/tkernel/device.h ****  */
  42:../kernel/tkernel/device.h **** Inline ER knl_check_devid( ID devid )
  43:../kernel/tkernel/device.h **** {
 175                             		.loc 2 43 1
 176 00c8 7E AA                   		push.l	r10
 177                             	.LCFI10:
 178 00ca 71 0A FC                		add	#-4, r0, r10
 179                             	.LCFI11:
 180 00cd EF A0                   		mov.L	r10, r0
 181 00cf E3 A1                   		mov.L	r1, [r10]
  44:../kernel/tkernel/device.h **** 	devid >>= 8;
 182                             		.loc 2 44 8
 183 00d1 EC A5                   		mov.L	[r10], r5
 184 00d3 6A 85                   		shar	#8, r5
 185 00d5 E3 A5                   		mov.L	r5, [r10]
  45:../kernel/tkernel/device.h **** 	if ( devid < 1 || devid > MAX_REGDEV ) {
 186                             		.loc 2 45 5
 187 00d7 EC A5                   		mov.L	[r10], r5
 188 00d9 61 05                   		cmp	#0, r5
 189 00db 2B 08                   		ble	.L12
 190                             		.loc 2 45 17 discriminator 1
 191 00dd EC A5                   		mov.L	[r10], r5
 192 00df 61 85                   		cmp	#8, r5
 193 00e1 2B 06                   		ble	.L13
 194                             	.L12:
  46:../kernel/tkernel/device.h **** 		return E_ID;
 195                             		.loc 2 46 10
 196 00e3 FB 56 EE                		mov.L	#-18, r5
 197 00e6 0B                      		bra	.L14
 198                             	.L13:
  47:../kernel/tkernel/device.h **** 	}
  48:../kernel/tkernel/device.h **** 	return E_OK;
 199                             		.loc 2 48 9
 200 00e7 66 05                   		mov.L	#0, r5
 201                             	.L14:
  49:../kernel/tkernel/device.h **** }
 202                             		.loc 2 49 1
 203 00e9 EF 51                   		mov.L	r5, r1
 204 00eb 3F AA 02                		rtsd	#8, r10-r10
 205                             	.LFE19:
 207                             		.global	_knl_DevMgrLock
 208                             		.section	.noinit,"aw"
 209                             		.balign 4
 212                             	_knl_DevMgrLock:
 213 0000 00 00 00 00 00 00 00 00 		.zero	16
 213      00 00 00 00 00 00 00 00 
 214                             		.global	_knl_DefaultIDev
 215                             		.balign 4
 218                             	_knl_DefaultIDev:
 219 0010 00 00 00 00             		.zero	4
 220                             		.global	_knl_DevCBtbl
 221                             		.balign 4
 224                             	_knl_DevCBtbl:
 225 0014 00 00 00 00 00 00 00 00 		.zero	576
 225      00 00 00 00 00 00 00 00 
 225      00 00 00 00 00 00 00 00 
 225      00 00 00 00 00 00 00 00 
 225      00 00 00 00 00 00 00 00 
 226                             		.global	_knl_UsedDevCB
 227                             		.balign 4
 230                             	_knl_UsedDevCB:
 231 0254 00 00 00 00 00 00 00 00 		.zero	8
 232                             		.global	_knl_FreeDevCB
 233                             		.balign 4
 236                             	_knl_FreeDevCB:
 237 025c 00 00 00 00 00 00 00 00 		.zero	8
 238                             		.section P,"ax"
 239                             		.global	_knl_searchDevCB
 241                             	_knl_searchDevCB:
 242                             	.LFB21:
 243                             		.file 3 "../kernel/tkernel/device.c"
   1:../kernel/tkernel/device.c **** /*
   2:../kernel/tkernel/device.c ****  *----------------------------------------------------------------------
   3:../kernel/tkernel/device.c ****  *    micro T-Kernel 3.00.02
   4:../kernel/tkernel/device.c ****  *
   5:../kernel/tkernel/device.c ****  *    Copyright (C) 2006-2020 by Ken Sakamura.
   6:../kernel/tkernel/device.c ****  *    This software is distributed under the T-License 2.2.
   7:../kernel/tkernel/device.c ****  *----------------------------------------------------------------------
   8:../kernel/tkernel/device.c ****  *
   9:../kernel/tkernel/device.c ****  *    Released by TRON Forum(http://www.tron.org) at 2020/10/21.
  10:../kernel/tkernel/device.c ****  *
  11:../kernel/tkernel/device.c ****  *----------------------------------------------------------------------
  12:../kernel/tkernel/device.c ****  */
  13:../kernel/tkernel/device.c **** 
  14:../kernel/tkernel/device.c **** /*
  15:../kernel/tkernel/device.c ****  *	device.c
  16:../kernel/tkernel/device.c ****  *	Device Management Function
  17:../kernel/tkernel/device.c ****  */
  18:../kernel/tkernel/device.c **** 
  19:../kernel/tkernel/device.c **** #include "kernel.h"
  20:../kernel/tkernel/device.c **** #include "sysmgr.h"
  21:../kernel/tkernel/device.c **** #include "device.h"
  22:../kernel/tkernel/device.c **** 
  23:../kernel/tkernel/device.c **** #if USE_DEVICE
  24:../kernel/tkernel/device.c **** 
  25:../kernel/tkernel/device.c **** /* Lock for device management exclusive control */
  26:../kernel/tkernel/device.c **** Noinit(EXPORT	FastMLock	knl_DevMgrLock);
  27:../kernel/tkernel/device.c **** 
  28:../kernel/tkernel/device.c **** /* Device initial setting information */
  29:../kernel/tkernel/device.c **** Noinit(EXPORT	T_IDEV		knl_DefaultIDev);
  30:../kernel/tkernel/device.c **** 
  31:../kernel/tkernel/device.c **** /* ------------------------------------------------------------------------ */
  32:../kernel/tkernel/device.c **** /*
  33:../kernel/tkernel/device.c ****  *	Device registration management
  34:../kernel/tkernel/device.c ****  */
  35:../kernel/tkernel/device.c **** 
  36:../kernel/tkernel/device.c **** Noinit(EXPORT	DevCB		knl_DevCBtbl[MAX_REGDEV]);	/* Device registration information table */
  37:../kernel/tkernel/device.c **** Noinit(EXPORT	QUEUE		knl_UsedDevCB);	/* In-use queue */
  38:../kernel/tkernel/device.c **** Noinit(EXPORT	QUEUE		knl_FreeDevCB);	/* Unused queue */
  39:../kernel/tkernel/device.c **** 
  40:../kernel/tkernel/device.c **** 
  41:../kernel/tkernel/device.c **** /*
  42:../kernel/tkernel/device.c ****  * Search registration device
  43:../kernel/tkernel/device.c ****  */
  44:../kernel/tkernel/device.c **** EXPORT DevCB* knl_searchDevCB( CONST UB *devnm )
  45:../kernel/tkernel/device.c **** {
 244                             		.loc 3 45 1
 245 00ee 7E AA                   		push.l	r10
 246                             	.LCFI12:
 247 00f0 71 0A F4                		add	#-12, r0, r10
 248                             	.LCFI13:
 249 00f3 EF A0                   		mov.L	r10, r0
 250 00f5 E7 A1 02                		mov.L	r1, 8[r10]
  46:../kernel/tkernel/device.c **** 	QUEUE	*q;
  47:../kernel/tkernel/device.c **** 	DevCB	*devcb;
  48:../kernel/tkernel/device.c **** 
  49:../kernel/tkernel/device.c **** 	for ( q = knl_UsedDevCB.next; q != &knl_UsedDevCB; q = q->next ) {
 251                             		.loc 3 49 10
 252 00f8 FB 52 00 00 00 00       		mov.L	#_knl_UsedDevCB, r5
 253 00fe EC 55                   		mov.L	[r5], r5
 254 0100 E3 A5                   		mov.L	r5, [r10]
 255                             		.loc 3 49 2
 256 0102 2E 37                   		bra	.L16
 257                             	.L19:
  50:../kernel/tkernel/device.c **** 		devcb = (DevCB*)q;
 258                             		.loc 3 50 9
 259 0104 EC A5                   		mov.L	[r10], r5
 260 0106 E7 A5 01                		mov.L	r5, 4[r10]
  51:../kernel/tkernel/device.c **** 
  52:../kernel/tkernel/device.c **** 		if ( devcb->devnm[0] == devnm[0] && knl_strcmp((char*)devcb->devnm, (char*)devnm) == 0 ) {
 261                             		.loc 3 52 20
 262 0109 ED A5 01                		mov.L	4[r10], r5
 263 010c 8A 54                   		mov.B	8[r5], r4
 264                             		.loc 3 52 24
 265 010e ED A5 02                		mov.L	8[r10], r5
 266 0111 CC 55                   		mov.B	[r5], r5
 267                             		.loc 3 52 6
 268 0113 5B 44                   		movu.B	r4, r4
 269 0115 5B 55                   		movu.B	r5, r5
 270 0117 47 54                   		cmp	r5, r4
 271 0119 21 1A                   		bne	.L17
 272                             		.loc 3 52 57 discriminator 1
 273 011b ED A5 01                		mov.L	4[r10], r5
 274 011e 62 85                   		add	#8, r5
 275                             		.loc 3 52 39 discriminator 1
 276 0120 ED A2 02                		mov.L	8[r10], r2
 277 0123 EF 51                   		mov.L	r5, r1
 278 0125 05 00 00 00             		bsr	_knl_strcmp
 279 0129 EF 15                   		mov.L	r1, r5
 280                             		.loc 3 52 36 discriminator 1
 281 012b 61 05                   		cmp	#0, r5
 282 012d 1E                      		bne	.L17
  53:../kernel/tkernel/device.c **** 			return devcb; /* Found */
 283                             		.loc 3 53 11
 284 012e ED A5 01                		mov.L	4[r10], r5
 285 0131 2E 14                   		bra	.L18
 286                             	.L17:
  49:../kernel/tkernel/device.c **** 		devcb = (DevCB*)q;
 287                             		.loc 3 49 55 discriminator 2
 288 0133 EC A5                   		mov.L	[r10], r5
 289 0135 EC 55                   		mov.L	[r5], r5
 290 0137 E3 A5                   		mov.L	r5, [r10]
 291                             	.L16:
  49:../kernel/tkernel/device.c **** 		devcb = (DevCB*)q;
 292                             		.loc 3 49 2 discriminator 1
 293 0139 EC A5                   		mov.L	[r10], r5
 294 013b 74 05 00 00 00 00       		cmp	#_knl_UsedDevCB, r5
 295 0141 21 C3                   		bne	.L19
  54:../kernel/tkernel/device.c **** 		}
  55:../kernel/tkernel/device.c **** 	}
  56:../kernel/tkernel/device.c **** 
  57:../kernel/tkernel/device.c **** 	return NULL;
 296                             		.loc 3 57 9
 297 0143 66 05                   		mov.L	#0, r5
 298                             	.L18:
  58:../kernel/tkernel/device.c **** }
 299                             		.loc 3 58 1
 300 0145 EF 51                   		mov.L	r5, r1
 301 0147 3F AA 04                		rtsd	#16, r10-r10
 302                             	.LFE21:
 305                             	_newDevCB:
 306                             	.LFB22:
  59:../kernel/tkernel/device.c **** 
  60:../kernel/tkernel/device.c **** /*
  61:../kernel/tkernel/device.c ****  * Get DevCB for new registration
  62:../kernel/tkernel/device.c ****  */
  63:../kernel/tkernel/device.c **** LOCAL DevCB* newDevCB( CONST UB *devnm )
  64:../kernel/tkernel/device.c **** {
 307                             		.loc 3 64 1
 308 014a 7E AA                   		push.l	r10
 309                             	.LCFI14:
 310 014c 71 0A F8                		add	#-8, r0, r10
 311                             	.LCFI15:
 312 014f EF A0                   		mov.L	r10, r0
 313 0151 E7 A1 01                		mov.L	r1, 4[r10]
  65:../kernel/tkernel/device.c **** 	DevCB	*devcb;
  66:../kernel/tkernel/device.c **** 
  67:../kernel/tkernel/device.c **** 	devcb = (DevCB*)QueRemoveNext(&knl_FreeDevCB);
 314                             		.loc 3 67 18
 315 0154 FB 12 00 00 00 00       		mov.L	#_knl_FreeDevCB, r1
 316 015a 39 35 FF                		bsr	_QueRemoveNext
 317 015d E3 A1                   		mov.L	r1, [r10]
  68:../kernel/tkernel/device.c **** 	if ( devcb == NULL ) {
 318                             		.loc 3 68 5
 319 015f EC A5                   		mov.L	[r10], r5
 320 0161 61 05                   		cmp	#0, r5
 321 0163 1D                      		bne	.L21
  69:../kernel/tkernel/device.c **** 		return NULL; /* No space */
 322                             		.loc 3 69 10
 323 0164 66 05                   		mov.L	#0, r5
 324 0166 2E 2A                   		bra	.L22
 325                             	.L21:
  70:../kernel/tkernel/device.c **** 	}
  71:../kernel/tkernel/device.c **** 
  72:../kernel/tkernel/device.c **** 	knl_strncpy((char*)devcb->devnm, (char*)devnm, L_DEVNM+1);
 326                             		.loc 3 72 21
 327 0168 EC A5                   		mov.L	[r10], r5
 328 016a 62 85                   		add	#8, r5
 329                             		.loc 3 72 2
 330 016c 66 93                   		mov.L	#9, r3
 331 016e ED A2 01                		mov.L	4[r10], r2
 332 0171 EF 51                   		mov.L	r5, r1
 333 0173 05 00 00 00             		bsr	_knl_strncpy
  73:../kernel/tkernel/device.c **** 	QueInit(&devcb->openq);
 334                             		.loc 3 73 2
 335 0177 EC A5                   		mov.L	[r10], r5
 336 0179 71 55 40                		add	#0x40, r5
 337 017c EF 51                   		mov.L	r5, r1
 338 017e 39 82 FE                		bsr	_QueInit
  74:../kernel/tkernel/device.c **** 
  75:../kernel/tkernel/device.c **** 	QueInsert(&devcb->q, &knl_UsedDevCB);
 339                             		.loc 3 75 2
 340 0181 EC A5                   		mov.L	[r10], r5
 341 0183 FB 22 00 00 00 00       		mov.L	#_knl_UsedDevCB, r2
 342 0189 EF 51                   		mov.L	r5, r1
 343 018b 39 A9 FE                		bsr	_QueInsert
  76:../kernel/tkernel/device.c **** 
  77:../kernel/tkernel/device.c **** 	return devcb;
 344                             		.loc 3 77 9
 345 018e EC A5                   		mov.L	[r10], r5
 346                             	.L22:
  78:../kernel/tkernel/device.c **** }
 347                             		.loc 3 78 1
 348 0190 EF 51                   		mov.L	r5, r1
 349 0192 3F AA 03                		rtsd	#12, r10-r10
 350                             	.LFE22:
 353                             	_delDevCB:
 354                             	.LFB23:
  79:../kernel/tkernel/device.c **** 
  80:../kernel/tkernel/device.c **** /*
  81:../kernel/tkernel/device.c ****  * Free DevCB
  82:../kernel/tkernel/device.c ****  */
  83:../kernel/tkernel/device.c **** LOCAL void delDevCB( DevCB *devcb )
  84:../kernel/tkernel/device.c **** {
 355                             		.loc 3 84 1
 356 0195 7E AA                   		push.l	r10
 357                             	.LCFI16:
 358 0197 71 0A FC                		add	#-4, r0, r10
 359                             	.LCFI17:
 360 019a EF A0                   		mov.L	r10, r0
 361 019c E3 A1                   		mov.L	r1, [r10]
  85:../kernel/tkernel/device.c **** 	QueRemove(&devcb->q);
 362                             		.loc 3 85 2
 363 019e EC A5                   		mov.L	[r10], r5
 364 01a0 EF 51                   		mov.L	r5, r1
 365 01a2 39 C2 FE                		bsr	_QueRemove
  86:../kernel/tkernel/device.c **** 	QueInsert(&devcb->q, &knl_FreeDevCB);
 366                             		.loc 3 86 2
 367 01a5 EC A5                   		mov.L	[r10], r5
 368 01a7 FB 22 00 00 00 00       		mov.L	#_knl_FreeDevCB, r2
 369 01ad EF 51                   		mov.L	r5, r1
 370 01af 39 85 FE                		bsr	_QueInsert
  87:../kernel/tkernel/device.c **** 	devcb->devnm[0] = '\0';
 371                             		.loc 3 87 18
 372 01b2 EC A5                   		mov.L	[r10], r5
 373 01b4 3C 58 00                		mov.B	#0, 8[r5]
  88:../kernel/tkernel/device.c **** }
 374                             		.loc 3 88 1
 375 01b7 03                      		nop
 376 01b8 3F AA 02                		rtsd	#8, r10-r10
 377                             	.LFE23:
 379                             		.global	_tk_def_dev
 381                             	_tk_def_dev:
 382                             	.LFB24:
  89:../kernel/tkernel/device.c **** 
  90:../kernel/tkernel/device.c **** /*
  91:../kernel/tkernel/device.c ****  * Device registration
  92:../kernel/tkernel/device.c ****  */
  93:../kernel/tkernel/device.c **** SYSCALL ID tk_def_dev( CONST UB *devnm, CONST T_DDEV *pk_ddev, T_IDEV *pk_idev )
  94:../kernel/tkernel/device.c **** {
 383                             		.loc 3 94 1
 384 01bb 6E 7A                   		pushm	r7-r10
 385                             	.LCFI18:
 386 01bd 71 0A E8                		add	#-24, r0, r10
 387                             	.LCFI19:
 388 01c0 EF A0                   		mov.L	r10, r0
 389 01c2 E7 A1 03                		mov.L	r1, 12[r10]
 390 01c5 E7 A2 04                		mov.L	r2, 16[r10]
 391 01c8 E7 A3 05                		mov.L	r3, 20[r10]
  95:../kernel/tkernel/device.c **** 	DevCB	*devcb;
  96:../kernel/tkernel/device.c **** 	INT	len;
  97:../kernel/tkernel/device.c **** 	ER	ercd;
  98:../kernel/tkernel/device.c **** 
  99:../kernel/tkernel/device.c **** 	LockREG();
 392                             		.loc 3 99 2
 393 01cb 66 12                   		mov.L	#1, r2
 394 01cd FB 12 00 00 00 00       		mov.L	#_knl_DevMgrLock, r1
 395 01d3 05 00 00 00             		bsr	_MLock
 100:../kernel/tkernel/device.c **** 
 101:../kernel/tkernel/device.c **** 	len = knl_strlen((char*)devnm);
 396                             		.loc 3 101 8
 397 01d7 ED A1 03                		mov.L	12[r10], r1
 398 01da 05 00 00 00             		bsr	_knl_strlen
 399 01de E7 A1 01                		mov.L	r1, 4[r10]
 102:../kernel/tkernel/device.c **** 	if ( len == 0 || len > L_DEVNM ) {
 400                             		.loc 3 102 5
 401 01e1 ED A5 01                		mov.L	4[r10], r5
 402 01e4 61 05                   		cmp	#0, r5
 403 01e6 10                      		beq	.L25
 404                             		.loc 3 102 16 discriminator 1
 405 01e7 ED A5 01                		mov.L	4[r10], r5
 406 01ea 61 85                   		cmp	#8, r5
 407 01ec 2B 09                   		ble	.L26
 408                             	.L25:
 103:../kernel/tkernel/device.c **** 		ercd = E_PAR;
 409                             		.loc 3 103 8
 410 01ee F9 A6 02 EF             		mov.L	#-17, 8[r10]
 104:../kernel/tkernel/device.c **** 		goto err_ret1;
 411                             		.loc 3 104 3
 412 01f2 38 27 01                		bra	.L27
 413                             	.L26:
 105:../kernel/tkernel/device.c **** 	}
 106:../kernel/tkernel/device.c **** 
 107:../kernel/tkernel/device.c **** 	if ( pk_ddev != NULL ) {
 414                             		.loc 3 107 5
 415 01f5 ED A5 04                		mov.L	16[r10], r5
 416 01f8 61 05                   		cmp	#0, r5
 417 01fa 20 5E                   		beq	.L28
 108:../kernel/tkernel/device.c **** 		if ( pk_ddev->nsub < 0 || pk_ddev->nsub > MAX_UNIT ) {
 418                             		.loc 3 108 15
 419 01fc ED A5 04                		mov.L	16[r10], r5
 420 01ff A8 DD                   		mov.L	12[r5], r5
 421                             		.loc 3 108 6
 422 0201 61 05                   		cmp	#0, r5
 423 0203 29 0C                   		blt	.L29
 424                             		.loc 3 108 36 discriminator 1
 425 0205 ED A5 04                		mov.L	16[r10], r5
 426 0208 A8 DD                   		mov.L	12[r5], r5
 427                             		.loc 3 108 26 discriminator 1
 428 020a 75 55 FF                		cmp	#0xff, r5
 429 020d 2B 09                   		ble	.L30
 430                             	.L29:
 109:../kernel/tkernel/device.c **** 			ercd = E_PAR;
 431                             		.loc 3 109 9
 432 020f F9 A6 02 EF             		mov.L	#-17, 8[r10]
 110:../kernel/tkernel/device.c **** 			goto err_ret1;
 433                             		.loc 3 110 4
 434 0213 38 06 01                		bra	.L27
 435                             	.L30:
 111:../kernel/tkernel/device.c **** 		}
 112:../kernel/tkernel/device.c **** 
 113:../kernel/tkernel/device.c **** 		/* Make sure that the length of the logical device name
 114:../kernel/tkernel/device.c **** 		   does not exceed the character limit */
 115:../kernel/tkernel/device.c **** 		if ( pk_ddev->nsub > 0   ) {
 436                             		.loc 3 115 15
 437 0216 ED A5 04                		mov.L	16[r10], r5
 438 0219 A8 DD                   		mov.L	12[r5], r5
 439                             		.loc 3 115 6
 440 021b 61 05                   		cmp	#0, r5
 441 021d 2B 0A                   		ble	.L31
 116:../kernel/tkernel/device.c **** 			++len;
 442                             		.loc 3 116 4
 443 021f ED A5 01                		mov.L	4[r10], r5
 444 0222 62 15                   		add	#1, r5
 445 0224 E7 A5 01                		mov.L	r5, 4[r10]
 446                             	.L31:
 117:../kernel/tkernel/device.c **** 		}
 118:../kernel/tkernel/device.c **** 		if ( pk_ddev->nsub > 10  ) {
 447                             		.loc 3 118 15
 448 0227 ED A5 04                		mov.L	16[r10], r5
 449 022a A8 DD                   		mov.L	12[r5], r5
 450                             		.loc 3 118 6
 451 022c 61 A5                   		cmp	#10, r5
 452 022e 2B 0A                   		ble	.L32
 119:../kernel/tkernel/device.c **** 			++len;
 453                             		.loc 3 119 4
 454 0230 ED A5 01                		mov.L	4[r10], r5
 455 0233 62 15                   		add	#1, r5
 456 0235 E7 A5 01                		mov.L	r5, 4[r10]
 457                             	.L32:
 120:../kernel/tkernel/device.c **** 		}
 121:../kernel/tkernel/device.c **** 		if ( pk_ddev->nsub > 100 ) {
 458                             		.loc 3 121 15
 459 0238 ED A5 04                		mov.L	16[r10], r5
 460 023b A8 DD                   		mov.L	12[r5], r5
 461                             		.loc 3 121 6
 462 023d 75 55 64                		cmp	#0x64, r5
 463 0240 2B 0A                   		ble	.L33
 122:../kernel/tkernel/device.c **** 			++len;
 464                             		.loc 3 122 4
 465 0242 ED A5 01                		mov.L	4[r10], r5
 466 0245 62 15                   		add	#1, r5
 467 0247 E7 A5 01                		mov.L	r5, 4[r10]
 468                             	.L33:
 123:../kernel/tkernel/device.c **** 		}
 124:../kernel/tkernel/device.c **** 		if ( len > L_DEVNM ) {
 469                             		.loc 3 124 6
 470 024a ED A5 01                		mov.L	4[r10], r5
 471 024d 61 85                   		cmp	#8, r5
 472 024f 2B 09                   		ble	.L28
 125:../kernel/tkernel/device.c **** 			ercd = E_PAR;
 473                             		.loc 3 125 9
 474 0251 F9 A6 02 EF             		mov.L	#-17, 8[r10]
 126:../kernel/tkernel/device.c **** 			goto err_ret1;
 475                             		.loc 3 126 4
 476 0255 38 C4 00                		bra	.L27
 477                             	.L28:
 127:../kernel/tkernel/device.c **** 		}
 128:../kernel/tkernel/device.c **** 	}
 129:../kernel/tkernel/device.c **** 
 130:../kernel/tkernel/device.c **** 	LockDM();
 478                             		.loc 3 130 2
 479 0258 66 02                   		mov.L	#0, r2
 480 025a FB 12 00 00 00 00       		mov.L	#_knl_DevMgrLock, r1
 481 0260 05 00 00 00             		bsr	_MLock
 131:../kernel/tkernel/device.c **** 
 132:../kernel/tkernel/device.c **** 	/* Search whether 'devnm' device is registered */
 133:../kernel/tkernel/device.c **** 	devcb = knl_searchDevCB(devnm);
 482                             		.loc 3 133 10
 483 0264 ED A1 03                		mov.L	12[r10], r1
 484 0267 05 00 00 00             		bsr	_knl_searchDevCB
 485 026b E3 A1                   		mov.L	r1, [r10]
 134:../kernel/tkernel/device.c **** 	if ( devcb == NULL ) {
 486                             		.loc 3 134 5
 487 026d EC A5                   		mov.L	[r10], r5
 488 026f 61 05                   		cmp	#0, r5
 489 0271 21 22                   		bne	.L34
 135:../kernel/tkernel/device.c **** 		if ( pk_ddev == NULL ) {
 490                             		.loc 3 135 6
 491 0273 ED A5 04                		mov.L	16[r10], r5
 492 0276 61 05                   		cmp	#0, r5
 493 0278 18                      		bne	.L35
 136:../kernel/tkernel/device.c **** 			ercd = E_NOEXS;
 494                             		.loc 3 136 9
 495 0279 F9 A6 02 D6             		mov.L	#-42, 8[r10]
 137:../kernel/tkernel/device.c **** 			goto err_ret2;
 496                             		.loc 3 137 4
 497 027d 38 90 00                		bra	.L36
 498                             	.L35:
 138:../kernel/tkernel/device.c **** 		}
 139:../kernel/tkernel/device.c **** 
 140:../kernel/tkernel/device.c **** 		/* Get 'devcb' for new registration because it is not
 141:../kernel/tkernel/device.c **** 		   registered */
 142:../kernel/tkernel/device.c **** 		devcb = newDevCB(devnm);
 499                             		.loc 3 142 11
 500 0280 ED A1 03                		mov.L	12[r10], r1
 501 0283 39 C7 FE                		bsr	_newDevCB
 502 0286 E3 A1                   		mov.L	r1, [r10]
 143:../kernel/tkernel/device.c **** 		if ( devcb == NULL ) {
 503                             		.loc 3 143 6
 504 0288 EC A5                   		mov.L	[r10], r5
 505 028a 61 05                   		cmp	#0, r5
 506 028c 1F                      		bne	.L34
 144:../kernel/tkernel/device.c **** 			ercd = E_LIMIT;
 507                             		.loc 3 144 9
 508 028d F9 A6 02 DE             		mov.L	#-34, 8[r10]
 145:../kernel/tkernel/device.c **** 			goto err_ret2;
 509                             		.loc 3 145 4
 510 0291 2E 7C                   		bra	.L36
 511                             	.L34:
 146:../kernel/tkernel/device.c **** 		}
 147:../kernel/tkernel/device.c **** 	}
 148:../kernel/tkernel/device.c **** 
 149:../kernel/tkernel/device.c **** 	if ( pk_ddev != NULL ) {
 512                             		.loc 3 149 5
 513 0293 ED A5 04                		mov.L	16[r10], r5
 514 0296 61 05                   		cmp	#0, r5
 515 0298 20 2B                   		beq	.L37
 150:../kernel/tkernel/device.c **** 		/* Set/update device registration information */
 151:../kernel/tkernel/device.c **** 		devcb->ddev = *pk_ddev;
 516                             		.loc 3 151 15
 517 029a EC A5                   		mov.L	[r10], r5
 518 029c ED A3 04                		mov.L	16[r10], r3
 519 029f 75 44 2C                		mov.L	#44, r4
 520 02a2 71 55 14                		add	#20, r5
 521 02a5 EF 51                   		mov.L	r5, r1
 522 02a7 EF 32                   		mov.L	r3, r2
 523 02a9 EF 43                   		mov.L	r4, r3
 524 02ab 7F 8F                   		smovf
 152:../kernel/tkernel/device.c **** 
 153:../kernel/tkernel/device.c **** 		if ( pk_idev != NULL ) {
 525                             		.loc 3 153 6
 526 02ad ED A5 05                		mov.L	20[r10], r5
 527 02b0 61 05                   		cmp	#0, r5
 528 02b2 20 2B                   		beq	.L39
 154:../kernel/tkernel/device.c **** 			/* Device initial setting information */
 155:../kernel/tkernel/device.c **** 			*pk_idev = knl_DefaultIDev;
 529                             		.loc 3 155 13
 530 02b4 ED A5 05                		mov.L	20[r10], r5
 531 02b7 FB 42 00 00 00 00       		mov.L	#_knl_DefaultIDev, r4
 532 02bd EC 44                   		mov.L	[r4], r4
 533 02bf E3 54                   		mov.L	r4, [r5]
 534 02c1 2E 1C                   		bra	.L39
 535                             	.L37:
 156:../kernel/tkernel/device.c **** 		}
 157:../kernel/tkernel/device.c **** 	} else {
 158:../kernel/tkernel/device.c **** 		if ( !isQueEmpty(&devcb->openq) ) {
 536                             		.loc 3 158 9
 537 02c3 EC A5                   		mov.L	[r10], r5
 538 02c5 71 55 40                		add	#0x40, r5
 539 02c8 EF 51                   		mov.L	r5, r1
 540 02ca 39 4F FD                		bsr	_isQueEmpty
 541 02cd EF 15                   		mov.L	r1, r5
 542                             		.loc 3 158 6
 543 02cf 61 05                   		cmp	#0, r5
 544 02d1 1F                      		bne	.L40
 159:../kernel/tkernel/device.c **** 			/* In use (open) */
 160:../kernel/tkernel/device.c **** 			ercd = E_BUSY;
 545                             		.loc 3 160 9
 546 02d2 F9 A6 02 BF             		mov.L	#-65, 8[r10]
 161:../kernel/tkernel/device.c **** 			goto err_ret2;
 547                             		.loc 3 161 4
 548 02d6 2E 37                   		bra	.L36
 549                             	.L40:
 162:../kernel/tkernel/device.c **** 		}
 163:../kernel/tkernel/device.c **** 
 164:../kernel/tkernel/device.c **** 		/* Device unregistration */
 165:../kernel/tkernel/device.c **** 		delDevCB(devcb);
 550                             		.loc 3 165 3
 551 02d8 EC A1                   		mov.L	[r10], r1
 552 02da 39 BB FE                		bsr	_delDevCB
 553                             	.L39:
 166:../kernel/tkernel/device.c **** 	}
 167:../kernel/tkernel/device.c **** 
 168:../kernel/tkernel/device.c **** 	UnlockDM();
 554                             		.loc 3 168 2
 555 02dd 66 02                   		mov.L	#0, r2
 556 02df FB 12 00 00 00 00       		mov.L	#_knl_DevMgrLock, r1
 557 02e5 05 00 00 00             		bsr	_MUnlock
 169:../kernel/tkernel/device.c **** 	UnlockREG();
 558                             		.loc 3 169 2
 559 02e9 66 12                   		mov.L	#1, r2
 560 02eb FB 12 00 00 00 00       		mov.L	#_knl_DevMgrLock, r1
 561 02f1 05 00 00 00             		bsr	_MUnlock
 170:../kernel/tkernel/device.c **** 
 171:../kernel/tkernel/device.c **** 	return DID(devcb);
 562                             		.loc 3 171 9
 563 02f5 EC A5                   		mov.L	[r10], r5
 564 02f7 FB 72 00 00 00 00       		mov.L	#_knl_DevCBtbl, r7
 565 02fd 43 75                   		sub	r7, r5
 566 02ff 6A 35                   		shar	#3, r5
 567 0301 74 15 39 8E E3 38       		mul	#0x38e38e39, r5
 568 0307 62 15                   		add	#1, r5
 569 0309 6C 85                   		shll	#8, r5
 570 030b 2E 1D                   		bra	.L41
 571                             	.L36:
 172:../kernel/tkernel/device.c **** 
 173:../kernel/tkernel/device.c **** err_ret2:
 174:../kernel/tkernel/device.c **** 	UnlockDM();
 572                             		.loc 3 174 2
 573 030d 66 02                   		mov.L	#0, r2
 574 030f FB 12 00 00 00 00       		mov.L	#_knl_DevMgrLock, r1
 575 0315 05 00 00 00             		bsr	_MUnlock
 576                             		.balign 8,3,1
 577                             	.L27:
 175:../kernel/tkernel/device.c **** err_ret1:
 176:../kernel/tkernel/device.c **** 	UnlockREG();
 578                             		.loc 3 176 2
 579 0319 66 12                   		mov.L	#1, r2
 580 031b FB 12 00 00 00 00       		mov.L	#_knl_DevMgrLock, r1
 581 0321 05 00 00 00             		bsr	_MUnlock
 177:../kernel/tkernel/device.c **** 	return ercd;
 582                             		.loc 3 177 9
 583 0325 ED A5 02                		mov.L	8[r10], r5
 584                             	.L41:
 178:../kernel/tkernel/device.c **** }
 585                             		.loc 3 178 1
 586 0328 EF 51                   		mov.L	r5, r1
 587 032a 3F 7A 0A                		rtsd	#40, r7-r10
 588                             	.LFE24:
 590                             		.global	_tk_ref_idv
 592                             	_tk_ref_idv:
 593                             	.LFB25:
 179:../kernel/tkernel/device.c **** 
 180:../kernel/tkernel/device.c **** /*
 181:../kernel/tkernel/device.c ****  * Check device initial information
 182:../kernel/tkernel/device.c ****  */
 183:../kernel/tkernel/device.c **** SYSCALL ER tk_ref_idv( T_IDEV *pk_idev )
 184:../kernel/tkernel/device.c **** {
 594                             		.loc 3 184 1
 595 032d 7E AA                   		push.l	r10
 596                             	.LCFI20:
 597 032f 71 0A FC                		add	#-4, r0, r10
 598                             	.LCFI21:
 599 0332 EF A0                   		mov.L	r10, r0
 600 0334 E3 A1                   		mov.L	r1, [r10]
 185:../kernel/tkernel/device.c **** 	LockDM();
 601                             		.loc 3 185 2
 602 0336 66 02                   		mov.L	#0, r2
 603 0338 FB 12 00 00 00 00       		mov.L	#_knl_DevMgrLock, r1
 604 033e 05 00 00 00             		bsr	_MLock
 186:../kernel/tkernel/device.c **** 	*pk_idev = knl_DefaultIDev;
 605                             		.loc 3 186 11
 606 0342 EC A5                   		mov.L	[r10], r5
 607 0344 FB 42 00 00 00 00       		mov.L	#_knl_DefaultIDev, r4
 608 034a EC 44                   		mov.L	[r4], r4
 609 034c E3 54                   		mov.L	r4, [r5]
 187:../kernel/tkernel/device.c **** 	UnlockDM();
 610                             		.loc 3 187 2
 611 034e 66 02                   		mov.L	#0, r2
 612 0350 FB 12 00 00 00 00       		mov.L	#_knl_DevMgrLock, r1
 613 0356 05 00 00 00             		bsr	_MUnlock
 188:../kernel/tkernel/device.c **** 
 189:../kernel/tkernel/device.c **** 	return E_OK;
 614                             		.loc 3 189 9
 615 035a 66 05                   		mov.L	#0, r5
 190:../kernel/tkernel/device.c **** }
 616                             		.loc 3 190 1
 617 035c EF 51                   		mov.L	r5, r1
 618 035e 3F AA 02                		rtsd	#8, r10-r10
 619                             	.LFE25:
 621                             		.global	_knl_phydevnm
 623                             	_knl_phydevnm:
 624                             	.LFB26:
 191:../kernel/tkernel/device.c **** 
 192:../kernel/tkernel/device.c **** /* ------------------------------------------------------------------------ */
 193:../kernel/tkernel/device.c **** 
 194:../kernel/tkernel/device.c **** /*
 195:../kernel/tkernel/device.c ****  * Get physical device name
 196:../kernel/tkernel/device.c ****  *	Get the subunit number (return value) 
 197:../kernel/tkernel/device.c ****  *	from the logical device name (ldevnm) and the physical
 198:../kernel/tkernel/device.c ****  *	device name (pdevnm).
 199:../kernel/tkernel/device.c ****  */
 200:../kernel/tkernel/device.c **** EXPORT INT knl_phydevnm( UB *pdevnm, CONST UB *ldevnm )
 201:../kernel/tkernel/device.c **** {
 625                             		.loc 3 201 1
 626 0361 7E AA                   		push.l	r10
 627                             	.LCFI22:
 628 0363 71 0A F0                		add	#-16, r0, r10
 629                             	.LCFI23:
 630 0366 EF A0                   		mov.L	r10, r0
 631 0368 E7 A1 02                		mov.L	r1, 8[r10]
 632 036b E7 A2 03                		mov.L	r2, 12[r10]
 202:../kernel/tkernel/device.c **** 	UB	c;
 203:../kernel/tkernel/device.c **** 	INT	unitno;
 204:../kernel/tkernel/device.c **** 
 205:../kernel/tkernel/device.c **** 	while ( (c = *ldevnm) != '\0' ) {
 633                             		.loc 3 205 8
 634 036e 2E 28                   		bra	.L45
 635                             	.L48:
 206:../kernel/tkernel/device.c **** 		if ( c >= '0' && c <= '9' ) {
 636                             		.loc 3 206 6
 637 0370 59 A5 04                		movu.B	4[r10], r5
 638 0373 75 55 2F                		cmp	#47, r5
 639 0376 25 0A                   		bleu	.L46
 640                             		.loc 3 206 17 discriminator 1
 641 0378 59 A5 04                		movu.B	4[r10], r5
 642 037b 75 55 39                		cmp	#57, r5
 643 037e 25 29                   		bleu	.L53
 644                             	.L46:
 207:../kernel/tkernel/device.c **** 			break;
 208:../kernel/tkernel/device.c **** 		}
 209:../kernel/tkernel/device.c **** 		*pdevnm++ = c;
 645                             		.loc 3 209 10
 646 0380 ED A5 02                		mov.L	8[r10], r5
 647 0383 71 54 01                		add	#1, r5, r4
 648 0386 E7 A4 02                		mov.L	r4, 8[r10]
 649                             		.loc 3 209 13
 650 0389 CD A4 04                		mov.B	4[r10], r4
 651 038c C3 54                   		mov.B	r4, [r5]
 210:../kernel/tkernel/device.c **** 		ldevnm++;
 652                             		.loc 3 210 9
 653 038e ED A5 03                		mov.L	12[r10], r5
 654 0391 62 15                   		add	#1, r5
 655 0393 E7 A5 03                		mov.L	r5, 12[r10]
 656                             	.L45:
 205:../kernel/tkernel/device.c **** 		if ( c >= '0' && c <= '9' ) {
 657                             		.loc 3 205 13
 658 0396 ED A5 03                		mov.L	12[r10], r5
 659 0399 CC 55                   		mov.B	[r5], r5
 660 039b C7 A5 04                		mov.B	r5, 4[r10]
 205:../kernel/tkernel/device.c **** 		if ( c >= '0' && c <= '9' ) {
 661                             		.loc 3 205 8
 662 039e 59 A5 04                		movu.B	4[r10], r5
 663 03a1 61 05                   		cmp	#0, r5
 664 03a3 21 CD                   		bne	.L48
 665 03a5 2E 03                   		bra	.L47
 666                             	.L53:
 207:../kernel/tkernel/device.c **** 			break;
 667                             		.loc 3 207 4
 668 03a7 03                      		nop
 669                             	.L47:
 211:../kernel/tkernel/device.c **** 	}
 212:../kernel/tkernel/device.c **** 	*pdevnm = '\0';
 670                             		.loc 3 212 10
 671 03a8 ED A5 02                		mov.L	8[r10], r5
 672 03ab F8 54 00                		mov.B	#0, [r5]
 213:../kernel/tkernel/device.c **** 
 214:../kernel/tkernel/device.c **** 	unitno = 0;
 673                             		.loc 3 214 9
 674 03ae F8 A6 00                		mov.L	#0, [r10]
 215:../kernel/tkernel/device.c **** 	if (c != '\0') {
 675                             		.loc 3 215 5
 676 03b1 59 A5 04                		movu.B	4[r10], r5
 677 03b4 61 05                   		cmp	#0, r5
 678 03b6 20 31                   		beq	.L49
 216:../kernel/tkernel/device.c **** 		while ( (c = *ldevnm) != '\0' ) {
 679                             		.loc 3 216 9
 680 03b8 2E 1A                   		bra	.L50
 681                             	.L51:
 217:../kernel/tkernel/device.c **** 			unitno = unitno * 10 + (c - '0');
 682                             		.loc 3 217 20
 683 03ba EC A5                   		mov.L	[r10], r5
 684 03bc 66 A4                   		mov.L	#10, r4
 685 03be 4F 54                   		mul	r5, r4
 686                             		.loc 3 217 30
 687 03c0 59 A5 04                		movu.B	4[r10], r5
 688 03c3 71 55 D0                		add	#-48, r5
 689                             		.loc 3 217 11
 690 03c6 4B 45                   		add	r4, r5
 691 03c8 E3 A5                   		mov.L	r5, [r10]
 218:../kernel/tkernel/device.c **** 			ldevnm++;
 692                             		.loc 3 218 10
 693 03ca ED A5 03                		mov.L	12[r10], r5
 694 03cd 62 15                   		add	#1, r5
 695 03cf E7 A5 03                		mov.L	r5, 12[r10]
 696                             	.L50:
 216:../kernel/tkernel/device.c **** 		while ( (c = *ldevnm) != '\0' ) {
 697                             		.loc 3 216 14
 698 03d2 ED A5 03                		mov.L	12[r10], r5
 699 03d5 CC 55                   		mov.B	[r5], r5
 700 03d7 C7 A5 04                		mov.B	r5, 4[r10]
 216:../kernel/tkernel/device.c **** 		while ( (c = *ldevnm) != '\0' ) {
 701                             		.loc 3 216 9
 702 03da 59 A5 04                		movu.B	4[r10], r5
 703 03dd 61 05                   		cmp	#0, r5
 704 03df 21 DB                   		bne	.L51
 219:../kernel/tkernel/device.c **** 		}
 220:../kernel/tkernel/device.c **** 		++unitno;
 705                             		.loc 3 220 3
 706 03e1 EC A5                   		mov.L	[r10], r5
 707 03e3 62 15                   		add	#1, r5
 708 03e5 E3 A5                   		mov.L	r5, [r10]
 709                             	.L49:
 221:../kernel/tkernel/device.c **** 	}
 222:../kernel/tkernel/device.c **** 
 223:../kernel/tkernel/device.c **** 	return unitno;
 710                             		.loc 3 223 9
 711 03e7 EC A5                   		mov.L	[r10], r5
 224:../kernel/tkernel/device.c **** }
 712                             		.loc 3 224 1
 713 03e9 EF 51                   		mov.L	r5, r1
 714 03eb 3F AA 05                		rtsd	#20, r10-r10
 715                             	.LFE26:
 718                             	_logdevnm:
 719                             	.LFB27:
 225:../kernel/tkernel/device.c **** 
 226:../kernel/tkernel/device.c **** /*
 227:../kernel/tkernel/device.c ****  * Get logical device name
 228:../kernel/tkernel/device.c ****  *	Get the logical device name from
 229:../kernel/tkernel/device.c ****  *	the physical device name (pdevnm) and the subunit number (unitno).
 230:../kernel/tkernel/device.c ****  */
 231:../kernel/tkernel/device.c **** LOCAL void logdevnm( UB *ldevnm, UB *pdevnm, INT unitno )
 232:../kernel/tkernel/device.c **** {
 720                             		.loc 3 232 1
 721 03ee 6E 6A                   		pushm	r6-r10
 722                             	.LCFI24:
 723 03f0 71 0A E4                		add	#-28, r0, r10
 724                             	.LCFI25:
 725 03f3 EF A0                   		mov.L	r10, r0
 726 03f5 E7 A1 04                		mov.L	r1, 16[r10]
 727 03f8 E7 A2 05                		mov.L	r2, 20[r10]
 728 03fb E7 A3 06                		mov.L	r3, 24[r10]
 233:../kernel/tkernel/device.c **** 	UB	unostr[12], *cp;
 234:../kernel/tkernel/device.c **** 
 235:../kernel/tkernel/device.c **** 	knl_strcpy((char*)ldevnm, (char*)pdevnm);
 729                             		.loc 3 235 2
 730 03fe ED A2 05                		mov.L	20[r10], r2
 731 0401 ED A1 04                		mov.L	16[r10], r1
 732 0404 05 00 00 00             		bsr	_knl_strcpy
 236:../kernel/tkernel/device.c **** 	if ( unitno > 0 ) {
 733                             		.loc 3 236 5
 734 0408 ED A5 06                		mov.L	24[r10], r5
 735 040b 61 05                   		cmp	#0, r5
 736 040d 2A 05 38 86 00          		ble	.L59
 237:../kernel/tkernel/device.c **** 		cp = &unostr[11];
 737                             		.loc 3 237 6
 738 0412 71 A5 04                		add	#4, r10, r5
 739 0415 62 B5                   		add	#11, r5
 740 0417 E3 A5                   		mov.L	r5, [r10]
 238:../kernel/tkernel/device.c **** 		*cp = '\0';
 741                             		.loc 3 238 7
 742 0419 EC A5                   		mov.L	[r10], r5
 743 041b F8 54 00                		mov.B	#0, [r5]
 239:../kernel/tkernel/device.c **** 		while (*ldevnm != '\0') {
 744                             		.loc 3 239 9
 745 041e 09                      		bra	.L56
 746                             	.L57:
 240:../kernel/tkernel/device.c **** 			++ldevnm;
 747                             		.loc 3 240 4
 748 041f ED A5 04                		mov.L	16[r10], r5
 749 0422 62 15                   		add	#1, r5
 750 0424 E7 A5 04                		mov.L	r5, 16[r10]
 751                             	.L56:
 239:../kernel/tkernel/device.c **** 		while (*ldevnm != '\0') {
 752                             		.loc 3 239 10
 753 0427 ED A5 04                		mov.L	16[r10], r5
 754 042a CC 55                   		mov.B	[r5], r5
 239:../kernel/tkernel/device.c **** 		while (*ldevnm != '\0') {
 755                             		.loc 3 239 9
 756 042c 5B 55                   		movu.B	r5, r5
 757 042e 61 05                   		cmp	#0, r5
 758 0430 21 EF                   		bne	.L57
 241:../kernel/tkernel/device.c **** 		}
 242:../kernel/tkernel/device.c **** 		--unitno;
 759                             		.loc 3 242 3
 760 0432 ED A5 06                		mov.L	24[r10], r5
 761 0435 60 15                   		sub	#1, r5
 762 0437 E7 A5 06                		mov.L	r5, 24[r10]
 763                             	.L58:
 243:../kernel/tkernel/device.c **** 		do {
 244:../kernel/tkernel/device.c **** 			*(--cp) = (UB)('0' + (unitno % 10));
 764                             		.loc 3 244 33 discriminator 1
 765 043a ED A5 06                		mov.L	24[r10], r5
 766 043d FB 72 67 66 66 66       		mov.L	#0x66666667, r7
 767 0443 FC 1B 57                		emul	r5, r7
 768 0446 EF 73                   		mov.L	r7, r3
 769 0448 EF 84                   		mov.L	r8, r4
 770 044a FD A2 43                		shar	#2, r4, r3
 771 044d FD BF 54                		shar	#31, r5, r4
 772 0450 FF 04 43                		sub	r4, r3, r4
 773 0453 63 A4                   		mul	#10, r4
 774 0455 FF 04 45                		sub	r4, r5, r4
 775                             		.loc 3 244 14 discriminator 1
 776 0458 CF 45                   		mov.B	r4, r5
 777                             		.loc 3 244 12 discriminator 1
 778 045a EC A4                   		mov.L	[r10], r4
 779 045c 60 14                   		sub	#1, r4
 780 045e E3 A4                   		mov.L	r4, [r10]
 781                             		.loc 3 244 14 discriminator 1
 782 0460 71 55 30                		add	#48, r5
 783 0463 CF 54                   		mov.B	r5, r4
 784                             		.loc 3 244 12 discriminator 1
 785 0465 EC A5                   		mov.L	[r10], r5
 786 0467 C3 54                   		mov.B	r4, [r5]
 245:../kernel/tkernel/device.c **** 			unitno /= 10;
 787                             		.loc 3 245 11 discriminator 1
 788 0469 ED A4 06                		mov.L	24[r10], r4
 789 046c FB 72 67 66 66 66       		mov.L	#0x66666667, r7
 790 0472 FC 1B 47                		emul	r4, r7
 791 0475 EF 75                   		mov.L	r7, r5
 792 0477 EF 86                   		mov.L	r8, r6
 793 0479 FD A2 63                		shar	#2, r6, r3
 794 047c FD BF 45                		shar	#31, r4, r5
 795 047f FF 05 53                		sub	r5, r3, r5
 796 0482 E7 A5 06                		mov.L	r5, 24[r10]
 246:../kernel/tkernel/device.c **** 		} while (unitno);
 797                             		.loc 3 246 3 discriminator 1
 798 0485 ED A5 06                		mov.L	24[r10], r5
 799 0488 61 05                   		cmp	#0, r5
 800 048a 21 B0                   		bne	.L58
 247:../kernel/tkernel/device.c **** 		knl_strcat((char*)ldevnm, (char*)cp);
 801                             		.loc 3 247 3
 802 048c EC A2                   		mov.L	[r10], r2
 803 048e ED A1 04                		mov.L	16[r10], r1
 804 0491 05 00 00 00             		bsr	_knl_strcat
 805                             	.L59:
 248:../kernel/tkernel/device.c **** 	}
 249:../kernel/tkernel/device.c **** }
 806                             		.loc 3 249 1
 807 0495 03                      		nop
 808 0496 3F 6A 0C                		rtsd	#48, r6-r10
 809                             	.LFE27:
 811                             		.global	_tk_get_dev
 813                             	_tk_get_dev:
 814                             	.LFB28:
 250:../kernel/tkernel/device.c **** 
 251:../kernel/tkernel/device.c **** /*
 252:../kernel/tkernel/device.c ****  * Get device name
 253:../kernel/tkernel/device.c ****  */
 254:../kernel/tkernel/device.c **** SYSCALL ID tk_get_dev( ID devid, UB *devnm )
 255:../kernel/tkernel/device.c **** {
 815                             		.loc 3 255 1
 816 0499 6E 7A                   		pushm	r7-r10
 817                             	.LCFI26:
 818 049b 71 0A F0                		add	#-16, r0, r10
 819                             	.LCFI27:
 820 049e EF A0                   		mov.L	r10, r0
 821 04a0 E7 A1 02                		mov.L	r1, 8[r10]
 822 04a3 E7 A2 03                		mov.L	r2, 12[r10]
 256:../kernel/tkernel/device.c **** 	DevCB	*devcb;
 257:../kernel/tkernel/device.c **** 	ER	ercd;
 258:../kernel/tkernel/device.c **** 
 259:../kernel/tkernel/device.c **** 	ercd = knl_check_devid(devid);
 823                             		.loc 3 259 9
 824 04a6 ED A1 02                		mov.L	8[r10], r1
 825 04a9 39 1F FC                		bsr	_knl_check_devid
 826 04ac E3 A1                   		mov.L	r1, [r10]
 260:../kernel/tkernel/device.c **** 	if ( ercd < E_OK ) {
 827                             		.loc 3 260 5
 828 04ae EC A5                   		mov.L	[r10], r5
 829 04b0 61 05                   		cmp	#0, r5
 830 04b2 28 05 38 8B 00          		blt	.L67
 261:../kernel/tkernel/device.c **** 		goto err_ret1;
 262:../kernel/tkernel/device.c **** 	}
 263:../kernel/tkernel/device.c **** 
 264:../kernel/tkernel/device.c **** 	LockDM();
 831                             		.loc 3 264 2
 832 04b7 66 02                   		mov.L	#0, r2
 833 04b9 FB 12 00 00 00 00       		mov.L	#_knl_DevMgrLock, r1
 834 04bf 05 00 00 00             		bsr	_MLock
 265:../kernel/tkernel/device.c **** 
 266:../kernel/tkernel/device.c **** 	devcb = DEVCB(devid);
 835                             		.loc 3 266 10
 836 04c3 ED A5 02                		mov.L	8[r10], r5
 837 04c6 6A 85                   		shar	#8, r5
 838 04c8 75 15 48                		mul	#0x48, r5
 839 04cb 71 55 B8                		add	#-72, r5
 840                             		.loc 3 266 8
 841 04ce 70 55 00 00 00 00       		add	#_knl_DevCBtbl, r5
 842 04d4 E7 A5 01                		mov.L	r5, 4[r10]
 267:../kernel/tkernel/device.c **** 	if ( (devcb->devnm[0] == '\0')||(UNITNO(devid) > devcb->ddev.nsub) ) {
 843                             		.loc 3 267 20
 844 04d7 ED A5 01                		mov.L	4[r10], r5
 845 04da 8A 55                   		mov.B	8[r5], r5
 846                             		.loc 3 267 5
 847 04dc 5B 55                   		movu.B	r5, r5
 848 04de 61 05                   		cmp	#0, r5
 849 04e0 20 12                   		beq	.L63
 850                             		.loc 3 267 35 discriminator 1
 851 04e2 ED A5 02                		mov.L	8[r10], r5
 852 04e5 76 25 FF 00             		and	#0xff, r5
 853                             		.loc 3 267 62 discriminator 1
 854 04e9 ED A4 01                		mov.L	4[r10], r4
 855 04ec AA 44                   		mov.L	32[r4], r4
 856                             		.loc 3 267 32 discriminator 1
 857 04ee 47 45                   		cmp	r4, r5
 858 04f0 2B 14                   		ble	.L64
 859                             	.L63:
 268:../kernel/tkernel/device.c **** 		ercd = E_NOEXS;
 860                             		.loc 3 268 8
 861 04f2 F8 A6 D6                		mov.L	#-42, [r10]
 269:../kernel/tkernel/device.c **** 		goto err_ret2;
 862                             		.loc 3 269 3
 863 04f5 03                      		nop
 864                             	.L65:
 270:../kernel/tkernel/device.c **** 	}
 271:../kernel/tkernel/device.c **** 
 272:../kernel/tkernel/device.c **** 	logdevnm(devnm, devcb->devnm, UNITNO(devid));
 273:../kernel/tkernel/device.c **** 
 274:../kernel/tkernel/device.c **** 	UnlockDM();
 275:../kernel/tkernel/device.c **** 
 276:../kernel/tkernel/device.c **** 	return DID(devcb);
 277:../kernel/tkernel/device.c **** 
 278:../kernel/tkernel/device.c **** err_ret2:
 279:../kernel/tkernel/device.c **** 	UnlockDM();
 865                             		.loc 3 279 2
 866 04f6 66 02                   		mov.L	#0, r2
 867 04f8 FB 12 00 00 00 00       		mov.L	#_knl_DevMgrLock, r1
 868 04fe 05 00 00 00             		bsr	_MUnlock
 869 0502 2E 3E                   		bra	.L62
 870                             	.L64:
 272:../kernel/tkernel/device.c **** 
 871                             		.loc 3 272 23
 872 0504 ED A5 01                		mov.L	4[r10], r5
 873 0507 71 54 08                		add	#8, r5, r4
 272:../kernel/tkernel/device.c **** 
 874                             		.loc 3 272 2
 875 050a ED A5 02                		mov.L	8[r10], r5
 876 050d 76 25 FF 00             		and	#0xff, r5
 877 0511 EF 53                   		mov.L	r5, r3
 878 0513 EF 42                   		mov.L	r4, r2
 879 0515 ED A1 03                		mov.L	12[r10], r1
 880 0518 39 D6 FE                		bsr	_logdevnm
 274:../kernel/tkernel/device.c **** 
 881                             		.loc 3 274 2
 882 051b 66 02                   		mov.L	#0, r2
 883 051d FB 12 00 00 00 00       		mov.L	#_knl_DevMgrLock, r1
 884 0523 05 00 00 00             		bsr	_MUnlock
 276:../kernel/tkernel/device.c **** 
 885                             		.loc 3 276 9
 886 0527 ED A5 01                		mov.L	4[r10], r5
 887 052a FB 72 00 00 00 00       		mov.L	#_knl_DevCBtbl, r7
 888 0530 43 75                   		sub	r7, r5
 889 0532 6A 35                   		shar	#3, r5
 890 0534 74 15 39 8E E3 38       		mul	#0x38e38e39, r5
 891 053a 62 15                   		add	#1, r5
 892 053c 6C 85                   		shll	#8, r5
 893 053e 0C                      		bra	.L66
 894                             	.L67:
 261:../kernel/tkernel/device.c **** 	}
 895                             		.loc 3 261 3
 896 053f 03                      		nop
 897                             	.L62:
 280:../kernel/tkernel/device.c **** err_ret1:
 281:../kernel/tkernel/device.c **** 	return ercd;
 898                             		.loc 3 281 9
 899 0540 EC A5                   		mov.L	[r10], r5
 900                             	.L66:
 282:../kernel/tkernel/device.c **** }
 901                             		.loc 3 282 1
 902 0542 EF 51                   		mov.L	r5, r1
 903 0544 3F 7A 08                		rtsd	#32, r7-r10
 904                             	.LFE28:
 906                             		.global	_tk_ref_dev
 908                             	_tk_ref_dev:
 909                             	.LFB29:
 283:../kernel/tkernel/device.c **** 
 284:../kernel/tkernel/device.c **** /*
 285:../kernel/tkernel/device.c ****  * Get device information
 286:../kernel/tkernel/device.c ****  */
 287:../kernel/tkernel/device.c **** SYSCALL ID tk_ref_dev( CONST UB *devnm, T_RDEV *pk_rdev )
 288:../kernel/tkernel/device.c **** {
 910                             		.loc 3 288 1
 911 0547 6E 7A                   		pushm	r7-r10
 912                             	.LCFI28:
 913 0549 71 0A E0                		add	#-32, r0, r10
 914                             	.LCFI29:
 915 054c EF A0                   		mov.L	r10, r0
 916 054e E7 A1 06                		mov.L	r1, 24[r10]
 917 0551 E7 A2 07                		mov.L	r2, 28[r10]
 289:../kernel/tkernel/device.c **** 	UB	pdevnm[L_DEVNM + 1];
 290:../kernel/tkernel/device.c **** 	DevCB	*devcb;
 291:../kernel/tkernel/device.c **** 	INT	unitno;
 292:../kernel/tkernel/device.c **** 	ER	ercd;
 293:../kernel/tkernel/device.c **** 
 294:../kernel/tkernel/device.c **** 	unitno = knl_phydevnm(pdevnm, devnm);
 918                             		.loc 3 294 11
 919 0554 71 A5 0C                		add	#12, r10, r5
 920 0557 ED A2 06                		mov.L	24[r10], r2
 921 055a EF 51                   		mov.L	r5, r1
 922 055c 05 00 00 00             		bsr	_knl_phydevnm
 923 0560 E3 A1                   		mov.L	r1, [r10]
 295:../kernel/tkernel/device.c **** 
 296:../kernel/tkernel/device.c **** 	LockDM();
 924                             		.loc 3 296 2
 925 0562 66 02                   		mov.L	#0, r2
 926 0564 FB 12 00 00 00 00       		mov.L	#_knl_DevMgrLock, r1
 927 056a 05 00 00 00             		bsr	_MLock
 297:../kernel/tkernel/device.c **** 
 298:../kernel/tkernel/device.c **** 	devcb = knl_searchDevCB(pdevnm);
 928                             		.loc 3 298 10
 929 056e 71 A5 0C                		add	#12, r10, r5
 930 0571 EF 51                   		mov.L	r5, r1
 931 0573 05 00 00 00             		bsr	_knl_searchDevCB
 932 0577 E7 A1 01                		mov.L	r1, 4[r10]
 299:../kernel/tkernel/device.c **** 	if ( devcb == NULL || unitno > devcb->ddev.nsub ) {
 933                             		.loc 3 299 5
 934 057a ED A5 01                		mov.L	4[r10], r5
 935 057d 61 05                   		cmp	#0, r5
 936 057f 20 0D                   		beq	.L69
 937                             		.loc 3 299 44 discriminator 1
 938 0581 ED A5 01                		mov.L	4[r10], r5
 939 0584 AA 55                   		mov.L	32[r5], r5
 940                             		.loc 3 299 21 discriminator 1
 941 0586 EC A4                   		mov.L	[r10], r4
 942 0588 47 54                   		cmp	r5, r4
 943 058a 2B 18                   		ble	.L70
 944                             	.L69:
 300:../kernel/tkernel/device.c **** 		ercd = E_NOEXS;
 945                             		.loc 3 300 8
 946 058c F9 A6 02 D6             		mov.L	#-42, 8[r10]
 301:../kernel/tkernel/device.c **** 		goto err_ret2;
 947                             		.loc 3 301 3
 948 0590 03                      		nop
 949                             	.L71:
 302:../kernel/tkernel/device.c **** 	}
 303:../kernel/tkernel/device.c **** 
 304:../kernel/tkernel/device.c **** 	if ( pk_rdev != NULL ) {
 305:../kernel/tkernel/device.c **** 		pk_rdev->devatr = devcb->ddev.devatr;
 306:../kernel/tkernel/device.c **** 		pk_rdev->blksz  = devcb->ddev.blksz;
 307:../kernel/tkernel/device.c **** 		pk_rdev->nsub   = devcb->ddev.nsub;
 308:../kernel/tkernel/device.c **** 		pk_rdev->subno  = unitno;
 309:../kernel/tkernel/device.c **** 	}
 310:../kernel/tkernel/device.c **** 
 311:../kernel/tkernel/device.c **** 	UnlockDM();
 312:../kernel/tkernel/device.c **** 
 313:../kernel/tkernel/device.c **** 	return DEVID(devcb, unitno);
 314:../kernel/tkernel/device.c **** 
 315:../kernel/tkernel/device.c **** err_ret2:
 316:../kernel/tkernel/device.c **** 	UnlockDM();
 950                             		.loc 3 316 2
 951 0591 66 02                   		mov.L	#0, r2
 952 0593 FB 12 00 00 00 00       		mov.L	#_knl_DevMgrLock, r1
 953 0599 05 00 00 00             		bsr	_MUnlock
 317:../kernel/tkernel/device.c **** 	return ercd;
 954                             		.loc 3 317 9
 955 059d ED A5 02                		mov.L	8[r10], r5
 956 05a0 2E 54                   		bra	.L74
 957                             	.L70:
 304:../kernel/tkernel/device.c **** 		pk_rdev->devatr = devcb->ddev.devatr;
 958                             		.loc 3 304 5
 959 05a2 ED A5 07                		mov.L	28[r10], r5
 960 05a5 61 05                   		cmp	#0, r5
 961 05a7 20 27                   		beq	.L72
 305:../kernel/tkernel/device.c **** 		pk_rdev->blksz  = devcb->ddev.blksz;
 962                             		.loc 3 305 32
 963 05a9 ED A5 01                		mov.L	4[r10], r5
 964 05ac A9 DC                   		mov.L	28[r5], r4
 305:../kernel/tkernel/device.c **** 		pk_rdev->blksz  = devcb->ddev.blksz;
 965                             		.loc 3 305 19
 966 05ae ED A5 07                		mov.L	28[r10], r5
 967 05b1 E3 54                   		mov.L	r4, [r5]
 306:../kernel/tkernel/device.c **** 		pk_rdev->nsub   = devcb->ddev.nsub;
 968                             		.loc 3 306 32
 969 05b3 ED A5 01                		mov.L	4[r10], r5
 970 05b6 AA 5C                   		mov.L	36[r5], r4
 306:../kernel/tkernel/device.c **** 		pk_rdev->nsub   = devcb->ddev.nsub;
 971                             		.loc 3 306 19
 972 05b8 ED A5 07                		mov.L	28[r10], r5
 973 05bb A0 5C                   		mov.L	r4, 4[r5]
 307:../kernel/tkernel/device.c **** 		pk_rdev->subno  = unitno;
 974                             		.loc 3 307 32
 975 05bd ED A5 01                		mov.L	4[r10], r5
 976 05c0 AA 54                   		mov.L	32[r5], r4
 307:../kernel/tkernel/device.c **** 		pk_rdev->subno  = unitno;
 977                             		.loc 3 307 19
 978 05c2 ED A5 07                		mov.L	28[r10], r5
 979 05c5 A0 D4                   		mov.L	r4, 8[r5]
 308:../kernel/tkernel/device.c **** 	}
 980                             		.loc 3 308 19
 981 05c7 ED A5 07                		mov.L	28[r10], r5
 982 05ca EC A4                   		mov.L	[r10], r4
 983 05cc A0 DC                   		mov.L	r4, 12[r5]
 984                             	.L72:
 311:../kernel/tkernel/device.c **** 
 985                             		.loc 3 311 2
 986 05ce 66 02                   		mov.L	#0, r2
 987 05d0 FB 12 00 00 00 00       		mov.L	#_knl_DevMgrLock, r1
 988 05d6 05 00 00 00             		bsr	_MUnlock
 313:../kernel/tkernel/device.c **** 
 989                             		.loc 3 313 9
 990 05da ED A5 01                		mov.L	4[r10], r5
 991 05dd FB 72 00 00 00 00       		mov.L	#_knl_DevCBtbl, r7
 992 05e3 43 75                   		sub	r7, r5
 993 05e5 6A 35                   		shar	#3, r5
 994 05e7 74 15 39 8E E3 38       		mul	#0x38e38e39, r5
 995 05ed 62 15                   		add	#1, r5
 996 05ef 6C 85                   		shll	#8, r5
 997 05f1 06 88 A5                		add	[r10].L, r5
 998                             	.L74:
 318:../kernel/tkernel/device.c **** }
 999                             		.loc 3 318 1 discriminator 1
 1000 05f4 EF 51                   		mov.L	r5, r1
 1001 05f6 3F 7A 0C                		rtsd	#48, r7-r10
 1002                             	.LFE29:
 1004                             		.global	_tk_oref_dev
 1006                             	_tk_oref_dev:
 1007                             	.LFB30:
 319:../kernel/tkernel/device.c **** 
 320:../kernel/tkernel/device.c **** /*
 321:../kernel/tkernel/device.c ****  * Get device information
 322:../kernel/tkernel/device.c ****  */
 323:../kernel/tkernel/device.c **** SYSCALL ID tk_oref_dev( ID dd, T_RDEV *pk_rdev )
 324:../kernel/tkernel/device.c **** {
 1008                             		.loc 3 324 1
 1009 05f9 6E 7A                   		pushm	r7-r10
 1010                             	.LCFI30:
 1011 05fb 71 0A E8                		add	#-24, r0, r10
 1012                             	.LCFI31:
 1013 05fe EF A0                   		mov.L	r10, r0
 1014 0600 E7 A1 04                		mov.L	r1, 16[r10]
 1015 0603 E7 A2 05                		mov.L	r2, 20[r10]
 325:../kernel/tkernel/device.c **** 	OpnCB	*opncb;
 326:../kernel/tkernel/device.c **** 	DevCB	*devcb;
 327:../kernel/tkernel/device.c **** 	INT	unitno;
 328:../kernel/tkernel/device.c **** 	ER	ercd;
 329:../kernel/tkernel/device.c **** 
 330:../kernel/tkernel/device.c **** 	LockDM();
 1016                             		.loc 3 330 2
 1017 0606 66 02                   		mov.L	#0, r2
 1018 0608 FB 12 00 00 00 00       		mov.L	#_knl_DevMgrLock, r1
 1019 060e 05 00 00 00             		bsr	_MLock
 331:../kernel/tkernel/device.c **** 
 332:../kernel/tkernel/device.c **** 	ercd = knl_check_devdesc(dd, 0, &opncb);
 1020                             		.loc 3 332 9
 1021 0612 71 A5 0C                		add	#12, r10, r5
 1022 0615 EF 53                   		mov.L	r5, r3
 1023 0617 66 02                   		mov.L	#0, r2
 1024 0619 ED A1 04                		mov.L	16[r10], r1
 1025 061c 05 00 00 00             		bsr	_knl_check_devdesc
 1026 0620 E3 A1                   		mov.L	r1, [r10]
 333:../kernel/tkernel/device.c **** 	if ( ercd < E_OK ) {
 1027                             		.loc 3 333 5
 1028 0622 EC A5                   		mov.L	[r10], r5
 1029 0624 61 05                   		cmp	#0, r5
 1030 0626 29 68                   		blt	.L82
 334:../kernel/tkernel/device.c **** 		goto err_ret2;
 335:../kernel/tkernel/device.c **** 	}
 336:../kernel/tkernel/device.c **** 
 337:../kernel/tkernel/device.c **** 	devcb  = opncb->devcb;
 1031                             		.loc 3 337 16
 1032 0628 ED A5 03                		mov.L	12[r10], r5
 1033                             		.loc 3 337 9
 1034 062b A9 5D                   		mov.L	20[r5], r5
 1035 062d E7 A5 01                		mov.L	r5, 4[r10]
 338:../kernel/tkernel/device.c **** 	unitno = opncb->unitno;
 1036                             		.loc 3 338 16
 1037 0630 ED A5 03                		mov.L	12[r10], r5
 1038                             		.loc 3 338 9
 1039 0633 A9 D5                   		mov.L	24[r5], r5
 1040 0635 E7 A5 02                		mov.L	r5, 8[r10]
 339:../kernel/tkernel/device.c **** 
 340:../kernel/tkernel/device.c **** 	if ( pk_rdev != NULL ) {
 1041                             		.loc 3 340 5
 1042 0638 ED A5 05                		mov.L	20[r10], r5
 1043 063b 61 05                   		cmp	#0, r5
 1044 063d 20 28                   		beq	.L78
 341:../kernel/tkernel/device.c **** 		pk_rdev->devatr = devcb->ddev.devatr;
 1045                             		.loc 3 341 32
 1046 063f ED A5 01                		mov.L	4[r10], r5
 1047 0642 A9 DC                   		mov.L	28[r5], r4
 1048                             		.loc 3 341 19
 1049 0644 ED A5 05                		mov.L	20[r10], r5
 1050 0647 E3 54                   		mov.L	r4, [r5]
 342:../kernel/tkernel/device.c **** 		pk_rdev->blksz  = devcb->ddev.blksz;
 1051                             		.loc 3 342 32
 1052 0649 ED A5 01                		mov.L	4[r10], r5
 1053 064c AA 5C                   		mov.L	36[r5], r4
 1054                             		.loc 3 342 19
 1055 064e ED A5 05                		mov.L	20[r10], r5
 1056 0651 A0 5C                   		mov.L	r4, 4[r5]
 343:../kernel/tkernel/device.c **** 		pk_rdev->nsub   = devcb->ddev.nsub;
 1057                             		.loc 3 343 32
 1058 0653 ED A5 01                		mov.L	4[r10], r5
 1059 0656 AA 54                   		mov.L	32[r5], r4
 1060                             		.loc 3 343 19
 1061 0658 ED A5 05                		mov.L	20[r10], r5
 1062 065b A0 D4                   		mov.L	r4, 8[r5]
 344:../kernel/tkernel/device.c **** 		pk_rdev->subno  = unitno;
 1063                             		.loc 3 344 19
 1064 065d ED A5 05                		mov.L	20[r10], r5
 1065 0660 ED A4 02                		mov.L	8[r10], r4
 1066 0663 A0 DC                   		mov.L	r4, 12[r5]
 1067                             	.L78:
 345:../kernel/tkernel/device.c **** 	}
 346:../kernel/tkernel/device.c **** 
 347:../kernel/tkernel/device.c **** 	UnlockDM();
 1068                             		.loc 3 347 2
 1069 0665 66 02                   		mov.L	#0, r2
 1070 0667 FB 12 00 00 00 00       		mov.L	#_knl_DevMgrLock, r1
 1071 066d 05 00 00 00             		bsr	_MUnlock
 348:../kernel/tkernel/device.c **** 
 349:../kernel/tkernel/device.c **** 	return DEVID(devcb, unitno);
 1072                             		.loc 3 349 9
 1073 0671 ED A5 01                		mov.L	4[r10], r5
 1074 0674 FB 72 00 00 00 00       		mov.L	#_knl_DevCBtbl, r7
 1075 067a 43 75                   		sub	r7, r5
 1076 067c 6A 35                   		shar	#3, r5
 1077 067e 74 15 39 8E E3 38       		mul	#0x38e38e39, r5
 1078 0684 62 15                   		add	#1, r5
 1079 0686 6C 85                   		shll	#8, r5
 1080 0688 06 89 A5 02             		add	8[r10].L, r5
 1081 068c 2E 11                   		bra	.L80
 1082                             	.L82:
 334:../kernel/tkernel/device.c **** 	}
 1083                             		.loc 3 334 3
 1084 068e 03                      		nop
 1085                             	.L77:
 350:../kernel/tkernel/device.c **** 
 351:../kernel/tkernel/device.c **** err_ret2:
 352:../kernel/tkernel/device.c **** 	UnlockDM();
 1086                             		.loc 3 352 2
 1087 068f 66 02                   		mov.L	#0, r2
 1088 0691 FB 12 00 00 00 00       		mov.L	#_knl_DevMgrLock, r1
 1089 0697 05 00 00 00             		bsr	_MUnlock
 353:../kernel/tkernel/device.c **** 	return ercd;
 1090                             		.loc 3 353 9
 1091 069b EC A5                   		mov.L	[r10], r5
 1092                             	.L80:
 354:../kernel/tkernel/device.c **** }
 1093                             		.loc 3 354 1 discriminator 1
 1094 069d EF 51                   		mov.L	r5, r1
 1095 069f 3F 7A 0A                		rtsd	#40, r7-r10
 1096                             	.LFE30:
 1098                             		.global	_tk_lst_dev
 1100                             	_tk_lst_dev:
 1101                             	.LFB31:
 355:../kernel/tkernel/device.c **** 
 356:../kernel/tkernel/device.c **** /*
 357:../kernel/tkernel/device.c ****  * Get registration device list
 358:../kernel/tkernel/device.c ****  */
 359:../kernel/tkernel/device.c **** SYSCALL INT tk_lst_dev( T_LDEV *pk_ldev, INT start, INT ndev )
 360:../kernel/tkernel/device.c **** {
 1102                             		.loc 3 360 1
 1103 06a2 7E AA                   		push.l	r10
 1104                             	.LCFI32:
 1105 06a4 71 0A E0                		add	#-32, r0, r10
 1106                             	.LCFI33:
 1107 06a7 EF A0                   		mov.L	r10, r0
 1108 06a9 E7 A1 05                		mov.L	r1, 20[r10]
 1109 06ac E7 A2 06                		mov.L	r2, 24[r10]
 1110 06af E7 A3 07                		mov.L	r3, 28[r10]
 361:../kernel/tkernel/device.c **** 	DevCB	*devcb;
 362:../kernel/tkernel/device.c **** 	QUEUE	*q;
 363:../kernel/tkernel/device.c **** 	INT	n, end;
 364:../kernel/tkernel/device.c **** 	ER	ercd;
 365:../kernel/tkernel/device.c **** 
 366:../kernel/tkernel/device.c **** 	if ( start < 0 || ndev < 0 ) {
 1111                             		.loc 3 366 5
 1112 06b2 ED A5 06                		mov.L	24[r10], r5
 1113 06b5 61 05                   		cmp	#0, r5
 1114 06b7 29 09                   		blt	.L84
 1115                             		.loc 3 366 17 discriminator 1
 1116 06b9 ED A5 07                		mov.L	28[r10], r5
 1117 06bc 61 05                   		cmp	#0, r5
 1118 06be 28 09                   		bge	.L85
 1119                             	.L84:
 367:../kernel/tkernel/device.c **** 		ercd = E_PAR;
 1120                             		.loc 3 367 8
 1121 06c0 F9 A6 02 EF             		mov.L	#-17, 8[r10]
 368:../kernel/tkernel/device.c **** 		goto err_ret;
 1122                             		.loc 3 368 3
 1123 06c4 38 BC 00                		bra	.L86
 1124                             	.L85:
 369:../kernel/tkernel/device.c **** 	}
 370:../kernel/tkernel/device.c **** 	LockDM();
 1125                             		.loc 3 370 2
 1126 06c7 66 02                   		mov.L	#0, r2
 1127 06c9 FB 12 00 00 00 00       		mov.L	#_knl_DevMgrLock, r1
 1128 06cf 05 00 00 00             		bsr	_MLock
 371:../kernel/tkernel/device.c **** 
 372:../kernel/tkernel/device.c **** 	end = start + ndev;
 1129                             		.loc 3 372 6
 1130 06d3 ED A5 06                		mov.L	24[r10], r5
 1131 06d6 06 89 A5 07             		add	28[r10].L, r5
 1132 06da E7 A5 03                		mov.L	r5, 12[r10]
 373:../kernel/tkernel/device.c **** 	n = 0;
 1133                             		.loc 3 373 4
 1134 06dd F9 A6 01 00             		mov.L	#0, 4[r10]
 374:../kernel/tkernel/device.c **** 	for ( q = knl_UsedDevCB.next; q != &knl_UsedDevCB; q = q->next ) {
 1135                             		.loc 3 374 10
 1136 06e1 FB 52 00 00 00 00       		mov.L	#_knl_UsedDevCB, r5
 1137 06e7 EC 55                   		mov.L	[r5], r5
 1138 06e9 E3 A5                   		mov.L	r5, [r10]
 1139                             		.loc 3 374 2
 1140 06eb 2E 65                   		bra	.L87
 1141                             	.L89:
 375:../kernel/tkernel/device.c **** 		if ( n >= start && n < end ) {
 1142                             		.loc 3 375 6
 1143 06ed ED A4 01                		mov.L	4[r10], r4
 1144 06f0 ED A5 06                		mov.L	24[r10], r5
 1145 06f3 47 54                   		cmp	r5, r4
 1146 06f5 29 4D                   		blt	.L88
 1147                             		.loc 3 375 19 discriminator 1
 1148 06f7 ED A4 01                		mov.L	4[r10], r4
 1149 06fa ED A5 03                		mov.L	12[r10], r5
 1150 06fd 47 54                   		cmp	r5, r4
 1151 06ff 28 43                   		bge	.L88
 376:../kernel/tkernel/device.c **** 			devcb = (DevCB*)q;
 1152                             		.loc 3 376 10
 1153 0701 EC A5                   		mov.L	[r10], r5
 1154 0703 E7 A5 04                		mov.L	r5, 16[r10]
 377:../kernel/tkernel/device.c **** 			pk_ldev->devatr = devcb->ddev.devatr;
 1155                             		.loc 3 377 33
 1156 0706 ED A5 04                		mov.L	16[r10], r5
 1157 0709 A9 DC                   		mov.L	28[r5], r4
 1158                             		.loc 3 377 20
 1159 070b ED A5 05                		mov.L	20[r10], r5
 1160 070e E3 54                   		mov.L	r4, [r5]
 378:../kernel/tkernel/device.c **** 			pk_ldev->blksz  = devcb->ddev.blksz;
 1161                             		.loc 3 378 33
 1162 0710 ED A5 04                		mov.L	16[r10], r5
 1163 0713 AA 5C                   		mov.L	36[r5], r4
 1164                             		.loc 3 378 20
 1165 0715 ED A5 05                		mov.L	20[r10], r5
 1166 0718 A0 5C                   		mov.L	r4, 4[r5]
 379:../kernel/tkernel/device.c **** 			pk_ldev->nsub   = devcb->ddev.nsub;
 1167                             		.loc 3 379 33
 1168 071a ED A5 04                		mov.L	16[r10], r5
 1169 071d AA 54                   		mov.L	32[r5], r4
 1170                             		.loc 3 379 20
 1171 071f ED A5 05                		mov.L	20[r10], r5
 1172 0722 A0 D4                   		mov.L	r4, 8[r5]
 380:../kernel/tkernel/device.c **** 			knl_strncpy((char*)pk_ldev->devnm, (char*)devcb->devnm, L_DEVNM);
 1173                             		.loc 3 380 23
 1174 0724 ED A5 05                		mov.L	20[r10], r5
 1175 0727 71 54 0C                		add	#12, r5, r4
 1176                             		.loc 3 380 46
 1177 072a ED A5 04                		mov.L	16[r10], r5
 1178 072d 62 85                   		add	#8, r5
 1179                             		.loc 3 380 4
 1180 072f 66 83                   		mov.L	#8, r3
 1181 0731 EF 52                   		mov.L	r5, r2
 1182 0733 EF 41                   		mov.L	r4, r1
 1183 0735 05 00 00 00             		bsr	_knl_strncpy
 381:../kernel/tkernel/device.c **** 			pk_ldev++;
 1184                             		.loc 3 381 11
 1185 0739 ED A5 05                		mov.L	20[r10], r5
 1186 073c 71 55 14                		add	#20, r5
 1187 073f E7 A5 05                		mov.L	r5, 20[r10]
 1188                             	.L88:
 382:../kernel/tkernel/device.c **** 		}
 383:../kernel/tkernel/device.c **** 		n++;
 1189                             		.loc 3 383 4 discriminator 2
 1190 0742 ED A5 01                		mov.L	4[r10], r5
 1191 0745 62 15                   		add	#1, r5
 1192 0747 E7 A5 01                		mov.L	r5, 4[r10]
 374:../kernel/tkernel/device.c **** 		if ( n >= start && n < end ) {
 1193                             		.loc 3 374 55 discriminator 2
 1194 074a EC A5                   		mov.L	[r10], r5
 1195 074c EC 55                   		mov.L	[r5], r5
 1196 074e E3 A5                   		mov.L	r5, [r10]
 1197                             	.L87:
 374:../kernel/tkernel/device.c **** 		if ( n >= start && n < end ) {
 1198                             		.loc 3 374 2 discriminator 1
 1199 0750 EC A5                   		mov.L	[r10], r5
 1200 0752 74 05 00 00 00 00       		cmp	#_knl_UsedDevCB, r5
 1201 0758 21 95                   		bne	.L89
 384:../kernel/tkernel/device.c **** 	}
 385:../kernel/tkernel/device.c **** 
 386:../kernel/tkernel/device.c **** 	UnlockDM();
 1202                             		.loc 3 386 2
 1203 075a 66 02                   		mov.L	#0, r2
 1204 075c FB 12 00 00 00 00       		mov.L	#_knl_DevMgrLock, r1
 1205 0762 05 00 00 00             		bsr	_MUnlock
 387:../kernel/tkernel/device.c **** 
 388:../kernel/tkernel/device.c **** 	if ( start >= n ) {
 1206                             		.loc 3 388 5
 1207 0766 ED A4 06                		mov.L	24[r10], r4
 1208 0769 ED A5 01                		mov.L	4[r10], r5
 1209 076c 47 54                   		cmp	r5, r4
 1210 076e 29 08                   		blt	.L90
 389:../kernel/tkernel/device.c **** 		ercd = E_NOEXS;
 1211                             		.loc 3 389 8
 1212 0770 F9 A6 02 D6             		mov.L	#-42, 8[r10]
 390:../kernel/tkernel/device.c **** 		goto err_ret;
 1213                             		.loc 3 390 3
 1214 0774 2E 0C                   		bra	.L86
 1215                             	.L90:
 391:../kernel/tkernel/device.c **** 	}
 392:../kernel/tkernel/device.c **** 
 393:../kernel/tkernel/device.c **** 	return n - start;
 1216                             		.loc 3 393 11
 1217 0776 ED A4 01                		mov.L	4[r10], r4
 1218 0779 ED A5 06                		mov.L	24[r10], r5
 1219 077c FF 05 54                		sub	r5, r4, r5
 1220 077f 0C                      		bra	.L91
 1221                             	.L86:
 394:../kernel/tkernel/device.c **** 
 395:../kernel/tkernel/device.c **** err_ret:
 396:../kernel/tkernel/device.c **** 	return ercd;
 1222                             		.loc 3 396 9
 1223 0780 ED A5 02                		mov.L	8[r10], r5
 1224                             	.L91:
 397:../kernel/tkernel/device.c **** }
 1225                             		.loc 3 397 1
 1226 0783 EF 51                   		mov.L	r5, r1
 1227 0785 3F AA 09                		rtsd	#36, r10-r10
 1228                             	.LFE31:
 1230                             		.global	_tk_evt_dev
 1232                             	_tk_evt_dev:
 1233                             	.LFB32:
 398:../kernel/tkernel/device.c **** 
 399:../kernel/tkernel/device.c **** /* ------------------------------------------------------------------------ */
 400:../kernel/tkernel/device.c **** 
 401:../kernel/tkernel/device.c **** /*
 402:../kernel/tkernel/device.c ****  * Send driver request event
 403:../kernel/tkernel/device.c ****  */
 404:../kernel/tkernel/device.c **** SYSCALL INT tk_evt_dev( ID devid, INT evttyp, void *evtinf )
 405:../kernel/tkernel/device.c **** {
 1234                             		.loc 3 405 1
 1235 0788 7E AA                   		push.l	r10
 1236                             	.LCFI34:
 1237 078a 71 0A E4                		add	#-28, r0, r10
 1238                             	.LCFI35:
 1239 078d EF A0                   		mov.L	r10, r0
 1240 078f E7 A1 04                		mov.L	r1, 16[r10]
 1241 0792 E7 A2 05                		mov.L	r2, 20[r10]
 1242 0795 E7 A3 06                		mov.L	r3, 24[r10]
 406:../kernel/tkernel/device.c **** 	DevCB	*devcb;
 407:../kernel/tkernel/device.c **** 	EVTFN	eventfn;
 408:../kernel/tkernel/device.c **** 	void	*exinf;
 409:../kernel/tkernel/device.c **** 	ER	ercd;
 410:../kernel/tkernel/device.c **** 
 411:../kernel/tkernel/device.c **** 	ercd = knl_check_devid(devid);
 1243                             		.loc 3 411 9
 1244 0798 ED A1 04                		mov.L	16[r10], r1
 1245 079b 39 2D F9                		bsr	_knl_check_devid
 1246 079e E3 A1                   		mov.L	r1, [r10]
 412:../kernel/tkernel/device.c **** 	if ( ercd < E_OK ) {
 1247                             		.loc 3 412 5
 1248 07a0 EC A5                   		mov.L	[r10], r5
 1249 07a2 61 05                   		cmp	#0, r5
 1250 07a4 28 05 38 BC 00          		blt	.L100
 413:../kernel/tkernel/device.c **** 		goto err_ret1;
 414:../kernel/tkernel/device.c **** 	}
 415:../kernel/tkernel/device.c **** 	if ( evttyp < 0 ) {
 1251                             		.loc 3 415 5
 1252 07a9 ED A5 05                		mov.L	20[r10], r5
 1253 07ac 61 05                   		cmp	#0, r5
 1254 07ae 28 08                   		bge	.L95
 416:../kernel/tkernel/device.c **** 		ercd = E_PAR;
 1255                             		.loc 3 416 8
 1256 07b0 F8 A6 EF                		mov.L	#-17, [r10]
 417:../kernel/tkernel/device.c **** 		goto err_ret1;
 1257                             		.loc 3 417 3
 1258 07b3 38 B0 00                		bra	.L94
 1259                             	.L95:
 418:../kernel/tkernel/device.c **** 	}
 419:../kernel/tkernel/device.c **** 
 420:../kernel/tkernel/device.c **** 	LockDM();
 1260                             		.loc 3 420 2
 1261 07b6 66 02                   		mov.L	#0, r2
 1262 07b8 FB 12 00 00 00 00       		mov.L	#_knl_DevMgrLock, r1
 1263 07be 05 00 00 00             		bsr	_MLock
 421:../kernel/tkernel/device.c **** 
 422:../kernel/tkernel/device.c **** 	devcb = DEVCB(devid);
 1264                             		.loc 3 422 10
 1265 07c2 ED A5 04                		mov.L	16[r10], r5
 1266 07c5 6A 85                   		shar	#8, r5
 1267 07c7 75 15 48                		mul	#0x48, r5
 1268 07ca 71 55 B8                		add	#-72, r5
 1269                             		.loc 3 422 8
 1270 07cd 70 55 00 00 00 00       		add	#_knl_DevCBtbl, r5
 1271 07d3 E7 A5 01                		mov.L	r5, 4[r10]
 423:../kernel/tkernel/device.c **** 	if ( (devcb->devnm[0] == '\0')||(UNITNO(devid) > devcb->ddev.nsub) ) {
 1272                             		.loc 3 423 20
 1273 07d6 ED A5 01                		mov.L	4[r10], r5
 1274 07d9 8A 55                   		mov.B	8[r5], r5
 1275                             		.loc 3 423 5
 1276 07db 5B 55                   		movu.B	r5, r5
 1277 07dd 61 05                   		cmp	#0, r5
 1278 07df 20 12                   		beq	.L96
 1279                             		.loc 3 423 35 discriminator 1
 1280 07e1 ED A5 04                		mov.L	16[r10], r5
 1281 07e4 76 25 FF 00             		and	#0xff, r5
 1282                             		.loc 3 423 62 discriminator 1
 1283 07e8 ED A4 01                		mov.L	4[r10], r4
 1284 07eb AA 44                   		mov.L	32[r4], r4
 1285                             		.loc 3 423 32 discriminator 1
 1286 07ed 47 45                   		cmp	r4, r5
 1287 07ef 2B 14                   		ble	.L97
 1288                             	.L96:
 424:../kernel/tkernel/device.c **** 		ercd = E_NOEXS;
 1289                             		.loc 3 424 8
 1290 07f1 F8 A6 D6                		mov.L	#-42, [r10]
 425:../kernel/tkernel/device.c **** 		goto err_ret2;
 1291                             		.loc 3 425 3
 1292 07f4 03                      		nop
 1293                             	.L98:
 426:../kernel/tkernel/device.c **** 	}
 427:../kernel/tkernel/device.c **** 
 428:../kernel/tkernel/device.c **** 	eventfn = (EVTFN)devcb->ddev.eventfn;
 429:../kernel/tkernel/device.c **** 	exinf = devcb->ddev.exinf;
 430:../kernel/tkernel/device.c **** 
 431:../kernel/tkernel/device.c **** 	UnlockDM();
 432:../kernel/tkernel/device.c **** 
 433:../kernel/tkernel/device.c **** 	/* Device driver call */
 434:../kernel/tkernel/device.c **** 	DISABLE_INTERRUPT;
 435:../kernel/tkernel/device.c **** 	knl_ctxtsk->sysmode++;
 436:../kernel/tkernel/device.c **** 	ENABLE_INTERRUPT;
 437:../kernel/tkernel/device.c **** 	ercd = (*eventfn)(evttyp, evtinf, exinf);
 438:../kernel/tkernel/device.c **** 	DISABLE_INTERRUPT;
 439:../kernel/tkernel/device.c **** 	knl_ctxtsk->sysmode--;
 440:../kernel/tkernel/device.c **** 	ENABLE_INTERRUPT;
 441:../kernel/tkernel/device.c **** 
 442:../kernel/tkernel/device.c **** 	return ercd;
 443:../kernel/tkernel/device.c **** 
 444:../kernel/tkernel/device.c **** err_ret2:
 445:../kernel/tkernel/device.c **** 	UnlockDM();
 1294                             		.loc 3 445 2
 1295 07f5 66 02                   		mov.L	#0, r2
 1296 07f7 FB 12 00 00 00 00       		mov.L	#_knl_DevMgrLock, r1
 1297 07fd 05 00 00 00             		bsr	_MUnlock
 1298 0801 2E 62                   		bra	.L94
 1299                             	.L97:
 428:../kernel/tkernel/device.c **** 	exinf = devcb->ddev.exinf;
 1300                             		.loc 3 428 10
 1301 0803 ED A5 01                		mov.L	4[r10], r5
 1302 0806 AB DD                   		mov.L	60[r5], r5
 1303 0808 E7 A5 02                		mov.L	r5, 8[r10]
 429:../kernel/tkernel/device.c **** 
 1304                             		.loc 3 429 8
 1305 080b ED A5 01                		mov.L	4[r10], r5
 1306 080e A9 5D                   		mov.L	20[r5], r5
 1307 0810 E7 A5 03                		mov.L	r5, 12[r10]
 431:../kernel/tkernel/device.c **** 
 1308                             		.loc 3 431 2
 1309 0813 66 02                   		mov.L	#0, r2
 1310 0815 FB 12 00 00 00 00       		mov.L	#_knl_DevMgrLock, r1
 1311 081b 05 00 00 00             		bsr	_MUnlock
 434:../kernel/tkernel/device.c **** 	knl_ctxtsk->sysmode++;
 1312                             		.loc 3 434 2
 1313 081f 05 00 00 00             		bsr	_disint
 435:../kernel/tkernel/device.c **** 	ENABLE_INTERRUPT;
 1314                             		.loc 3 435 12
 1315 0823 FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1316 0829 EC 55                   		mov.L	[r5], r5
 1317 082b 9C 5C                   		mov.W	34[r5], r4
 435:../kernel/tkernel/device.c **** 	ENABLE_INTERRUPT;
 1318                             		.loc 3 435 21
 1319 082d 62 14                   		add	#1, r4
 1320 082f 94 5C                   		mov.W	r4, 34[r5]
 436:../kernel/tkernel/device.c **** 	ercd = (*eventfn)(evttyp, evtinf, exinf);
 1321                             		.loc 3 436 2
 1322 0831 66 01                   		mov.L	#0, r1
 1323 0833 05 00 00 00             		bsr	_setint
 437:../kernel/tkernel/device.c **** 	DISABLE_INTERRUPT;
 1324                             		.loc 3 437 10
 1325 0837 ED A5 02                		mov.L	8[r10], r5
 1326 083a ED A3 03                		mov.L	12[r10], r3
 1327 083d ED A2 06                		mov.L	24[r10], r2
 1328 0840 ED A1 05                		mov.L	20[r10], r1
 1329 0843 7F 15                   		jsr	r5
 1330                             	.LVL0:
 1331 0845 E3 A1                   		mov.L	r1, [r10]
 438:../kernel/tkernel/device.c **** 	knl_ctxtsk->sysmode--;
 1332                             		.loc 3 438 2
 1333 0847 05 00 00 00             		bsr	_disint
 439:../kernel/tkernel/device.c **** 	ENABLE_INTERRUPT;
 1334                             		.loc 3 439 12
 1335 084b FB 52 00 00 00 00       		mov.L	#_knl_ctxtsk, r5
 1336 0851 EC 55                   		mov.L	[r5], r5
 1337 0853 9C 5C                   		mov.W	34[r5], r4
 439:../kernel/tkernel/device.c **** 	ENABLE_INTERRUPT;
 1338                             		.loc 3 439 21
 1339 0855 60 14                   		sub	#1, r4
 1340 0857 94 5C                   		mov.W	r4, 34[r5]
 440:../kernel/tkernel/device.c **** 
 1341                             		.loc 3 440 2
 1342 0859 66 01                   		mov.L	#0, r1
 1343 085b 05 00 00 00             		bsr	_setint
 442:../kernel/tkernel/device.c **** 
 1344                             		.loc 3 442 9
 1345 085f EC A5                   		mov.L	[r10], r5
 1346 0861 0C                      		bra	.L99
 1347                             	.L100:
 413:../kernel/tkernel/device.c **** 	}
 1348                             		.loc 3 413 3
 1349 0862 03                      		nop
 1350                             	.L94:
 446:../kernel/tkernel/device.c **** err_ret1:
 447:../kernel/tkernel/device.c **** 	return ercd;
 1351                             		.loc 3 447 9
 1352 0863 EC A5                   		mov.L	[r10], r5
 1353                             	.L99:
 448:../kernel/tkernel/device.c **** }
 1354                             		.loc 3 448 1
 1355 0865 EF 51                   		mov.L	r5, r1
 1356 0867 3F AA 08                		rtsd	#32, r10-r10
 1357                             	.LFE32:
 1360                             	_initDevCB:
 1361                             	.LFB33:
 449:../kernel/tkernel/device.c **** 
 450:../kernel/tkernel/device.c **** /* ------------------------------------------------------------------------ */
 451:../kernel/tkernel/device.c **** 
 452:../kernel/tkernel/device.c **** /*
 453:../kernel/tkernel/device.c ****  * Initialization of device registration information table
 454:../kernel/tkernel/device.c ****  */
 455:../kernel/tkernel/device.c **** LOCAL ER initDevCB( void )
 456:../kernel/tkernel/device.c **** {
 1362                             		.loc 3 456 1
 1363 086a 7E AA                   		push.l	r10
 1364                             	.LCFI36:
 1365 086c 71 0A F8                		add	#-8, r0, r10
 1366                             	.LCFI37:
 1367 086f EF A0                   		mov.L	r10, r0
 457:../kernel/tkernel/device.c **** 	DevCB	*devcb;
 458:../kernel/tkernel/device.c **** 	INT	num = MAX_REGDEV;
 1368                             		.loc 3 458 6
 1369 0871 F9 A6 01 08             		mov.L	#8, 4[r10]
 459:../kernel/tkernel/device.c **** 
 460:../kernel/tkernel/device.c **** 	QueInit(&knl_UsedDevCB);
 1370                             		.loc 3 460 2
 1371 0875 FB 12 00 00 00 00       		mov.L	#_knl_UsedDevCB, r1
 1372 087b 39 85 F7                		bsr	_QueInit
 461:../kernel/tkernel/device.c **** 	QueInit(&knl_FreeDevCB);
 1373                             		.loc 3 461 2
 1374 087e FB 12 00 00 00 00       		mov.L	#_knl_FreeDevCB, r1
 1375 0884 39 7C F7                		bsr	_QueInit
 462:../kernel/tkernel/device.c **** 
 463:../kernel/tkernel/device.c **** 	devcb = knl_DevCBtbl;
 1376                             		.loc 3 463 8
 1377 0887 F8 A2 00 00 00 00       		mov.L	#_knl_DevCBtbl, [r10]
 464:../kernel/tkernel/device.c **** 	while ( num-- > 0 ) {
 1378                             		.loc 3 464 8
 1379 088d 2E 1B                   		bra	.L102
 1380                             	.L103:
 465:../kernel/tkernel/device.c **** 		QueInsert(&devcb->q, &knl_FreeDevCB);
 1381                             		.loc 3 465 3
 1382 088f EC A5                   		mov.L	[r10], r5
 1383 0891 FB 22 00 00 00 00       		mov.L	#_knl_FreeDevCB, r2
 1384 0897 EF 51                   		mov.L	r5, r1
 1385 0899 39 9B F7                		bsr	_QueInsert
 466:../kernel/tkernel/device.c **** 		devcb->devnm[0] = '\0';
 1386                             		.loc 3 466 19
 1387 089c EC A5                   		mov.L	[r10], r5
 1388 089e 3C 58 00                		mov.B	#0, 8[r5]
 467:../kernel/tkernel/device.c **** 		devcb++;
 1389                             		.loc 3 467 8
 1390 08a1 EC A5                   		mov.L	[r10], r5
 1391 08a3 71 55 48                		add	#0x48, r5
 1392 08a6 E3 A5                   		mov.L	r5, [r10]
 1393                             	.L102:
 464:../kernel/tkernel/device.c **** 		QueInsert(&devcb->q, &knl_FreeDevCB);
 1394                             		.loc 3 464 13
 1395 08a8 ED A5 01                		mov.L	4[r10], r5
 1396 08ab 71 54 FF                		add	#-1, r5, r4
 1397 08ae E7 A4 01                		mov.L	r4, 4[r10]
 464:../kernel/tkernel/device.c **** 		QueInsert(&devcb->q, &knl_FreeDevCB);
 1398                             		.loc 3 464 8
 1399 08b1 61 05                   		cmp	#0, r5
 1400 08b3 2A DC                   		bgt	.L103
 468:../kernel/tkernel/device.c **** 	}
 469:../kernel/tkernel/device.c **** 
 470:../kernel/tkernel/device.c **** 	return E_OK;
 1401                             		.loc 3 470 9
 1402 08b5 66 05                   		mov.L	#0, r5
 471:../kernel/tkernel/device.c **** }
 1403                             		.loc 3 471 1
 1404 08b7 EF 51                   		mov.L	r5, r1
 1405 08b9 3F AA 03                		rtsd	#12, r10-r10
 1406                             	.LFE33:
 1409                             	_initIDev:
 1410                             	.LFB34:
 472:../kernel/tkernel/device.c **** 
 473:../kernel/tkernel/device.c **** /*
 474:../kernel/tkernel/device.c ****  * Initialization of device initial setting information
 475:../kernel/tkernel/device.c ****  */
 476:../kernel/tkernel/device.c **** LOCAL ER initIDev( void )
 477:../kernel/tkernel/device.c **** {
 1411                             		.loc 3 477 1
 1412 08bc 7E AA                   		push.l	r10
 1413                             	.LCFI38:
 1414 08be 71 0A FC                		add	#-4, r0, r10
 1415                             	.LCFI39:
 1416 08c1 EF A0                   		mov.L	r10, r0
 478:../kernel/tkernel/device.c **** 	ER	ercd;
 479:../kernel/tkernel/device.c **** 
 480:../kernel/tkernel/device.c **** #if DEVT_MBFSZ0 >= 0
 481:../kernel/tkernel/device.c **** 	T_CMBF	cmbf;
 482:../kernel/tkernel/device.c **** 
 483:../kernel/tkernel/device.c **** 	/* Generate message buffer for event notification */
 484:../kernel/tkernel/device.c **** 	knl_strncpy((char*)&cmbf.exinf, (char*)OBJNAME_DMMBF, sizeof(cmbf.exinf));
 485:../kernel/tkernel/device.c **** 	cmbf.mbfatr = TA_TFIFO;
 486:../kernel/tkernel/device.c **** 	cmbf.bufsz  = DEVT_MBFSZ0;
 487:../kernel/tkernel/device.c **** 	cmbf.maxmsz = DEVT_MBFSZ1;
 488:../kernel/tkernel/device.c **** 	ercd = tk_cre_mbf(&cmbf);
 489:../kernel/tkernel/device.c **** 	if ( ercd < E_OK ) {
 490:../kernel/tkernel/device.c **** 		knl_DefaultIDev.evtmbfid = 0;
 491:../kernel/tkernel/device.c **** 		goto err_ret;
 492:../kernel/tkernel/device.c **** 	}
 493:../kernel/tkernel/device.c **** #else	/* Do not use message buffer for event notification */
 494:../kernel/tkernel/device.c **** 	ercd = E_OK;
 1417                             		.loc 3 494 7
 1418 08c3 F8 A6 00                		mov.L	#0, [r10]
 495:../kernel/tkernel/device.c **** #endif
 496:../kernel/tkernel/device.c **** 	knl_DefaultIDev.evtmbfid = ercd;
 1419                             		.loc 3 496 27
 1420 08c6 FB 52 00 00 00 00       		mov.L	#_knl_DefaultIDev, r5
 1421 08cc EC A4                   		mov.L	[r10], r4
 1422 08ce E3 54                   		mov.L	r4, [r5]
 497:../kernel/tkernel/device.c **** 
 498:../kernel/tkernel/device.c **** #if DEVT_MBFSZ0 >= 0
 499:../kernel/tkernel/device.c **** err_ret:
 500:../kernel/tkernel/device.c **** #endif
 501:../kernel/tkernel/device.c **** 	return ercd;
 1423                             		.loc 3 501 9
 1424 08d0 EC A5                   		mov.L	[r10], r5
 502:../kernel/tkernel/device.c **** }
 1425                             		.loc 3 502 1
 1426 08d2 EF 51                   		mov.L	r5, r1
 1427 08d4 3F AA 02                		rtsd	#8, r10-r10
 1428                             	.LFE34:
 1430                             		.section C,"a",@progbits
 1431                             		.p2align 2
 1432                             	.LC0:
 1433 0000 44 4D 4C 6B 00          		.string	"DMLk"
 1434 0005 00 00 00                		.section P,"ax"
 1435                             		.global	_knl_initialize_devmgr
 1437                             	_knl_initialize_devmgr:
 1438                             	.LFB35:
 503:../kernel/tkernel/device.c **** 
 504:../kernel/tkernel/device.c **** /*
 505:../kernel/tkernel/device.c ****  * Initialization of Devive management
 506:../kernel/tkernel/device.c ****  */
 507:../kernel/tkernel/device.c **** EXPORT ER knl_initialize_devmgr( void )
 508:../kernel/tkernel/device.c **** {
 1439                             		.loc 3 508 1
 1440 08d7 7E AA                   		push.l	r10
 1441                             	.LCFI40:
 1442 08d9 71 0A FC                		add	#-4, r0, r10
 1443                             	.LCFI41:
 1444 08dc EF A0                   		mov.L	r10, r0
 509:../kernel/tkernel/device.c **** 	ER	ercd;
 510:../kernel/tkernel/device.c **** 
 511:../kernel/tkernel/device.c **** 	/* Generate lock for device management exclusive control */
 512:../kernel/tkernel/device.c **** 	ercd = CreateMLock(&knl_DevMgrLock, (UB*)OBJNAME_DMLOCK);
 1445                             		.loc 3 512 9
 1446 08de FB 22 00 00 00 00       		mov.L	#.LC0, r2
 1447 08e4 FB 12 00 00 00 00       		mov.L	#_knl_DevMgrLock, r1
 1448 08ea 05 00 00 00             		bsr	_CreateMLock
 1449 08ee E3 A1                   		mov.L	r1, [r10]
 513:../kernel/tkernel/device.c **** 	if ( ercd < E_OK ) {
 1450                             		.loc 3 513 5
 1451 08f0 EC A5                   		mov.L	[r10], r5
 1452 08f2 61 05                   		cmp	#0, r5
 1453 08f4 29 2C                   		blt	.L114
 514:../kernel/tkernel/device.c **** 		goto err_ret;
 515:../kernel/tkernel/device.c **** 	}
 516:../kernel/tkernel/device.c **** 
 517:../kernel/tkernel/device.c **** 	/* Generate device registration information table */
 518:../kernel/tkernel/device.c **** 	ercd = initDevCB();
 1454                             		.loc 3 518 9
 1455 08f6 39 74 FF                		bsr	_initDevCB
 1456 08f9 E3 A1                   		mov.L	r1, [r10]
 519:../kernel/tkernel/device.c **** 	if ( ercd < E_OK ) {
 1457                             		.loc 3 519 5
 1458 08fb EC A5                   		mov.L	[r10], r5
 1459 08fd 61 05                   		cmp	#0, r5
 1460 08ff 29 23                   		blt	.L115
 520:../kernel/tkernel/device.c **** 		goto err_ret;
 521:../kernel/tkernel/device.c **** 	}
 522:../kernel/tkernel/device.c **** 
 523:../kernel/tkernel/device.c **** 	/* Initialization of device input/output-related */
 524:../kernel/tkernel/device.c **** 	ercd = knl_initDevIO();
 1461                             		.loc 3 524 9
 1462 0901 05 00 00 00             		bsr	_knl_initDevIO
 1463 0905 E3 A1                   		mov.L	r1, [r10]
 525:../kernel/tkernel/device.c **** 	if ( ercd < E_OK ) {
 1464                             		.loc 3 525 5
 1465 0907 EC A5                   		mov.L	[r10], r5
 1466 0909 61 05                   		cmp	#0, r5
 1467 090b 29 19                   		blt	.L116
 526:../kernel/tkernel/device.c **** 		goto err_ret;
 527:../kernel/tkernel/device.c **** 	}
 528:../kernel/tkernel/device.c **** 
 529:../kernel/tkernel/device.c **** 	/* Initialization of device initial setting information */
 530:../kernel/tkernel/device.c **** 	ercd = initIDev();
 1468                             		.loc 3 530 9
 1469 090d 39 AF FF                		bsr	_initIDev
 1470 0910 E3 A1                   		mov.L	r1, [r10]
 531:../kernel/tkernel/device.c **** 	if ( ercd < E_OK ) {
 1471                             		.loc 3 531 5
 1472 0912 EC A5                   		mov.L	[r10], r5
 1473 0914 61 05                   		cmp	#0, r5
 1474 0916 29 11                   		blt	.L117
 532:../kernel/tkernel/device.c **** 		goto err_ret;
 533:../kernel/tkernel/device.c **** 	}
 534:../kernel/tkernel/device.c **** 
 535:../kernel/tkernel/device.c **** 	knl_devmgr_startup();
 1475                             		.loc 3 535 2
 1476 0918 05 00 00 00             		bsr	_knl_devmgr_startup
 536:../kernel/tkernel/device.c **** 
 537:../kernel/tkernel/device.c **** 	return E_OK;
 1477                             		.loc 3 537 9
 1478 091c 66 05                   		mov.L	#0, r5
 1479 091e 2E 10                   		bra	.L113
 1480                             	.L114:
 514:../kernel/tkernel/device.c **** 	}
 1481                             		.loc 3 514 3
 1482 0920 03                      		nop
 1483 0921 0F                      		bra	.L109
 1484                             	.L115:
 520:../kernel/tkernel/device.c **** 	}
 1485                             		.loc 3 520 3
 1486 0922 03                      		nop
 1487 0923 0D                      		bra	.L109
 1488                             	.L116:
 526:../kernel/tkernel/device.c **** 	}
 1489                             		.loc 3 526 3
 1490 0924 03                      		nop
 1491 0925 2E 03                   		bra	.L109
 1492                             	.L117:
 532:../kernel/tkernel/device.c **** 	}
 1493                             		.loc 3 532 3
 1494 0927 03                      		nop
 1495                             		.balign 8,3,3
 1496                             	.L109:
 538:../kernel/tkernel/device.c **** 
 539:../kernel/tkernel/device.c **** err_ret:
 540:../kernel/tkernel/device.c **** 	knl_finish_devmgr();
 1497                             		.loc 3 540 2
 1498 0928 05 00 00 00             		bsr	_knl_finish_devmgr
 541:../kernel/tkernel/device.c **** 	return ercd;
 1499                             		.loc 3 541 9
 1500 092c EC A5                   		mov.L	[r10], r5
 1501                             	.L113:
 542:../kernel/tkernel/device.c **** }
 1502                             		.loc 3 542 1
 1503 092e EF 51                   		mov.L	r5, r1
 1504 0930 3F AA 02                		rtsd	#8, r10-r10
 1505                             	.LFE35:
 1508                             	_delIDev:
 1509                             	.LFB36:
 543:../kernel/tkernel/device.c **** 
 544:../kernel/tkernel/device.c **** /*
 545:../kernel/tkernel/device.c ****  * Unregister device initial setting information
 546:../kernel/tkernel/device.c ****  */
 547:../kernel/tkernel/device.c **** LOCAL ER delIDev( void )
 548:../kernel/tkernel/device.c **** {
 1510                             		.loc 3 548 1
 1511 0933 7E AA                   		push.l	r10
 1512                             	.LCFI42:
 1513 0935 71 0A FC                		add	#-4, r0, r10
 1514                             	.LCFI43:
 1515 0938 EF A0                   		mov.L	r10, r0
 549:../kernel/tkernel/device.c **** 	ER	ercd = E_OK;
 1516                             		.loc 3 549 5
 1517 093a F8 A6 00                		mov.L	#0, [r10]
 550:../kernel/tkernel/device.c **** 
 551:../kernel/tkernel/device.c **** #if DEVT_MBFSZ0 >= 0
 552:../kernel/tkernel/device.c **** 	/* Delete message buffer for event notification */
 553:../kernel/tkernel/device.c **** 	if ( knl_DefaultIDev.evtmbfid > 0 ) {
 554:../kernel/tkernel/device.c **** 		ercd = tk_del_mbf(knl_DefaultIDev.evtmbfid);
 555:../kernel/tkernel/device.c **** 		knl_DefaultIDev.evtmbfid = 0;
 556:../kernel/tkernel/device.c **** 	}
 557:../kernel/tkernel/device.c **** 
 558:../kernel/tkernel/device.c **** 
 559:../kernel/tkernel/device.c **** #endif /* DEVT_MBFSZ0 >= 0 */
 560:../kernel/tkernel/device.c **** 
 561:../kernel/tkernel/device.c **** 	return ercd;
 1518                             		.loc 3 561 9
 1519 093d EC A5                   		mov.L	[r10], r5
 562:../kernel/tkernel/device.c **** }
 1520                             		.loc 3 562 1
 1521 093f EF 51                   		mov.L	r5, r1
 1522 0941 3F AA 02                		rtsd	#8, r10-r10
 1523                             	.LFE36:
 1525                             		.global	_knl_finish_devmgr
 1527                             	_knl_finish_devmgr:
 1528                             	.LFB37:
 563:../kernel/tkernel/device.c **** 
 564:../kernel/tkernel/device.c **** /*
 565:../kernel/tkernel/device.c ****  * Finalization sequence of system management 
 566:../kernel/tkernel/device.c ****  */
 567:../kernel/tkernel/device.c **** EXPORT ER knl_finish_devmgr( void )
 568:../kernel/tkernel/device.c **** {
 1529                             		.loc 3 568 1
 1530 0944 7E AA                   		push.l	r10
 1531                             	.LCFI44:
 1532 0946 71 0A FC                		add	#-4, r0, r10
 1533                             	.LCFI45:
 1534 0949 EF A0                   		mov.L	r10, r0
 569:../kernel/tkernel/device.c **** 	ER	ercd;
 570:../kernel/tkernel/device.c **** 
 571:../kernel/tkernel/device.c **** 	knl_devmgr_cleanup();
 1535                             		.loc 3 571 2
 1536 094b 05 00 00 00             		bsr	_knl_devmgr_cleanup
 572:../kernel/tkernel/device.c **** 
 573:../kernel/tkernel/device.c **** 	/* Unregister device initial setting information */
 574:../kernel/tkernel/device.c **** 	ercd = delIDev();
 1537                             		.loc 3 574 9
 1538 094f 39 E4 FF                		bsr	_delIDev
 1539 0952 E3 A1                   		mov.L	r1, [r10]
 575:../kernel/tkernel/device.c **** 
 576:../kernel/tkernel/device.c **** 	/* Finalization sequence of device input/output-related */
 577:../kernel/tkernel/device.c **** 	ercd = knl_finishDevIO();
 1540                             		.loc 3 577 9
 1541 0954 05 00 00 00             		bsr	_knl_finishDevIO
 1542 0958 E3 A1                   		mov.L	r1, [r10]
 578:../kernel/tkernel/device.c **** 
 579:../kernel/tkernel/device.c **** 	/* Delete lock for device management exclusive control */
 580:../kernel/tkernel/device.c **** 	DeleteMLock(&knl_DevMgrLock);
 1543                             		.loc 3 580 2
 1544 095a FB 12 00 00 00 00       		mov.L	#_knl_DevMgrLock, r1
 1545 0960 05 00 00 00             		bsr	_DeleteMLock
 581:../kernel/tkernel/device.c **** 
 582:../kernel/tkernel/device.c **** 	return ercd;
 1546                             		.loc 3 582 9
 1547 0964 EC A5                   		mov.L	[r10], r5
 583:../kernel/tkernel/device.c **** }
 1548                             		.loc 3 583 1
 1549 0966 EF 51                   		mov.L	r5, r1
 1550 0968 3F AA 02                		rtsd	#8, r10-r10
 1551                             	.LFE37:
 2040                             	.Letext0:
 2041                             		.file 4 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\include/tk/typedef.h"
 2042                             		.file 5 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\include/tk/syscall.h"
 2043                             		.file 6 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\include/tk/syslib.h"
 2044                             		.file 7 "D:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\kernel\\knlinc/kernel.h"
 2045                             		.file 8 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\kernel\\tkernel\\timer.h"
 2046                             		.file 9 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\kernel\\tkernel\\winfo.h"
 2047                             		.file 10 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\kernel\\tkernel\\mutex.h"
 2048                             		.file 11 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\kernel\\sysdepend\\cpu\\core\\rxv2\\sysd
 2049                             		.file 12 "d:\\tkernel_dev\\mtk3_bsp\\dev_bsp_b2_rskrx65n\\kernel\\sysdepend\\cpu\\core\\rxv2\\cpu_
 2050                             		.file 13 "../kernel/tkernel/sysmgr.h"
